using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Data;
using SEAL.Data;
using SEAL.Model;
using System.Collections;
using System.Web;
using ABS.Navitaire.BookingManager;
//using log4net;
using System.Threading;
using System.Xml.Serialization;

using System.Data.SqlClient;
using ABS.GBS.Log;

using StackExchange.Profiling;

namespace ABS.Logic.GroupBooking.Booking
{
    #region Model Containers
    public class BookingEnquiry
    {
        private string _enquiryID = String.Empty;
        private string _agentID = String.Empty;
        private DateTime _enquiryDate;

        private DateTime _lastEnquiryDate;
        private string _origins = String.Empty;
        private string _destination = String.Empty;
        private int _noOfAttempt;
        private Guid _rowguid = Guid.Empty;
        private DateTime _syncCreate;
        private DateTime _syncLastUpd;
        private string _createBy = String.Empty;


        #region Public Properties
        public string EnquiryID
        {
            get { return _enquiryID; }
            set { _enquiryID = value; }
        }
        public string AgentID
        {
            get { return _agentID; }
            set { _agentID = value; }
        }
        public DateTime EnquiryDate
        {
            get { return _enquiryDate; }
            set { _enquiryDate = value; }
        }
        public DateTime LastEnquiryDate
        {
            get { return _lastEnquiryDate; }
            set { _lastEnquiryDate = value; }
        }

        public string Origins
        {
            get { return _origins; }
            set { _origins = value; }
        }

        public string Destination
        {
            get { return _destination; }
            set { _destination = value; }
        }

        public int NoOfAttempt
        {
            get { return _noOfAttempt; }
            set { _noOfAttempt = value; }
        }

        public Guid rowguid
        {
            get { return _rowguid; }
            set { _rowguid = value; }
        }

        public DateTime SyncCreate
        {
            get { return _syncCreate; }
            set { _syncCreate = value; }
        }

        public DateTime SyncLastUpd
        {
            get { return _syncLastUpd; }
            set { _syncLastUpd = value; }
        }

        public string CreateBy
        {
            get { return _createBy; }
            set { _createBy = value; }
        }
        #endregion
    }

    //added by romy, for FailEmail
    public class FailEmailList
    {
        private string _TransID = String.Empty;
        private string _OrgName = String.Empty;
        private string _RecordLocator = String.Empty;
        private string _EmailAddress = String.Empty;
        private string _EmailFailedRemark = String.Empty;
        private DateTime _AttemptCountSenderDate;

        #region Public Properties
        public string TransID
        {
            get { return _TransID; }
            set { _TransID = value; }
        }

        public string OrgName
        {
            get { return _OrgName; }
            set { _OrgName = value; }
        }
        public string RecordLocator
        {
            get { return _RecordLocator; }
            set { _RecordLocator = value; }
        }
        public string EmailAddress
        {
            get { return _EmailAddress; }
            set { _EmailAddress = value; }
        }
        public string EmailFailedRemark
        {
            get { return _EmailFailedRemark; }
            set { _EmailFailedRemark = value; }
        }
        public DateTime AttemptCountSenderDate
        {
            get { return _AttemptCountSenderDate; }
            set { _AttemptCountSenderDate = value; }
        }
        #endregion
    }
    public class BookingSuspendList
    {
        private string _suspendID = String.Empty;
        private string _agentID = String.Empty;
        private string _origins = String.Empty;
        private string _destination = String.Empty;

        private DateTime _suspendDate;
        private string _lastEnquiryID = String.Empty;
        private int _suspendAttempt;
        private DateTime _suspendExpiry;
        private Guid _rowguid = Guid.Empty;
        private DateTime _syncCreate;
        private DateTime _syncLastUpd;
        private string _createBy = String.Empty;

        #region Public Properties
        public string SuspendID
        {
            get { return _suspendID; }
            set { _suspendID = value; }
        }

        public string AgentID
        {
            get { return _agentID; }
            set { _agentID = value; }
        }
        public string Origins
        {
            get { return _origins; }
            set { _origins = value; }
        }
        public string Destination
        {
            get { return _destination; }
            set { _destination = value; }
        }
        public DateTime SuspendDate
        {
            get { return _suspendDate; }
            set { _suspendDate = value; }
        }

        public string LastEnquiryID
        {
            get { return _lastEnquiryID; }
            set { _lastEnquiryID = value; }
        }

        public int SuspendAttempt
        {
            get { return _suspendAttempt; }
            set { _suspendAttempt = value; }
        }

        public DateTime SuspendExpiry
        {
            get { return _suspendExpiry; }
            set { _suspendExpiry = value; }
        }

        public Guid rowguid
        {
            get { return _rowguid; }
            set { _rowguid = value; }
        }

        public DateTime SyncCreate
        {
            get { return _syncCreate; }
            set { _syncCreate = value; }
        }

        public DateTime SyncLastUpd
        {
            get { return _syncLastUpd; }
            set { _syncLastUpd = value; }
        }

        public string CreateBy
        {
            get { return _createBy; }
            set { _createBy = value; }
        }
        #endregion
    }
    public class BookingTransactionMain
    {
        private string _transID = String.Empty;
        private byte _transType;
        private string _agentID = String.Empty;
        private string _agentCatgID = String.Empty;
        private string _status = String.Empty;
        private string _agentname = String.Empty;
        private string _origin = String.Empty;
        private string _destination = String.Empty;
        private string _departcity = String.Empty;
        private string _returncity = String.Empty;
        private DateTime _bookingDate;
        private DateTime _paymentDateEx1;
        private decimal _paymentAmtEx1;
        private DateTime _paymentDateEx2;
        private decimal _paymentAmtEx2;
        private DateTime _paymentDateEx3;
        private decimal _paymentAmtEx3;
        private DateTime _paymentDate;
        private DateTime _cancelDate;
        private DateTime _expiryDate;
        private DateTime _sTDDate;
        private string _currency = String.Empty;
        private string _currencyPaid = String.Empty;
        private decimal _collectedAmt;
        private decimal _dueAmt;
        private decimal _totalAmtAVG;
        private decimal _totalAmtGoing;
        private decimal _totalAmtReturn;
        private decimal _transSubTotal;
        private decimal _transTotalAmt;
        private decimal _transTotalFee;
        private decimal _transTotalTax;
        private decimal _transTotalPaxFee;
        private byte _reminderType;
        private decimal _transTotalOth;
        private decimal _transTotalSSR;
        private decimal _transTotalInfant;
        private decimal _transTotalDisc;
        private decimal _transTotalPromoDisc;
        private int _transTotalPAX;
        private decimal _transTotalSeat;
        private decimal _transTotalNameChange;
        private decimal _transTotalProcess;
        private string _dueday = String.Empty;
        private int _expiryday; //added by diana 20140526, store expiry day
        private string _transRemark1 = String.Empty;
        private string _transRemark2 = String.Empty;
        private byte _transStatus;
        private byte _needPaymentStatus;
        private byte _posted;
        private Guid _rowguid = Guid.Empty;
        private string _createBy = String.Empty;
        private DateTime _syncCreate;
        private DateTime _syncLastUpd;
        private string _lastSyncBy = String.Empty;
        private DateTime _curReminderDate;
        private DateTime _nextReminderDate;
        //added by ketee, 20121016
        private string _payscheme;
        private decimal _transTotalVAT;
        private DateTime _DepartureDate;
        private DateTime _ArrivalDate;
        //added by Agus
        private string _RecordLocator;
        private string _departReturn;
        private decimal _dueTotalAmt;
        //added by ketee, 20130625
        private decimal _exchangeRate;
        private string _FlightNumber;
        //added by Sienny
        private string _HowLongBookingDate;
        //20170411 - Sienny
        private string _organizationID;
        //added by ketee, 20170307
        private int _IsOverride;
        private string _promocode = String.Empty;
        private int _namechangemax;
        private decimal _namechangelimit1;
        private decimal _namechangelimit2;
        private decimal _ForfeitedAmount;
        private decimal _transtotalinsure;//added by romy for insure

        #region Public Properties
        public string TransID
        {
            get { return _transID; }
            set { _transID = value; }
        }
        public string Status
        {
            get { return _status; }
            set { _status = value; }
        }
        public string AgentName
        {
            get { return _agentname; }
            set { _agentname = value; }
        }
        public string Origin
        {
            get { return _origin; }
            set { _origin = value; }
        }
        public string Destination
        {
            get { return _destination; }
            set { _destination = value; }
        }
        public string DepartCity
        {
            get { return _departcity; }
            set { _departcity = value; }
        }
        public string ReturnCity
        {
            get { return _returncity; }
            set { _returncity = value; }
        }
        public string DueDay
        {
            get { return _dueday; }
            set { _dueday = value; }
        }
        public int ExpiryDay
        {
            get { return _expiryday; }
            set { _expiryday = value; }
        }
        public byte TransType
        {
            get { return _transType; }
            set { _transType = value; }
        }
        public DateTime CurReminderDate
        {
            get { return _curReminderDate; }
            set { _curReminderDate = value; }
        }

        public DateTime NextReminderDate
        {
            get { return _nextReminderDate; }
            set { _nextReminderDate = value; }
        }
        public byte ReminderType
        {
            get { return _reminderType; }
            set { _reminderType = value; }
        }

        public string AgentID
        {
            get { return _agentID; }
            set { _agentID = value; }
        }
        public string AgentCatgID
        {
            get { return _agentCatgID; }
            set { _agentCatgID = value; }
        }
        public DateTime BookingDate
        {
            get { return _bookingDate; }
            set { _bookingDate = value; }
        }
        public DateTime PaymentDateEx1
        {
            get { return _paymentDateEx1; }
            set { _paymentDateEx1 = value; }
        }

        public decimal PaymentAmtEx1
        {
            get { return _paymentAmtEx1; }
            set { _paymentAmtEx1 = value; }
        }

        public DateTime PaymentDateEx2
        {
            get { return _paymentDateEx2; }
            set { _paymentDateEx2 = value; }
        }

        public decimal PaymentAmtEx2
        {
            get { return _paymentAmtEx2; }
            set { _paymentAmtEx2 = value; }
        }

        public DateTime PaymentDateEx3
        {
            get { return _paymentDateEx3; }
            set { _paymentDateEx3 = value; }
        }

        public decimal PaymentAmtEx3
        {
            get { return _paymentAmtEx3; }
            set { _paymentAmtEx3 = value; }
        }

        public DateTime PaymentDate
        {
            get { return _paymentDate; }
            set { _paymentDate = value; }
        }

        public DateTime CancelDate
        {
            get { return _cancelDate; }
            set { _cancelDate = value; }
        }

        public DateTime ExpiryDate
        {
            get { return _expiryDate; }
            set { _expiryDate = value; }
        }

        public DateTime STDDate
        {
            get { return _sTDDate; }
            set { _sTDDate = value; }
        }

        //added by ketee
        public DateTime DepartureDate
        {
            get { return _DepartureDate; }
            set { _DepartureDate = value; }
        }

        public DateTime ArrivalDate
        {
            get { return _ArrivalDate; }
            set { _ArrivalDate = value; }
        }

        public string Currency
        {
            get { return _currency; }
            set { _currency = value; }
        }

        public string CurrencyPaid
        {
            get { return _currencyPaid; }
            set { _currencyPaid = value; }
        }

        public decimal CollectedAmt
        {
            get { return _collectedAmt; }
            set { _collectedAmt = value; }
        }

        public decimal DueAmt
        {
            get { return _dueAmt; }
            set { _dueAmt = value; }
        }

        public decimal TotalAmtAVG
        {
            get { return _totalAmtAVG; }
            set { _totalAmtAVG = value; }
        }

        public decimal TotalAmtGoing
        {
            get { return _totalAmtGoing; }
            set { _totalAmtGoing = value; }
        }

        public decimal TotalAmtReturn
        {
            get { return _totalAmtReturn; }
            set { _totalAmtReturn = value; }
        }

        public decimal TransSubTotal
        {
            get { return _transSubTotal; }
            set { _transSubTotal = value; }
        }

        public decimal TransTotalAmt
        {
            get { return _transTotalAmt; }
            set { _transTotalAmt = value; }
        }

        public decimal TransTotalFee
        {
            get { return _transTotalFee; }
            set { _transTotalFee = value; }
        }

        public decimal TransTotalVAT
        {
            get { return _transTotalVAT; }
            set { _transTotalVAT = value; }
        }

        public decimal TransTotalTax
        {
            get { return _transTotalTax; }
            set { _transTotalTax = value; }
        }

        public decimal TransTotalPaxFee
        {
            get { return _transTotalPaxFee; }
            set { _transTotalPaxFee = value; }
        }

        public decimal TransTotalOth
        {
            get { return _transTotalOth; }
            set { _transTotalOth = value; }
        }

        public decimal TransTotalSSR
        {
            get { return _transTotalSSR; }
            set { _transTotalSSR = value; }
        }

        public decimal TransTotalDisc
        {
            get { return _transTotalDisc; }
            set { _transTotalDisc = value; }
        }

        public decimal TransTotalPromoDisc
        {
            get { return _transTotalPromoDisc; }
            set { _transTotalPromoDisc = value; }
        }

        public int TransTotalPAX
        {
            get { return _transTotalPAX; }
            set { _transTotalPAX = value; }
        }

        public decimal TransTotalSeat
        {
            get { return _transTotalSeat; }
            set { _transTotalSeat = value; }
        }

        public decimal TransTotalNameChange
        {
            get { return _transTotalNameChange; }
            set { _transTotalNameChange = value; }
        }

        public decimal TransTotalProcess
        {
            get { return _transTotalProcess; }
            set { _transTotalProcess = value; }
        }

        public decimal TransTotalInfant
        {
            get { return _transTotalInfant; }
            set { _transTotalInfant = value; }
        }

        public string TransRemark1
        {
            get { return _transRemark1; }
            set { _transRemark1 = value; }
        }

        public string TransRemark2
        {
            get { return _transRemark2; }
            set { _transRemark2 = value; }
        }

        public byte TransStatus
        {
            get { return _transStatus; }
            set { _transStatus = value; }
        }

        public byte NeedPaymentStatus
        {
            get { return _needPaymentStatus; }
            set { _needPaymentStatus = value; }
        }

        public byte Posted
        {
            get { return _posted; }
            set { _posted = value; }
        }

        public Guid rowguid
        {
            get { return _rowguid; }
            set { _rowguid = value; }
        }

        public string CreateBy
        {
            get { return _createBy; }
            set { _createBy = value; }
        }

        public DateTime SyncCreate
        {
            get { return _syncCreate; }
            set { _syncCreate = value; }
        }

        public DateTime SyncLastUpd
        {
            get { return _syncLastUpd; }
            set { _syncLastUpd = value; }
        }

        public string LastSyncBy
        {
            get { return _lastSyncBy; }
            set { _lastSyncBy = value; }
        }

        //added by ketee,20121016
        public string PayScheme
        {
            get { return _payscheme; }
            set { _payscheme = value; }
        }
        //added by Agus
        public string RecordLocator
        {
            get { return _RecordLocator; }
            set { _RecordLocator = value; }
        }
        public string DepartReturn
        {
            get { return _departReturn; }
            set { _departReturn = value; }
        }
        public decimal DueTotalAmt
        {
            get { return _dueTotalAmt; }
            set { _dueTotalAmt = value; }
        }
        public string pnrTemp
        {
            get;
            set;
        }
        //added by ketee 20130625
        public decimal ExchangeRate
        {
            get { return _exchangeRate; }
            set { _exchangeRate = value; }
        }

        public string FlightNumber
        {
            get { return _FlightNumber; }
            set { _FlightNumber = value; }
        }

        //added by Sienny
        public string HowLongBookingDate
        {
            get { return _HowLongBookingDate; }
            set { _HowLongBookingDate = value; }
        }
        //20170411 - Sienny
        public string OrganizationID
        {
            get { return _organizationID; }
            set { _organizationID = value; }
        }
        public string PromoCode
        {
            get { return _promocode; }
            set { _promocode = value; }
        }

        public int NameChangeMax
        {
            get { return _namechangemax; }
            set { _namechangemax = value; }
        }

        public decimal NameChangeLimit1
        {
            get { return _namechangelimit1; }
            set { _namechangelimit1 = value; }
        }

        public decimal NameChangeLimit2
        {
            get { return _namechangelimit2; }
            set { _namechangelimit2 = value; }
        }
        public decimal ForfeitedAmount
        {
            get { return _ForfeitedAmount; }
            set { _ForfeitedAmount = value; }
        }
        public decimal TransTotalInsure//added by romy for insure
        {
            get { return _transtotalinsure; }
            set { _transtotalinsure = value; }
        }
        #endregion

        //added by ketee 20170307
        public int IsOverride
        {
            get { return _IsOverride; }
            set { _IsOverride = value; }
        }
    }

    public class BookingTransactionDetail
    {
        private string _recordLocator = String.Empty;
        private string _transID = String.Empty;
        private byte _seqNo;
        private string _journey = String.Empty;
        private string _carrierCode = String.Empty;
        private string _flightNo = String.Empty;
        private DateTime _depatureDate;
        private string _origin = String.Empty;
        private string _destination = String.Empty;
        private DateTime _arrivalDate;
        private string _fareClass = String.Empty;
        private decimal _farePerPax;
        private decimal _lineTotal;
        private decimal _lineTax;
        private decimal _linePaxFee;
        private decimal _lineFee;
        private decimal _lineCharge;
        private decimal _lineOth;
        private decimal _lineProcess;
        private decimal _lineSSR;
        private decimal _lineSeat;
        private decimal _lineNameChange;
        private decimal _lineInfant;
        private decimal _lineInsureFee;//added by romy for insure

        //added by ketee, 20170120
        private decimal _lineConnectingSeat;
        private decimal _lineConnectingSeat2;

        //added by diana 20140208, for discount and attempt to get booking response
        private decimal _lineDisc;
        private decimal _linePromoDisc;
        private int _attemptCount;

        private decimal _lineFlight;
        private string _currency = String.Empty;
        private int _paxAdult;
        private int _paxChild;
        private byte _transVoid;
        private Guid _rowguid = Guid.Empty;
        private string _createBy = String.Empty;
        private DateTime _syncCreate;
        private DateTime _syncLastUpd;
        private string _lastSyncBy = String.Empty;

        private string _transit = String.Empty;
        private DateTime _depatureDate2;
        private DateTime _arrivalDate2;
        private decimal _flightDura;
        private decimal _flightDura2;
        private decimal _collectedAmount;
        private string _signature;
        private string _commandType = "update";

        //added by ketee
        private DateTime _nextDueDate;
        private decimal _nextDueAmount;
        private DateTime _payDueDate1;
        private decimal _payDueAmount1;
        private DateTime _payDueDate2;
        private decimal _payDueAmount2;
        private DateTime _payDueDate3;
        private decimal _payDueAmount3;
        private int _remindAttempt;
        private string _remindLog;
        private string _sellkey;
        private string _overridedSellkey;
        private int _totalPax;
        private decimal _flightDuration;
        private int _flightType;
        private decimal _lineVAT;

        private int _cntRec;//added by diana 20140207, count recs for each PNR

        private int _isLatest;
        private byte _isInitVoid;

        private string _FareSellKey;//added by Tyas 20170217
        private string _OverridedFareSellKey;//added by Tyas 20170217
        private decimal _ForfeitedAmount;

        //added by romy for rounded amount
        private decimal _Rounded;

        #region Public Properties
        public decimal ForfeitedAmount
        {
            get { return _ForfeitedAmount; }
            set { _ForfeitedAmount = value; }
        }
        public string RecordLocator
        {
            get { return _recordLocator; }
            set { _recordLocator = value; }
        }
        public string TransID
        {
            get { return _transID; }
            set { _transID = value; }
        }
        public string Journey
        {
            get { return _journey; }
            set { _journey = value; }
        }
        public byte SeqNo
        {
            get { return _seqNo; }
            set { _seqNo = value; }
        }
        public string CarrierCode
        {
            get { return _carrierCode; }
            set { _carrierCode = value; }
        }

        public string FlightNo
        {
            get { return _flightNo; }
            set { _flightNo = value; }
        }

        public DateTime DepatureDate
        {
            get { return _depatureDate; }
            set { _depatureDate = value; }
        }

        public decimal LineFlight
        {
            get { return _lineFlight; }
            set { _lineFlight = value; }
        }

        public DateTime DepatureDate2
        {
            get { return _depatureDate2; }
            set { _depatureDate2 = value; }
        }

        public decimal FlightDura
        {
            get { return _flightDura; }
            set { _flightDura = value; }
        }

        public decimal FlightDura2
        {
            get { return _flightDura2; }
            set { _flightDura2 = value; }
        }

        public string Origin
        {
            get { return _origin; }
            set { _origin = value; }
        }

        public string Destination
        {
            get { return _destination; }
            set { _destination = value; }
        }

        public DateTime ArrivalDate
        {
            get { return _arrivalDate; }
            set { _arrivalDate = value; }
        }

        public DateTime ArrivalDate2
        {
            get { return _arrivalDate2; }
            set { _arrivalDate2 = value; }
        }

        public string FareClass
        {
            get { return _fareClass; }
            set { _fareClass = value; }
        }

        public decimal FarePerPax
        {
            get { return _farePerPax; }
            set { _farePerPax = value; }
        }

        public decimal LineTotal
        {
            get { return _lineTotal; }
            set { _lineTotal = value; }
        }

        public decimal LineTax
        {
            get { return _lineTax; }
            set { _lineTax = value; }
        }

        public decimal LinePaxFee
        {
            get { return _linePaxFee; }
            set { _linePaxFee = value; }
        }

        public decimal LineFee
        {
            get { return _lineFee; }
            set { _lineFee = value; }
        }

        public decimal LineCharge
        {
            get { return _lineCharge; }
            set { _lineCharge = value; }
        }

        public decimal LineVAT
        {
            get { return _lineVAT; }
            set { _lineVAT = value; }
        }

        public decimal LineOth
        {
            get { return _lineOth; }
            set { _lineOth = value; }
        }

        public decimal LineProcess
        {
            get { return _lineProcess; }
            set { _lineProcess = value; }
        }

        public decimal LineSSR
        {
            get { return _lineSSR; }
            set { _lineSSR = value; }
        }

        public decimal LineSeat
        {
            get { return _lineSeat; }
            set { _lineSeat = value; }
        }

        public decimal LineNameChange
        {
            get { return _lineNameChange; }
            set { _lineNameChange = value; }
        }

        public decimal LineInfant
        {
            get { return _lineInfant; }
            set { _lineInfant = value; }
        }

        public decimal LineInsureFee//added by romy for insure
        {
            get { return _lineInsureFee; }
            set { _lineInsureFee = value; }
        }

        //added by ketee, 201701120
        public decimal LineConnectingSeat
        {
            get { return _lineConnectingSeat; }
            set { _lineConnectingSeat = value; }
        }
        public decimal LineConnectingSeat2
        {
            get { return _lineConnectingSeat2; }
            set { _lineConnectingSeat2 = value; }
        }
        //end

        public decimal LineDisc
        {
            get { return _lineDisc; }
            set { _lineDisc = value; }
        }

        public decimal LinePromoDisc
        {
            get { return _linePromoDisc; }
            set { _linePromoDisc = value; }
        }

        public int AttemptCount
        {
            get { return _attemptCount; }
            set { _attemptCount = value; }
        }

        public string Currency
        {
            get { return _currency; }
            set { _currency = value; }
        }

        public int PaxAdult
        {
            get { return _paxAdult; }
            set { _paxAdult = value; }
        }

        public int PaxChild
        {
            get { return _paxChild; }
            set { _paxChild = value; }
        }

        public byte TransVoid
        {
            get { return _transVoid; }
            set { _transVoid = value; }
        }

        public Guid rowguid
        {
            get { return _rowguid; }
            set { _rowguid = value; }
        }

        public string CreateBy
        {
            get { return _createBy; }
            set { _createBy = value; }
        }

        public DateTime SyncCreate
        {
            get { return _syncCreate; }
            set { _syncCreate = value; }
        }

        public DateTime SyncLastUpd
        {
            get { return _syncLastUpd; }
            set { _syncLastUpd = value; }
        }

        public string LastSyncBy
        {
            get { return _lastSyncBy; }
            set { _lastSyncBy = value; }
        }

        public string Transit
        {
            get { return _transit; }
            set { _transit = value; }
        }

        public decimal CollectedAmount
        {
            get { return _collectedAmount; }
            set { _collectedAmount = value; }
        }

        public string Signature
        {
            get { return _signature; }
            set { _signature = value; }
        }

        public string CommandType
        {
            get { return _commandType; }
            set { _commandType = value; }
        }

        //added by ketee
        public DateTime NextDueDate
        {
            get { return _nextDueDate; }
            set { _nextDueDate = value; }
        }

        public decimal NextDueAmount
        {
            get { return _nextDueAmount; }
            set { _nextDueAmount = value; }
        }

        public DateTime PayDueDate1
        {
            get { return _payDueDate1; }
            set { _payDueDate1 = value; }
        }

        public decimal PayDueAmount1
        {
            get { return _payDueAmount1; }
            set { _payDueAmount1 = value; }
        }

        public DateTime PayDueDate2
        {
            get { return _payDueDate2; }
            set { _payDueDate2 = value; }
        }

        public decimal PayDueAmount2
        {
            get { return _payDueAmount2; }
            set { _payDueAmount2 = value; }
        }

        public DateTime PayDueDate3
        {
            get { return _payDueDate3; }
            set { _payDueDate3 = value; }
        }

        public decimal PayDueAmount3
        {
            get { return _payDueAmount3; }
            set { _payDueAmount3 = value; }
        }

        public int RemindAttempt
        {
            get { return _remindAttempt; }
            set { _remindAttempt = value; }
        }

        public string RemindLog
        {
            get { return _remindLog; }
            set { _remindLog = value; }
        }

        public string SellKey
        {
            get { return _sellkey; }
            set { _sellkey = value; }
        }

        public string OverridedSellKey
        {
            get { return _overridedSellkey; }
            set { _overridedSellkey = value; }
        }

        //Added by Tyas
        public string FareSellKey
        {
            get { return _FareSellKey; }
            set { _FareSellKey = value; }
        }

        public string OverridedFareSellKey
        {
            get { return _OverridedFareSellKey; }
            set { _OverridedFareSellKey = value; }
        }

        public int TotalPax
        {
            get { return _totalPax; }
            set { _totalPax = _paxAdult + _paxChild; }
        }

        public decimal FlightDuration
        {
            get { return _flightDuration; }
            set { _flightDuration = value; }
        }

        public int FlightType
        {
            get { return _flightType; }
            set { _flightType = value; }
        }


        public string pnrTemp
        {
            get;
            set;
        }

        public int CntRec
        {
            get { return _cntRec; }
            set { _cntRec = value; }
        }

        public int IsLatest
        {
            get { return _isLatest; }
            set { _isLatest = value; }
        }
        public byte IsInitVoid
        {
            get { return _isInitVoid; }
            set { _isInitVoid = value; }
        }

        //added by romy for rounded amount
        public decimal Rounded
        {
            get { return _Rounded; }
            set { _Rounded = value; }
        }
        #endregion
    }

    public class ListTransaction
    {
        private string _transID = String.Empty;
        private byte _transStatus;
        private string _agentID = String.Empty;
        private string _agentUserName = String.Empty;
        private DateTime _bookingDate;
        private string _sellKey = String.Empty;

        #region Public Properties

        public string TransID
        {
            get { return _transID; }
            set { _transID = value; }
        }
        public byte TransStatus
        {
            get { return _transStatus; }
            set { _transStatus = value; }
        }
        public string AgentID
        {
            get { return _agentID; }
            set { _agentID = value; }
        }
        public string AgentUserName
        {
            get { return _agentUserName; }
            set { _agentUserName = value; }
        }
        public DateTime BookingDate
        {
            get { return _bookingDate; }
            set { _bookingDate = value; }
        }
        public string SellKey
        {
            get { return _sellKey; }
            set { _sellKey = value; }
        }
        #endregion
    }

    public class BookingTaxFeesControl
    {
        private int _taxFeesCode;
        private string _taxFeesGroup = String.Empty;

        private string _taxFeesDesc = String.Empty;
        private decimal _taxFeesRate;
        private byte _active;
        private byte _flag;
        private Guid _rowguid = Guid.Empty;
        private string _createBy = String.Empty;
        private DateTime _syncCreate;
        private DateTime _syncLastUpd;
        private string _lastSyncBy = String.Empty;

        #region Public Properties
        public int TaxFeesCode
        {
            get { return _taxFeesCode; }
            set { _taxFeesCode = value; }
        }
        public string TaxFeesGroup
        {
            get { return _taxFeesGroup; }
            set { _taxFeesGroup = value; }
        }
        public string TaxFeesDesc
        {
            get { return _taxFeesDesc; }
            set { _taxFeesDesc = value; }
        }

        public decimal TaxFeesRate
        {
            get { return _taxFeesRate; }
            set { _taxFeesRate = value; }
        }

        public byte Active
        {
            get { return _active; }
            set { _active = value; }
        }

        public byte Flag
        {
            get { return _flag; }
            set { _flag = value; }
        }

        public Guid rowguid
        {
            get { return _rowguid; }
            set { _rowguid = value; }
        }

        public string CreateBy
        {
            get { return _createBy; }
            set { _createBy = value; }
        }

        public DateTime SyncCreate
        {
            get { return _syncCreate; }
            set { _syncCreate = value; }
        }

        public DateTime SyncLastUpd
        {
            get { return _syncLastUpd; }
            set { _syncLastUpd = value; }
        }

        public string LastSyncBy
        {
            get { return _lastSyncBy; }
            set { _lastSyncBy = value; }
        }
        #endregion

    }

    #region "Bk_transssr Container"
    public class Bk_transssr_FieldName
    {
        public System.String RecordLocator = "RecordLocator";
        public System.String TransID = "TransID";
        public System.String CarrierCode = "CarrierCode";
        public System.String FlightNo = "FlightNo";
        public System.String Origin = "Origin";
        public System.String Destination = "Destination";
        public System.String PassengerID = "PassengerID";
        public System.String SSRCode = "SSRCode";
        public System.String SeqNo = "SeqNo";
        public System.String SubSeqNo = "SubSeqNo";
        public System.String SSRQty = "SSRQty";
        public System.String SSRRate = "SSRRate";
        public System.String TotAmt1 = "TotAmt1";
        public System.String TotAmt2 = "TotAmt2";
        public System.String TotAmt3 = "TotAmt3";
        public System.String IsOverride = "IsOverride";
        public System.String TransVoid = "TransVoid";
        public System.String AttemptCount = "AttemptCount";
        public System.String rowguid = "rowguid";
        public System.String CreateBy = "CreateBy";
        public System.String SyncCreate = "SyncCreate";
        public System.String SyncLastUpd = "SyncLastUpd";
        public System.String LastSyncBy = "LastSyncBy";
    }

    public class Bk_transssr
    {
        protected System.String _RecordLocator;
        protected System.String _TransID;
        protected System.String _CarrierCode;
        protected System.String _FlightNo;
        protected System.String _Origin;
        protected System.String _Destination;
        protected System.String _PassengerID;
        protected System.String _SSRCode;
        private System.Int32 _SeqNo;
        private System.Int32 _SubSeqNo;
        private System.Decimal _SSRQty;
        private System.Decimal _SSRRate;
        private System.Decimal _TotAmt1;
        private System.Decimal _TotAmt2;
        private System.Decimal _TotAmt3;
        private System.Byte _IsOverride;
        private System.Byte _TransVoid;
        private System.Byte _AttemptCount;
        private System.Guid _rowguid;
        private System.String _CreateBy;
        private System.DateTime _SyncCreate;
        private System.DateTime _SyncLastUpd;

        private System.String _LastSyncBy;
        /// <summary>
        /// Mandatory
        /// </summary>
        public System.String RecordLocator
        {
            get { return _RecordLocator; }
            set { _RecordLocator = value; }
        }

        /// <summary>
        /// Mandatory
        /// </summary>
        public System.String TransID
        {
            get { return _TransID; }
            set { _TransID = value; }
        }

        /// <summary>
        /// Mandatory
        /// </summary>
        public System.String CarrierCode
        {
            get { return _CarrierCode; }
            set { _CarrierCode = value; }
        }

        /// <summary>
        /// Mandatory
        /// </summary>
        public System.String FlightNo
        {
            get { return _FlightNo; }
            set { _FlightNo = value; }
        }

        /// <summary>
        /// Mandatory
        /// </summary>
        public System.String Origin
        {
            get { return _Origin; }
            set { _Origin = value; }
        }

        /// <summary>
        /// Mandatory
        /// </summary>
        public System.String Destination
        {
            get { return _Destination; }
            set { _Destination = value; }
        }

        /// <summary>
        /// Mandatory
        /// </summary>
        public System.String PassengerID
        {
            get { return _PassengerID; }
            set { _PassengerID = value; }
        }

        /// <summary>
        /// Mandatory
        /// </summary>
        public System.String SSRCode
        {
            get { return _SSRCode; }
            set { _SSRCode = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Int32 SeqNo
        {
            get { return _SeqNo; }
            set { _SeqNo = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Int32 SubSeqNo
        {
            get { return _SubSeqNo; }
            set { _SubSeqNo = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal SSRQty
        {
            get { return _SSRQty; }
            set { _SSRQty = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal SSRRate
        {
            get { return _SSRRate; }
            set { _SSRRate = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal TotAmt1
        {
            get { return _TotAmt1; }
            set { _TotAmt1 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal TotAmt2
        {
            get { return _TotAmt2; }
            set { _TotAmt2 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal TotAmt3
        {
            get { return _TotAmt3; }
            set { _TotAmt3 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Byte IsOverride
        {
            get { return _IsOverride; }
            set { _IsOverride = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Byte TransVoid
        {
            get { return _TransVoid; }
            set { _TransVoid = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Byte AttemptCount
        {
            get { return _AttemptCount; }
            set { _AttemptCount = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Guid rowguid
        {
            get { return _rowguid; }
            set { _rowguid = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String CreateBy
        {
            get { return _CreateBy; }
            set { _CreateBy = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.DateTime SyncCreate
        {
            get { return _SyncCreate; }
            set { _SyncCreate = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.DateTime SyncLastUpd
        {
            get { return _SyncLastUpd; }
            set { _SyncLastUpd = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String LastSyncBy
        {
            get { return _LastSyncBy; }
            set { _LastSyncBy = value; }
        }

    }
    #endregion

    #region "Bk_transaddon Container"
    public class Bk_transaddon_FieldName
    {
        public System.String RecordLocator = "RecordLocator";
        public System.String TransID = "TransID";
        public System.String PassengerID = "PassengerID";
        public System.String Segment = "Segment";
        public System.String SeqNo = "SeqNo";
        public System.String TripMode = "TripMode";
        public System.String CarrierCode = "CarrierCode";
        public System.String FlightNo = "FlightNo";
        public System.String Origin = "Origin";
        public System.String Destination = "Destination";
        public System.String BaggageCode = "BaggageCode";
        public System.String BaggageAmt = "BaggageAmt";
        public System.String MealTotalAmt = "MealTotalAmt";
        public System.String MealCount = "MealCount";
        public System.String MealCode1 = "MealCode1";
        public System.String MealQty1 = "MealQty1";
        public System.String MealRate1 = "MealRate1";
        public System.String MealSubTotal1 = "MealSubTotal1";
        public System.String MealCode2 = "MealCode2";
        public System.String MealQty2 = "MealQty2";
        public System.String MealRate2 = "MealRate2";
        public System.String MealSubTotal2 = "MealSubTotal2";
        public System.String MealCode3 = "MealCode3";
        public System.String MealQty3 = "MealQty3";
        public System.String MealRate3 = "MealRate3";
        public System.String MealSubTotal3 = "MealSubTotal3";
        public System.String MealCode4 = "MealCode4";
        public System.String MealQty4 = "MealQty4";
        public System.String MealRate4 = "MealRate4";
        public System.String MealSubTotal4 = "MealSubTotal4";
        public System.String DrinkTotalAmt = "DrinkTotalAmt";
        public System.String DrinkCount = "DrinkCount";
        public System.String DrinkCode1 = "DrinkCode1";
        public System.String DrinkQty1 = "DrinkQty1";
        public System.String DrinkRate1 = "DrinkRate1";
        public System.String DrinkSubTotal1 = "DrinkSubTotal1";
        public System.String DrinkCode2 = "DrinkCode2";
        public System.String DrinkQty2 = "DrinkQty2";
        public System.String DrinkRate2 = "DrinkRate2";
        public System.String DrinkSubTotal2 = "DrinkSubTotal2";
        public System.String DrinkCode3 = "DrinkCode3";
        public System.String DrinkQty3 = "DrinkQty3";
        public System.String DrinkRate3 = "DrinkRate3";
        public System.String DrinkSubTotal3 = "DrinkSubTotal3";
        public System.String DrinkCode4 = "DrinkCode4";
        public System.String DrinkQty4 = "DrinkQty4";
        public System.String DrinkRate4 = "DrinkRate4";
        public System.String DrinkSubTotal4 = "DrinkSubTotal4";
        public System.String SportCode = "SportCode";
        public System.String SportAmt = "SportAmt";
        public System.String InsureCode = "InsureCode";//added by romy, 20170811, insurance
        public System.String InsureAmt = "InsureAmt";//added by romy, 20170811, insurance
        public System.String KitCode = "KitCode";
        public System.String KitAmt = "KitAmt";
        public System.String DutyCode = "DutyCode";
        public System.String DutyAmt = "DutyAmt";
        public System.String InfantCode = "InfantCode";
        public System.String InfantAmt = "InfantAmt";
        public System.String TotalAmount = "TotalAmount";
        public System.String IsOverride = "IsOverride";
        public System.String TransVoid = "TransVoid";
        public System.String AttemptCount = "AttemptCount";
        public System.String rowguid = "rowguid";
        public System.String CreateBy = "CreateBy";
        public System.String SyncCreate = "SyncCreate";
        public System.String SyncLastUpd = "SyncLastUpd";
        public System.String LastSyncBy = "LastSyncBy";
    }

    public class Bk_transaddon
    {
        protected System.String _RecordLocator;
        protected System.String _TransID;
        protected System.String _PassengerID;
        protected System.Int32 _Segment;
        protected System.Int32 _SeqNo;
        private System.Byte _TripMode;
        private System.String _CarrierCode;
        private System.String _FlightNo;
        private System.String _Origin;
        private System.String _Destination;
        private System.String _BaggageCode;
        private System.Decimal _BaggageAmt;
        private System.Decimal _MealTotalAmt;
        private System.Int32 _MealCount;
        private System.String _MealCode1;
        private System.Decimal _MealQty1;
        private System.Decimal _MealRate1;
        private System.Decimal _MealSubTotal1;
        private System.String _MealCode2;
        private System.Decimal _MealQty2;
        private System.Decimal _MealRate2;
        private System.Decimal _MealSubTotal2;
        private System.String _MealCode3;
        private System.Decimal _MealQty3;
        private System.Decimal _MealRate3;
        private System.Decimal _MealSubTotal3;
        private System.String _MealCode4;
        private System.Decimal _MealQty4;
        private System.Decimal _MealRate4;
        private System.Decimal _MealSubTotal4;
        private System.Decimal _DrinkTotalAmt;
        private System.Int32 _DrinkCount;
        private System.String _DrinkCode1;
        private System.Decimal _DrinkQty1;
        private System.Decimal _DrinkRate1;
        private System.Decimal _DrinkSubTotal1;
        private System.String _DrinkCode2;
        private System.Decimal _DrinkQty2;
        private System.Decimal _DrinkRate2;
        private System.Decimal _DrinkSubTotal2;
        private System.String _DrinkCode3;
        private System.Decimal _DrinkQty3;
        private System.Decimal _DrinkRate3;
        private System.Decimal _DrinkSubTotal3;
        private System.String _DrinkCode4;
        private System.Decimal _DrinkQty4;
        private System.Decimal _DrinkRate4;
        private System.Decimal _DrinkSubTotal4;
        private System.String _SportCode;
        private System.Decimal _SportAmt;
        private System.String _InsureCode;//added by romy, 20170811, insurance
        private System.Decimal _InsureAmt;//added by romy, 20170811, insurance
        private System.String _KitCode;
        private System.Decimal _KitAmt;
        private System.String _DutyCode;
        private System.Decimal _DutyAmt;
        private System.String _InfantCode;
        private System.Decimal _InfantAmt;
        private System.Decimal _TotalAmount;
        private System.Byte _IsOverride;
        private System.Byte _TransVoid;
        private System.Byte _AttemptCount;
        private System.Guid _rowguid;
        private System.String _CreateBy;
        private System.DateTime _SyncCreate;
        private System.Int32 _IndicatorBaggage;
        private System.Int32 _IndicatorMeal;
        private System.Int32 _IndicatorDrink;
        private System.Int32 _IndicatorSport;
        private System.Int32 _IndicatorInsure;//added by romy, 20170811, insurance
        private System.Int32 _IndicatorKit;
        private System.Int32 _IndicatorInfant;
        private System.Int32 _IndicatorComfort;
        private System.DateTime _SyncLastUpd;
        private System.String _LastSyncBy;
        /// <summary>
        /// Mandatory
        /// </summary>
        public System.String RecordLocator
        {
            get { return _RecordLocator; }
            set { _RecordLocator = value; }
        }

        /// <summary>
        /// Mandatory
        /// </summary>
        public System.String TransID
        {
            get { return _TransID; }
            set { _TransID = value; }
        }

        /// <summary>
        /// Mandatory
        /// </summary>
        public System.String PassengerID
        {
            get { return _PassengerID; }
            set { _PassengerID = value; }
        }

        /// <summary>
        /// Mandatory
        /// </summary>
        public System.Int32 Segment
        {
            get { return _Segment; }
            set { _Segment = value; }
        }

        /// <summary>
        /// Mandatory
        /// </summary>
        public System.Int32 SeqNo
        {
            get { return _SeqNo; }
            set { _SeqNo = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Byte TripMode
        {
            get { return _TripMode; }
            set { _TripMode = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String CarrierCode
        {
            get { return _CarrierCode; }
            set { _CarrierCode = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String FlightNo
        {
            get { return _FlightNo; }
            set { _FlightNo = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String Origin
        {
            get { return _Origin; }
            set { _Origin = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String Destination
        {
            get { return _Destination; }
            set { _Destination = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String BaggageCode
        {
            get { return _BaggageCode; }
            set { _BaggageCode = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal BaggageAmt
        {
            get { return _BaggageAmt; }
            set { _BaggageAmt = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal MealTotalAmt
        {
            get { return _MealTotalAmt; }
            set { _MealTotalAmt = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Int32 MealCount
        {
            get { return _MealCount; }
            set { _MealCount = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String MealCode1
        {
            get { return _MealCode1; }
            set { _MealCode1 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal MealQty1
        {
            get { return _MealQty1; }
            set { _MealQty1 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal MealRate1
        {
            get { return _MealRate1; }
            set { _MealRate1 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal MealSubTotal1
        {
            get { return _MealSubTotal1; }
            set { _MealSubTotal1 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String MealCode2
        {
            get { return _MealCode2; }
            set { _MealCode2 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal MealQty2
        {
            get { return _MealQty2; }
            set { _MealQty2 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal MealRate2
        {
            get { return _MealRate2; }
            set { _MealRate2 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal MealSubTotal2
        {
            get { return _MealSubTotal2; }
            set { _MealSubTotal2 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String MealCode3
        {
            get { return _MealCode3; }
            set { _MealCode3 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal MealQty3
        {
            get { return _MealQty3; }
            set { _MealQty3 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal MealRate3
        {
            get { return _MealRate3; }
            set { _MealRate3 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal MealSubTotal3
        {
            get { return _MealSubTotal3; }
            set { _MealSubTotal3 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String MealCode4
        {
            get { return _MealCode4; }
            set { _MealCode4 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal MealQty4
        {
            get { return _MealQty4; }
            set { _MealQty4 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal MealRate4
        {
            get { return _MealRate4; }
            set { _MealRate4 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal MealSubTotal4
        {
            get { return _MealSubTotal4; }
            set { _MealSubTotal4 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal DrinkTotalAmt
        {
            get { return _DrinkTotalAmt; }
            set { _DrinkTotalAmt = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Int32 DrinkCount
        {
            get { return _DrinkCount; }
            set { _DrinkCount = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String DrinkCode1
        {
            get { return _DrinkCode1; }
            set { _DrinkCode1 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal DrinkQty1
        {
            get { return _DrinkQty1; }
            set { _DrinkQty1 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal DrinkRate1
        {
            get { return _DrinkRate1; }
            set { _DrinkRate1 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal DrinkSubTotal1
        {
            get { return _DrinkSubTotal1; }
            set { _DrinkSubTotal1 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String DrinkCode2
        {
            get { return _DrinkCode2; }
            set { _DrinkCode2 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal DrinkQty2
        {
            get { return _DrinkQty2; }
            set { _DrinkQty2 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal DrinkRate2
        {
            get { return _DrinkRate2; }
            set { _DrinkRate2 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal DrinkSubTotal2
        {
            get { return _DrinkSubTotal2; }
            set { _DrinkSubTotal2 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String DrinkCode3
        {
            get { return _DrinkCode3; }
            set { _DrinkCode3 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal DrinkQty3
        {
            get { return _DrinkQty3; }
            set { _DrinkQty3 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal DrinkRate3
        {
            get { return _DrinkRate3; }
            set { _DrinkRate3 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal DrinkSubTotal3
        {
            get { return _DrinkSubTotal3; }
            set { _DrinkSubTotal3 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String DrinkCode4
        {
            get { return _DrinkCode4; }
            set { _DrinkCode4 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal DrinkQty4
        {
            get { return _DrinkQty4; }
            set { _DrinkQty4 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal DrinkRate4
        {
            get { return _DrinkRate4; }
            set { _DrinkRate4 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal DrinkSubTotal4
        {
            get { return _DrinkSubTotal4; }
            set { _DrinkSubTotal4 = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String SportCode
        {
            get { return _SportCode; }
            set { _SportCode = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal SportAmt
        {
            get { return _SportAmt; }
            set { _SportAmt = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String InsureCode//added by romy, 20170811, insurance
        {
            get { return _InsureCode; }
            set { _InsureCode = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal InsureAmt//added by romy, 20170811, insurance
        {
            get { return _InsureAmt; }
            set { _InsureAmt = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String KitCode
        {
            get { return _KitCode; }
            set { _KitCode = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal KitAmt
        {
            get { return _KitAmt; }
            set { _KitAmt = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String DutyCode
        {
            get { return _DutyCode; }
            set { _DutyCode = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal DutyAmt
        {
            get { return _DutyAmt; }
            set { _DutyAmt = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String InfantCode
        {
            get { return _InfantCode; }
            set { _InfantCode = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal InfantAmt
        {
            get { return _InfantAmt; }
            set { _InfantAmt = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Decimal TotalAmount
        {
            get { return _TotalAmount; }
            set { _TotalAmount = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Byte IsOverride
        {
            get { return _IsOverride; }
            set { _IsOverride = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Byte TransVoid
        {
            get { return _TransVoid; }
            set { _TransVoid = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Byte AttemptCount
        {
            get { return _AttemptCount; }
            set { _AttemptCount = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.Guid rowguid
        {
            get { return _rowguid; }
            set { _rowguid = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String CreateBy
        {
            get { return _CreateBy; }
            set { _CreateBy = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.DateTime SyncCreate
        {
            get { return _SyncCreate; }
            set { _SyncCreate = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.DateTime SyncLastUpd
        {
            get { return _SyncLastUpd; }
            set { _SyncLastUpd = value; }
        }

        /// <summary>
        /// Mandatory, Not Allow Null
        /// </summary>
        public System.String LastSyncBy
        {
            get { return _LastSyncBy; }
            set { _LastSyncBy = value; }
        }

        /// <summary>
        /// Mandatory
        /// </summary>
        public System.Int32 IndicatorBaggage
        {
            get { return _IndicatorBaggage; }
            set { _IndicatorBaggage = value; }
        }

        /// <summary>
        /// Mandatory
        /// </summary>
        public System.Int32 IndicatorMeal
        {
            get { return _IndicatorMeal; }
            set { _IndicatorMeal = value; }
        }

        /// <summary>
        /// Mandatory
        /// </summary>
        public System.Int32 IndicatorDrink
        {
            get { return _IndicatorDrink; }
            set { _IndicatorDrink = value; }
        }

        /// <summary>
        /// Mandatory
        /// </summary>
        public System.Int32 IndicatorSport
        {
            get { return _IndicatorSport; }
            set { _IndicatorSport = value; }
        }

        public System.Int32 IndicatorInsure//added by romy, 20170811, insurance
        {
            get { return _IndicatorInsure; }
            set { _IndicatorInsure = value; }
        }

        public System.Int32 IndicatorKit
        {
            get { return _IndicatorKit; }
            set { _IndicatorKit = value; }
        }

        public System.Int32 IndicatorInfant
        {
            get { return _IndicatorInfant; }
            set { _IndicatorInfant = value; }
        }
    }
    #endregion

    public class BookingTender
    {
        private string _tenderID = String.Empty;

        private byte _tenderType;
        private string _tenderDesc = String.Empty;
        private byte _active;
        private byte _flag;
        private Guid _rowguid = Guid.Empty;
        private DateTime _effDate;
        private DateTime _endDate;
        private DateTime _syncCreate;
        private DateTime _syncLastUpd;
        private string _lastSyncBy = String.Empty;

        #region Public Properties
        public string TenderID
        {
            get { return _tenderID; }
            set { _tenderID = value; }
        }
        public byte TenderType
        {
            get { return _tenderType; }
            set { _tenderType = value; }
        }

        public string TenderDesc
        {
            get { return _tenderDesc; }
            set { _tenderDesc = value; }
        }

        public byte Active
        {
            get { return _active; }
            set { _active = value; }
        }

        public byte Flag
        {
            get { return _flag; }
            set { _flag = value; }
        }

        public Guid rowguid
        {
            get { return _rowguid; }
            set { _rowguid = value; }
        }

        public DateTime EffDate
        {
            get { return _effDate; }
            set { _effDate = value; }
        }

        public DateTime EndDate
        {
            get { return _endDate; }
            set { _endDate = value; }
        }

        public DateTime SyncCreate
        {
            get { return _syncCreate; }
            set { _syncCreate = value; }
        }

        public DateTime SyncLastUpd
        {
            get { return _syncLastUpd; }
            set { _syncLastUpd = value; }
        }

        public string LastSyncBy
        {
            get { return _lastSyncBy; }
            set { _lastSyncBy = value; }
        }
        #endregion
    }
    public class BookingTransactionFees
    {
        private string _transID = String.Empty;
        private string _recordLocator = String.Empty;
        private byte _seqNo;
        private string _feeCode = String.Empty;
        private string _feeDesc = String.Empty;
        private string _paxtype;
        private string _origin = String.Empty;
        private string _transit = String.Empty;
        private string _destination = String.Empty;
        private string _feeType = String.Empty;
        private double _feeQty;
        private decimal _feeRate;
        private decimal _feeAmt;
        private byte _transvoid;
        private Guid _rowguid = Guid.Empty;
        private string _createBy = String.Empty;
        private DateTime _syncCreate;
        private DateTime _syncLastUpd;
        private string _lastSyncBy = String.Empty;

        #region Public Properties
        public string TransID
        {
            get { return _transID; }
            set { _transID = value; }
        }
        public string RecordLocator
        {
            get { return _recordLocator; }
            set { _recordLocator = value; }
        }
        public byte SeqNo
        {
            get { return _seqNo; }
            set { _seqNo = value; }
        }
        public string FeeCode
        {
            get { return _feeCode; }
            set { _feeCode = value; }
        }
        public string FeeDesc
        {
            get { return _feeDesc; }
            set { _feeDesc = value; }
        }
        public string PaxType
        {
            get { return _paxtype; }
            set { _paxtype = value; }
        }
        public string Origin
        {
            get { return _origin; }
            set { _origin = value; }
        }
        public string Transit
        {
            get { return _transit; }
            set { _transit = value; }
        }
        public string Destination
        {
            get { return _destination; }
            set { _destination = value; }
        }
        public string FeeType
        {
            get { return _feeType; }
            set { _feeType = value; }
        }
        public double FeeQty
        {
            get { return _feeQty; }
            set { _feeQty = value; }
        }
        public decimal FeeRate
        {
            get { return _feeRate; }
            set { _feeRate = value; }
        }
        public decimal FeeAmt
        {
            get { return _feeAmt; }
            set { _feeAmt = value; }
        }
        public byte Transvoid
        {
            get { return _transvoid; }
            set { _transvoid = value; }
        }
        public Guid rowguid
        {
            get { return _rowguid; }
            set { _rowguid = value; }
        }
        public string CreateBy
        {
            get { return _createBy; }
            set { _createBy = value; }
        }
        public DateTime SyncCreate
        {
            get { return _syncCreate; }
            set { _syncCreate = value; }
        }
        public DateTime SyncLastUpd
        {
            get { return _syncLastUpd; }
            set { _syncLastUpd = value; }
        }
        public string LastSyncBy
        {
            get { return _lastSyncBy; }
            set { _lastSyncBy = value; }
        }
        #endregion
    }

    // added by diana 20130923
    public class BookingJourney
    {
        private string _transID;
        private int _seqNo;
        private string _carrierCode = String.Empty;
        private string _flightNo = String.Empty;
        private string _origin = String.Empty;
        private string _transit = String.Empty;
        private string _destination = String.Empty;
        private DateTime _departureDate;
        private DateTime _arrivalDate;
        private decimal _flightDura;
        private DateTime _departureDate2;
        private DateTime _arrivalDate2;
        private decimal _flightDura2;
        private DateTime _syncCreate;
        private string _createBy;
        private string _recordLocator;
        private string _commandType;

        #region Public Properties

        public string TransID
        {
            get { return _transID; }
            set { _transID = value; }
        }
        public int SeqNo
        {
            get { return _seqNo; }
            set { _seqNo = value; }
        }
        public String CarrierCode
        {
            get { return _carrierCode; }
            set { _carrierCode = value; }
        }

        public string FlightNo
        {
            get { return _flightNo; }
            set { _flightNo = value; }
        }

        public string Origin
        {
            get { return _origin; }
            set { _origin = value; }
        }

        public string Transit
        {
            get { return _transit; }
            set { _transit = value; }
        }

        public string Destination
        {
            get { return _destination; }
            set { _destination = value; }
        }

        public DateTime DepartureDate
        {
            get { return _departureDate; }
            set { _departureDate = value; }
        }

        public DateTime ArrivalDate
        {
            get { return _arrivalDate; }
            set { _arrivalDate = value; }
        }

        public decimal FlightDura
        {
            get { return _flightDura; }
            set { _flightDura = value; }
        }

        public DateTime DepartureDate2
        {
            get { return _departureDate2; }
            set { _departureDate2 = value; }
        }

        public DateTime ArrivalDate2
        {
            get { return _arrivalDate2; }
            set { _arrivalDate2 = value; }
        }

        public decimal FlightDura2
        {
            get { return _flightDura2; }
            set { _flightDura2 = value; }
        }

        public DateTime SyncCreate
        {
            get { return _syncCreate; }
            set { _syncCreate = value; }
        }

        public string CreateBy
        {
            get { return _createBy; }
            set { _createBy = value; }
        }
        public string RecordLocator
        {
            get { return _recordLocator; }
            set { _recordLocator = value; }
        }

        public string CommandType
        {
            get { return _commandType; }
            set { _commandType = value; }
        }

        #endregion

    }

    public class BookingTransTender
    {
        private string _transID;
        private int _seqNo;

        private DateTime _transDate;
        private string _currency = String.Empty;
        private string _currencyPaid = String.Empty;
        private string _tenderID = String.Empty;
        private string _feeType = String.Empty;
        private string _feeTypeDesc = String.Empty;
        private string _tenderDesc = String.Empty;
        private decimal _tenderAmt;
        private decimal _exchgRate;
        private decimal _tenderDue;
        private decimal _feeAmt;
        private decimal _payAmt;
        private string _refNo;
        private string _authorizationCode;
        private string _merchantID;
        private byte _transvoid;
        private DateTime _syncCreate;
        private string _createBy;
        //added by ketee , 20121028
        private string _recordLocator;
        private string _commandType;

        #region Public Properties

        public string TransID
        {
            get { return _transID; }
            set { _transID = value; }
        }
        public int SeqNo
        {
            get { return _seqNo; }
            set { _seqNo = value; }
        }
        public DateTime TransDate
        {
            get { return _transDate; }
            set { _transDate = value; }
        }

        public string Currency
        {
            get { return _currency; }
            set { _currency = value; }
        }

        public string CurrencyPaid
        {
            get { return _currencyPaid; }
            set { _currencyPaid = value; }
        }

        public string TenderID
        {
            get { return _tenderID; }
            set { _tenderID = value; }
        }

        public string FeeType
        {
            get { return _feeType; }
            set { _feeType = value; }
        }

        public string FeeTypeDesc
        {
            get { return _feeTypeDesc; }
            set { _feeTypeDesc = value; }
        }

        public string TenderDesc
        {
            get { return _tenderDesc; }
            set { _tenderDesc = value; }
        }

        public decimal TenderAmt
        {
            get { return _tenderAmt; }
            set { _tenderAmt = value; }
        }

        public decimal ExchgRate
        {
            get { return _exchgRate; }
            set { _exchgRate = value; }
        }

        public decimal TenderDue
        {
            get { return _tenderDue; }
            set { _tenderDue = value; }
        }

        public decimal FeeAmt
        {
            get { return _feeAmt; }
            set { _feeAmt = value; }
        }

        public decimal PayAmt
        {
            get { return _payAmt; }
            set { _payAmt = value; }
        }

        public byte Transvoid
        {
            get { return _transvoid; }
            set { _transvoid = value; }
        }

        public DateTime SyncCreate
        {
            get { return _syncCreate; }
            set { _syncCreate = value; }
        }

        public string RefNo
        {
            get { return _refNo; }
            set { _refNo = value; }
        }

        public string AuthorizationCode
        {
            get { return _authorizationCode; }
            set { _authorizationCode = value; }
        }

        public string MerchantID
        {
            get { return _merchantID; }
            set { _merchantID = value; }
        }

        public string CreateBy
        {
            get { return _createBy; }
            set { _createBy = value; }
        }
        //added by ketee, 20121028
        public string RecordLocator
        {
            get { return _recordLocator; }
            set { _recordLocator = value; }
        }

        public string CommandType
        {
            get { return _commandType; }
            set { _commandType = value; }
        }

        #endregion

    }

    public class PassengerData
    {
        private string _transID = String.Empty;
        private string _recordLocator = String.Empty;
        private string _passengerID = String.Empty;

        private string _title = String.Empty;
        private string _gender = String.Empty;
        private string _firstName = String.Empty;
        private string _lastName = String.Empty;
        private string _prevFirstName1 = String.Empty;
        private string _prevLastName1 = String.Empty;
        //Added by Tyas 24102017
        private string _prevnationality1 = String.Empty;
        private string _previssuingCountry1 = String.Empty;
        private string _prevtitle1 = String.Empty;
        private string _prevgender1 = String.Empty;
        private DateTime _prevdOB1;
        private string _prevpassportNo1 = String.Empty;
        private DateTime _prevexpiryDate1;
        private string _prevnationality2 = String.Empty;
        private string _previssuingCountry2 = String.Empty;
        private string _prevtitle2 = String.Empty;
        private string _prevgender2 = String.Empty;
        private DateTime _prevdOB2;
        private string _prevpassportNo2 = String.Empty;
        private DateTime _prevexpiryDate2;


        private string _prevFirstName2 = String.Empty;
        private string _prevLastName2 = String.Empty;
        private string _nationality = String.Empty;
        private DateTime _dOB;
        private string _passportNo = String.Empty;
        private string _issuingCountry = String.Empty;
        private decimal _changeFee;
        private DateTime _expiryDate;
        private decimal _changeFee2;
        private DateTime _changeDate;
        private DateTime _changeDate2;
        private int _changeCount;
        //private string _seqNo;//added by romy, for insure
        private string _insurecode = String.Empty;//added by romy, for insure
        private decimal _insurefee;
        private DateTime _insuredate;
        private int _maxChange;
        private int _maxPax1;
        private int _maxPax2;
        private Guid _rowguid = Guid.Empty;
        private DateTime _syncCreate;
        private DateTime _syncLastUpd;
        private string _lastSyncBy = String.Empty;

        private string _commandType;
        //added by ketee, 20161230
        private string _departSeat;
        private string _departConnectingSeat;
        private string _returnSeat;
        private string _returnConnectingSeat;
        private decimal _departSeatFees;
        private decimal _departConnectingSeatFees;
        private decimal _returnSeatFees;
        private decimal _returnConnectingSeatFees;

        #region Public Properties
        public string TransID
        {
            get { return _transID; }
            set { _transID = value; }
        }
        public string RecordLocator
        {
            get { return _recordLocator; }
            set { _recordLocator = value; }
        }
        public string PassengerID
        {
            get { return _passengerID; }
            set { _passengerID = value; }
        }
        public string Title
        {
            get { return _title; }
            set { _title = value; }
        }

        public string Gender
        {
            get { return _gender; }
            set { _gender = value; }
        }

        public string FirstName
        {
            get { return _firstName; }
            set { _firstName = value; }
        }

        public string LastName
        {
            get { return _lastName; }
            set { _lastName = value; }
        }

        public string PrevFirstName1
        {
            get { return _prevFirstName1; }
            set { _prevFirstName1 = value; }
        }

        public string PrevLastName1
        {
            get { return _prevLastName1; }
            set { _prevLastName1 = value; }
        }

        public string PrevTitle1
        {
            get { return _prevtitle1; }
            set { _prevtitle1 = value; }
        }

        public string PrevGender1
        {
            get { return _prevgender1; }
            set { _prevgender1 = value; }
        }

        public string PrevNationality1
        {
            get { return _prevnationality1; }
            set { _prevnationality1 = value; }
        }

        public DateTime PrevDOB1
        {
            get { return _prevdOB1; }
            set { _prevdOB1 = value; }
        }

        public string PrevPassportNo1
        {
            get { return _prevpassportNo1; }
            set { _prevpassportNo1 = value; }
        }

        public string PrevIssuingCountry1
        {
            get { return _previssuingCountry1; }
            set { _previssuingCountry1 = value; }
        }

        public DateTime PrevExpiryDate1
        {
            get { return _prevexpiryDate1; }
            set { _prevexpiryDate1 = value; }
        }

        public string PrevFirstName2
        {
            get { return _prevFirstName2; }
            set { _prevFirstName2 = value; }
        }

        public string PrevLastName2
        {
            get { return _prevLastName2; }
            set { _prevLastName2 = value; }
        }

        public string PrevTitle2
        {
            get { return _prevtitle2; }
            set { _prevtitle2 = value; }
        }

        public string PrevGender2
        {
            get { return _prevgender2; }
            set { _prevgender2 = value; }
        }

        public string PrevNationality2
        {
            get { return _prevnationality2; }
            set { _prevnationality2 = value; }
        }

        public DateTime PrevDOB2
        {
            get { return _prevdOB2; }
            set { _prevdOB2 = value; }
        }

        public string PrevPassportNo2
        {
            get { return _prevpassportNo2; }
            set { _prevpassportNo2 = value; }
        }

        public string PrevIssuingCountry2
        {
            get { return _previssuingCountry2; }
            set { _previssuingCountry2 = value; }
        }

        public DateTime PrevExpiryDate2
        {
            get { return _prevexpiryDate2; }
            set { _prevexpiryDate2 = value; }
        }

        public string Nationality
        {
            get { return _nationality; }
            set { _nationality = value; }
        }

        public DateTime DOB
        {
            get { return _dOB; }
            set { _dOB = value; }
        }

        public string PassportNo
        {
            get { return _passportNo; }
            set { _passportNo = value; }
        }

        public string IssuingCountry
        {
            get { return _issuingCountry; }
            set { _issuingCountry = value; }
        }

        public DateTime ExpiryDate
        {
            get { return _expiryDate; }
            set { _expiryDate = value; }
        }

        public decimal ChangeFee
        {
            get { return _changeFee; }
            set { _changeFee = value; }
        }

        public DateTime ChangeDate
        {
            get { return _changeDate; }
            set { _changeDate = value; }
        }

        public decimal ChangeFee2
        {
            get { return _changeFee2; }
            set { _changeFee2 = value; }
        }

        public DateTime ChangeDate2
        {
            get { return _changeDate2; }
            set { _changeDate2 = value; }
        }

        public int ChangeCount
        {
            get { return _changeCount; }
            set { _changeCount = value; }
        }

        //public string SeqNo//added by romy, for insure
        //{
        //    get { return _seqNo; }
        //    set { _seqNo = value; }
        //}
        public string InsureCode//added by romy, for insure
        {
            get { return _insurecode; }
            set { _insurecode = value; }
        }
        public decimal InsureFee//added by romy, for insure
        {
            get { return _insurefee; }
            set { _insurefee = value; }
        }

        public DateTime InsureDate//added by romy, for insure
        {
            get { return _insuredate; }
            set { _insuredate = value; }
        }

        public int MaxChange
        {
            get { return _maxChange; }
            set { _maxChange = value; }
        }

        public int MaxPax1
        {
            get { return _maxPax1; }
            set { _maxPax1 = value; }
        }

        public int MaxPax2
        {
            get { return _maxPax2; }
            set { _maxPax2 = value; }
        }

        public Guid rowguid
        {
            get { return _rowguid; }
            set { _rowguid = value; }
        }

        public DateTime SyncCreate
        {
            get { return _syncCreate; }
            set { _syncCreate = value; }
        }

        public DateTime SyncLastUpd
        {
            get { return _syncLastUpd; }
            set { _syncLastUpd = value; }
        }

        public string LastSyncBy
        {
            get { return _lastSyncBy; }
            set { _lastSyncBy = value; }
        }

        public string CommandType
        {
            get { return _commandType; }
            set { _commandType = value; }
        }
        #endregion

        //added by ketee,
        public string DepartSeat
        {
            get { return _departSeat; }
            set { _departSeat = value; }
        }
        public string DepartConnectingSeat
        {
            get { return _departConnectingSeat; }
            set { _departConnectingSeat = value; }
        }
        public string ReturnSeat
        {
            get { return _returnSeat; }
            set { _returnSeat = value; }
        }
        public string ReturnConnectingSeat
        {
            get { return _returnConnectingSeat; }
            set { _returnConnectingSeat = value; }
        }
        public decimal DepartSeatFees
        {
            get { return _departSeatFees; }
            set { _departSeatFees = value; }
        }
        public decimal DepartConnectingSeatFees
        {
            get { return _departConnectingSeatFees; }
            set { _departConnectingSeatFees = value; }
        }
        public decimal ReturnSeatFees
        {
            get { return _returnSeatFees; }
            set { _returnSeatFees = value; }
        }
        public decimal ReturnConnectingSeatFees
        {
            get { return _returnConnectingSeatFees; }
            set { _returnConnectingSeatFees = value; }
        }
    }

    public class PassengerInfantData
    {
        private string _transID = String.Empty;
        private string _recordLocator = String.Empty;
        private string _passengerID = String.Empty;

        private string _title = String.Empty;
        private string _gender = String.Empty;
        private string _firstName = String.Empty;
        private string _lastName = String.Empty;
        private string _prevFirstName1 = String.Empty;
        private string _prevLastName1 = String.Empty;
        private string _prevFirstName2 = String.Empty;
        private string _prevLastName2 = String.Empty;
        private string _nationality = String.Empty;
        private DateTime _dOB;
        private string _passportNo = String.Empty;
        private string _issuingCountry = String.Empty;
        private decimal _changeFee;
        private DateTime _expiryDate;
        private decimal _changeFee2;
        private DateTime _changeDate;
        private DateTime _changeDate2;
        private int _changeCount;
        private int _maxChange;
        private int _maxPax1;
        private int _maxPax2;
        private Guid _rowguid = Guid.Empty;
        private DateTime _syncCreate;
        private DateTime _syncLastUpd;
        private string _lastSyncBy = String.Empty;

        private string _commandType;

        #region Public Properties
        public string TransID
        {
            get { return _transID; }
            set { _transID = value; }
        }
        public string RecordLocator
        {
            get { return _recordLocator; }
            set { _recordLocator = value; }
        }
        public string PassengerID
        {
            get { return _passengerID; }
            set { _passengerID = value; }
        }
        public string Title
        {
            get { return _title; }
            set { _title = value; }
        }

        public string Gender
        {
            get { return _gender; }
            set { _gender = value; }
        }

        public string FirstName
        {
            get { return _firstName; }
            set { _firstName = value; }
        }

        public string LastName
        {
            get { return _lastName; }
            set { _lastName = value; }
        }

        public string PrevFirstName1
        {
            get { return _prevFirstName1; }
            set { _prevFirstName1 = value; }
        }

        public string PrevLastName1
        {
            get { return _prevLastName1; }
            set { _prevLastName1 = value; }
        }

        public string PrevFirstName2
        {
            get { return _prevFirstName2; }
            set { _prevFirstName2 = value; }
        }

        public string PrevLastName2
        {
            get { return _prevLastName2; }
            set { _prevLastName2 = value; }
        }

        public string Nationality
        {
            get { return _nationality; }
            set { _nationality = value; }
        }

        public DateTime DOB
        {
            get { return _dOB; }
            set { _dOB = value; }
        }

        public string PassportNo
        {
            get { return _passportNo; }
            set { _passportNo = value; }
        }

        public string IssuingCountry
        {
            get { return _issuingCountry; }
            set { _issuingCountry = value; }
        }

        public DateTime ExpiryDate
        {
            get { return _expiryDate; }
            set { _expiryDate = value; }
        }

        public decimal ChangeFee
        {
            get { return _changeFee; }
            set { _changeFee = value; }
        }

        public DateTime ChangeDate
        {
            get { return _changeDate; }
            set { _changeDate = value; }
        }

        public decimal ChangeFee2
        {
            get { return _changeFee2; }
            set { _changeFee2 = value; }
        }

        public DateTime ChangeDate2
        {
            get { return _changeDate2; }
            set { _changeDate2 = value; }
        }

        public int ChangeCount
        {
            get { return _changeCount; }
            set { _changeCount = value; }
        }

        public int MaxChange
        {
            get { return _maxChange; }
            set { _maxChange = value; }
        }

        public int MaxPax1
        {
            get { return _maxPax1; }
            set { _maxPax1 = value; }
        }

        public int MaxPax2
        {
            get { return _maxPax2; }
            set { _maxPax2 = value; }
        }

        public Guid rowguid
        {
            get { return _rowguid; }
            set { _rowguid = value; }
        }

        public DateTime SyncCreate
        {
            get { return _syncCreate; }
            set { _syncCreate = value; }
        }

        public DateTime SyncLastUpd
        {
            get { return _syncLastUpd; }
            set { _syncLastUpd = value; }
        }

        public string LastSyncBy
        {
            get { return _lastSyncBy; }
            set { _lastSyncBy = value; }
        }

        public string CommandType
        {
            get { return _commandType; }
            set { _commandType = value; }
        }
        #endregion
    }


    public class SysCode
    {
        private const string _performance = "SL1000R";
        private const string _cancellation = "SL1001R";
        private const string _balanceover = "SL1002R";
        private const string _details = "SL1003R";
        private const string _schedule = "SL1004R";
        private const string _weekly = "SL1005R";
        private const string _daily = "SL1006R";

        public string Performance
        {
            get { return _performance; }
        }
        public string Cancellation
        {
            get { return _cancellation; }
        }
        public string BalanceOver
        {
            get { return _balanceover; }
        }
        public string Details
        {
            get { return _details; }
        }
        public string Schedule
        {
            get { return _schedule; }
        }
        public string Weekly
        {
            get { return _weekly; }
        }
        public string Daily
        {
            get { return _daily; }
        }
    }
    public class SysReport
    {
        private int _aPPID;
        private string _rPTCode = String.Empty;
        private string _rPTName = String.Empty;
        private string _rPTDesc = String.Empty;
        private string _rPTTypeName = String.Empty;
        private string _rPTQuery = String.Empty;
        private byte _rPTType;
        private byte _rPTSection;
        private Guid _rowguid = Guid.Empty;
        private DateTime _syncCreate;
        private DateTime _syncLastUpd;
        private byte _isHost;
        private byte _lastSyncBy;

        #region Public Properties

        public int APPID
        {
            get { return _aPPID; }
            set { _aPPID = value; }
        }
        public string RPTCode
        {
            get { return _rPTCode; }
            set { _rPTCode = value; }
        }
        public string RPTName
        {
            get { return _rPTName; }
            set { _rPTName = value; }
        }

        public string RPTDesc
        {
            get { return _rPTDesc; }
            set { _rPTDesc = value; }
        }

        public string RPTQuery
        {
            get { return _rPTTypeName; }
            set { _rPTTypeName = value; }
        }

        public string RPTTypeName
        {
            get { return _rPTQuery; }
            set { _rPTQuery = value; }
        }

        public byte RPTType
        {
            get { return _rPTType; }
            set { _rPTType = value; }
        }

        public byte RPTSection
        {
            get { return _rPTSection; }
            set { _rPTSection = value; }
        }

        public Guid rowguid
        {
            get { return _rowguid; }
            set { _rowguid = value; }
        }

        public DateTime SyncCreate
        {
            get { return _syncCreate; }
            set { _syncCreate = value; }
        }

        public DateTime SyncLastUpd
        {
            get { return _syncLastUpd; }
            set { _syncLastUpd = value; }
        }

        public byte IsHost
        {
            get { return _isHost; }
            set { _isHost = value; }
        }

        public byte LastSyncBy
        {
            get { return _lastSyncBy; }
            set { _lastSyncBy = value; }
        }

        #endregion
    }

    #region SysReportField
    /// <summary>
    /// This object represents the properties and methods of a SYS_RPTFIELD.
    /// </summary>
    public class SysReportField
    {
        private int _aPPID;
        private string _rPTCode = String.Empty;
        private string _rptDBField = String.Empty;

        private string _rPTField = String.Empty;
        private byte _fieldType;
        private string _fieldDef = String.Empty;
        private string _fieldAttb = String.Empty;
        private Guid _rowguid = Guid.Empty;
        private DateTime _syncCreate;
        private DateTime _syncLastUpd;
        private byte _isHost;
        private byte _lastSyncBy;

        #region Public Properties
        public int APPID
        {
            get { return _aPPID; }
            set { _aPPID = value; }
        }
        public string RPTCode
        {
            get { return _rPTCode; }
            set { _rPTCode = value; }
        }
        public string RptDBField
        {
            get { return _rptDBField; }
            set { _rptDBField = value; }
        }
        public string RPTField
        {
            get { return _rPTField; }
            set { _rPTField = value; }
        }

        public byte FieldType
        {
            get { return _fieldType; }
            set { _fieldType = value; }
        }

        public string FieldDef
        {
            get { return _fieldDef; }
            set { _fieldDef = value; }
        }

        public string FieldAttb
        {
            get { return _fieldAttb; }
            set { _fieldAttb = value; }
        }

        public Guid rowguid
        {
            get { return _rowguid; }
            set { _rowguid = value; }
        }

        public DateTime SyncCreate
        {
            get { return _syncCreate; }
            set { _syncCreate = value; }
        }

        public DateTime SyncLastUpd
        {
            get { return _syncLastUpd; }
            set { _syncLastUpd = value; }
        }

        public byte IsHost
        {
            get { return _isHost; }
            set { _isHost = value; }
        }

        public byte LastSyncBy
        {
            get { return _lastSyncBy; }
            set { _lastSyncBy = value; }
        }
        #endregion

    }

    #endregion

    #region SECTORSUSPEND
    /// <summary>
    /// This object represents the properties and methods of a SECTORSUSPEND.
    /// </summary>
    public class SectorSuspend
    {
        private string _sectorSuspendID = String.Empty;

        private string _carrierCode = String.Empty;
        private string _agentGroup = String.Empty;
        private string _origins = String.Empty;
        private string _destination = String.Empty;
        private DateTime _effectiveStartDate;
        private DateTime _effectiveEndDate;
        private byte _active;
        private DateTime _syncCreate;
        private DateTime _syncLastUpd;
        private string _lastSyncBy = String.Empty;

        #region Public Properties
        public string SectorSuspendID
        {
            get { return _sectorSuspendID; }
            set { _sectorSuspendID = value; }
        }
        public string CarrierCode
        {
            get { return _carrierCode; }
            set { _carrierCode = value; }
        }

        public string AgentGroup
        {
            get { return _agentGroup; }
            set { _agentGroup = value; }
        }

        public string Origins
        {
            get { return _origins; }
            set { _origins = value; }
        }

        public string Destination
        {
            get { return _destination; }
            set { _destination = value; }
        }

        public DateTime EffectiveStartDate
        {
            get { return _effectiveStartDate; }
            set { _effectiveStartDate = value; }
        }

        public DateTime EffectiveEndDate
        {
            get { return _effectiveEndDate; }
            set { _effectiveEndDate = value; }
        }

        public byte Active
        {
            get { return _active; }
            set { _active = value; }
        }

        public DateTime SyncCreate
        {
            get { return _syncCreate; }
            set { _syncCreate = value; }
        }

        public DateTime SyncLastUpd
        {
            get { return _syncLastUpd; }
            set { _syncLastUpd = value; }
        }

        public string LastSyncBy
        {
            get { return _lastSyncBy; }
            set { _lastSyncBy = value; }
        }
        #endregion

    }




    #endregion

    public class RequestApp
    {
        private string _reqID = String.Empty;

        private string _userID = String.Empty;
        private string _reqType = String.Empty;
        private string _transID = String.Empty;
        private DateTime _requestDate;
        private DateTime _expiryDate;
        private string _requestDesc = String.Empty;
        private string _userName = String.Empty;
        private string _remark = String.Empty;
        private string _approvedBy = String.Empty;
        private DateTime _approvedDate;
        private Guid _rowguid = Guid.Empty;
        private DateTime _syncCreate;
        private DateTime _syncLastUpd;
        private string _lastSyncBy = String.Empty;

        #region Public Properties
        public string ReqID
        {
            get { return _reqID; }
            set { _reqID = value; }
        }
        public string UserID
        {
            get { return _userID; }
            set { _userID = value; }
        }

        public string UserName
        {
            get { return _userName; }
            set { _userName = value; }
        }

        public string RequestDesc
        {
            get { return _requestDesc; }
            set { _requestDesc = value; }
        }

        public string ReqType
        {
            get { return _reqType; }
            set { _reqType = value; }
        }

        public string TransID
        {
            get { return _transID; }
            set { _transID = value; }
        }

        public DateTime RequestDate
        {
            get { return _requestDate; }
            set { _requestDate = value; }
        }

        public DateTime ExpiryDate
        {
            get { return _expiryDate; }
            set { _expiryDate = value; }
        }

        public string Remark
        {
            get { return _remark; }
            set { _remark = value; }
        }

        public string ApprovedBy
        {
            get { return _approvedBy; }
            set { _approvedBy = value; }
        }

        public DateTime ApprovedDate
        {
            get { return _approvedDate; }
            set { _approvedDate = value; }
        }

        public Guid rowguid
        {
            get { return _rowguid; }
            set { _rowguid = value; }
        }

        public DateTime SyncCreate
        {
            get { return _syncCreate; }
            set { _syncCreate = value; }
        }

        public DateTime SyncLastUpd
        {
            get { return _syncLastUpd; }
            set { _syncLastUpd = value; }
        }

        public string LastSyncBy
        {
            get { return _lastSyncBy; }
            set { _lastSyncBy = value; }
        }
        #endregion

    }


    public class BookingTransactionTax
    {
        private string _transID = String.Empty;
        private int _taxCode;

        private decimal _taxRate;
        private decimal _taxAmt;
        private byte _transVoid;
        private Guid _rowguid = Guid.Empty;
        private string _createBy = String.Empty;
        private DateTime _syncCreate;

        #region Public Properties
        public string TransID
        {
            get { return _transID; }
            set { _transID = value; }
        }
        public int TaxCode
        {
            get { return _taxCode; }
            set { _taxCode = value; }
        }
        public decimal TaxRate
        {
            get { return _taxRate; }
            set { _taxRate = value; }
        }

        public decimal TaxAmt
        {
            get { return _taxAmt; }
            set { _taxAmt = value; }
        }

        public byte TransVoid
        {
            get { return _transVoid; }
            set { _transVoid = value; }
        }

        public Guid rowguid
        {
            get { return _rowguid; }
            set { _rowguid = value; }
        }

        public string CreateBy
        {
            get { return _createBy; }
            set { _createBy = value; }
        }

        public DateTime SyncCreate
        {
            get { return _syncCreate; }
            set { _syncCreate = value; }
        }
        #endregion
    }


    #endregion

    #region "BookingAPI Container"
    public partial class BookingJourneyContainer
    {
        private string _recordLocator = String.Empty;
        private string _flightNumber = String.Empty;
        private string _unitDesignator = String.Empty;

        private long _bookingID;
        private string _actionStatusCode = String.Empty;
        private string _carrierCode = String.Empty;
        private string _arrivalStation = String.Empty;
        private DateTime _sTA;
        private string _departureStation = String.Empty;
        private DateTime _sTD;
        private string _compartmentDesignator = String.Empty;
        private string _SellKey = String.Empty;
        private string _fareSellKey = String.Empty;
        private string _fareClass = String.Empty;
        private string _journeySellKey = String.Empty;
        private Navitaire.BookingManager.FlightDesignator _flightDesignator = new Navitaire.BookingManager.FlightDesignator();
        private Navitaire.BookingManager.FlightDesignator _overridedFlightDesignator = new Navitaire.BookingManager.FlightDesignator();
        private string _overridedCarrierCode = String.Empty;
        private string _overridedFlightNumber = String.Empty;
        private string _overridedArrivalStation = String.Empty;
        private DateTime _overridedSTA;
        private string _overridedDepartureStation = String.Empty;
        private DateTime _overridedSTD;
        private decimal _flightDura;
        private decimal _flightDura2;
        private string _overridedUnitDesignator = String.Empty;
        private string _overridedCompartmentDesignator = String.Empty;
        private string _overridedfareSellKey = String.Empty;
        private string _overridedFareClass = String.Empty;
        private string _searUrl = string.Empty;
        private string _overridedSeatUrl = string.Empty;
        private int _deck;
        private string _equipmentType;
        private string _overridedEquipmentType;
        private byte _passengerNumber;
        private byte _flag;
        private byte _status;
        private DateTime _syncCreate;
        private DateTime _syncLastUpd;
        private Guid _rowguid = Guid.Empty;
        private string _opSuffix = string.Empty;
        private string _overridedOpSuffix = string.Empty;
        private SeatContainer _seatContainer = new SeatContainer();
        private SeatContainer _overridedSeatContainer = new SeatContainer();
        private string _hotSeat = string.Empty;
        private string _quietZone = string.Empty;
        private string _overridedHotSeat = string.Empty;
        private string _overridedQuietZone = string.Empty;

        //added by diana 20130924
        private string _currencyCode;
        private decimal _exchangeRate;
        private decimal _serviceFee;
        private decimal _vatFee;
        private decimal _chargeFee;
        private decimal _splFee;
        private decimal _ssrFee;
        private decimal _seatFee;
        private decimal _nameChangeFee;
        private decimal _otherFee;
        private decimal _processFee;
        private decimal _discFee;
        private decimal _promoDiscFee;

        private int _adtPax;
        private int _chdPax;

        private decimal _adtFullPrice;
        private decimal _adtFarePrice;
        private decimal _paxFeeChrg;
        private decimal _adtTaxChrg;
        private decimal _adtFuelChrg;
        private decimal _adtServChrg;
        private decimal _SSRChrg;
        private decimal _seatChrg;
        private decimal _nameChangeChrg;
        private decimal _infantChrg;
        private decimal _insureChrg;
        private decimal _adtDiscChrg;
        private decimal _adtPromoDiscChrg;

        private decimal _chdFullPrice;
        private decimal _chdFarePrice;
        private decimal _chdTaxChrg;
        private decimal _chdFuelChrg;
        private decimal _chdServChrg;
        private decimal _chdDiscChrg;
        private decimal _chdPromoDiscChrg;
        //end added by diana 20130924

        //added by diana 20131112 - payment extension value
        private DateTime _holdDateTime;

        #region Public Properties
        public string RecordLocator
        {
            get { return _recordLocator; }
            set { _recordLocator = value; }
        }
        public string FlightNumber
        {
            get { return _flightNumber; }
            set { _flightNumber = value; }
        }
        public string UnitDesignator
        {
            get { return _unitDesignator; }
            set { _unitDesignator = value; }
        }
        public long BookingID
        {
            get { return _bookingID; }
            set { _bookingID = value; }
        }

        public Navitaire.BookingManager.FlightDesignator FlightDesignator
        {
            get { return _flightDesignator; }
            set { _flightDesignator = value; }
        }

        public Navitaire.BookingManager.FlightDesignator OverridedFlightDesignator
        {
            get { return _overridedFlightDesignator; }
            set { _overridedFlightDesignator = value; }
        }

        public string OpSuffix
        {
            get { return _opSuffix; }
            set { _opSuffix = value; }
        }

        public string OverridedOpSuffix
        {
            get { return _overridedOpSuffix; }
            set { _overridedOpSuffix = value; }
        }

        public string ActionStatusCode
        {
            get { return _actionStatusCode; }
            set { _actionStatusCode = value; }
        }

        public string CarrierCode
        {
            get { return _carrierCode; }
            set { _carrierCode = value; }
        }

        public string ArrivalStation
        {
            get { return _arrivalStation; }
            set { _arrivalStation = value; }
        }

        public DateTime STA
        {
            get { return _sTA; }
            set { _sTA = value; }
        }

        public string DepartureStation
        {
            get { return _departureStation; }
            set { _departureStation = value; }
        }

        public DateTime STD
        {
            get { return _sTD; }
            set { _sTD = value; }
        }

        public string CompartmentDesignator
        {
            get { return _compartmentDesignator; }
            set { _compartmentDesignator = value; }
        }

        public string SellKey
        {
            get { return _SellKey; }
            set { _SellKey = value; }
        }

        public string FareSellKey
        {
            get { return _fareSellKey; }
            set { _fareSellKey = value; }
        }

        public string FareClass
        {
            get { return _fareClass; }
            set { _fareClass = value; }
        }

        public string JourneySellKey
        {
            get { return _journeySellKey; }
            set { _journeySellKey = value; }
        }

        public string OverridedCarrierCode
        {
            get { return _overridedCarrierCode; }
            set { _overridedCarrierCode = value; }
        }

        public string OverridedFlightNumber
        {
            get { return _overridedFlightNumber; }
            set { _overridedFlightNumber = value; }
        }

        public string OverridedArrivalStation
        {
            get { return _overridedArrivalStation; }
            set { _overridedArrivalStation = value; }
        }

        public DateTime OverridedSTA
        {
            get { return _overridedSTA; }
            set { _overridedSTA = value; }
        }

        public string OverridedDepartureStation
        {
            get { return _overridedDepartureStation; }
            set { _overridedDepartureStation = value; }
        }

        public DateTime OverridedSTD
        {
            get { return _overridedSTD; }
            set { _overridedSTD = value; }
        }

        public decimal FlightDura
        {
            get { return _flightDura; }
            set { _flightDura = value; }
        }

        public decimal FlightDura2
        {
            get { return _flightDura2; }
            set { _flightDura2 = value; }
        }

        public string OverridedUnitDesignator
        {
            get { return _overridedUnitDesignator; }
            set { _overridedUnitDesignator = value; }
        }

        public string OverridedCompartmentDesignator
        {
            get { return _overridedCompartmentDesignator; }
            set { _overridedCompartmentDesignator = value; }
        }

        public string OverridedFareSellKey
        {
            get { return _overridedfareSellKey; }
            set { _overridedfareSellKey = value; }
        }

        public string OverridedFareClass
        {
            get { return _overridedFareClass; }
            set { _overridedFareClass = value; }
        }

        public string SeatURL
        {
            get { return _searUrl; }
            set { _searUrl = value; }
        }

        public string OverridedSeatURL
        {
            get { return _overridedSeatUrl; }
            set { _overridedSeatUrl = value; }
        }

        public string HotSeat
        {
            get { return _hotSeat; }
            set { _hotSeat = value; }
        }

        public string OverridedHotSeat
        {
            get { return _overridedHotSeat; }
            set { _overridedHotSeat = value; }
        }

        public string QuietZone
        {
            get { return _quietZone; }
            set { _quietZone = value; }
        }

        public string OverridedQuietZone
        {
            get { return _overridedQuietZone; }
            set { _overridedQuietZone = value; }
        }

        public int Deck
        {
            get { return _deck; }
            set { _deck = value; }
        }

        public string EquipmentType
        {
            get { return _equipmentType; }
            set { _equipmentType = value; }
        }

        public string OverridedEquipmentType
        {
            get { return _overridedEquipmentType; }
            set { _overridedEquipmentType = value; }
        }

        public byte PassengerNumber
        {
            get { return _passengerNumber; }
            set { _passengerNumber = value; }
        }

        public SeatContainer SeatContainer
        {
            get { return _seatContainer; }
            set { _seatContainer = value; }
        }

        public SeatContainer OverridedSeatContainer
        {
            get { return _overridedSeatContainer; }
            set { _overridedSeatContainer = value; }
        }

        public byte Flag
        {
            get { return _flag; }
            set { _flag = value; }
        }

        public byte Status
        {
            get { return _status; }
            set { _status = value; }
        }

        public DateTime SyncCreate
        {
            get { return _syncCreate; }
            set { _syncCreate = value; }
        }

        public DateTime SyncLastUpd
        {
            get { return _syncLastUpd; }
            set { _syncLastUpd = value; }
        }

        public Guid rowguid
        {
            get { return _rowguid; }
            set { _rowguid = value; }
        }

        //added by diana 20130924
        public string CurrencyCode
        {
            get { return _currencyCode; }
            set { _currencyCode = value; }
        }

        public decimal ExchangeRate
        {
            get { return _exchangeRate; }
            set { _exchangeRate = value; }
        }

        public int AdtPax
        {
            get { return _adtPax; }
            set { _adtPax = value; }
        }

        public int ChdPax
        {
            get { return _chdPax; }
            set { _chdPax = value; }
        }

        public decimal AdtFullPrice
        {
            get { return _adtFullPrice; }
            set { _adtFullPrice = value; }
        }

        public decimal AdtFarePrice
        {
            get { return _adtFarePrice; }
            set { _adtFarePrice = value; }
        }

        public decimal PaxFeeChrg
        {
            get { return _paxFeeChrg; }
            set { _paxFeeChrg = value; }
        }

        public decimal AdtTaxChrg
        {
            get { return _adtTaxChrg; }
            set { _adtTaxChrg = value; }
        }

        public decimal AdtFuelChrg
        {
            get { return _adtFuelChrg; }
            set { _adtFuelChrg = value; }
        }

        public decimal AdtServChrg
        {
            get { return _adtServChrg; }
            set { _adtServChrg = value; }
        }
        public decimal SSRChrg
        {
            get { return _SSRChrg; }
            set { _SSRChrg = value; }
        }
        public decimal SeatChrg
        {
            get { return _seatChrg; }
            set { _seatChrg = value; }
        }
        public decimal NameChangeChrg
        {
            get { return _nameChangeChrg; }
            set { _nameChangeChrg = value; }
        }
        public decimal InfantChrg
        {
            get { return _infantChrg; }
            set { _infantChrg = value; }
        }

        public decimal InsureChrg
        {
            get { return _insureChrg; }
            set { _insureChrg = value; }
        }

        public decimal AdtDiscChrg
        {
            get { return _adtDiscChrg; }
            set { _adtDiscChrg = value; }
        }

        public decimal AdtPromoDiscChrg
        {
            get { return _adtPromoDiscChrg; }
            set { _adtPromoDiscChrg = value; }
        }

        public decimal ChdFullPrice
        {
            get { return _chdFullPrice; }
            set { _chdFullPrice = value; }
        }

        public decimal ChdFarePrice
        {
            get { return _chdFarePrice; }
            set { _chdFarePrice = value; }
        }

        public decimal ChdTaxChrg
        {
            get { return _chdTaxChrg; }
            set { _chdTaxChrg = value; }
        }

        public decimal ChdFuelChrg
        {
            get { return _chdFuelChrg; }
            set { _chdFuelChrg = value; }
        }

        public decimal ChdServChrg
        {
            get { return _chdServChrg; }
            set { _chdServChrg = value; }
        }

        public decimal ChdDiscChrg
        {
            get { return _chdDiscChrg; }
            set { _chdDiscChrg = value; }
        }

        public decimal ChdPromoDiscChrg
        {
            get { return _chdPromoDiscChrg; }
            set { _chdPromoDiscChrg = value; }
        }

        public decimal ServiceFee
        {
            get { return _serviceFee; }
            set { _serviceFee = value; }
        }

        public decimal VATFee
        {
            get { return _vatFee; }
            set { _vatFee = value; }
        }

        public decimal ChargeFee
        {
            get { return _chargeFee; }
            set { _chargeFee = value; }
        }

        public decimal SPLFee
        {
            get { return _splFee; }
            set { _splFee = value; }
        }

        public decimal SSRFee
        {
            get { return _ssrFee; }
            set { _ssrFee = value; }
        }

        public decimal SeatFee
        {
            get { return _seatFee; }
            set { _seatFee = value; }
        }

        public decimal OtherFee
        {
            get { return _otherFee; }
            set { _otherFee = value; }
        }

        public decimal ProcessFee
        {
            get { return _processFee; }
            set { _processFee = value; }
        }

        public decimal DiscFee
        {
            get { return _discFee; }
            set { _discFee = value; }
        }

        public decimal PromoDiscFee
        {
            get { return _promoDiscFee; }
            set { _promoDiscFee = value; }
        }

        //end added by diana 20130924

        //added by diana 20131112 - payment extension value
        public DateTime HoldDateTime
        {
            get { return _holdDateTime; }
            set { _holdDateTime = value; }
        }

        #endregion


    }

    public class BookingContainer
    {
        private string _recordLocator = String.Empty;
        private string _queueCode = String.Empty;

        private long _bookingID;
        private byte _paxCount;
        private DateTime _createDate;
        private DateTime _expiredDate;
        private DateTime _modifiedDate;
        private DateTime _bookingDate;
        private string _currencyCode = String.Empty;
        private decimal _totalCost;
        private byte _flag;
        private byte _status;
        private DateTime _syncCreate;
        private DateTime _syncLastUpd;
        private Guid _rowguid = Guid.Empty;
        private string _receivedby;

        //added by diana 20140206, store booking status, paid status and exchange rate
        private string _bookingStatus;
        private string _paidStatus;
        private decimal _exchangeRate;

        #region Public Properties
        public string RecordLocator
        {
            get { return _recordLocator; }
            set { _recordLocator = value; }
        }
        public string QueueCode
        {
            get { return _queueCode; }
            set { _queueCode = value; }
        }
        public long BookingID
        {
            get { return _bookingID; }
            set { _bookingID = value; }
        }

        public byte PaxCount
        {
            get { return _paxCount; }
            set { _paxCount = value; }
        }

        public DateTime CreateDate
        {
            get { return _createDate; }
            set { _createDate = value; }
        }

        public DateTime ExpiredDate
        {
            get { return _expiredDate; }
            set { _expiredDate = value; }
        }

        public DateTime ModifiedDate
        {
            get { return _modifiedDate; }
            set { _modifiedDate = value; }
        }

        public DateTime BookingDate
        {
            get { return _bookingDate; }
            set { _bookingDate = value; }
        }

        public string CurrencyCode
        {
            get { return _currencyCode; }
            set { _currencyCode = value; }
        }

        public decimal TotalCost
        {
            get { return _totalCost; }
            set { _totalCost = value; }
        }

        public byte Flag
        {
            get { return _flag; }
            set { _flag = value; }
        }

        public byte Status
        {
            get { return _status; }
            set { _status = value; }
        }

        public DateTime SyncCreate
        {
            get { return _syncCreate; }
            set { _syncCreate = value; }
        }

        public DateTime SyncLastUpd
        {
            get { return _syncLastUpd; }
            set { _syncLastUpd = value; }
        }

        public Guid rowguid
        {
            get { return _rowguid; }
            set { _rowguid = value; }
        }

        public string ReceivedBy
        {
            get { return _receivedby; }
            set { _receivedby = value; }
        }

        public string BookingStatus
        {
            get { return _bookingStatus; }
            set { _bookingStatus = value; }
        }

        public string PaidStatus
        {
            get { return _paidStatus; }
            set { _paidStatus = value; }
        }

        public decimal ExchangeRate
        {
            get { return _exchangeRate; }
            set { _exchangeRate = value; }
        }

        #endregion
    }

    public class ManifestContainer
    {
        private string _recordLocator = String.Empty;
        private long _passengerID;
        private long _bookingID;
        private long _passengerNumber;
        private string _title = String.Empty;
        private string _firstName = String.Empty;
        private string _lastName = String.Empty;
        private DateTime _dob;
        private string _gender = String.Empty;
        private string _unitDesignator = String.Empty;
        private byte _withInfant;

        #region Public Properties
        public string RecordLocator
        {
            get { return _recordLocator; }
            set { _recordLocator = value; }
        }
        public long PassengerID
        {
            get { return _passengerID; }
            set { _passengerID = value; }
        }
        public long BookingID
        {
            get { return _bookingID; }
            set { _bookingID = value; }
        }

        public long PassengerNumber
        {
            get { return _passengerNumber; }
            set { _passengerNumber = value; }
        }

        public string Title
        {
            get { return _title; }
            set { _title = value; }
        }

        public string FirstName
        {
            get { return _firstName; }
            set { _firstName = value; }
        }

        public string LastName
        {
            get { return _lastName; }
            set { _lastName = value; }
        }

        public string Gender
        {
            get { return _gender; }
            set { _gender = value; }
        }

        public string UnitDesignator
        {
            get { return _unitDesignator; }
            set { _unitDesignator = value; }
        }

        public byte WithInfant
        {
            get { return _withInfant; }
            set { _withInfant = value; }
        }

        public DateTime DOB
        {
            get { return _dob; }
            set { _dob = value; }
        }

        #endregion
    }

    public class PassengerInfantContainer
    {
        private string _recordLocator = String.Empty;
        private long _passengerID;
        private string _firstName = String.Empty;
        private long _bookingID;
        private string _lastName = String.Empty;
        private DateTime _dOB;
        private string _gender = String.Empty;
        private string _nationality = String.Empty;
        private byte _flag;
        private string _passpornumber = string.Empty;
        private string _issueCountry = string.Empty;
        private DateTime _issueExpiryDate;

        #region Public Properties
        public string RecordLocator
        {
            get { return _recordLocator; }
            set { _recordLocator = value; }
        }
        public long PassengerID
        {
            get { return _passengerID; }
            set { _passengerID = value; }
        }
        public string FirstName
        {
            get { return _firstName; }
            set { _firstName = value; }
        }
        public long BookingID
        {
            get { return _bookingID; }
            set { _bookingID = value; }
        }

        public string LastName
        {
            get { return _lastName; }
            set { _lastName = value; }
        }

        public DateTime DOB
        {
            get { return _dOB; }
            set { _dOB = value; }
        }

        public string Gender
        {
            get { return _gender; }
            set { _gender = value; }
        }

        public string Nationality
        {
            get { return _nationality; }
            set { _nationality = value; }
        }

        public byte Flag
        {
            get { return _flag; }
            set { _flag = value; }
        }

        public string PassportNumber
        {
            get { return _passpornumber; }
            set { _passpornumber = value; }
        }

        public string IssueCountry
        {
            get { return _issueCountry; }
            set { _issueCountry = value; }
        }

        public DateTime ExpiryDate
        {
            get { return _issueExpiryDate; }
            set { _issueExpiryDate = value; }
        }

    }
    #endregion

    public class SeatContainer
    {
        private string _seatgroup = string.Empty;
        private string _seatdesignator = string.Empty;
        private string _typecode = string.Empty;
        private string _seatavailability = string.Empty;
        private string _hotseat = string.Empty;
        private string _quietzone = string.Empty;

        public string SeatGroup
        {
            get { return _seatgroup; }
            set { _seatgroup = value; }
        }

        public string SeatDesignator
        {
            get { return _seatdesignator; }
            set { _seatdesignator = value; }
        }

        public string TypeCode
        {
            get { return _typecode; }
            set { _typecode = value; }
        }

        public string SeatAvailability
        {
            get { return _seatavailability; }
            set { _seatavailability = value; }
        }

        public string HotSeat
        {
            get { return _hotseat; }
            set { _hotseat = value; }
        }

        public string QuietZone
        {
            get { return _quietzone; }
            set { _quietzone = value; }
        }
    }

    public class PassengerContainer
    {
        public enum FlightType
        {
            Depart = 0,
            ConnectingDepart = 1,
            Return = 2,
            ConnectingReturn = 3,
            Nothing = 4
        }

        private string _recordLocator = String.Empty;
        private long _passengerID;
        private long _bookingID;
        private long _passengerNumber;
        private string _title = String.Empty;
        private string _firstName = String.Empty;
        private string _middleName = String.Empty;
        private string _lastName = String.Empty;
        private string _prevFirstName1 = String.Empty;
        private string _prevLastName1 = String.Empty;
        private string _prevFirstName2 = String.Empty;
        private string _prevLastName2 = String.Empty;
        private string _gender = String.Empty;
        private string _unitDesignator = String.Empty;
        private string _deck = String.Empty;
        private string _compartmentdesignator = String.Empty;
        private string _overridedUnitDesignator = String.Empty;
        private byte _flag;
        private byte _status;
        private DateTime _syncCreate;
        private DateTime _syncLastUpd;
        private Guid _rowguid = Guid.Empty;
        private object _passengers;
        private string _paxtype;
        private DateTime _dob;
        //added by diana 20130923
        private string _nationality = String.Empty;
        private string _issuingCountry = String.Empty;
        private string _passportNo = String.Empty;
        private decimal _changeFee = 0;
        private DateTime _changeDate;
        private decimal _changeFee2 = 0;
        private DateTime _changeDate2;
        private DateTime _expiryDate;
        //added by ketee 20140610
        private int _changeCount = 0;
        private int _maxChange = 0;
        private int _maxPax1 = 0;
        private int _maxPax2 = 0;
        //end added by diana 20130923
        private string[,] _liftstatus = { { "", "" }, { "", "" } };
        private string[,] _unitdesignators = { { "", "" }, { "", "" } };
        private string[,] _decks = { { "", "" }, { "", "" } };
        private string[,] _compartmentdesignators = { { "", "" }, { "", "" } };
        private string[,] _newcompartmentdesignators = { { "", "" }, { "", "" } };
        private string[,] _newunitdesignators = { { "", "" }, { "", "" } };
        private string[,] _ishotseat = { { "0", "0" }, { "0", "0" } };
        private string[,] _notallowquiet = { { "0", "0" }, { "0", "0" } };
        private string[,] _segment = { { "", "" }, { "", "" } };
        private byte _inft;
        private byte _wchr;

        //added by ketee
        private string _residentCountry = string.Empty;
        private ABS.Navitaire.BookingManager.WeightCategory _weightCategory = Navitaire.BookingManager.WeightCategory.Unmapped;
        private decimal _balanceDue = 0;

        //added by ketee, 20170319
        private string _departSeat;
        private string _departConnectingSeat;
        private string _returnSeat;
        private string _returnConnectingSeat;

        private decimal _seatamount;
        private string _seatgroup;

        #region Public Properties
        public string RecordLocator
        {
            get { return _recordLocator; }
            set { _recordLocator = value; }
        }
        public long PassengerID
        {
            get { return _passengerID; }
            set { _passengerID = value; }
        }
        public long BookingID
        {
            get { return _bookingID; }
            set { _bookingID = value; }
        }

        public long PassengerNumber
        {
            get { return _passengerNumber; }
            set { _passengerNumber = value; }
        }

        public string Title
        {
            get { return _title; }
            set { _title = value; }
        }

        public string FirstName
        {
            get { return _firstName; }
            set { _firstName = value; }
        }

        public string MiddleName
        {
            get { return _middleName; }
            set { _middleName = value; }
        }

        public string LastName
        {
            get { return _lastName; }
            set { _lastName = value; }
        }

        public string PrevFirstName1
        {
            get { return _prevFirstName1; }
            set { _prevFirstName1 = value; }
        }

        public string PrevLastName1
        {
            get { return _prevLastName1; }
            set { _prevLastName1 = value; }
        }

        public string PrevFirstName2
        {
            get { return _prevFirstName2; }
            set { _prevFirstName2 = value; }
        }

        public string PrevLastName2
        {
            get { return _prevLastName2; }
            set { _prevLastName2 = value; }
        }

        public string Gender
        {
            get { return _gender; }
            set { _gender = value; }
        }

        public string UnitDesignator
        {
            get { return _unitDesignator; }
            set { _unitDesignator = value; }
        }

        public string Deck
        {
            get { return _deck; }
            set { _deck = value; }
        }

        public string CompartmentDesignator
        {
            get { return _compartmentdesignator; }
            set { _compartmentdesignator = value; }
        }

        public string OverridedUnitDesignator
        {
            get { return _overridedUnitDesignator; }
            set { _overridedUnitDesignator = value; }
        }

        public byte Flag
        {
            get { return _flag; }
            set { _flag = value; }
        }

        public byte Status
        {
            get { return _status; }
            set { _status = value; }
        }

        public DateTime SyncCreate
        {
            get { return _syncCreate; }
            set { _syncCreate = value; }
        }

        public DateTime SyncLastUpd
        {
            get { return _syncLastUpd; }
            set { _syncLastUpd = value; }
        }

        public Guid rowguid
        {
            get { return _rowguid; }
            set { _rowguid = value; }
        }

        public object Passengers
        {
            get { return _passengers; }
            set { _passengers = value; }
        }

        public DateTime DOB
        {
            get { return _dob; }
            set { _dob = value; }
        }

        //added by diana 20130923
        public string Nationality
        {
            get { return _nationality; }
            set { _nationality = value; }
        }

        public string IssuingCountry
        {
            get { return _issuingCountry; }
            set { _issuingCountry = value; }
        }

        public string PassportNo
        {
            get { return _passportNo; }
            set { _passportNo = value; }
        }

        public decimal ChangeFee
        {
            get { return _changeFee; }
            set { _changeFee = value; }
        }

        public DateTime ChangeDate
        {
            get { return _changeDate; }
            set { _changeDate = value; }
        }

        public decimal ChangeFee2
        {
            get { return _changeFee2; }
            set { _changeFee2 = value; }
        }

        public DateTime ChangeDate2
        {
            get { return _changeDate2; }
            set { _changeDate = value; }
        }

        public DateTime ExpiryDate
        {
            get { return _expiryDate; }
            set { _expiryDate = value; }
        }

        //added by ketee 20140610
        public int ChangeCount
        {
            get { return _changeCount; }
            set { _changeCount = value; }
        }

        public int MaxChange
        {
            get { return _maxChange; }
            set { _maxChange = value; }
        }

        public int MaxPax1
        {
            get { return _maxPax1; }
            set { _maxPax1 = value; }
        }

        public int MaxPax2
        {
            get { return _maxPax2; }
            set { _maxPax2 = value; }
        }

        //end added by diana 20130923
        public string PaxType
        {
            get { return _paxtype; }
            set { _paxtype = value; }
        }

        public byte INFT
        {
            get { return _inft; }
            set { _inft = value; }
        }

        public byte WCHR
        {
            get { return _wchr; }
            set { _wchr = value; }
        }

        public void setLiftStatus(string lift, FlightType FlightTypes)
        {
            switch (FlightTypes)
            {
                case (FlightType.Depart):
                    _liftstatus[0, 0] = lift;
                    break;
                case (FlightType.ConnectingDepart):
                    _liftstatus[0, 1] = lift;
                    break;
                case (FlightType.Return):
                    _liftstatus[1, 0] = lift;
                    break;
                case (FlightType.ConnectingReturn):
                    _liftstatus[1, 1] = lift;
                    break;

            }
        }

        public string getLiftStatus(FlightType FlightTypes)
        {
            switch (FlightTypes)
            {
                case (FlightType.Depart):
                    return _liftstatus[0, 0];

                case (FlightType.ConnectingDepart):
                    return _liftstatus[0, 1];

                case (FlightType.Return):
                    return _liftstatus[1, 0];

                case (FlightType.ConnectingReturn):
                    return _liftstatus[1, 1];
                default:
                    return string.Empty;

            }
        }

        public void setSegment(string segment, FlightType FlightTypes)
        {
            switch (FlightTypes)
            {
                case (FlightType.Depart):
                    _segment[0, 0] = segment;
                    break;
                case (FlightType.ConnectingDepart):
                    _segment[0, 1] = segment;
                    break;
                case (FlightType.Return):
                    _segment[1, 0] = segment;
                    break;
                case (FlightType.ConnectingReturn):
                    _segment[1, 1] = segment;
                    break;

            }
        }

        public string getSegment(FlightType FlightTypes)
        {
            switch (FlightTypes)
            {
                case (FlightType.Depart):
                    return _segment[0, 0];

                case (FlightType.ConnectingDepart):
                    return _segment[0, 1];

                case (FlightType.Return):
                    return _segment[1, 0];

                case (FlightType.ConnectingReturn):
                    return _segment[1, 1];
                default:
                    return string.Empty;

            }
        }

        public void setIsHotSeat(string hotseat, FlightType FlightTypes)
        {
            switch (FlightTypes)
            {
                case (FlightType.Depart):
                    _ishotseat[0, 0] = hotseat;
                    break;
                case (FlightType.ConnectingDepart):
                    _ishotseat[0, 1] = hotseat;
                    break;
                case (FlightType.Return):
                    _ishotseat[1, 0] = hotseat;
                    break;
                case (FlightType.ConnectingReturn):
                    _ishotseat[1, 1] = hotseat;
                    break;

            }
        }

        public string getIsHotSeat(FlightType FlightTypes)
        {
            switch (FlightTypes)
            {
                case (FlightType.Depart):
                    return _ishotseat[0, 0];

                case (FlightType.ConnectingDepart):
                    return _ishotseat[0, 1];

                case (FlightType.Return):
                    return _ishotseat[1, 0];

                case (FlightType.ConnectingReturn):
                    return _ishotseat[1, 1];
                default:
                    return string.Empty;

            }
        }

        public void setNotAllowQuiet(string notallowquiet, FlightType FlightTypes)
        {
            switch (FlightTypes)
            {
                case (FlightType.Depart):
                    _notallowquiet[0, 0] = notallowquiet;
                    break;
                case (FlightType.ConnectingDepart):
                    _notallowquiet[0, 1] = notallowquiet;
                    break;
                case (FlightType.Return):
                    _notallowquiet[1, 0] = notallowquiet;
                    break;
                case (FlightType.ConnectingReturn):
                    _notallowquiet[1, 1] = notallowquiet;
                    break;

            }
        }

        public string getNotAllowQuiet(FlightType FlightTypes)
        {
            switch (FlightTypes)
            {
                case (FlightType.Depart):
                    return _notallowquiet[0, 0];

                case (FlightType.ConnectingDepart):
                    return _notallowquiet[0, 1];

                case (FlightType.Return):
                    return _notallowquiet[1, 0];

                case (FlightType.ConnectingReturn):
                    return _notallowquiet[1, 1];
                default:
                    return string.Empty;

            }
        }

        public void setUnitDesignator(string UnitDesignator, FlightType FlightTypes)
        {
            switch (FlightTypes)
            {
                case (FlightType.Depart):
                    _unitdesignators[0, 0] = UnitDesignator;
                    break;
                case (FlightType.ConnectingDepart):
                    _unitdesignators[0, 1] = UnitDesignator;
                    break;
                case (FlightType.Return):
                    _unitdesignators[1, 0] = UnitDesignator;
                    break;
                case (FlightType.ConnectingReturn):
                    _unitdesignators[1, 1] = UnitDesignator;
                    break;
            }
        }

        public string getUnitDesignator(FlightType FlightTypes)
        {
            switch (FlightTypes)
            {
                case (FlightType.Depart):
                    return _unitdesignators[0, 0].ToString();

                case (FlightType.ConnectingDepart):
                    return _unitdesignators[0, 1].ToString();

                case (FlightType.Return):
                    return _unitdesignators[1, 0].ToString();

                case (FlightType.ConnectingReturn):
                    return _unitdesignators[1, 1].ToString();

                default:
                    return string.Empty;

            }
        }

        public void setNewUnitDesignator(string UnitDesignator, FlightType FlightTypes)
        {
            switch (FlightTypes)
            {
                case (FlightType.Depart):
                    _newunitdesignators[0, 0] = UnitDesignator;
                    break;
                case (FlightType.ConnectingDepart):
                    _newunitdesignators[0, 1] = UnitDesignator;
                    break;
                case (FlightType.Return):
                    _newunitdesignators[1, 0] = UnitDesignator;
                    break;
                case (FlightType.ConnectingReturn):
                    _newunitdesignators[1, 1] = UnitDesignator;
                    break;
            }
        }

        public string getNewUnitDesignator(FlightType FlightTypes)
        {
            switch (FlightTypes)
            {
                case (FlightType.Depart):
                    return _newunitdesignators[0, 0].ToString();

                case (FlightType.ConnectingDepart):
                    return _newunitdesignators[0, 1].ToString();

                case (FlightType.Return):
                    return _newunitdesignators[1, 0].ToString();

                case (FlightType.ConnectingReturn):
                    return _newunitdesignators[1, 1].ToString();

                default:
                    return string.Empty;

            }
        }

        public void setDeck(string Deck, FlightType FlightTypes)
        {
            switch (FlightTypes)
            {
                case (FlightType.Depart):
                    _decks[0, 0] = Deck;
                    break;
                case (FlightType.ConnectingDepart):
                    _decks[0, 1] = Deck;
                    break;
                case (FlightType.Return):
                    _decks[1, 0] = Deck;
                    break;
                case (FlightType.ConnectingReturn):
                    _decks[1, 1] = Deck;
                    break;
            }
        }

        public string getDeck(FlightType FlightTypes)
        {
            switch (FlightTypes)
            {
                case (FlightType.Depart):
                    return _decks[0, 0].ToString();

                case (FlightType.ConnectingDepart):
                    return _decks[0, 1].ToString();

                case (FlightType.Return):
                    return _decks[1, 0].ToString();

                case (FlightType.ConnectingReturn):
                    return _decks[1, 1].ToString();

                default:
                    return string.Empty;

            }
        }

        public void setCompartmentDesignator(string CompartmentDesignator, FlightType FlightTypes)
        {
            switch (FlightTypes)
            {
                case (FlightType.Depart):
                    _compartmentdesignators[0, 0] = CompartmentDesignator;
                    break;
                case (FlightType.ConnectingDepart):
                    _compartmentdesignators[0, 1] = CompartmentDesignator;
                    break;
                case (FlightType.Return):
                    _compartmentdesignators[1, 0] = CompartmentDesignator;
                    break;
                case (FlightType.ConnectingReturn):
                    _compartmentdesignators[1, 1] = CompartmentDesignator;
                    break;
            }
        }

        public string getCompartmentDesignator(FlightType FlightTypes)
        {
            switch (FlightTypes)
            {
                case (FlightType.Depart):
                    return _compartmentdesignators[0, 0].ToString();

                case (FlightType.ConnectingDepart):
                    return _compartmentdesignators[0, 1].ToString();

                case (FlightType.Return):
                    return _compartmentdesignators[1, 0].ToString();

                case (FlightType.ConnectingReturn):
                    return _compartmentdesignators[1, 1].ToString();

                default:
                    return string.Empty;

            }
        }

        public void setNewCompartmentDesignator(string CompartmentDesignator, FlightType FlightTypes)
        {
            switch (FlightTypes)
            {
                case (FlightType.Depart):
                    _newcompartmentdesignators[0, 0] = CompartmentDesignator;
                    break;
                case (FlightType.ConnectingDepart):
                    _newcompartmentdesignators[0, 1] = CompartmentDesignator;
                    break;
                case (FlightType.Return):
                    _newcompartmentdesignators[1, 0] = CompartmentDesignator;
                    break;
                case (FlightType.ConnectingReturn):
                    _newcompartmentdesignators[1, 1] = CompartmentDesignator;
                    break;
            }
        }

        public string getNewCompartmentDesignator(FlightType FlightTypes)
        {
            switch (FlightTypes)
            {
                case (FlightType.Depart):
                    return _newcompartmentdesignators[0, 0].ToString();

                case (FlightType.ConnectingDepart):
                    return _newcompartmentdesignators[0, 1].ToString();

                case (FlightType.Return):
                    return _newcompartmentdesignators[1, 0].ToString();

                case (FlightType.ConnectingReturn):
                    return _newcompartmentdesignators[1, 1].ToString();

                default:
                    return string.Empty;

            }
        }

        public string ResidentCountry
        {
            get { return _residentCountry; }
            set { _residentCountry = value; }
        }

        public ABS.Navitaire.BookingManager.WeightCategory WeightCategory
        {
            get { return _weightCategory; }
            set { _weightCategory = value; }
        }

        public decimal BalanceDue
        {
            get { return _balanceDue; }
            set { _balanceDue = value; }
        }

        //added by ketee, 20170319
        public string DepartSeat
        {
            get { return _departSeat; }
            set { _departSeat = value; }
        }

        public string DepartConnectingSeat
        {
            get { return _departConnectingSeat; }
            set { _departConnectingSeat = value; }
        }
        public string ReturnSeat
        {
            get { return _returnSeat; }
            set { _returnSeat = value; }
        }
        public string ReturnConnectingSeat
        {
            get { return _returnConnectingSeat; }
            set { _returnConnectingSeat = value; }
        }

        public decimal SeatAmount
        {
            get { return _seatamount; }
            set { _seatamount = value; }
        }

        public string SeatGroup
        {
            get { return _seatgroup; }
            set { _seatgroup = value; }
        }
        #endregion

    }

    public class PaymentContainer
    {
        private int _PaymentMethodType = 0;
        private string _PaymentMethodCode = string.Empty;
        private string _CurrencyCode = string.Empty;
        private Decimal _PaymentAmount = 0;
        private Decimal _CollectedAmount = 0;
        private int _Status = 0;
        private int _PaymentNumber = 0;
        private string _AuthorizationCode = string.Empty;
        private string _AccountNumber = string.Empty;
        private string _PaymentText = string.Empty;
        private string _MerchantID = string.Empty;
        private long _AccountNumberID = 0;
        private string _RecordLocator = string.Empty;
        private DateTime _PaymentDate;
        //added by ketee, 20130625
        private decimal _CurrencyRate = 0;

        //added by dianaa 20131112
        private DateTime _holdDateTime;

        public int PaymentMethodType
        {
            get { return _PaymentMethodType; }
            set { _PaymentMethodType = value; }
        }

        public string PaymentMethodCode
        {
            get { return _PaymentMethodCode; }
            set { _PaymentMethodCode = value; }
        }

        public string CurrencyCode
        {
            get { return _CurrencyCode; }
            set { _CurrencyCode = value; }
        }

        public Decimal PaymentAmount
        {
            get { return _PaymentAmount; }
            set { _PaymentAmount = value; }
        }

        public Decimal CollectedAmount
        {
            get { return _CollectedAmount; }
            set { _CollectedAmount = value; }
        }

        public int PaymentStatus
        {
            get { return _Status; }
            set { _Status = value; }
        }

        public int PaymentNumber
        {
            get { return _PaymentNumber; }
            set { _PaymentNumber = value; }
        }

        public string AuthorizationCode
        {
            get { return _AuthorizationCode; }
            set { _AuthorizationCode = value; }
        }

        public string AccountNumber
        {
            get { return _AccountNumber; }
            set { _AccountNumber = value; }
        }

        public string PaymentText
        {
            get { return _PaymentText; }
            set { _PaymentText = value; }
        }

        public string MerchantID
        {
            get { return _MerchantID; }
            set { _MerchantID = value; }
        }

        public string RecordLocator
        {
            get { return _RecordLocator; }
            set { _RecordLocator = value; }
        }

        public long AccountNumberID
        {
            get { return _AccountNumberID; }
            set { _AccountNumberID = value; }
        }

        public DateTime PaymentDate
        {
            get { return _PaymentDate; }
            set { _PaymentDate = value; }
        }

        //added by ketee, 20130625
        public decimal CurrencyRate
        {
            get { return _CurrencyRate; }
            set { _CurrencyRate = value; }
        }

        public DateTime HoldDateTime
        {
            get { return _holdDateTime; }
            set { _holdDateTime = value; }
        }
    }

    #endregion

    public partial class BookingControl : Shared.CoreBase
    {

        #region declaration
        private SessionContextLogic sesscon = new SessionContextLogic();
		//GeneralControl objGeneral = new ABS.Logic.GroupBooking.GeneralControl();
		//ILog log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
		LogControl log = new LogControl();
        SystemLog SystemLog = new SystemLog();

		ABS.Logic.GroupBooking.GeneralControl objGeneral = new ABS.Logic.GroupBooking.GeneralControl();

		//string ConnStr = System.Configuration.ConfigurationManager.ConnectionStrings["ConnStr"].ToString();
		string ConnStr = "Data Source=172.20.145.11;Initial Catalog = GBSPILOT; Persist Security Info=True;User ID = gbs; Password=p@ssw0rd; connection timeout = 60; Application Name = GBS";
		ArrayList lstSQL = new ArrayList();
        #endregion

        public enum TransactionFilter
        {
            Default = 0,
            TransID = 1,
            RecordLocator = 2,
            AgentID = 3,
            AgentName = 4
        }

        public class searchcondition
        {
            public searchcondition() { }
            private string _Carrier;
            public string Carrier
            {
                set { _Carrier = value; }
                get { return _Carrier; }
            }
            private string _Departure;
            public string Departure
            {
                set { _Departure = value; }
                get { return _Departure; }
            }
            private string _Arrival;
            public string Arrival
            {
                set { _Arrival = value; }
                get { return _Arrival; }
            }
            private bool _ifOneWay;
            public bool ifOneWay
            {
                set { _ifOneWay = value; }
                get { return _ifOneWay; }
            }
            private string _Currency;
            public string Currency
            {
                set { _Currency = value; }
                get { return _Currency; }
            }
            private DateTime _DepartDate;
            public DateTime DepartDate
            {
                set { _DepartDate = value; }
                get { return _DepartDate; }
            }
            private DateTime _ReturnDate;
            public DateTime ReturnDate
            {
                set { _ReturnDate = value; }
                get { return _ReturnDate; }
            }
            private int _PaxNum;
            public int PaxNum
            {
                set { _PaxNum = value; }
                get { return _PaxNum; }
            }
            private int _GuestNum;
            public int GuestNum
            {
                set { _GuestNum = value; }
                get { return _GuestNum; }
            }
            private int _ChildNum;
            public int ChildNum
            {
                set { _ChildNum = value; }
                get { return _ChildNum; }
            }
            private int _InfantNum;
            public int InfantNum
            {
                set { _InfantNum = value; }
                get { return _InfantNum; }
            }
            //added by ketee
            private string _FlightNumber;
            public string FlightNumber
            {
                set { _FlightNumber = value; }
                get { return _FlightNumber; }
            }
            private string _PromoCode;
            public string PromoCode
            {
                set { _PromoCode = value; }
                get { return _PromoCode; }
            }
        }
        private searchcondition GetReturnModel(searchcondition model)
        {
            searchcondition model2 = new searchcondition();
            model2.GuestNum = model.GuestNum;
            model2.PaxNum = model.PaxNum;
            model2.ChildNum = model.ChildNum;
            model2.Arrival = model.Departure;
            model2.Departure = model.Arrival;
            model2.Carrier = model.Carrier;
            model2.Currency = model.Currency;
            model2.DepartDate = model.ReturnDate;
            model2.PromoCode = model.PromoCode;

            return model2;
        }

        public class TemFlight
        {
            public virtual decimal? TemFlightApt
            {
                get;
                set;
            }
            public virtual decimal? TemFlightPaxFee
            {
                get;
                set;
            }
            public virtual decimal? TemFlightFuel
            {
                get;
                set;
            }
            public virtual decimal? TemFlightOth
            {
                get;
                set;
            }
            public virtual decimal? TemFlightInfant
            {
                get;
                set;
            }
            public virtual decimal? TemFlightDisc
            {
                get;
                set;
            }
            public virtual decimal? TemFlightPromoDisc
            {
                get;
                set;
            }
            public virtual decimal? TemFlightServiceCharge
            {
                get;
                set;
            }
            //added by ketee 20130625
            public virtual decimal? TemFlightAptChd
            {
                get;
                set;
            }
            public virtual decimal? TemFlightFuelChd
            {
                get;
                set;
            }
            public virtual decimal? TemFlightOthChd
            {
                get;
                set;
            }
            public virtual decimal? TemFlightDiscChd
            {
                get;
                set;
            }
            public virtual decimal? TemFlightPromoDiscChd
            {
                get;
                set;
            }
            public virtual decimal? TemFlightServiceChargeChd
            {
                get;
                set;
            }
            public virtual decimal? temFlightfarePriceChd
            {
                get;
                set;
            }
            public virtual decimal TemFlightTotalPriceChd
            {
                get;
                set;
            }
            //End add
            public virtual string TemFlightArrival
            {
                get;
                set;
            }
            public virtual decimal TemFlightAveragePrice
            {
                get;
                set;
            }
            public virtual string TemFlightCarrierCode
            {
                get;
                set;
            }
            public virtual string TemFlightCarrierCode2
            {
                get;
                set;
            }
            public virtual string TemFlightCurrencyCode
            {
                get;
                set;
            }
            public virtual DateTime TemFlightDate
            {
                get;
                set;
            }
            public virtual string TemFlightDeparture
            {
                get;
                set;
            }
            public virtual string TemFlightFlightNumber
            {
                get;
                set;
            }
            public virtual string TemFlightFlightNumber2
            {
                get;
                set;
            }
            //added by ketee, opSuffix
            public virtual string TemFlightOpSuffix
            {
                get;
                set;
            }
            public virtual string TemFlightOpSuffix2
            {
                get;
                set;
            }
            public virtual decimal TemFlightTotalPrice
            {
                get;
                set;
            }

            public virtual decimal? temFlightfarePrice
            {
                get;
                set;
            }
            public virtual int TemFlightId
            {
                get;
                set;
            }
            public virtual bool? TemFlightIfReturn
            {
                get;
                set;
            }
            public virtual string TemFlightSignature
            {
                get;
                set;
            }
            public virtual DateTime? TemFlightSta
            {
                get;
                set;
            }
            public virtual DateTime? TemFlightStd
            {
                get;
                set;
            }
            public virtual string TemFlightInternational
            {
                get;
                set;
            }
            public virtual decimal TemFlightTotalAmount
            {
                get;
                set;
            }
            public virtual string TemFlightJourneySellKey
            {
                get;
                set;
            }
            public virtual string TemFlightAgentName
            {
                get;
                set;
            }
            public virtual int TemFlightPaxNum
            {
                get;
                set;
            }
            public virtual int TemFlightADTNum
            {
                get;
                set;
            }
            public virtual int TemFlightCHDNum
            {
                get;
                set;
            }
            public virtual string TemFlightTransit
            {
                get;
                set;
            }
            public virtual DateTime? TemFlightSta2
            {
                get;
                set;
            }
            public virtual DateTime? TemFlightStd2
            {
                get;
                set;
            }
            public virtual string TemFlightPromoCode
            {
                get;
                set;
            }
        }

        public class TemClassofService
        {
            public virtual string TemClassClass
            {
                get;
                set;
            }
            public virtual string TemClassClass2
            {
                get;
                set;
            }
            public virtual decimal? TemClassClassPrice
            {
                get;
                set;
            }
            public virtual decimal? TemClassFullPrice
            {
                get;
                set;
            }
            public virtual string TemClassFlightNumber
            {
                get;
                set;
            }
            public virtual int TemClassPersonNumber
            {
                get;
                set;
            }
            public virtual int TemClassAdultNumber
            {
                get;
                set;
            }
            public virtual int TemClassChildNumber
            {
                get;
                set;
            }
            public virtual string TemClassSignature
            {
                get;
                set;
            }
            public virtual string TemClassFareSellKey
            {
                get;
                set;
            }
            public virtual string TemClassFareSellKey2
            {
                get;
                set;
            }
            public virtual string TemClassAgentName
            {
                get;
                set;
            }
            public virtual string TemClassSellSignature
            {
                get;
                set;
            }
            public virtual string TemClassId
            {
                get;
                set;
            }
            public virtual string TempFareApplicationType
            {
                get;
                set;
            }
            public virtual string TempFareApplicationType2
            {
                get;
                set;
            }
            public virtual decimal? TempPromoDiscCharge
            {
                get;
                set;
            }
        }

        public class ClassPrice
        {
            public virtual string ClassID
            {
                get;
                set;
            }
            public virtual decimal FarePrice
            {
                get;
                set;
            }
            public virtual decimal FullPrice
            {
                get;
                set;
            }
            public virtual decimal PaxFeeChrg
            {
                get;
                set;
            }
            public virtual decimal TaxChrg
            {
                get;
                set;
            }
            public virtual decimal OthChrg
            {
                get;
                set;
            }
            public virtual decimal DiscChrg
            {
                get;
                set;
            }
            public virtual decimal PromoDiscChrg
            {
                get;
                set;
            }
            public virtual decimal FuelChrg
            {
                get;
                set;
            }
            public virtual decimal ServChrg
            {
                get;
                set;
            }
            public virtual decimal SSRChrg
            {
                get;
                set;
            }
            public virtual decimal BaggageChrg
            {
                get;
                set;
            }
            public virtual decimal MealChrg
            {
                get;
                set;
            }
            public virtual decimal SportChrg
            {
                get;
                set;
            }
            public virtual decimal InsureChrg//added by romy, 20170811, insurance
            {
                get;
                set;
            }
            public virtual decimal ComfortChrg
            {
                get;
                set;
            }
            public virtual decimal SeatChrg
            {
                get;
                set;
            }
            public virtual decimal ServVAT
            {
                get;
                set;
            }
            public virtual decimal InfantChrg
            {
                get;
                set;
            }
            //added by ketee 20130625
            public virtual decimal TAxChrgChd
            {
                get;
                set;
            }

            //added by ketee 20130625
            public virtual decimal CurrencyRate
            {
                get;
                set;
            }

            public virtual int NumOfPax
            {
                get;
                set;
            }
        }

        public class ClassFees
        {

        }

        #region BookingEnquiry

        public string CheckEnqExist(string AgentID, string origin, string destination)
        {
            DataTable dt;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("EN_ENQUIRYLOG.EnquiryID");
                lstFields.Add("EN_ENQUIRYLOG.AgentID");
                lstFields.Add("EN_ENQUIRYLOG.EnquiryDate");
                lstFields.Add("EN_ENQUIRYLOG.LastEnquiryDate");
                lstFields.Add("EN_ENQUIRYLOG.Origins");
                lstFields.Add("EN_ENQUIRYLOG.Destination");
                lstFields.Add("EN_ENQUIRYLOG.NoOfAttempt");
                lstFields.Add("EN_ENQUIRYLOG.rowguid");
                lstFields.Add("EN_ENQUIRYLOG.SyncCreate");
                lstFields.Add("EN_ENQUIRYLOG.SyncLastUpd");
                lstFields.Add("EN_ENQUIRYLOG.CreateBy");

                strFields = GetSqlFields(lstFields);
                strFilter = " WHERE EN_ENQUIRYLOG.AgentID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, AgentID) + "' and EN_ENQUIRYLOG.Origins ='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, origin) + "' and EN_ENQUIRYLOG.Destination='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, destination) + "' and CAST(EN_ENQUIRYLOG.EnquiryDate as date) = CAST(GETDATE() as date)";
                strSQL = "SELECT " + strFields + " FROM EN_ENQUIRYLOG " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];
                    return (string)drRow["EnquiryID"];
                }
                else
                {
                    return "";
                }
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                return "";
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public void RollBackEnquiry(string pEnquiryID)
        {
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                strFields = GetSqlFields(lstFields);
                strFilter = " WHERE EN_ENQUIRYLOG.EnquiryID ='" + pEnquiryID + "'";
                strSQL = "UPDATE EN_ENQUIRYLOG SET EN_ENQUIRYLOG.NoOfAttempt = 0,EN_ENQUIRYLOG.SyncLastUpd=GETDATE() " + strFilter;
                objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
            }
            finally
            {
                objSQL.Dispose();
            }
        }

        public BookingEnquiry GetSingleEN_ENQUIRYLOG(string pEnquiryID, string pAgentID, DateTime pEnquiryDate)
        {
            BookingEnquiry objEN_ENQUIRYLOG_Info;
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("EN_ENQUIRYLOG.EnquiryID");
                lstFields.Add("EN_ENQUIRYLOG.AgentID");
                lstFields.Add("EN_ENQUIRYLOG.EnquiryDate");
                lstFields.Add("EN_ENQUIRYLOG.LastEnquiryDate");
                lstFields.Add("EN_ENQUIRYLOG.Origins");
                lstFields.Add("EN_ENQUIRYLOG.Destination");
                lstFields.Add("EN_ENQUIRYLOG.NoOfAttempt");
                lstFields.Add("EN_ENQUIRYLOG.rowguid");
                lstFields.Add("EN_ENQUIRYLOG.SyncCreate");
                lstFields.Add("EN_ENQUIRYLOG.SyncLastUpd");
                lstFields.Add("EN_ENQUIRYLOG.CreateBy");

                strFields = GetSqlFields(lstFields);
                strFilter = " WHERE CAST(EN_ENQUIRYLOG.EnquiryDate as date) = CAST(GETDATE() as date) and EN_ENQUIRYLOG.AgentID ='" + pAgentID + "' and EN_ENQUIRYLOG.EnquiryID ='" + pEnquiryID + "'";
                strSQL = "SELECT " + strFields + " FROM EN_ENQUIRYLOG " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];

                    objEN_ENQUIRYLOG_Info = new BookingEnquiry();
                    objEN_ENQUIRYLOG_Info.EnquiryID = (string)drRow["EnquiryID"];
                    objEN_ENQUIRYLOG_Info.AgentID = (string)drRow["AgentID"];
                    objEN_ENQUIRYLOG_Info.EnquiryDate = (DateTime)drRow["EnquiryDate"];
                    if (DateTime.TryParse(drRow["LastEnquiryDate"].ToString(), out dateValue)) objEN_ENQUIRYLOG_Info.LastEnquiryDate = (DateTime)drRow["LastEnquiryDate"];
                    objEN_ENQUIRYLOG_Info.Origins = (string)drRow["Origins"];
                    objEN_ENQUIRYLOG_Info.Destination = (string)drRow["Destination"];
                    objEN_ENQUIRYLOG_Info.NoOfAttempt = (int)drRow["NoOfAttempt"];
                    objEN_ENQUIRYLOG_Info.rowguid = (Guid)drRow["rowguid"];
                    if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objEN_ENQUIRYLOG_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                    if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objEN_ENQUIRYLOG_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                    objEN_ENQUIRYLOG_Info.CreateBy = (string)drRow["CreateBy"];
                    return objEN_ENQUIRYLOG_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("EN_ENQUIRYLOG does not exist.");
                }
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public BookingEnquiry SaveEN_ENQUIRYLOG(BookingEnquiry pEN_ENQUIRYLOG_Info, EnumSaveType pType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                objSQL.AddField("EnquiryID", pEN_ENQUIRYLOG_Info.EnquiryID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AgentID", pEN_ENQUIRYLOG_Info.AgentID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("EnquiryDate", pEN_ENQUIRYLOG_Info.EnquiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LastEnquiryDate", pEN_ENQUIRYLOG_Info.LastEnquiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Origins", pEN_ENQUIRYLOG_Info.Origins, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Destination", pEN_ENQUIRYLOG_Info.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("NoOfAttempt", pEN_ENQUIRYLOG_Info.NoOfAttempt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", pEN_ENQUIRYLOG_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncLastUpd", pEN_ENQUIRYLOG_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CreateBy", pEN_ENQUIRYLOG_Info.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                switch (pType)
                {
                    case EnumSaveType.Insert:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "EN_ENQUIRYLOG", string.Empty);
                        break;
                    case EnumSaveType.Update:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "EN_ENQUIRYLOG", "EN_ENQUIRYLOG.EnquiryID='" + pEN_ENQUIRYLOG_Info.EnquiryID + "' and EN_ENQUIRYLOG.AgentID='" + pEN_ENQUIRYLOG_Info.AgentID + "' and CAST(EN_ENQUIRYLOG.EnquiryDate as date) = cast(GETDATE() as date) ");
                        break;
                }
                lstSQL.Add(strSQL);
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return null;
                }
                return GetSingleEN_ENQUIRYLOG(pEN_ENQUIRYLOG_Info.EnquiryID, pEN_ENQUIRYLOG_Info.AgentID, pEN_ENQUIRYLOG_Info.EnquiryDate);
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        /// <summary>
        /// added by anton
        /// for filter generate
        /// </summary>
        /// <param name="Fields"></param>
        /// <returns></returns>
        private static String GetFilterFields(List<string> Fields)
        {
            String strFields = string.Empty;
            if (Fields != null)
            {
                foreach (string sField in Fields)
                {
                    if (strFields == string.Empty)
                    {
                        strFields = " WHERE " + sField;
                    }
                    else
                    {
                        strFields += " AND " + sField;
                    }
                }
            }
            return strFields;
        }

        private static String GetSqlFields(List<string> Fields)
        {
            String strFields = string.Empty;
            if (Fields != null)
            {
                foreach (string sField in Fields)
                {
                    if (strFields == string.Empty)
                    {
                        strFields = sField;
                    }
                    else
                    {
                        strFields += ", " + sField;
                    }
                }
            }
            return strFields;
        }
        #endregion

        #region bookingsuspendlist
        public string CheckSuspExist(
                   string AgentID,
           string Origins,
           string Destination)
        {
            DataTable dt;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("EN_SUSPENDLIST.SuspendID");

                strFields = GetSqlFields(lstFields);
                strFilter = " WHERE EN_SUSPENDLIST.AgentID='" + AgentID + "' and EN_SUSPENDLIST.Origins='" + Origins + "' and EN_SUSPENDLIST.Destination='" + Destination + "' and cast(EN_SUSPENDLIST.SuspendDate as date) = cast(GETDATE() as date) ";
                strSQL = "SELECT " + strFields + " FROM EN_SUSPENDLIST " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];
                    return (string)drRow["SuspendID"];
                }
                else
                {
                    return "";
                }
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                return "";
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }


        public bool CheckStillSuspend(
                        string AgentID,
                string Origins,
                string Destination)
        {
            DataTable dt;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("EN_SUSPENDLIST.AgentID");

                strFields = GetSqlFields(lstFields);
                strFilter = " WHERE EN_SUSPENDLIST.AgentID='" + AgentID + "' and EN_SUSPENDLIST.Origins='" + Origins + "' and EN_SUSPENDLIST.Destination='" + Destination + "' and CAST(EN_SUSPENDLIST.SuspendExpiry as date) >= cast(GetDate() as date)";
                strSQL = "SELECT " + strFields + " FROM EN_SUSPENDLIST " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {

                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                return false;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public int GetTotalSuspend(
                        string AgentID)
        {
            DataTable dt;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                strFilter = " WHERE EN_SUSPENDLIST.AgentID='" + AgentID + "' and CAST(EN_SUSPENDLIST.SuspendExpiry as date)  >= CAST(GETDATE() as date)";
                strSQL = "SELECT ISNULL(SUM(EN_SUSPENDLIST.SuspendAttempt),0) as TotalSuspend FROM EN_SUSPENDLIST " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];
                    return (int)drRow["TotalSuspend"];
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                return 0;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<BookingSuspendList> GetAllEN_SUSPENDLIST()
        {
            BookingSuspendList objEN_SUSPENDLIST_Info;
            List<BookingSuspendList> objListEN_SUSPENDLIST_Info = new List<BookingSuspendList>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                strSQL = "SELECT * FROM EN_SUSPENDLIST ";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objEN_SUSPENDLIST_Info = new BookingSuspendList();
                        objEN_SUSPENDLIST_Info.SuspendID = (string)drRow["SuspendID"];
                        objEN_SUSPENDLIST_Info.AgentID = (string)drRow["AgentID"];
                        objEN_SUSPENDLIST_Info.Origins = (string)drRow["Origins"];
                        objEN_SUSPENDLIST_Info.Destination = (string)drRow["Destination"];
                        if (DateTime.TryParse(drRow["SuspendDate"].ToString(), out dateValue)) objEN_SUSPENDLIST_Info.SuspendDate = (DateTime)drRow["SuspendDate"];
                        objEN_SUSPENDLIST_Info.LastEnquiryID = (string)drRow["LastEnquiryID"];
                        objEN_SUSPENDLIST_Info.SuspendAttempt = (int)drRow["SuspendAttempt"];
                        if (DateTime.TryParse(drRow["SuspendExpiry"].ToString(), out dateValue)) objEN_SUSPENDLIST_Info.SuspendExpiry = (DateTime)drRow["SuspendExpiry"];
                        objEN_SUSPENDLIST_Info.rowguid = (Guid)drRow["rowguid"];
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objEN_SUSPENDLIST_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objEN_SUSPENDLIST_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objEN_SUSPENDLIST_Info.CreateBy = (string)drRow["CreateBy"];
                        objListEN_SUSPENDLIST_Info.Add(objEN_SUSPENDLIST_Info);
                    }
                    return objListEN_SUSPENDLIST_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("EN_SUSPENDLIST does not exist.");
                }
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public BookingSuspendList GetSingleEN_SUSPENDLIST(
                string SuspendID,
        string AgentID,
        string Origins,
        string Destination)
        {
            BookingSuspendList objEN_SUSPENDLIST_Info;
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("EN_SUSPENDLIST.SuspendID");
                lstFields.Add("EN_SUSPENDLIST.AgentID");
                lstFields.Add("EN_SUSPENDLIST.Origins");
                lstFields.Add("EN_SUSPENDLIST.Destination");
                lstFields.Add("EN_SUSPENDLIST.SuspendDate");
                lstFields.Add("EN_SUSPENDLIST.LastEnquiryID");
                lstFields.Add("EN_SUSPENDLIST.SuspendAttempt");
                lstFields.Add("EN_SUSPENDLIST.SuspendExpiry");
                lstFields.Add("EN_SUSPENDLIST.rowguid");
                lstFields.Add("EN_SUSPENDLIST.SyncCreate");
                lstFields.Add("EN_SUSPENDLIST.SyncLastUpd");
                lstFields.Add("EN_SUSPENDLIST.CreateBy");

                strFields = GetSqlFields(lstFields);
                strFilter = " WHERE EN_SUSPENDLIST.Destination='" + Destination + "'";
                strSQL = "SELECT " + strFields + " FROM EN_SUSPENDLIST " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];

                    objEN_SUSPENDLIST_Info = new BookingSuspendList();
                    objEN_SUSPENDLIST_Info.SuspendID = (string)drRow["SuspendID"];
                    objEN_SUSPENDLIST_Info.AgentID = (string)drRow["AgentID"];
                    objEN_SUSPENDLIST_Info.Origins = (string)drRow["Origins"];
                    objEN_SUSPENDLIST_Info.Destination = (string)drRow["Destination"];
                    if (DateTime.TryParse(drRow["SuspendDate"].ToString(), out dateValue)) objEN_SUSPENDLIST_Info.SuspendDate = (DateTime)drRow["SuspendDate"];
                    objEN_SUSPENDLIST_Info.LastEnquiryID = (string)drRow["LastEnquiryID"];
                    objEN_SUSPENDLIST_Info.SuspendAttempt = (int)drRow["SuspendAttempt"];
                    if (DateTime.TryParse(drRow["SuspendExpiry"].ToString(), out dateValue)) objEN_SUSPENDLIST_Info.SuspendExpiry = (DateTime)drRow["SuspendExpiry"];
                    objEN_SUSPENDLIST_Info.rowguid = (Guid)drRow["rowguid"];
                    if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objEN_SUSPENDLIST_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                    if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objEN_SUSPENDLIST_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                    objEN_SUSPENDLIST_Info.CreateBy = (string)drRow["CreateBy"];
                    return objEN_SUSPENDLIST_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("EN_SUSPENDLIST does not exist.");
                }
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public BookingSuspendList SaveEN_SUSPENDLIST(BookingSuspendList pEN_SUSPENDLIST_Info, EnumSaveType pType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                objSQL.AddField("SuspendID", pEN_SUSPENDLIST_Info.SuspendID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AgentID", pEN_SUSPENDLIST_Info.AgentID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Origins", pEN_SUSPENDLIST_Info.Origins, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Destination", pEN_SUSPENDLIST_Info.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SuspendDate", pEN_SUSPENDLIST_Info.SuspendDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LastEnquiryID", pEN_SUSPENDLIST_Info.LastEnquiryID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SuspendAttempt", pEN_SUSPENDLIST_Info.SuspendAttempt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SuspendExpiry", pEN_SUSPENDLIST_Info.SuspendExpiry, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", pEN_SUSPENDLIST_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncLastUpd", pEN_SUSPENDLIST_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CreateBy", pEN_SUSPENDLIST_Info.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                switch (pType)
                {
                    case EnumSaveType.Insert:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "EN_SUSPENDLIST", string.Empty);
                        break;
                    case EnumSaveType.Update:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "EN_SUSPENDLIST", "EN_SUSPENDLIST.SuspendID='" + pEN_SUSPENDLIST_Info.SuspendID + "' and EN_SUSPENDLIST.AgentID='" + pEN_SUSPENDLIST_Info.AgentID + "' and EN_SUSPENDLIST.Origins='" + pEN_SUSPENDLIST_Info.Origins + "' and EN_SUSPENDLIST.Destination='" + pEN_SUSPENDLIST_Info.Destination + "'");
                        break;
                }
                lstSQL.Add(strSQL);
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return null;
                }
                return GetSingleEN_SUSPENDLIST(pEN_SUSPENDLIST_Info.SuspendID, pEN_SUSPENDLIST_Info.AgentID, pEN_SUSPENDLIST_Info.Origins, pEN_SUSPENDLIST_Info.Destination);
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }
        #endregion

        #region BookingTransactionMain
        public List<BookingTransactionMain> GETALLPassengerChangeName(string AgentID, string AgentName, int Status)
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBookingTransMain = new List<BookingTransactionMain>();
            DataTable dt;
            DateTime dateValue;
            decimal numValue;
            String strSQL = string.Empty;
            string strFilter = string.Empty;
            try
            {

                if (AgentID != string.Empty)
                    strFilter += "AND tm.AgentID='" + AgentID + "' ";
                if (AgentName != string.Empty)
                    strFilter += "AND (ContactFirstName LIKE '%" + AgentName + "%' OR ContactLastName Like '%" + AgentName + "%' OR (ContactFirstName+' '+ContactLastName) LIKE '%" + AgentName + "%')";
                if (Status != 0)
                    strFilter += "AND TransStatus='" + Status + "' ";
                strFilter += " ORDER BY ExpiryDate";
                strSQL = "SELECT TransID, TransType, tm.AgentID,ContactFirstName,(ContactFirstName+' '+ContactLastName) as FullName, tm.AgentCatgID, BookingDate, PaymentDateEx1, PaymentAmtEx1, PaymentDateEx2, PaymentAmtEx2, " +
                      "PaymentDateEx3, PaymentAmtEx3, PaymentDate, CancelDate, ExpiryDate,STDDate, Currency, CurrencyPaid, CollectedAmt," +
                      "TotalAmtAVG, TotalAmtGoing, TotalAmtReturn, TransSubTotal, TransTotalAmt, TransTotalFee, TransTotalTax, TransTotalPaxFee," +
                      "TransTotalOth, TransTotalSSR, TransTotalDisc, TransTotalPromoDisc, TransTotalPAX, TransTotalSeat, TransTotalNameChange, TransTotalProcess, TransTotalInfant, TransRemark1, TransRemark2,CurReminderDate,NextReminderDate,ReminderType, TransStatus, Posted, tm.rowguid, tm.CreateBy, tm.SyncCreate, tm.SyncLastUpd, tm.LastSyncBy, tm.PromoCode, " +
                        "CASE " +
                        "WHEN Transstatus = '0' THEN 'Pending' " +
                        "WHEN Transstatus = '1' THEN 'Confirmed' " +
                        "WHEN Transstatus = '2' THEN 'Guaranteed' " +
                        "WHEN Transstatus = '3' THEN 'Reconfirmed' " +
                        "WHEN Transstatus = '4' THEN 'Cancel' " +
                        "END AS 'Status' " +
                        " FROM BK_TRANSMAIN tm JOIN AG_PROFILE ag (NOLOCK) on tm.AgentID=ag.AgentID " +

                        "WHERE TransStatus != '0' AND STDDate > GETDATE() AND DATEDIFF(hour, GETDATE(), STDDate) > 6 " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransactionMain = new BookingTransactionMain();
                        objBookingTransactionMain.TransID = (string)drRow["TransID"];
                        objBookingTransactionMain.TransType = (byte)drRow["TransType"];
                        objBookingTransactionMain.AgentID = (string)drRow["AgentID"];
                        objBookingTransactionMain.AgentCatgID = drRow["AgentCatgID"].ToString();
                        objBookingTransactionMain.Status = drRow["Status"].ToString();
                        objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];
                        if (DateTime.TryParse(drRow["PaymentDateEx1"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx1 = (DateTime)drRow["PaymentDateEx1"];
                        if (decimal.TryParse(drRow["PaymentAmtEx1"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx1 = (decimal)drRow["PaymentAmtEx1"];
                        if (DateTime.TryParse(drRow["PaymentDateEx2"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx2 = (DateTime)drRow["PaymentDateEx2"];
                        if (decimal.TryParse(drRow["PaymentAmtEx2"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx2 = (decimal)drRow["PaymentAmtEx2"];
                        if (DateTime.TryParse(drRow["PaymentDateEx3"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx3 = (DateTime)drRow["PaymentDateEx3"];
                        if (decimal.TryParse(drRow["PaymentAmtEx3"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx3 = (decimal)drRow["PaymentAmtEx3"];
                        if (DateTime.TryParse(drRow["PaymentDate"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDate = (DateTime)drRow["PaymentDate"];
                        if (DateTime.TryParse(drRow["CancelDate"].ToString(), out dateValue)) objBookingTransactionMain.CancelDate = (DateTime)drRow["CancelDate"];
                        if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                        if (DateTime.TryParse(drRow["STDDate"].ToString(), out dateValue)) objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];
                        string tempdate1 = String.Format("{0:MM/dd/yyyy}", (DateTime)drRow["STDDate"]);
                        string tempdate2 = String.Format("{0:MM/dd/yyyy}", DateTime.Now);
                        TimeSpan ts = Convert.ToDateTime(tempdate1) - Convert.ToDateTime(tempdate2);
                        objBookingTransactionMain.AgentName = drRow["FullName"].ToString();
                        int tempday = Convert.ToInt32(ts.TotalDays.ToString());
                        if (tempday == 0)
                            objBookingTransactionMain.DueDay = "Today";
                        else if (tempday < 0)
                            objBookingTransactionMain.DueDay = "Overdate";
                        else
                            objBookingTransactionMain.DueDay = ts.TotalDays.ToString() + " day";
                        objBookingTransactionMain.Currency = drRow["Currency"].ToString();
                        objBookingTransactionMain.CurrencyPaid = drRow["CurrencyPaid"].ToString();
                        objBookingTransactionMain.DueAmt = (decimal)drRow["TransTotalAmt"] - (decimal)drRow["CollectedAmt"];
                        objBookingTransactionMain.CollectedAmt = (decimal)drRow["CollectedAmt"];
                        objBookingTransactionMain.TotalAmtAVG = (decimal)drRow["TotalAmtAVG"];
                        objBookingTransactionMain.TotalAmtGoing = (decimal)drRow["TotalAmtGoing"];
                        objBookingTransactionMain.TotalAmtReturn = (decimal)drRow["TotalAmtReturn"];
                        objBookingTransactionMain.TransSubTotal = (decimal)drRow["TransSubTotal"];
                        objBookingTransactionMain.TransTotalAmt = (decimal)drRow["TransTotalAmt"];
                        objBookingTransactionMain.TransTotalFee = (decimal)drRow["TransTotalFee"];
                        objBookingTransactionMain.TransTotalTax = (decimal)drRow["TransTotalTax"];
                        objBookingTransactionMain.TransTotalPaxFee = (decimal)drRow["TransTotalPaxFee"];
                        objBookingTransactionMain.TransTotalOth = (decimal)drRow["TransTotalOth"];
                        objBookingTransactionMain.TransTotalSSR = (decimal)drRow["TransTotalSSR"];
                        objBookingTransactionMain.TransTotalDisc = (decimal)drRow["TransTotalDisc"];
                        objBookingTransactionMain.TransTotalPromoDisc = (decimal)drRow["TransTotalPromoDisc"];
                        objBookingTransactionMain.TransTotalPAX = (int)drRow["TransTotalPAX"];
                        objBookingTransactionMain.TransTotalSeat = (decimal)drRow["TransTotalSeat"];
                        objBookingTransactionMain.TransTotalNameChange = (decimal)drRow["TransTotalNameChange"];
                        objBookingTransactionMain.TransTotalProcess = (decimal)drRow["TransTotalProcess"];
                        objBookingTransactionMain.TransTotalInfant = (decimal)drRow["TransTotalInfant"];
                        objBookingTransactionMain.TransRemark1 = drRow["TransRemark1"].ToString();
                        objBookingTransactionMain.TransRemark2 = drRow["TransRemark2"].ToString();
                        objBookingTransactionMain.TransStatus = (byte)drRow["TransStatus"];
                        objBookingTransactionMain.Posted = (byte)drRow["Posted"];
                        objBookingTransactionMain.rowguid = (Guid)drRow["rowguid"];
                        objBookingTransactionMain.CreateBy = drRow["CreateBy"].ToString();
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTransactionMain.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBookingTransactionMain.LastSyncBy = drRow["LastSyncBy"].ToString();
                        if (DateTime.TryParse(drRow["CurReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.CurReminderDate = (DateTime)drRow["CurReminderDate"];
                        if (DateTime.TryParse(drRow["NextReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.NextReminderDate = (DateTime)drRow["NextReminderDate"];
                        objBookingTransactionMain.ReminderType = (byte)drRow["ReminderType"];
                        objBookingTransactionMain.PromoCode = (string)drRow["PromoCode"];

                        objListBookingTransMain.Add(objBookingTransactionMain);
                    }
                    return objListBookingTransMain;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<BookingTransactionMain> GetAllBK_TRANSMAIN()
        {
            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBK_TRANSMAIN_Info = new List<BookingTransactionMain>();
            DataTable dt;
            DateTime dateValue;
            decimal numValue;
            String strSQL = string.Empty;

            try
            {
                strSQL = "SELECT * FROM BK_TRANSMAIN ";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransactionMain = new BookingTransactionMain();
                        objBookingTransactionMain.TransID = (string)drRow["TransID"];
                        objBookingTransactionMain.TransType = (byte)drRow["TransType"];
                        objBookingTransactionMain.AgentID = (string)drRow["AgentID"];
                        objBookingTransactionMain.AgentCatgID = (string)drRow["AgentCatgID"];
                        objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];
                        if (DateTime.TryParse(drRow["PaymentDateEx1"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx1 = (DateTime)drRow["PaymentDateEx1"];
                        if (decimal.TryParse(drRow["PaymentAmtEx1"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx1 = (decimal)drRow["PaymentAmtEx1"];
                        if (DateTime.TryParse(drRow["PaymentDateEx2"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx2 = (DateTime)drRow["PaymentDateEx2"];
                        if (decimal.TryParse(drRow["PaymentAmtEx2"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx2 = (decimal)drRow["PaymentAmtEx2"];
                        if (DateTime.TryParse(drRow["PaymentDateEx3"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx3 = (DateTime)drRow["PaymentDateEx3"];
                        if (decimal.TryParse(drRow["PaymentAmtEx3"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx3 = (decimal)drRow["PaymentAmtEx3"];

                        if (DateTime.TryParse(drRow["PaymentDate"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDate = (DateTime)drRow["PaymentDate"];
                        if (DateTime.TryParse(drRow["CancelDate"].ToString(), out dateValue)) objBookingTransactionMain.CancelDate = (DateTime)drRow["CancelDate"];
                        if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                        if (DateTime.TryParse(drRow["STDDate"].ToString(), out dateValue)) objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];
                        objBookingTransactionMain.Currency = (string)drRow["Currency"];
                        objBookingTransactionMain.CurrencyPaid = (string)drRow["CurrencyPaid"];
                        objBookingTransactionMain.CollectedAmt = (decimal)drRow["CollectedAmt"];
                        objBookingTransactionMain.TotalAmtAVG = (decimal)drRow["TotalAmtAVG"];
                        objBookingTransactionMain.TotalAmtGoing = (decimal)drRow["TotalAmtGoing"];
                        objBookingTransactionMain.TotalAmtReturn = (decimal)drRow["TotalAmtReturn"];
                        objBookingTransactionMain.TransSubTotal = (decimal)drRow["TransSubTotal"];
                        objBookingTransactionMain.TransTotalAmt = (decimal)drRow["TransTotalAmt"];
                        objBookingTransactionMain.TransTotalFee = (decimal)drRow["TransTotalFee"];
                        objBookingTransactionMain.TransTotalTax = (decimal)drRow["TransTotalTax"];
                        objBookingTransactionMain.TransTotalPaxFee = (decimal)drRow["TransTotalPaxFee"];
                        objBookingTransactionMain.TransTotalOth = (decimal)drRow["TransTotalOth"];
                        objBookingTransactionMain.TransTotalSSR = (decimal)drRow["TransTotalSSR"];
                        objBookingTransactionMain.TransTotalDisc = (decimal)drRow["TransTotalDisc"];
                        objBookingTransactionMain.TransTotalPromoDisc = (decimal)drRow["TransTotalPromoDisc"];
                        objBookingTransactionMain.TransTotalPAX = (int)drRow["TransTotalPAX"];
                        objBookingTransactionMain.TransTotalSeat = (decimal)drRow["TransTotalSeat"];
                        objBookingTransactionMain.TransTotalNameChange = (decimal)drRow["TransTotalNameChange"];
                        objBookingTransactionMain.TransTotalProcess = (decimal)drRow["TransTotalProcess"];
                        objBookingTransactionMain.TransTotalInfant = (decimal)drRow["TransTotalInfant"];
                        objBookingTransactionMain.TransRemark1 = (string)drRow["TransRemark1"];
                        objBookingTransactionMain.TransRemark2 = (string)drRow["TransRemark2"];
                        objBookingTransactionMain.TransStatus = (byte)drRow["TransStatus"];
                        objBookingTransactionMain.Posted = (byte)drRow["Posted"];
                        objBookingTransactionMain.rowguid = (Guid)drRow["rowguid"];
                        objBookingTransactionMain.CreateBy = (string)drRow["CreateBy"];
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTransactionMain.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBookingTransactionMain.LastSyncBy = (string)drRow["LastSyncBy"];
                        if (DateTime.TryParse(drRow["CurReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.CurReminderDate = (DateTime)drRow["CurReminderDate"];
                        if (DateTime.TryParse(drRow["NextReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.NextReminderDate = (DateTime)drRow["NextReminderDate"];
                        objBookingTransactionMain.ReminderType = (byte)drRow["ReminderType"];
                        objBookingTransactionMain.PromoCode = (string)drRow["PromoCode"];

                        objListBK_TRANSMAIN_Info.Add(objBookingTransactionMain);
                    }
                    return objListBK_TRANSMAIN_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        //added by agus
        public List<BookingTransactionMain> GetBK_TRANSMAIN10(int intTransStatus, Int32 intAgentID, string condition = "")
        {
            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBK_TRANSMAIN_Info = new List<BookingTransactionMain>();
            DataTable dt;
            DateTime dateValue;
            decimal numValue;
            String strSQL = string.Empty;

            try
            {
                if (condition != "")
                {
                    condition = " and " + condition;
                }

                strSQL = "SELECT * FROM BK_TRANSMAIN ";
                strSQL += " WHERE BK_TRANSMAIN.IsOverride = 1 "; //added by Sienny 20170316 (for new GBS)
                strSQL += " AND TransStatus = " + intTransStatus + " and AgentID = " + intAgentID + condition;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransactionMain = new BookingTransactionMain();
                        objBookingTransactionMain.TransID = (string)drRow["TransID"];
                        objBookingTransactionMain.TransType = (byte)drRow["TransType"];
                        objBookingTransactionMain.AgentID = (string)drRow["AgentID"];
                        objBookingTransactionMain.AgentCatgID = (string)drRow["AgentCatgID"];
                        objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];
                        if (DateTime.TryParse(drRow["PaymentDateEx1"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx1 = (DateTime)drRow["PaymentDateEx1"];
                        if (decimal.TryParse(drRow["PaymentAmtEx1"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx1 = (decimal)drRow["PaymentAmtEx1"];
                        if (DateTime.TryParse(drRow["PaymentDateEx2"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx2 = (DateTime)drRow["PaymentDateEx2"];
                        if (decimal.TryParse(drRow["PaymentAmtEx2"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx2 = (decimal)drRow["PaymentAmtEx2"];
                        if (DateTime.TryParse(drRow["PaymentDateEx3"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx3 = (DateTime)drRow["PaymentDateEx3"];
                        if (decimal.TryParse(drRow["PaymentAmtEx3"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx3 = (decimal)drRow["PaymentAmtEx3"];
                        if (DateTime.TryParse(drRow["PaymentDate"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDate = (DateTime)drRow["PaymentDate"];
                        if (DateTime.TryParse(drRow["CancelDate"].ToString(), out dateValue)) objBookingTransactionMain.CancelDate = (DateTime)drRow["CancelDate"];
                        if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                        if (DateTime.TryParse(drRow["STDDate"].ToString(), out dateValue)) objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];
                        objBookingTransactionMain.Currency = (string)drRow["Currency"];
                        objBookingTransactionMain.CurrencyPaid = (string)drRow["CurrencyPaid"];
                        objBookingTransactionMain.CollectedAmt = (decimal)drRow["CollectedAmt"];
                        objBookingTransactionMain.TotalAmtAVG = (decimal)drRow["TotalAmtAVG"];
                        objBookingTransactionMain.TotalAmtGoing = (decimal)drRow["TotalAmtGoing"];
                        objBookingTransactionMain.TotalAmtReturn = (decimal)drRow["TotalAmtReturn"];
                        objBookingTransactionMain.TransSubTotal = (decimal)drRow["TransSubTotal"];
                        objBookingTransactionMain.TransTotalAmt = (decimal)drRow["TransTotalAmt"];
                        objBookingTransactionMain.TransTotalFee = (decimal)drRow["TransTotalFee"];
                        objBookingTransactionMain.TransTotalTax = (decimal)drRow["TransTotalTax"];
                        objBookingTransactionMain.TransTotalPaxFee = (decimal)drRow["TransTotalPaxFee"];
                        objBookingTransactionMain.TransTotalOth = (decimal)drRow["TransTotalOth"];
                        objBookingTransactionMain.TransTotalSSR = (decimal)drRow["TransTotalSSR"];
                        objBookingTransactionMain.TransTotalDisc = (decimal)drRow["TransTotalDisc"];
                        objBookingTransactionMain.TransTotalPromoDisc = (decimal)drRow["TransTotalPromoDisc"];
                        objBookingTransactionMain.TransTotalPAX = (int)drRow["TransTotalPAX"];
                        objBookingTransactionMain.TransTotalSeat = (decimal)drRow["TransTotalSeat"];
                        objBookingTransactionMain.TransTotalNameChange = (decimal)drRow["TransTotalNameChange"];
                        objBookingTransactionMain.TransTotalProcess = (decimal)drRow["TransTotalProcess"];
                        objBookingTransactionMain.TransTotalInfant = (decimal)drRow["TransTotalInfant"];
                        objBookingTransactionMain.TransRemark1 = (string)drRow["TransRemark1"];
                        objBookingTransactionMain.TransRemark2 = (string)drRow["TransRemark2"];
                        objBookingTransactionMain.TransStatus = (byte)drRow["TransStatus"];
                        objBookingTransactionMain.Posted = (byte)drRow["Posted"];
                        objBookingTransactionMain.rowguid = (Guid)drRow["rowguid"];
                        objBookingTransactionMain.CreateBy = (string)drRow["CreateBy"];
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTransactionMain.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBookingTransactionMain.LastSyncBy = (string)drRow["LastSyncBy"];
                        if (DateTime.TryParse(drRow["CurReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.CurReminderDate = (DateTime)drRow["CurReminderDate"];
                        if (DateTime.TryParse(drRow["NextReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.NextReminderDate = (DateTime)drRow["NextReminderDate"];
                        objBookingTransactionMain.ReminderType = (byte)drRow["ReminderType"];
                        objBookingTransactionMain.PromoCode = (string)drRow["PromoCode"];

                        objListBK_TRANSMAIN_Info.Add(objBookingTransactionMain);
                    }
                    return objListBK_TRANSMAIN_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        //added by ketee, update all transaction by agent
        public Boolean UpdateAllTransByAgent(string AgentID, string AgentName, string TransID = "")
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            List<BookingTransactionMain> objListBookingTransMain = new List<BookingTransactionMain>();
            DataTable dt;
            String strSQL = string.Empty;
            string strFilter = string.Empty;
            try
            {

                if (AgentID != string.Empty)
                {
                    strFilter += " AND tm.AgentID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, AgentID) + "' ";
                }
                if (TransID != "")
                {
                    strFilter += " AND tm.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' ";
                }
                strFilter += " AND TransStatus in ('1','2') ";
                strFilter += " AND ExpiryDate > GETDATE() ";
                strFilter += " AND tm.IsOverride = 1 "; //added by Sienny 20170316 (for new GBS)
                strFilter += " ORDER BY tm.SyncCreate DESC";
                strSQL = "SELECT TransID FROM BK_TRANSMAIN tm JOIN AG_PROFILE ag (NOLOCK) on tm.AgentID = ag.AgentID WHERE STDDate > GETDATE() " + strFilter;

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        if (UpdatePaymentDetails(drRow["TransID"].ToString(), AgentName, AgentID, true) == false)
                        {
                            log.Warning(this, "Update Payment Details failed");
                            return false;
                        }
                    }

                }
                return true;
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                log.Error(this, ex);
                return false;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        public List<BookingTransactionMain> GetAllBK_TRANSMAINStatus(string AgentID, string AgentName, int Status)
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBookingTransMain = new List<BookingTransactionMain>();
            DataTable dt;
            DateTime dateValue;
            decimal numValue;
            String strSQL = string.Empty;
            string strFilter = string.Empty;
            try
            {

                if (AgentID != string.Empty)
                    strFilter += "AND tm.AgentID='" + AgentID + "' ";
                if (AgentName != string.Empty)
                    strFilter += "AND (ContactFirstName LIKE '%" + AgentName + "%' OR ContactLastName Like '%" + AgentName + "%' OR (ContactFirstName+' '+ContactLastName) LIKE '%" + AgentName + "%') ";

                if (Status != 0) //amended by diana 20140108 - check for needpaymentstatus
                {
                    if (Status == 1)
                        strFilter += "AND ((TransStatus='" + Status + "' AND ExpiryDate > GETDATE()) OR (TransStatus IN ('2','3') AND NeedPaymentStatus = '1')) ";
                    else if (Status == 2)
                        strFilter += "AND (TransStatus='" + Status + "' AND NeedPaymentStatus = '0')";
                    else if (Status == 11) //added by ketee, to show all need payment booking
                        strFilter += "AND ((TransStatus='1') OR (TransStatus IN ('2','3') AND NeedPaymentStatus = '1')) ";
                    else if (Status == 123) //20170331 - Sienny (upcoming flight)
                        //strFilter += "AND (TransStatus IN (1,2,3) AND STDDate >= GetDate())";
                        strFilter += "AND (TransStatus IN (3) AND STDDate >= GetDate())";
                }
                //commented by diana - is being checked above
                //if (Status == 1)
                //    strFilter += "AND ExpiryDate > GETDATE() ";

                //added by ketee, filter expiry data
                //if (Status == 1)
                //{
                //    strFilter += " AND BK_TRANSDTL.NextDueDate >= GETDATE() and BK_TRANSMAIN.STDDate > GETDATE() ";
                //}

                strFilter += " ORDER BY tm.SyncCreate DESC ";
                if ((Status != 0) && (Status == 123))
                {
                    strFilter += ", STDDate ";
                }
                //strSQL = "SELECT TransID, TransType, tm.AgentID,ContactFirstName,(ContactFirstName+' '+ContactLastName) as FullName, tm.AgentCatgID, BookingDate, PaymentDateEx1, PaymentDateEx2," +
                //      "PaymentDateEx3, PaymentDate, CancelDate,ExpiryDate, STDDate, Currency, CurrencyPaid, CollectedAmt," +
                //      "TotalAmtAVG, TotalAmtGoing, TotalAmtReturn, TransSubTotal, TransTotalAmt, TransTotalFee, TransTotalTax," +
                //      "TransTotalOth, TransTotalPAX, TransTotalSeat, TransRemark1, TransRemark2,CurReminderDate,NextReminderDate,ReminderType, TransStatus, Posted, tm.rowguid, tm.CreateBy, tm.SyncCreate, tm.SyncLastUpd, tm.LastSyncBy," +
                //       "(SELECT top(1) Origin FROM BK_TRANSDTL WHERE TransID=tm.TransID) AS Origin,(SELECT  top(1) Destination FROM BK_TRANSDTL WHERE TransID=tm.TransID) AS Destination," +
                //        "CASE " +
                //        "WHEN Transstatus = '0' THEN 'Pending' " +
                //        "WHEN Transstatus = '1' THEN 'Confirmed' " +
                //        "WHEN Transstatus = '2' THEN 'Guaranteed' " +
                //        "WHEN Transstatus = '3' THEN 'Reconfirmed' " +
                //        "WHEN Transstatus = '4' THEN 'Cancel' " +
                //        "END AS 'Status' " +                        
                //        " FROM BK_TRANSMAIN tm JOIN AG_PROFILE ag (NOLOCK) on tm.AgentID=ag.AgentID " +

                //        "WHERE TransStatus != '0' AND STDDate > GETDATE() " + strFilter;
                //added by Agus
                strSQL = "select  td.TransID, tm.TransType, tm.AgentID, ContactFirstName, (ContactFirstName+' '+ContactLastName) as FullName, tm.AgentCatgID, tm.BookingDate " +
                        " , tm.PaymentDateEx1, tm.PaymentAmtEx1, tm.PaymentDateEx2, tm.PaymentAmtEx2, tm.PaymentDateEx3, tm.PaymentAmtEx3, tm.PaymentDate, tm.CancelDate, tm.ExpiryDate " +
                        " , tm.STDDate, tm.Currency, tm.CurrencyPaid, tm.CollectedAmt, (td.LineTotal / (td.PaxAdult + td.PaxChild)) as TotalAmtAVG " +
                        " , tm.TotalAmtGoing, tm.TotalAmtReturn, tm.TransSubTotal, td.LineTotal as TransTotalAmt, tm.TransTotalFee, tm.TransTotalTax, tm.TransTotalPaxFee " +
                        " , tm.TransTotalOth, tm.TransTotalSSR, tm.TransTotalDisc, tm.TransTotalPromoDisc, tm.TransTotalPAX, tm.TransTotalSeat, tm.TransTotalNameChange, tm.TransTotalProcess, tm.TransTotalInfant, tm.TransRemark1, tm.TransRemark2 " +
                        " , tm.CurReminderDate, tm.NextReminderDate, tm.ReminderType, tm.TransStatus, tm.Posted, tm.rowguid, tm.CreateBy, tm.SyncCreate, tm.SyncLastUpd, tm.LastSyncBy, tm.PromoCode " +
                        " , td.Origin AS Origin,td.Destination AS Destination, td.RecordLocator, td.SellKey " +
                        " , (SELECT top(1) Origin + ' - ' + Destination FROM BK_TRANSDTL WHERE TransID=tm.TransID) as DepartReturn " +
                        " , (SELECT top(1) Origin FROM BK_TRANSDTL WHERE TransID=tm.TransID) as DepartCity " +
                        " , (SELECT top(1) Destination FROM BK_TRANSDTL WHERE TransID=tm.TransID) as ReturnCity " +
                        " , td.DetailCollectedAmt as DetailCollectedAmt, tm.transTotalAmt - tm.CollectedAmt as dueTotalAmt, td.DepartureDate, td.ArrivalDate " +
                        " , CASE  " +
                        "      WHEN tm.Transstatus = '0' THEN 'Pending'  " +
                        "      WHEN tm.Transstatus = '1' THEN 'Confirmed'  " +
                        "      WHEN tm.Transstatus = '2' THEN 'Guaranteed'  " +
                        "      WHEN tm.Transstatus = '3' THEN 'Reconfirmed'  " +
                        "      WHEN tm.Transstatus = '4' THEN 'Cancel'  " +
                        "      END AS 'Status'    " +
                        " , td.CarrierCode + ' ' + td.FlightNo AS flightnumber" +
                        " from BK_TRANSDTL td, BK_TRANSMAIN tm, AG_PROFILE ag " +
                        " where tm.TransStatus != '0' AND tm.STDDate > GETDATE() " +
                        " and tm.IsOverride = 1 " + //added by Sienny 20170316 (for new GBS)
                        " and td.TransID = tm.TransID and ag.AgentID = tm.AgentID ANd LEN(RecordLocator)>=6 AND TransVoid=0 " + strFilter;//amended by diana 20140208, add TransVoid=0 to show valid PNR only

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransactionMain = new BookingTransactionMain();
                        objBookingTransactionMain.TransID = (string)drRow["TransID"];
                        objBookingTransactionMain.TransType = (byte)drRow["TransType"];
                        objBookingTransactionMain.AgentID = (string)drRow["AgentID"];
                        objBookingTransactionMain.AgentCatgID = drRow["AgentCatgID"].ToString();
                        objBookingTransactionMain.Origin = drRow["Origin"].ToString();
                        objBookingTransactionMain.Destination = drRow["Destination"].ToString();
                        objBookingTransactionMain.DepartCity = drRow["DepartCity"].ToString();
                        objBookingTransactionMain.ReturnCity = drRow["ReturnCity"].ToString();
                        objBookingTransactionMain.Status = drRow["Status"].ToString();
                        objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];
                        if (DateTime.TryParse(drRow["PaymentDateEx1"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx1 = (DateTime)drRow["PaymentDateEx1"];
                        if (decimal.TryParse(drRow["PaymentAmtEx1"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx1 = (decimal)drRow["PaymentAmtEx1"];
                        if (DateTime.TryParse(drRow["PaymentDateEx2"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx2 = (DateTime)drRow["PaymentDateEx2"];
                        if (decimal.TryParse(drRow["PaymentAmtEx2"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx2 = (decimal)drRow["PaymentAmtEx2"];
                        if (DateTime.TryParse(drRow["PaymentDateEx3"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx3 = (DateTime)drRow["PaymentDateEx3"];
                        if (decimal.TryParse(drRow["PaymentAmtEx3"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx3 = (decimal)drRow["PaymentAmtEx3"];
                        if (DateTime.TryParse(drRow["PaymentDate"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDate = (DateTime)drRow["PaymentDate"];
                        if (DateTime.TryParse(drRow["CancelDate"].ToString(), out dateValue)) objBookingTransactionMain.CancelDate = (DateTime)drRow["CancelDate"];
                        if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                        if (DateTime.TryParse(drRow["STDDate"].ToString(), out dateValue)) objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];

                        string tempdate1 = String.Format("{0:MM/dd/yyyy}", (DateTime)drRow["STDDate"]);
                        //string tempdate1 = String.Format("{0:MM/dd/yyyy}", (DateTime)drRow["ExpiryDate"]);
                        string tempdate2 = String.Format("{0:MM/dd/yyyy}", DateTime.Now);


                        TimeSpan ts = Convert.ToDateTime(tempdate1) - Convert.ToDateTime(tempdate2);
                        objBookingTransactionMain.AgentName = drRow["FullName"].ToString();
                        int tempday = Convert.ToInt32(ts.TotalDays.ToString());
                        if (tempday == 0)
                            objBookingTransactionMain.DueDay = "Today";
                        else if (tempday < 0)
                            objBookingTransactionMain.DueDay = "Overdate";
                        else
                            objBookingTransactionMain.DueDay = ts.TotalDays.ToString() + " day";
                        objBookingTransactionMain.Currency = drRow["Currency"].ToString();
                        objBookingTransactionMain.CurrencyPaid = drRow["CurrencyPaid"].ToString();
                        objBookingTransactionMain.DueAmt = (decimal)drRow["TransTotalAmt"] - (decimal)drRow["DetailCollectedAmt"];
                        objBookingTransactionMain.CollectedAmt = (decimal)drRow["DetailCollectedAmt"];
                        objBookingTransactionMain.TotalAmtAVG = (decimal)drRow["TotalAmtAVG"];
                        objBookingTransactionMain.TotalAmtGoing = (decimal)drRow["TotalAmtGoing"];
                        objBookingTransactionMain.TotalAmtReturn = (decimal)drRow["TotalAmtReturn"];
                        objBookingTransactionMain.TransSubTotal = (decimal)drRow["TransSubTotal"];
                        objBookingTransactionMain.TransTotalAmt = (decimal)drRow["TransTotalAmt"];
                        objBookingTransactionMain.TransTotalFee = (decimal)drRow["TransTotalFee"];
                        objBookingTransactionMain.TransTotalTax = (decimal)drRow["TransTotalTax"];
                        objBookingTransactionMain.TransTotalPaxFee = (decimal)drRow["TransTotalPaxFee"];
                        objBookingTransactionMain.TransTotalOth = (decimal)drRow["TransTotalOth"];
                        objBookingTransactionMain.TransTotalSSR = (decimal)drRow["TransTotalSSR"];
                        objBookingTransactionMain.TransTotalSeat = (decimal)drRow["TransTotalSeat"];
                        objBookingTransactionMain.TransTotalNameChange = (decimal)drRow["TransTotalNameChange"];
                        objBookingTransactionMain.TransTotalProcess = (decimal)drRow["TransTotalProcess"];
                        objBookingTransactionMain.TransTotalInfant = (decimal)drRow["TransTotalInfant"];
                        objBookingTransactionMain.TransTotalDisc = (decimal)drRow["TransTotalDisc"];
                        objBookingTransactionMain.TransTotalPromoDisc = (decimal)drRow["TransTotalPromoDisc"];
                        objBookingTransactionMain.TransTotalPAX = (int)drRow["TransTotalPAX"];
                        objBookingTransactionMain.TransRemark1 = drRow["TransRemark1"].ToString();
                        objBookingTransactionMain.TransRemark2 = drRow["TransRemark2"].ToString();
                        objBookingTransactionMain.TransStatus = (byte)drRow["TransStatus"];
                        objBookingTransactionMain.Posted = (byte)drRow["Posted"];
                        objBookingTransactionMain.rowguid = (Guid)drRow["rowguid"];
                        objBookingTransactionMain.CreateBy = drRow["CreateBy"].ToString();
                        objBookingTransactionMain.RecordLocator = drRow["RecordLocator"].ToString();
                        objBookingTransactionMain.DepartReturn = drRow["DepartReturn"].ToString();
                        objBookingTransactionMain.DueTotalAmt = (decimal)drRow["dueTotalAmt"];
                        objBookingTransactionMain.pnrTemp = drRow["SellKey"].ToString();
                        //added by ketee
                        if (DateTime.TryParse(drRow["DepartureDate"].ToString(), out dateValue)) objBookingTransactionMain.DepartureDate = (DateTime)drRow["DepartureDate"];
                        if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBookingTransactionMain.ArrivalDate = (DateTime)drRow["ArrivalDate"];

                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTransactionMain.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBookingTransactionMain.LastSyncBy = drRow["LastSyncBy"].ToString();
                        if (DateTime.TryParse(drRow["CurReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.CurReminderDate = (DateTime)drRow["CurReminderDate"];
                        if (DateTime.TryParse(drRow["NextReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.NextReminderDate = (DateTime)drRow["NextReminderDate"];
                        objBookingTransactionMain.ReminderType = (byte)drRow["ReminderType"];
                        objBookingTransactionMain.FlightNumber = drRow["flightnumber"].ToString();
                        objBookingTransactionMain.PromoCode = drRow["PromoCode"].ToString();

                        objListBookingTransMain.Add(objBookingTransactionMain);
                    }
                    return objListBookingTransMain;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<BookingTransactionMain> GetAllBK_TRANSMAINNotification(string AgentID, string AgentName, int Status)
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBookingTransMain = new List<BookingTransactionMain>();
            DataTable dt;
            DateTime dateValue;
            decimal numValue;
            String strSQL = string.Empty;
            string strFilter = string.Empty;
            try
            {
                if (AgentID != string.Empty)
                    strFilter += "AND tm.AgentID='" + AgentID + "' ";
                if (AgentName != string.Empty)
                    strFilter += "AND (ContactFirstName LIKE '%" + AgentName + "%' OR ContactLastName Like '%" + AgentName + "%' OR (ContactFirstName+' '+ContactLastName) LIKE '%" + AgentName + "%') ";

                if (Status != 0) //amended by diana 20140108 - check for needpaymentstatus
                {
                    if (Status == 1)
                        strFilter += "AND ((TransStatus='" + Status + "' AND ExpiryDate > GETDATE()) OR (TransStatus IN ('2','3')) ";
                    else if (Status == 2)
                        strFilter += "AND (TransStatus='" + Status + "' AND NeedPaymentStatus = '0')";
                    else if (Status == 11) //added by ketee, to show all need payment booking
                        strFilter += "AND ((TransStatus='1') OR (TransStatus IN ('2','3'))) ";
                }

                strFilter += " ORDER BY tm.SyncCreate DESC";

                strSQL = "SELECT DISTINCT TOP 20 td.TransID, tm.TransType, tm.AgentID, ContactFirstName, (ContactFirstName+' '+ContactLastName) as FullName, tm.AgentCatgID, tm.BookingDate " +
                        " , tm.TransStatus, tm.Posted, tm.rowguid, tm.CreateBy, tm.SyncCreate, tm.SyncLastUpd, tm.LastSyncBy " +
                        " , (SELECT top(1) Origin + ' - ' + Destination FROM BK_TRANSDTL WHERE TransID=tm.TransID) as DepartReturn " +
                        " , (SELECT top(1) Origin FROM BK_TRANSDTL WHERE TransID=tm.TransID) as DepartCity " +
                        " , (SELECT top(1) Destination FROM BK_TRANSDTL WHERE TransID=tm.TransID) as ReturnCity " +
                        " , CASE " +
                        "  WHEN tm.Transstatus = '0' THEN 'was pending for payment' " +
                        "  WHEN tm.Transstatus = '1' THEN 'was created and pending for payment' " +
                        "  WHEN tm.Transstatus = '2' AND NeedPaymentStatus = '1' THEN 'was pending for payment' " +
                        "  WHEN tm.Transstatus = '3' AND NeedPaymentStatus = '1' THEN 'was pending for payment' " +
                        "  WHEN tm.Transstatus = '2' AND NeedPaymentStatus = '0' THEN 'was pending for passenger upload' " +
                        "  WHEN tm.Transstatus = '3' AND NeedPaymentStatus = '0' THEN 'was confirmed' " +
                        "  WHEN tm.Transstatus IN ('4','6','7') THEN 'was cancelled' END AS 'Status', " +
                        "  (SELECT STUFF((SELECT DISTINCT ' | ' + RecordLocator FROM BK_TRANSDTL B WHERE B.TransID = td.TransID AND LEN(B.RecordLocator)>=6 FOR XML PATH('')), 1, 2, '')) AS RecordLocator" +//edited by romy for optimize
                                                                                                                                                                                                             //" , CASE " +
                                                                                                                                                                                                             ////"  WHEN (DATEDIFF(hh, tm.BookingDate, sysdatetime())) >= 24 THEN Convert(varchar(10), DATEDIFF(DAY, tm.BookingDate, sysdatetime())) + ' days ago' " +
                                                                                                                                                                                                             ////"  WHEN (DATEDIFF(hh, tm.BookingDate, sysdatetime())) >= 1 AND (DATEDIFF(hh, tm.BookingDate, sysdatetime())) < 24 THEN Convert(varchar(10), DATEDIFF(hh, tm.BookingDate, sysdatetime())) + ' hours ago' " +
                                                                                                                                                                                                             ////"  WHEN (DATEDIFF(DAY, tm.BookingDate, sysdatetime()) < 1) THEN Convert(varchar(10), DATEDIFF(mi,DATEADD(hh,DATEDIFF(hh, tm.BookingDate, sysdatetime()),tm.bookingdate),sysdatetime())) + ' minutes ago' " +
                                                                                                                                                                                                             //"  WHEN (DATEDIFF(hh, tm.BookingDate, sysdatetime())) >= 24 THEN " +
                                                                                                                                                                                                             //"    CASE WHEN Convert(varchar(10), DATEDIFF(DAY, tm.BookingDate, sysdatetime())) > 1 THEN Convert(varchar(10), DATEDIFF(DAY, tm.BookingDate, sysdatetime())) + ' days ago' ELSE Convert(varchar(10), DATEDIFF(DAY, tm.BookingDate, sysdatetime())) + ' day ago' END " +
                                                                                                                                                                                                             //"  WHEN (DATEDIFF(hh, tm.BookingDate, sysdatetime())) > 1 AND (DATEDIFF(hh, tm.BookingDate, sysdatetime())) < 24 THEN " +
                                                                                                                                                                                                             //"    CASE WHEN Convert(varchar(10), DATEDIFF(hh, tm.BookingDate, sysdatetime())) > 1 THEN Convert(varchar(10), DATEDIFF(hh, tm.BookingDate, sysdatetime())) + ' hours ago' ELSE Convert(varchar(10), DATEDIFF(hh, tm.BookingDate, sysdatetime())) + ' hour ago' END " +
                                                                                                                                                                                                             //"  WHEN (DATEDIFF(hh, tm.BookingDate, sysdatetime()) <= 1) THEN " +
                                                                                                                                                                                                             //"    CASE WHEN Convert(varchar(10), DATEDIFF(mi,DATEADD(hh,DATEDIFF(hh, tm.BookingDate, sysdatetime()),tm.bookingdate),sysdatetime())) > 1 THEN Convert(varchar(10), DATEDIFF(mi,DATEADD(hh,DATEDIFF(hh, tm.BookingDate, sysdatetime()),tm.bookingdate),sysdatetime())) + ' minutes ago' ELSE Convert(varchar(10), DATEDIFF(mi,DATEADD(hh,DATEDIFF(hh, tm.BookingDate, sysdatetime()),tm.bookingdate),sysdatetime())) + ' minute ago' END " +
                                                                                                                                                                                                             //"  END as HowLongBookingDate " +
                        " FROM BK_TRANSDTL td, BK_TRANSMAIN tm, AG_PROFILE ag " +
                        " WHERE td.TransID = tm.TransID AND ag.AgentID = tm.AgentID AND LEN(RecordLocator)>=6 AND TransVoid=0 " +
                        " AND tm.IsOverride = 1 " + //added by Sienny 20170316 (for new GBS)
                        " AND DATEDIFF(DAY, tm.BookingDate, sysdatetime()) <= 14 " + strFilter;//amended by diana 20140208, add TransVoid=0 to show valid PNR only

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransactionMain = new BookingTransactionMain();
                        objBookingTransactionMain.TransID = (string)drRow["TransID"];
                        objBookingTransactionMain.TransType = (byte)drRow["TransType"];
                        objBookingTransactionMain.AgentID = (string)drRow["AgentID"];
                        objBookingTransactionMain.AgentName = drRow["FullName"].ToString();
                        objBookingTransactionMain.AgentCatgID = drRow["AgentCatgID"].ToString();
                        objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];

                        objBookingTransactionMain.TransStatus = (byte)drRow["TransStatus"];
                        objBookingTransactionMain.Posted = (byte)drRow["Posted"];
                        objBookingTransactionMain.rowguid = (Guid)drRow["rowguid"];
                        objBookingTransactionMain.CreateBy = drRow["CreateBy"].ToString();
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTransactionMain.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBookingTransactionMain.LastSyncBy = drRow["LastSyncBy"].ToString();

                        objBookingTransactionMain.DepartReturn = drRow["DepartReturn"].ToString();
                        objBookingTransactionMain.DepartCity = drRow["DepartCity"].ToString();
                        objBookingTransactionMain.ReturnCity = drRow["ReturnCity"].ToString();

                        objBookingTransactionMain.Status = drRow["Status"].ToString();
                        //objBookingTransactionMain.HowLongBookingDate = drRow["HowLongBookingDate"].ToString();
                        objBookingTransactionMain.RecordLocator = drRow["RecordLocator"].ToString();//added by romy for optimize

                        objListBookingTransMain.Add(objBookingTransactionMain);
                    }
                    return objListBookingTransMain;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<BookingTransactionMain> GetAllBK_TRANSMAINNotificationPNR(string AgentID, string AgentName, int Status, string TransID)
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBookingTransMain = new List<BookingTransactionMain>();
            DataTable dt;
            DateTime dateValue;
            decimal numValue;
            String strSQL = string.Empty;
            string strFilter = string.Empty;
            try
            {
                if (AgentID != string.Empty)
                    strFilter += "AND tm.AgentID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, AgentID) + "' ";
                if (AgentName != string.Empty)
                    strFilter += "AND (ContactFirstName LIKE '%" + AgentName + "%' OR ContactLastName Like '%" + AgentName + "%' OR (ContactFirstName+' '+ContactLastName) LIKE '%" + AgentName + "%') ";

                if (Status != 0) //amended by diana 20140108 - check for needpaymentstatus
                {
                    if (Status == 1)
                        strFilter += "AND ((TransStatus='" + Status + "' AND ExpiryDate > GETDATE()) OR (TransStatus IN ('2','3')) ";
                    else if (Status == 2)
                        strFilter += "AND (TransStatus='" + Status + "' AND NeedPaymentStatus = '0')";
                    else if (Status == 11) //added by ketee, to show all need payment booking
                        strFilter += "AND ((TransStatus='1') OR (TransStatus IN ('2','3'))) ";
                }

                if (TransID != "")
                    strFilter += " AND td.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' ";

                strFilter += " ORDER BY tm.SyncCreate DESC";

                strSQL = "SELECT DISTINCT td.TransID, tm.TransType, tm.AgentID, ContactFirstName, (ContactFirstName+' '+ContactLastName) as FullName, tm.AgentCatgID, tm.BookingDate " +
                        " , tm.TransStatus, tm.Posted, tm.rowguid, tm.CreateBy, tm.SyncCreate, tm.SyncLastUpd, tm.LastSyncBy, td.RecordLocator, td.SellKey " +
                        " , (SELECT top(1) Origin + ' - ' + Destination FROM BK_TRANSDTL WHERE TransID=tm.TransID) as DepartReturn " +
                        " , (SELECT top(1) Origin FROM BK_TRANSDTL WHERE TransID=tm.TransID) as DepartCity " +
                        " , (SELECT top(1) Destination FROM BK_TRANSDTL WHERE TransID=tm.TransID) as ReturnCity " +
                        " , CASE " +
                        "  WHEN tm.Transstatus = '0' THEN 'was pending for payment' " +
                        "  WHEN tm.Transstatus = '1' THEN 'was created and pending for payment' " +
                        "  WHEN tm.Transstatus = '2' AND NeedPaymentStatus = '1' THEN 'was pending for payment' " +
                        "  WHEN tm.Transstatus = '3' AND NeedPaymentStatus = '1' THEN 'was pending for payment' " +
                        "  WHEN tm.Transstatus = '2' AND NeedPaymentStatus = '0' THEN 'was pending for passenger upload' " +
                        "  WHEN tm.Transstatus = '3' AND NeedPaymentStatus = '0' THEN 'was confirmed' " +
                        "  WHEN tm.Transstatus IN ('4','6','7') THEN 'was cancelled' " +
                        "  END AS 'Status' " +
                        //" , CASE " +
                        ////"  WHEN (DATEDIFF(hh, tm.BookingDate, sysdatetime())) >= 24 THEN Convert(varchar(10), DATEDIFF(DAY, tm.BookingDate, sysdatetime())) + ' days ago' " +
                        ////"  WHEN (DATEDIFF(hh, tm.BookingDate, sysdatetime())) >= 1 AND (DATEDIFF(hh, tm.BookingDate, sysdatetime())) < 24 THEN Convert(varchar(10), DATEDIFF(hh, tm.BookingDate, sysdatetime())) + ' hours ago' " +
                        ////"  WHEN (DATEDIFF(DAY, tm.BookingDate, sysdatetime()) < 1) THEN Convert(varchar(10), DATEDIFF(mi,DATEADD(hh,DATEDIFF(hh, tm.BookingDate, sysdatetime()),tm.bookingdate),sysdatetime())) + ' minutes ago' " +
                        //"  WHEN (DATEDIFF(hh, tm.BookingDate, sysdatetime())) >= 24 THEN " +
                        //"    CASE WHEN Convert(varchar(10), DATEDIFF(DAY, tm.BookingDate, sysdatetime())) > 1 THEN Convert(varchar(10), DATEDIFF(DAY, tm.BookingDate, sysdatetime())) + ' days ago' ELSE Convert(varchar(10), DATEDIFF(DAY, tm.BookingDate, sysdatetime())) + ' day ago' END " +
                        //"  WHEN (DATEDIFF(hh, tm.BookingDate, sysdatetime())) > 1 AND (DATEDIFF(hh, tm.BookingDate, sysdatetime())) < 24 THEN " +
                        //"    CASE WHEN Convert(varchar(10), DATEDIFF(hh, tm.BookingDate, sysdatetime())) > 1 THEN Convert(varchar(10), DATEDIFF(hh, tm.BookingDate, sysdatetime())) + ' hours ago' ELSE Convert(varchar(10), DATEDIFF(hh, tm.BookingDate, sysdatetime())) + ' hour ago' END " +
                        //"  WHEN (DATEDIFF(hh, tm.BookingDate, sysdatetime()) <= 1) THEN " +
                        //"    CASE WHEN Convert(varchar(10), DATEDIFF(mi,DATEADD(hh,DATEDIFF(hh, tm.BookingDate, sysdatetime()),tm.bookingdate),sysdatetime())) > 1 THEN Convert(varchar(10), DATEDIFF(mi,DATEADD(hh,DATEDIFF(hh, tm.BookingDate, sysdatetime()),tm.bookingdate),sysdatetime())) + ' minutes ago' ELSE Convert(varchar(10), DATEDIFF(mi,DATEADD(hh,DATEDIFF(hh, tm.BookingDate, sysdatetime()),tm.bookingdate),sysdatetime())) + ' minute ago' END " +
                        //"  END as HowLongBookingDate " +
                        " FROM BK_TRANSDTL td, BK_TRANSMAIN tm, AG_PROFILE ag " +
                        " WHERE td.TransID = tm.TransID AND ag.AgentID = tm.AgentID AND LEN(RecordLocator)>=6 AND TransVoid=0 " +
                        " AND tm.IsOverride = 1 " + //added by Sienny 20170316 (for new GBS)
                        " AND DATEDIFF(DAY, tm.BookingDate, sysdatetime()) <= 14 " + strFilter;//amended by diana 20140208, add TransVoid=0 to show valid PNR only

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransactionMain = new BookingTransactionMain();
                        objBookingTransactionMain.TransID = (string)drRow["TransID"];
                        objBookingTransactionMain.TransType = (byte)drRow["TransType"];
                        objBookingTransactionMain.AgentID = (string)drRow["AgentID"];
                        objBookingTransactionMain.AgentName = drRow["FullName"].ToString();
                        objBookingTransactionMain.AgentCatgID = drRow["AgentCatgID"].ToString();
                        objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];

                        objBookingTransactionMain.TransStatus = (byte)drRow["TransStatus"];
                        objBookingTransactionMain.Posted = (byte)drRow["Posted"];
                        objBookingTransactionMain.rowguid = (Guid)drRow["rowguid"];
                        objBookingTransactionMain.CreateBy = drRow["CreateBy"].ToString();
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTransactionMain.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBookingTransactionMain.LastSyncBy = drRow["LastSyncBy"].ToString();

                        objBookingTransactionMain.RecordLocator = drRow["RecordLocator"].ToString();
                        objBookingTransactionMain.pnrTemp = drRow["SellKey"].ToString();

                        objBookingTransactionMain.DepartReturn = drRow["DepartReturn"].ToString();
                        objBookingTransactionMain.DepartCity = drRow["DepartCity"].ToString();
                        objBookingTransactionMain.ReturnCity = drRow["ReturnCity"].ToString();

                        objBookingTransactionMain.Status = drRow["Status"].ToString();
                        //objBookingTransactionMain.HowLongBookingDate = drRow["HowLongBookingDate"].ToString();

                        objListBookingTransMain.Add(objBookingTransactionMain);
                    }
                    return objListBookingTransMain;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public DataTable GetAllBK_TRANSMAINNotification2(string AgentID, string AgentName, int Status)
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBookingTransMain = new List<BookingTransactionMain>();
            DataTable dt;
            DateTime dateValue;
            decimal numValue;
            String strSQL = string.Empty;
            string strFilter = string.Empty;

            try
            {
                if (AgentID != string.Empty)
                    strFilter += "AND tm.AgentID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, AgentID) + "' ";
                if (AgentName != string.Empty)
                    strFilter += "AND (ContactFirstName LIKE '%" + AgentName + "%' OR ContactLastName Like '%" + AgentName + "%' OR (ContactFirstName+' '+ContactLastName) LIKE '%" + AgentName + "%') ";

                if (Status != 0) //amended by diana 20140108 - check for needpaymentstatus
                {
                    if (Status == 1)
                        strFilter += "AND ((TransStatus='" + Status + "' AND ExpiryDate > GETDATE()) OR (TransStatus IN ('2','3')) ";
                    else if (Status == 2)
                        strFilter += "AND (TransStatus='" + Status + "' AND NeedPaymentStatus = '0')";
                    else if (Status == 11) //added by ketee, to show all need payment booking
                        strFilter += "AND ((TransStatus='1') OR (TransStatus IN ('2','3'))) ";
                }

                strFilter += " ORDER BY tm.SyncCreate DESC";

                strSQL = "SELECT DISTINCT TOP 20 td.TransID, tm.TransType, tm.AgentID, ContactFirstName, (ContactFirstName+' '+ContactLastName) as FullName, tm.AgentCatgID, tm.BookingDate " +
                        " , tm.TransStatus, tm.Posted, tm.rowguid, tm.CreateBy, tm.SyncCreate, tm.SyncLastUpd, tm.LastSyncBy " +
                        " , td.Origin AS Origin,td.Destination AS Destination, td.RecordLocator, td.SellKey " +
                        " , (SELECT top(1) Origin + ' - ' + Destination FROM BK_TRANSDTL WHERE TransID=tm.TransID) as DepartReturn " +
                        " , (SELECT top(1) Origin FROM BK_TRANSDTL WHERE TransID=tm.TransID) as DepartCity " +
                        " , (SELECT top(1) Destination FROM BK_TRANSDTL WHERE TransID=tm.TransID) as ReturnCity " +
                        " , CASE " +
                        "  WHEN tm.Transstatus = '0' THEN 'was pending for payment' " +
                        "  WHEN tm.Transstatus = '1' THEN 'was created and pending for payment' " +
                        "  WHEN tm.Transstatus = '2' AND NeedPaymentStatus = '1' THEN 'was pending for payment' " +
                        "  WHEN tm.Transstatus = '3' AND NeedPaymentStatus = '1' THEN 'was pending for payment' " +
                        "  WHEN tm.Transstatus = '2' AND NeedPaymentStatus = '0' THEN 'was pending for passenger upload' " +
                        "  WHEN tm.Transstatus = '3' AND NeedPaymentStatus = '0' THEN 'was confirmed' " +
                        "  WHEN tm.Transstatus IN ('4','6','7') THEN 'was cancelled' " +
                        "  END AS 'Status' " +
                        //" , CASE " +
                        ////"  WHEN (DATEDIFF(hh, tm.BookingDate, sysdatetime())) >= 24 THEN Convert(varchar(10), DATEDIFF(DAY, tm.BookingDate, sysdatetime())) + ' days ago' " +
                        ////"  WHEN (DATEDIFF(hh, tm.BookingDate, sysdatetime())) >= 1 AND (DATEDIFF(hh, tm.BookingDate, sysdatetime())) < 24 THEN Convert(varchar(10), DATEDIFF(hh, tm.BookingDate, sysdatetime())) + ' hours ago' " +
                        ////"  WHEN (DATEDIFF(DAY, tm.BookingDate, sysdatetime()) < 1) THEN Convert(varchar(10), DATEDIFF(mi,DATEADD(hh,DATEDIFF(hh, tm.BookingDate, sysdatetime()),tm.bookingdate),sysdatetime())) + ' minutes ago' " +
                        //"  WHEN (DATEDIFF(hh, tm.BookingDate, sysdatetime())) >= 24 THEN " +
                        //"    CASE WHEN Convert(varchar(10), DATEDIFF(DAY, tm.BookingDate, sysdatetime())) > 1 THEN Convert(varchar(10), DATEDIFF(DAY, tm.BookingDate, sysdatetime())) + ' days ago' ELSE Convert(varchar(10), DATEDIFF(DAY, tm.BookingDate, sysdatetime())) + ' day ago' END " +
                        //"  WHEN (DATEDIFF(hh, tm.BookingDate, sysdatetime())) > 1 AND (DATEDIFF(hh, tm.BookingDate, sysdatetime())) < 24 THEN " +
                        //"    CASE WHEN Convert(varchar(10), DATEDIFF(hh, tm.BookingDate, sysdatetime())) > 1 THEN Convert(varchar(10), DATEDIFF(hh, tm.BookingDate, sysdatetime())) + ' hours ago' ELSE Convert(varchar(10), DATEDIFF(hh, tm.BookingDate, sysdatetime())) + ' hour ago' END " +
                        //"  WHEN (DATEDIFF(hh, tm.BookingDate, sysdatetime()) <= 1) THEN " +
                        //"    CASE WHEN Convert(varchar(10), DATEDIFF(mi,DATEADD(hh,DATEDIFF(hh, tm.BookingDate, sysdatetime()),tm.bookingdate),sysdatetime())) > 1 THEN Convert(varchar(10), DATEDIFF(mi,DATEADD(hh,DATEDIFF(hh, tm.BookingDate, sysdatetime()),tm.bookingdate),sysdatetime())) + ' minutes ago' ELSE Convert(varchar(10), DATEDIFF(mi,DATEADD(hh,DATEDIFF(hh, tm.BookingDate, sysdatetime()),tm.bookingdate),sysdatetime())) + ' minute ago' END " +
                        //"  END as HowLongBookingDate " +
                        " FROM BK_TRANSDTL td, BK_TRANSMAIN tm, AG_PROFILE ag " +
                        " WHERE td.TransID = tm.TransID AND ag.AgentID = tm.AgentID AND LEN(RecordLocator)>=6 AND TransVoid=0 " +
                        " AND tm.IsOverride = 1 " + //added by Sienny 20170316 (for new GBS)
                        " AND DATEDIFF(DAY, tm.BookingDate, sysdatetime()) <= 14 " + strFilter;

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<BookingTransactionMain> GetAllBK_TRANSMAINStatusAdmin(string AgentID, string AgentName, string RecordLocator, int Status)
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBookingTransMain = new List<BookingTransactionMain>();
            DataTable dt;
            DateTime dateValue;
            decimal numValue;
            String strSQL = string.Empty;
            string strFilter = string.Empty;
            string strOrder = string.Empty;
            try
            {

                if (AgentID != string.Empty)
                    strFilter += "AND tm.AgentID='" + AgentID + "' ";
                if (AgentName != string.Empty)
                    strFilter += "AND (ContactFirstName LIKE '%" + AgentName + "%' OR ContactLastName Like '%" + AgentName + "%' OR (ContactFirstName+' '+ContactLastName) LIKE '%" + AgentName + "%') ";
                if (RecordLocator != string.Empty)
                    strFilter += "AND tm.TransID IN (SELECT TransID FROM BK_TRANSDTL WHERE RecordLocator='" + RecordLocator + "') ";
                if (Status != 0 && Status != 11) //amended by diana 20140108 - show in pending if needpaymentstatus=1
                {
                    if (Status == 1)
                        strFilter += "AND ((TransStatus='" + Status + "' AND tm.ExpiryDate > GETDATE()) OR (TransStatus IN ('2','3') AND NeedPaymentStatus = '1')) ";
                    else if (Status == 2)
                        strFilter += "AND (TransStatus='" + Status + "' AND NeedPaymentStatus = '0') ";
                }
                if (Status == 11)
                {
                    strFilter += " AND TransStatus IN (1,2) AND req.TransID is NULL " +
                                 " AND tm.ExpiryDate < DATEADD(day,2,GETDATE()) AND tm.CollectedAmt > 0 ";
                    //Added by ketee, 20160131, verify only STD date > current date
                    strFilter += " AND tm.STDDate > GETDATE()";
                }

                //commented by diana 20140108 - is being checked above
                //if (Status == 1)
                //    strFilter += "AND tm.ExpiryDate > GETDATE() ";
                if (Status == 11)
                {
                    strOrder += " ORDER BY TransStatus, STDDate,ExpiryDate ";
                }
                else
                {
                    strOrder += " ORDER BY ExpiryDate ";
                }
                strSQL = "SELECT DISTINCT tm.TransID, TransType, tm.AgentID,ContactFirstName,(ContactFirstName+' '+ContactLastName) as FullName, tm.AgentCatgID, BookingDate, PaymentDateEx1, PaymentAmtEx1, PaymentDateEx2, PaymentAmtEx2, " +
                      "PaymentDateEx3, PaymentAmtEx3, PaymentDate, CancelDate, tm.ExpiryDate, DATEDIFF(day,GETDATE(),tm.ExpiryDate) AS ExpiryDay, STDDate, tm.Currency, CurrencyPaid, CollectedAmt," +
                      "TotalAmtAVG, TotalAmtGoing, TotalAmtReturn, TransSubTotal, TransTotalAmt, TransTotalFee, TransTotalTax, TransTotalPaxFee," +
                      "TransTotalOth, TransTotalSSR, TransTotalDisc, TransTotalPromoDisc, TransTotalPAX, TransTotalSeat, TransTotalNameChange, TransTotalProcess, TransTotalInfant, TransRemark1, TransRemark2,CurReminderDate,NextReminderDate,ReminderType, TransStatus, Posted, tm.rowguid, tm.CreateBy, tm.SyncCreate, tm.SyncLastUpd, tm.LastSyncBy, tm.PromoCode, " +
                        "CASE " +
                        "WHEN Transstatus = '0' THEN 'Pending' " +
                        "WHEN Transstatus = '1' THEN 'Pending Payment' " +
                        "WHEN Transstatus = '2' THEN 'Pending Passenger Upload' " +
                        "WHEN Transstatus = '3' THEN 'Reconfirmed' " +
                        "WHEN Transstatus IN ('4','6','7') THEN 'Cancel' " +
                        "END AS 'Status' " +
                        " FROM BK_TRANSMAIN tm JOIN AG_PROFILE ag (NOLOCK) on tm.AgentID=ag.AgentID " +
                        " JOIN BK_TRANSDTL bt (NOLOCK) on tm.TransID = bt.TransID LEFT JOIN REQAPPL req (NOLOCK) on req.TransID=tm.TransID AND ReqType='C' AND req.ExpiryDate > GETDATE() AND ApprovedBy IS NULL " +
                        "WHERE TransStatus != '0' AND tm.isOverride = 1 AND TransStatus != '5' AND req.TransID is NULL " + strFilter + " AND LEN(bt.RecordLocator) >= 6 " + strOrder;
                //strSQL = "SELECT td.RecordLocator,tm.TransID, TransType, tm.AgentID,ContactFirstName,(ContactFirstName+' '+ContactLastName) as FullName, tm.AgentCatgID, BookingDate, PaymentDateEx1, PaymentDateEx2," +
                //      "PaymentDateEx3, PaymentDate, CancelDate, tm.ExpiryDate,STDDate, tm.Currency, CurrencyPaid, CollectedAmt," +
                //      "TotalAmtAVG, TotalAmtGoing, TotalAmtReturn, TransSubTotal, TransTotalAmt, TransTotalFee, TransTotalTax," +
                //      "TransTotalOth, TransTotalPAX, TransTotalSeat, TransRemark1, TransRemark2,CurReminderDate,NextReminderDate,ReminderType, TransStatus, Posted, tm.rowguid, tm.CreateBy, tm.SyncCreate, tm.SyncLastUpd, tm.LastSyncBy," +
                //        "CASE " +
                //        "WHEN Transstatus = '0' THEN 'Pending' " +
                //        "WHEN Transstatus = '1' THEN 'Confirmed' " +
                //        "WHEN Transstatus = '2' THEN 'Guaranteed' " +
                //        "WHEN Transstatus = '3' THEN 'Reconfirmed' " +
                //        "WHEN Transstatus = '4' THEN 'Cancel' " +
                //        "END AS 'Status' " +
                //        " FROM BK_TRANSMAIN tm JOIN AG_PROFILE ag (NOLOCK) on tm.AgentID=ag.AgentID " +
                //        " JOIN BK_TRANSDTL td (NOLOCK) on td.TransID=tm.TransID " +
                //        " LEFT JOIN REQAPPL req (NOLOCK) on req.TransID=tm.TransID AND ReqType='C' AND req.ExpiryDate > GETDATE() AND ApprovedBy IS NULL " +
                //        "WHERE TransStatus != '0' AND req.TransID is NULL AND STDDate > GETDATE() " + strFilter +
                //        " GROUP BY tm.TransID,td.RecordLocator,TransType, tm.AgentID,ContactFirstName,ContactLastName,tm.AgentCatgID, BookingDate, PaymentDateEx1, PaymentDateEx2,PaymentDateEx3, PaymentDate, CancelDate, tm.ExpiryDate,STDDate, tm.Currency, CurrencyPaid, CollectedAmt,TotalAmtAVG, TotalAmtGoing, TotalAmtReturn, TransSubTotal, TransTotalAmt, TransTotalFee, TransTotalTax,TransTotalOth, TransTotalPAX, TransTotalSeat, TransRemark1, TransRemark2,CurReminderDate,NextReminderDate,ReminderType, TransStatus, Posted, tm.rowguid, tm.CreateBy, tm.SyncCreate, tm.SyncLastUpd, tm.LastSyncBy " + strOrder;



                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransactionMain = new BookingTransactionMain();
                        objBookingTransactionMain.TransID = (string)drRow["TransID"];
                        objBookingTransactionMain.TransType = (byte)drRow["TransType"];
                        objBookingTransactionMain.AgentID = (string)drRow["AgentID"];
                        objBookingTransactionMain.AgentCatgID = drRow["AgentCatgID"].ToString();
                        objBookingTransactionMain.Status = drRow["Status"].ToString();
                        objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];
                        if (DateTime.TryParse(drRow["PaymentDateEx1"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx1 = (DateTime)drRow["PaymentDateEx1"];
                        if (decimal.TryParse(drRow["PaymentAmtEx1"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx1 = (decimal)drRow["PaymentAmtEx1"];
                        if (DateTime.TryParse(drRow["PaymentDateEx2"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx2 = (DateTime)drRow["PaymentDateEx2"];
                        if (decimal.TryParse(drRow["PaymentAmtEx2"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx2 = (decimal)drRow["PaymentAmtEx2"];
                        if (DateTime.TryParse(drRow["PaymentDateEx3"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx3 = (DateTime)drRow["PaymentDateEx3"];
                        if (decimal.TryParse(drRow["PaymentAmtEx3"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx3 = (decimal)drRow["PaymentAmtEx3"];
                        if (DateTime.TryParse(drRow["PaymentDate"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDate = (DateTime)drRow["PaymentDate"];
                        if (DateTime.TryParse(drRow["CancelDate"].ToString(), out dateValue)) objBookingTransactionMain.CancelDate = (DateTime)drRow["CancelDate"];
                        if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                        if (DateTime.TryParse(drRow["STDDate"].ToString(), out dateValue)) objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];
                        string tempdate1 = String.Format("{0:MM/dd/yyyy}", (DateTime)drRow["STDDate"]);
                        string tempdate2 = String.Format("{0:MM/dd/yyyy}", DateTime.Now);
                        TimeSpan ts = Convert.ToDateTime(tempdate1) - Convert.ToDateTime(tempdate2);
                        objBookingTransactionMain.AgentName = drRow["FullName"].ToString();
                        int tempday = Convert.ToInt32(ts.TotalDays.ToString());
                        if (tempday == 0)
                            objBookingTransactionMain.DueDay = "Today";
                        else if (tempday < 0)
                            objBookingTransactionMain.DueDay = "Overdate";
                        else
                            objBookingTransactionMain.DueDay = ts.TotalDays.ToString() + " day";

                        objBookingTransactionMain.ExpiryDay = (int)drRow["ExpiryDay"]; //added by diana 20140526, show expiry day
                        objBookingTransactionMain.Currency = drRow["Currency"].ToString();
                        objBookingTransactionMain.CurrencyPaid = drRow["CurrencyPaid"].ToString();
                        objBookingTransactionMain.DueAmt = (decimal)drRow["TransTotalAmt"] - (decimal)drRow["CollectedAmt"];
                        objBookingTransactionMain.CollectedAmt = (decimal)drRow["CollectedAmt"];
                        objBookingTransactionMain.TotalAmtAVG = (decimal)drRow["TotalAmtAVG"];
                        objBookingTransactionMain.TotalAmtGoing = (decimal)drRow["TotalAmtGoing"];
                        objBookingTransactionMain.TotalAmtReturn = (decimal)drRow["TotalAmtReturn"];
                        objBookingTransactionMain.TransSubTotal = (decimal)drRow["TransSubTotal"];
                        objBookingTransactionMain.TransTotalAmt = (decimal)drRow["TransTotalAmt"];
                        objBookingTransactionMain.TransTotalFee = (decimal)drRow["TransTotalFee"];
                        objBookingTransactionMain.TransTotalTax = (decimal)drRow["TransTotalTax"];
                        objBookingTransactionMain.TransTotalPaxFee = (decimal)drRow["TransTotalPaxFee"];
                        objBookingTransactionMain.TransTotalOth = (decimal)drRow["TransTotalOth"];
                        objBookingTransactionMain.TransTotalSSR = (decimal)drRow["TransTotalSSR"];
                        objBookingTransactionMain.TransTotalDisc = (decimal)drRow["TransTotalDisc"];
                        objBookingTransactionMain.TransTotalPromoDisc = (decimal)drRow["TransTotalPromoDisc"];
                        objBookingTransactionMain.TransTotalPAX = (int)drRow["TransTotalPAX"];
                        objBookingTransactionMain.TransTotalSeat = (decimal)drRow["TransTotalSeat"];
                        objBookingTransactionMain.TransTotalNameChange = (decimal)drRow["TransTotalNameChange"];
                        objBookingTransactionMain.TransTotalProcess = (decimal)drRow["TransTotalProcess"];
                        objBookingTransactionMain.TransTotalInfant = (decimal)drRow["TransTotalInfant"];
                        objBookingTransactionMain.TransRemark1 = drRow["TransRemark1"].ToString();
                        objBookingTransactionMain.TransRemark2 = drRow["TransRemark2"].ToString();
                        objBookingTransactionMain.TransStatus = (byte)drRow["TransStatus"];
                        objBookingTransactionMain.Posted = (byte)drRow["Posted"];
                        objBookingTransactionMain.rowguid = (Guid)drRow["rowguid"];
                        objBookingTransactionMain.CreateBy = drRow["CreateBy"].ToString();
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTransactionMain.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBookingTransactionMain.LastSyncBy = drRow["LastSyncBy"].ToString();
                        if (DateTime.TryParse(drRow["CurReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.CurReminderDate = (DateTime)drRow["CurReminderDate"];
                        if (DateTime.TryParse(drRow["NextReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.NextReminderDate = (DateTime)drRow["NextReminderDate"];
                        objBookingTransactionMain.ReminderType = (byte)drRow["ReminderType"];
                        objBookingTransactionMain.PromoCode = (string)drRow["PromoCode"];

                        objListBookingTransMain.Add(objBookingTransactionMain);
                    }
                    return objListBookingTransMain;
                }
                else
                {
                    //Amended by Ellis 20170310
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                    //return null;

                }
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                //Amended by Ellis 20170310
                return null;
                //throw new Exception("GetAllBK_TRANSMAINStatusAdmin:", ex);
                //return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        //added by ketee, return hashtable for all UpdatedLatestExpiryTransaction
        public DataTable UpdateAllBooking_PaymentExpiry()
        {
            DataTable hTB = new DataTable();
            Hashtable hTab = new Hashtable();

            try
            {
                List<ABS.Logic.GroupBooking.Booking.BookingTransactionMain> AllTransaction = new List<ABS.Logic.GroupBooking.Booking.BookingTransactionMain>();
                AllTransaction = GetAllBK_TRANSMAINBookingExpiry("", "", "", "1", false);

                foreach (ABS.Logic.GroupBooking.Booking.BookingTransactionMain b in AllTransaction)
                {
                    List<ListTransaction> SingleTransaction = new List<ListTransaction>();
                    SingleTransaction = GetTransactionDetails(b.TransID);
                    ListTransaction lstTrans = SingleTransaction[0];

                    List<BookingTransactionDetail> VoidPNRs = new List<BookingTransactionDetail>();
                    List<BookingTransactionDetail> ExpiredPNRs = new List<BookingTransactionDetail>();
                    if (UpdateAllBookingJourneyDetails(lstTrans, lstTrans.AgentUserName.ToString(), lstTrans.AgentID.ToString(), ref VoidPNRs, ref ExpiredPNRs, true) == false)
                    {
                        if (hTab.ContainsKey(lstTrans.TransID))
                        {
                            hTab.Remove(lstTrans.TransID);
                        }
                        log.Warning(this, "Fail to Get Latest Update for Transaction : " + lstTrans.TransID);
                    }
                    else
                    {
                        if (hTab.ContainsKey(lstTrans.TransID))
                        {
                            hTab.Remove(lstTrans.TransID);
                        }
                        else
                        {
                            hTab.Add(lstTrans.TransID, lstTrans);
                        }
                    }
                }
                return hTB;
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                throw new Exception("UpdateAllBooking_PaymentExpiry:", ex);
                //return null;
            }
        }

        //added by ketee, get all expiry transaction
        public List<BookingTransactionMain> GetAllBK_TRANSMAINBookingExpiry(string AgentID, string AgentName, string RecordLocator, string Status, bool GetUptoDate = false, int DayBeforeExpiry = 0)
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBookingTransMain = new List<BookingTransactionMain>();
            DataTable dt;
            DateTime dateValue;
            decimal numValue;
            String strSQL = string.Empty;
            string strFilter = string.Empty;
            string strOrder = string.Empty;
            try
            {
                if (GetUptoDate == true)
                {
                    strFilter = " AND tm.SyncLastUpd > DATEADD(MINUTE, -60, GETDATE()) ";
                }

                strSQL = " SELECT BK_TRANSDTL.RecordLocator, tm.ExpiryDate, tm.STDDate, tm.CollectedAmt,  ag.ContactFirstName + ' ' + ag.ContactLastName AS FullName," +
                         " CASE WHEN Transstatus = '0' THEN 'Pending' WHEN Transstatus = '1' THEN 'Pending Payment' WHEN Transstatus = '2' THEN 'Pending Passenger Upload' " +
                         " WHEN Transstatus = '3' THEN 'Reconfirmed' WHEN Transstatus IN ('4', '6', '7') THEN 'Cancel' END AS 'Status', tm.TransID, tm.AgentID, tm.TransTotalAmt, tm.SyncLastUpd, " +
                         " ag.Username, tm.BookingDate, tm.PaymentAmtEx3, " +
                         " (SELECT TOP (1) SyncCreate FROM AG_EMAIL WHERE (TransID = tm.TransID) AND (EmailType IN (3, 6)) AND (SyncCreate > DATEADD(DAY, - 2, tm.curreminderdate)) ORDER BY SyncCreate DESC) AS PaymentDateEx3" +
                         " FROM         BK_TRANSMAIN AS tm INNER JOIN " +
                         " AG_PROFILE AS ag WITH (NOLOCK) ON tm.AgentID = ag.AgentID INNER JOIN " +
                         " BK_TRANSDTL ON tm.TransID = BK_TRANSDTL.TransID LEFT OUTER JOIN " +
                         " REQAPPL AS req WITH (NOLOCK) ON req.TransID = tm.TransID AND req.ReqType = 'C' AND req.ExpiryDate > GETDATE() AND req.ApprovedBy IS NULL " +
                         " WHERE     (req.TransID IS NULL) AND (req.TransID IS NULL) " +
                         " GROUP BY BK_TRANSDTL.RecordLocator, tm.TransStatus, tm.CollectedAmt, tm.ExpiryDate, tm.STDDate, tm.TransID, tm.AgentID, tm.TransTotalAmt, tm.SyncLastUpd, " +
                         " ag.Username, tm.BookingDate, ag.ContactFirstName, ag.ContactLastName, tm.curreminderdate, tm.PaymentAmtEx3, tm.IsOverride " +
                         " HAVING      (tm.TransStatus <> '0') AND (tm.TransStatus <> '5') AND (tm.TransStatus IN (" + Status + ")) AND (tm.CollectedAmt > 0) AND (tm.ExpiryDate < DATEADD(day, " + DayBeforeExpiry + ", GETDATE())) AND " +
                         " (tm.STDDate > GETDATE()) AND (LEN(BK_TRANSDTL.RecordLocator) >= 6) AND (tm.IsOverride = 1)  " + strFilter +
                         " ORDER BY tm.Transstatus, tm.STDDate, tm.ExpiryDate ";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransactionMain = new BookingTransactionMain();
                        objBookingTransactionMain.TransID = (string)drRow["TransID"];
                        objBookingTransactionMain.AgentID = (string)drRow["AgentID"];
                        objBookingTransactionMain.Status = drRow["Status"].ToString();
                        objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];
                        if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                        if (DateTime.TryParse(drRow["STDDate"].ToString(), out dateValue)) objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];
                        objBookingTransactionMain.AgentName = drRow["FullName"].ToString();
                        objBookingTransactionMain.DueAmt = (decimal)drRow["TransTotalAmt"] - (decimal)drRow["CollectedAmt"];
                        objBookingTransactionMain.CollectedAmt = (decimal)drRow["CollectedAmt"];
                        objBookingTransactionMain.TransTotalAmt = (decimal)drRow["TransTotalAmt"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        if (DateTime.TryParse(drRow["PaymentDateEx3"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx3 = (DateTime)drRow["PaymentDateEx3"];
                        if (decimal.TryParse(drRow["PaymentAmtEx3"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx3 = (decimal)drRow["PaymentAmtEx3"];
                        objBookingTransactionMain.RecordLocator = drRow["RecordLocator"].ToString();

                        objListBookingTransMain.Add(objBookingTransactionMain);
                    }
                    return objListBookingTransMain;
                }
                else
                {
                    //Amended by Ellis 20170310
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                //Amended by Ellis 20170310
                return null;
                //throw new Exception("GetAllBK_TRANSMAINBookingExpiry: ", ex);
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }

        }

        //added by romy, get all FailEmail Send
        public List<FailEmailList> GetAllAG_EMAILFail(string AgentID)
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            FailEmailList objBookingFailEmail;
            List<FailEmailList> objListBookingFailEmail = new List<FailEmailList>();
            DataTable dt;
            DateTime dateValue;
            decimal numValue;
            String strSQL = string.Empty;
            string strFilter = string.Empty;
            string strOrder = string.Empty;
            try
            {
                strSQL = " select Em.TransID, Pr.OrgName, Em.RecordLocator, Em.EmailAddress, Em.EmailFailedRemark, Em.AttemptCountSenderDate from Ag_Email Em inner join Ag_Profile Pr on pr.agentid = em.agentid where issent='0'";
                dt = objDCom.Execute(strSQL, CommandType.Text, true);
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingFailEmail = new FailEmailList();
                        objBookingFailEmail.TransID = (string)drRow["TransID"];
                        objBookingFailEmail.RecordLocator = (string)drRow["RecordLocator"];
                        objBookingFailEmail.OrgName = (string)drRow["OrgName"];
                        objBookingFailEmail.EmailAddress = (string)drRow["EmailAddress"];
                        objBookingFailEmail.EmailFailedRemark = (string)drRow["EmailFailedRemark"];
                        objBookingFailEmail.AttemptCountSenderDate = (DateTime)drRow["AttemptCountSenderDate"];
                        /*if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                        if (DateTime.TryParse(drRow["STDDate"].ToString(), out dateValue)) objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];
                        objBookingTransactionMain.AgentName = drRow["FullName"].ToString();
                        objBookingTransactionMain.DueAmt = (decimal)drRow["TransTotalAmt"] - (decimal)drRow["CollectedAmt"];
                        objBookingTransactionMain.CollectedAmt = (decimal)drRow["CollectedAmt"];
                        objBookingTransactionMain.TransTotalAmt = (decimal)drRow["TransTotalAmt"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        if (DateTime.TryParse(drRow["PaymentDateEx3"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx3 = (DateTime)drRow["PaymentDateEx3"];
                        if (decimal.TryParse(drRow["PaymentAmtEx3"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx3 = (decimal)drRow["PaymentAmtEx3"];
                        objBookingTransactionMain.RecordLocator = drRow["RecordLocator"].ToString();*/

                        objListBookingFailEmail.Add(objBookingFailEmail);
                    }
                    return objListBookingFailEmail;
                }
                else
                {
                    return null;
                    throw new ApplicationException("AG_EMAIL does not exist.");
                }
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                return null;
            }
            finally
            {
                objSQL.Dispose();
            }

        }

        //added by ketee, get Latest Reminder by transaction id, 20160225
        public string GetLatestReminderbyTransID(string TransID)
        {
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            string result = "";
            try
            {
                strSQL = "SELECT TOP (1) ag.SyncCreate FROM BK_TRANSMAIN tm inner join AG_EMAIL ag on tm.TransID = ag.TransID WHERE (tm.TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "') AND (ag.EmailType IN (3, 6)) AND (ag.SyncCreate > DATEADD(DAY, - 2, tm.curreminderdate)) ORDER BY ag.SyncCreate";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    result = dt.Rows[0]["SyncCreate"].ToString();
                }
                return result;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return "";
            }
            finally
            {
                dt = null;
            }
        }

        //added by ketee, get all expiry transaction
        public List<BookingTransactionMain> GetAllBK_TRANSMAINTransactionExpiry(string AgentID, string AgentName, string RecordLocator, string Status, bool GetUptoDate = false, int DayBeforeExpiry = 0, int numrec = 0)
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBookingTransMain = new List<BookingTransactionMain>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;
            string strFilter = string.Empty;
            string strOrder = string.Empty;
            string strFilterRec = string.Empty;
            try
            {
                if (GetUptoDate == true)
                {
                    strFilter = " AND tm.SyncLastUpd > DATEADD(MINUTE, -60, GETDATE()) ";
                }

                if (numrec > 0)
                {
                    strFilterRec = " TOP " + numrec;
                }


                strSQL = " SELECT " + strFilterRec + " tm.TransStatus, tm.ExpiryDate, tm.STDDate, tm.CollectedAmt, ag.ContactFirstName + ' ' + ag.ContactLastName AS FullName, " +
                         " CASE WHEN Transstatus = '0' THEN 'Pending' WHEN Transstatus = '1' THEN 'Pending Payment' WHEN Transstatus = '2' THEN 'Pending Passenger Upload' WHEN Transstatus " +
                         " = '3' THEN 'Reconfirmed' WHEN Transstatus IN ('4', '6', '7') THEN 'Cancel' END AS 'Status', tm.TransID, tm.AgentID, tm.TransTotalAmt, tm.SyncLastUpd, " +
                         " ag.Username, tm.BookingDate " +
                         " FROM BK_TRANSMAIN AS tm INNER JOIN " +
                         " AG_PROFILE AS ag WITH (NOLOCK) ON tm.AgentID = ag.AgentID INNER JOIN BK_TRANSDTL DT WITH (NOLOCK) ON tm.TransID = DT.TransID LEFT OUTER JOIN " +
                         " REQAPPL AS req WITH (NOLOCK) ON req.TransID = tm.TransID AND req.ReqType = 'C' AND req.ExpiryDate > GETDATE() AND req.ApprovedBy IS NULL " +
                         " WHERE (req.TransID IS NULL) AND (req.TransID IS NULL) AND LEN(DT.RecordLocator) >= 6 " +
                         " GROUP BY tm.TransStatus, tm.CollectedAmt, tm.ExpiryDate, tm.STDDate, tm.TransID, tm.AgentID, tm.TransTotalAmt, tm.SyncLastUpd, ag.Username, tm.BookingDate, " +
                         " ag.ContactFirstName, ag.ContactLastName, tm.IsOverride " +
                         " HAVING (tm.TransStatus <> '0') AND (tm.TransStatus <> '5') AND (tm.TransStatus IN (" + Status + ")) AND (tm.CollectedAmt > 0) AND (tm.ExpiryDate < DATEADD(day, " + DayBeforeExpiry + ", GETDATE())) AND " +
                         " (tm.STDDate > GETDATE()) AND tm.IsOverride = 1 " + strFilter +
                         " ORDER BY tm.SyncLastUpd, tm.TransStatus, tm.STDDate, tm.ExpiryDate ";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransactionMain = new BookingTransactionMain();
                        objBookingTransactionMain.TransID = (string)drRow["TransID"];
                        objBookingTransactionMain.AgentID = (string)drRow["AgentID"];
                        objBookingTransactionMain.Status = drRow["Status"].ToString();
                        objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];
                        if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                        if (DateTime.TryParse(drRow["STDDate"].ToString(), out dateValue)) objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];
                        objBookingTransactionMain.AgentName = drRow["FullName"].ToString();
                        objBookingTransactionMain.DueAmt = (decimal)drRow["TransTotalAmt"] - (decimal)drRow["CollectedAmt"];
                        objBookingTransactionMain.CollectedAmt = (decimal)drRow["CollectedAmt"];
                        objBookingTransactionMain.TransTotalAmt = (decimal)drRow["TransTotalAmt"];
                        objBookingTransactionMain.TransStatus = Convert.ToByte(drRow["TransStatus"]);
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];

                        //objBookingTransactionMain.RecordLocator = drRow["RecordLocator"].ToString();

                        objListBookingTransMain.Add(objBookingTransactionMain);
                    }
                    return objListBookingTransMain;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                throw new Exception("GetAllBK_TRANSMAINBookingExpiry: " + ex.Message, ex);
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public void UpdatePassengerPNR(string prevPNR, string PNR, string TransID, string[] ID)
        {
            bool rValue = false;
            String strSQL = string.Empty;
            ArrayList lstSQL = new ArrayList();

            log.Info(this, "UpdatePassengerPNR('" + prevPNR + "','" + PNR + "','" + TransID + "')");
            string strPrint = "";
            try
            {
                foreach (string str in ID)
                {
                    strSQL = "UPDATE BK_PASSENGERLIST SET RecordLocator='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "' WHERE PassengerID='" + str + "' AND TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, prevPNR) + "'";
                    lstSQL.Add(strSQL);
                    strPrint += strSQL + "\n";
                }
                log.Info(this, strPrint);
                if (lstSQL.Count > 0)
                    rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
            }
            //amended by diana 20131210 - try catch to check for valid booking
            catch (TimeoutException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (OutOfMemoryException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (IndexOutOfRangeException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ThreadInterruptedException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (NullReferenceException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (StackOverflowException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ApplicationException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (Exception ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public void DeletePrevTransaction(string prevTransID, string PNR)
        {
            bool rValue = false;
            String strSQL = string.Empty;
            ArrayList lstSQL = new ArrayList();

            log.Info(this, "DeletePrevTransaction('" + prevTransID + "','" + PNR + "')");
            string strPrint = "";
            try
            {
                strSQL = "DELETE BK_TRANSDTL WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, prevTransID) + "' AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "'";
                lstSQL.Add(strSQL);
                strPrint += strSQL + "\n";

                strSQL = "DELETE BK_PASSENGERLIST WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, prevTransID) + "' AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "'";
                lstSQL.Add(strSQL);
                strPrint += strSQL + "\n";

                log.Info(this, strPrint);
                if (lstSQL.Count > 0)
                    rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
            }
            //amended by diana 20131210 - try catch to check for valid booking
            catch (TimeoutException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (OutOfMemoryException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (IndexOutOfRangeException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ThreadInterruptedException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (NullReferenceException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (StackOverflowException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ApplicationException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (Exception ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public void ClearTotal(string TransID, string PNR)
        {
            bool rValue = false;
            String strSQL = string.Empty;
            ArrayList lstSQL = new ArrayList();

            log.Info(this, "ClearTotal('" + TransID + "','" + PNR + "')");
            string strPrint = "";
            try
            {
                strSQL = "UPDATE BK_TRANSDTL SET LineTotal = 0 WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "'";
                lstSQL.Add(strSQL);
                strPrint += strSQL + "\n";

                log.Info(this, strPrint);
                if (lstSQL.Count > 0)
                    rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
            }
            //amended by diana 20131210 - try catch to check for valid booking
            catch (TimeoutException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (OutOfMemoryException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (IndexOutOfRangeException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ThreadInterruptedException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (NullReferenceException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (StackOverflowException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ApplicationException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (Exception ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public void UPDATEDUEDATE(string TransID, string PNR, DateTime NextDueDate)
        {
            bool rValue = false;
            String strSQL = string.Empty;
            ArrayList lstSQL = new ArrayList();

            log.Info(this, "ClearTotal('" + TransID + "','" + PNR + "')");
            string strPrint = "";
            try
            {
                strSQL = "UPDATE BK_TRANSDTL SET NextDueDate = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtDateTime, NextDueDate) + "' WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "'";
                lstSQL.Add(strSQL);
                strPrint += strSQL + "\n";

                log.Info(this, strPrint);
                if (lstSQL.Count > 0)
                    rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
            }
            //amended by diana 20131210 - try catch to check for valid booking

            catch (Exception ex) { log.Error(this, ex); }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public void UpdatePassengerTransID(string prevTransID, string PNR, string TransID)
        {
            bool rValue = false;
            String strSQL = string.Empty;
            ArrayList lstSQL = new ArrayList();
            DataTable dt = new DataTable();
            List<PassengerData> lstPassenger = new List<PassengerData>();
            log.Info(this, "UpdatePassengerTransID('" + prevTransID + "','" + PNR + "','" + TransID + "')");
            string strPrint = "";
            try
            {
                //strSQL = "SELECT PassengerID FROM BK_PASSENGERLIST WHERE LEN(RecordLocator) >= 6 AND TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, prevTransID) + "' AND RecordLocator = '" + PNR + "'";
                //dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                //if (dt != null && dt.Rows.Count > 0)
                //{
                if (HttpContext.Current.Session["listPassengers"] != null)
                {
                    lstPassenger = (List<PassengerData>)HttpContext.Current.Session["listPassengers"];
                    foreach (PassengerData pax in lstPassenger)
                    {
                        strSQL = "UPDATE BK_PASSENGERLIST SET TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "', DepartSeat = '" + pax.DepartSeat + "', DepartConnectingSeat = '" + pax.DepartConnectingSeat + "', ReturnSeat = '" + pax.ReturnSeat + "', ReturnConnectingSeat = '" + pax.ReturnConnectingSeat + "' WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, prevTransID) + "' AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "' AND FirstName = '" + pax.FirstName + "' AND LastName = '" + pax.LastName + "' AND PassengerID = '" + pax.PassengerID + "'";
                        lstSQL.Add(strSQL);
                        strPrint += strSQL + "\n";
                    }
                }
                //}


                log.Info(this, strPrint);
                if (lstSQL.Count > 0)
                    rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
            }
            //amended by diana 20131210 - try catch to check for valid booking
            catch (TimeoutException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (OutOfMemoryException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (IndexOutOfRangeException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ThreadInterruptedException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (NullReferenceException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (StackOverflowException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ApplicationException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (Exception ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public void UpdateTransTenderTransID(string prevTransID, string PNR, string TransID)
        {
            bool rValue = false;
            String strSQL = string.Empty;
            ArrayList lstSQL = new ArrayList();

            log.Info(this, "UpdateTransTenderTransID('" + prevTransID + "','" + PNR + "','" + TransID + "')");
            string strPrint = "";
            try
            {
                strSQL = "UPDATE BK_TRANSTENDER SET TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, prevTransID) + "' AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "'";
                lstSQL.Add(strSQL);
                strPrint += strSQL + "\n";

                log.Info(this, strPrint);
                if (lstSQL.Count > 0)
                    rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
            }
            //amended by diana 20131210 - try catch to check for valid booking
            catch (TimeoutException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (OutOfMemoryException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (IndexOutOfRangeException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ThreadInterruptedException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (NullReferenceException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (StackOverflowException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ApplicationException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (Exception ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public void UpdatePassengerPNRforDivide(string prevPNR, string PNR, string TransID, string[] ID)
        {
            bool rValue = false;
            String strSQL = string.Empty;
            string strSQLDelete = "";
            ArrayList lstSQL = new ArrayList();
            PassengerContainer objPassengerContainerPrev = new PassengerContainer();
            List<PassengerContainer> lstPassengerContainerPrev = new List<PassengerContainer>();
            List<PassengerContainer> lstPassengerContainerPrevInft = new List<PassengerContainer>();
            PassengerContainer objPassengerContainer = new PassengerContainer();
            List<PassengerContainer> lstPassengerContainer = new List<PassengerContainer>();
            List<PassengerContainer> lstPassengerContainerInft = new List<PassengerContainer>();
            List<PassengerContainer> lstPassengerContainerSSR = new List<PassengerContainer>();
            Navitaire.APIBooking ApiBook = new Navitaire.APIBooking("");
            Navitaire.BookingManager.GetBookingResponse Response = new Navitaire.BookingManager.GetBookingResponse();

            log.Info(this, "UpdatePassengerPNR('" + prevPNR + "','" + PNR + "','" + TransID + "')");
            string strPrint = "";
            try
            {
                Response = ApiBook.GetBookingResponseByPNR(prevPNR);
                if (Response != null)
                {
                    for (int i = 0; i < Response.Booking.Passengers.Length; i++)
                    {
                        objPassengerContainerPrev = new PassengerContainer();
                        objPassengerContainerPrev.PassengerNumber = Response.Booking.Passengers[i].PassengerNumber;
                        objPassengerContainerPrev.FirstName = Response.Booking.Passengers[i].Names[0].FirstName;
                        objPassengerContainerPrev.LastName = Response.Booking.Passengers[i].Names[0].LastName;
                        lstPassengerContainerPrev.Add(objPassengerContainerPrev);
                        if (Response.Booking.Passengers[i].Infant != null)
                        {
                            objPassengerContainerPrev = new PassengerContainer();
                            objPassengerContainerPrev.PassengerNumber = Response.Booking.Passengers[i].PassengerNumber;
                            objPassengerContainerPrev.RecordLocator = Response.Booking.RecordLocator;
                            objPassengerContainerPrev.Title = "INFT";
                            if (Response.Booking.Passengers[i].Infant.Gender == Gender.Male)
                            {
                                objPassengerContainerPrev.Gender = "Male";
                            }
                            else
                            {
                                objPassengerContainerPrev.Gender = "Female";
                            }
                            objPassengerContainerPrev.DOB = Response.Booking.Passengers[i].Infant.DOB;
                            objPassengerContainerPrev.Nationality = Response.Booking.Passengers[i].Infant.Nationality;
                            objPassengerContainerPrev.IssuingCountry = Response.Booking.Passengers[i].Infant.ResidentCountry;
                            if (Response.Booking.Passengers[i].PassengerTravelDocuments != null && Response.Booking.Passengers[i].PassengerTravelDocuments.Count() > 1)
                            {
                                objPassengerContainerPrev.PassportNo = Response.Booking.Passengers[i].PassengerTravelDocuments[1].DocNumber;
                                objPassengerContainerPrev.ExpiryDate = Response.Booking.Passengers[i].PassengerTravelDocuments[1].ExpirationDate;

                            }
                            if (Response.Booking.Passengers[i].Infant.Names[0].FirstName == "TBA")
                            {
                                objPassengerContainerPrev.FirstName = "Infant";
                                objPassengerContainerPrev.LastName = "Infant";
                            }
                            else
                            {
                                objPassengerContainerPrev.FirstName = Response.Booking.Passengers[i].Infant.Names[0].FirstName;
                                objPassengerContainerPrev.LastName = Response.Booking.Passengers[i].Infant.Names[0].LastName;
                            }
                            objPassengerContainerPrev.SyncCreate = DateTime.Now;
                            objPassengerContainerPrev.SyncLastUpd = DateTime.Now;
                            lstPassengerContainerPrevInft.Add(objPassengerContainerPrev);
                        }
                    }
                }

                Response = ApiBook.GetBookingResponseByPNR(PNR);
                if (Response != null)
                {
                    for (int i = 0; i < Response.Booking.Passengers.Length; i++)
                    {
                        objPassengerContainer = new PassengerContainer();
                        objPassengerContainer.PassengerNumber = Response.Booking.Passengers[i].PassengerNumber;
                        objPassengerContainer.FirstName = Response.Booking.Passengers[i].Names[0].FirstName;
                        objPassengerContainer.LastName = Response.Booking.Passengers[i].Names[0].LastName;
                        lstPassengerContainer.Add(objPassengerContainer);

                        if (Response.Booking.Passengers[i].Infant != null)
                        {
                            objPassengerContainerPrev = new PassengerContainer();
                            objPassengerContainerPrev.PassengerNumber = Response.Booking.Passengers[i].PassengerNumber;
                            objPassengerContainerPrev.RecordLocator = Response.Booking.RecordLocator;
                            objPassengerContainerPrev.Title = "INFT";
                            if (Response.Booking.Passengers[i].Infant.Gender == Gender.Male)
                            {
                                objPassengerContainerPrev.Gender = "Male";
                            }
                            else
                            {
                                objPassengerContainerPrev.Gender = "Female";
                            }
                            objPassengerContainerPrev.DOB = Response.Booking.Passengers[i].Infant.DOB;
                            objPassengerContainerPrev.Nationality = Response.Booking.Passengers[i].Infant.Nationality;
                            objPassengerContainerPrev.IssuingCountry = Response.Booking.Passengers[i].Infant.ResidentCountry;
                            if (Response.Booking.Passengers[i].PassengerTravelDocuments != null && Response.Booking.Passengers[i].PassengerTravelDocuments.Count() > 1)
                            {
                                objPassengerContainerPrev.PassportNo = Response.Booking.Passengers[i].PassengerTravelDocuments[1].DocNumber;
                                objPassengerContainerPrev.ExpiryDate = Response.Booking.Passengers[i].PassengerTravelDocuments[1].ExpirationDate;
                            }
                            if (Response.Booking.Passengers[i].Infant.Names[0].FirstName == "TBA")
                            {
                                objPassengerContainerPrev.FirstName = "Infant";
                                objPassengerContainerPrev.LastName = "Infant";
                            }
                            else
                            {
                                objPassengerContainerPrev.FirstName = Response.Booking.Passengers[i].Infant.Names[0].FirstName;
                                objPassengerContainerPrev.LastName = Response.Booking.Passengers[i].Infant.Names[0].LastName;
                            }
                            objPassengerContainerPrev.SyncCreate = DateTime.Now;
                            objPassengerContainerPrev.SyncLastUpd = DateTime.Now;
                            lstPassengerContainerPrevInft.Add(objPassengerContainerPrev);
                        }

                    }
                }

                lstPassengerContainer.OrderBy(x => x.PassengerNumber);

                foreach (PassengerContainer objPassengerCont in lstPassengerContainer)
                {
                    strSQL = "UPDATE BK_PASSENGERLIST SET RecordLocator='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "', PassengerID = '" + objPassengerCont.PassengerNumber + "' WHERE FirstName = '" + objPassengerCont.FirstName + "' AND LastName = '" + objPassengerCont.LastName + "' AND TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, prevPNR) + "'";
                    lstSQL.Add(strSQL);
                    strPrint += strSQL + "\n";
                }

                lstPassengerContainerPrev.OrderBy(x => x.PassengerNumber);

                foreach (PassengerContainer objPassengerCont in lstPassengerContainerPrev)
                {
                    strSQL = "UPDATE BK_PASSENGERLIST SET PassengerID = '" + objPassengerCont.PassengerNumber + "' WHERE FirstName = '" + objPassengerCont.FirstName + "' AND LastName = '" + objPassengerCont.LastName + "' AND TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, prevPNR) + "'";
                    lstSQL.Add(strSQL);
                    strPrint += strSQL + "\n";
                }

                strSQLDelete = "DELETE BK_PASSENGERLIST WHERE TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, prevPNR) + "' AND Title = 'INFT'";
                objDCom.Execute(strSQLDelete, DataAccess.EnumRtnType.rtNone, CommandType.Text);

                if (lstPassengerContainerPrevInft != null && lstPassengerContainerPrevInft.Count > 0)
                {
                    lstPassengerContainerPrevInft.OrderBy(x => x.PassengerNumber);

                    foreach (PassengerContainer pBK_PASSENGERLIST_Info in lstPassengerContainerPrevInft)
                    {
                        objSQL.AddField("TransID", objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("RecordLocator", pBK_PASSENGERLIST_Info.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PassengerID", pBK_PASSENGERLIST_Info.PassengerNumber, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Title", pBK_PASSENGERLIST_Info.Title, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Gender", pBK_PASSENGERLIST_Info.Gender, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FirstName", pBK_PASSENGERLIST_Info.FirstName, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LastName", pBK_PASSENGERLIST_Info.LastName, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PrevFirstName1", pBK_PASSENGERLIST_Info.PrevFirstName1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PrevLastName1", pBK_PASSENGERLIST_Info.PrevLastName1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PrevFirstName2", pBK_PASSENGERLIST_Info.PrevFirstName2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PrevLastName2", pBK_PASSENGERLIST_Info.PrevLastName2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Nationality", pBK_PASSENGERLIST_Info.Nationality, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DOB", pBK_PASSENGERLIST_Info.DOB, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PassportNo", pBK_PASSENGERLIST_Info.PassportNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("IssuingCountry", pBK_PASSENGERLIST_Info.IssuingCountry, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ExpiryDate", pBK_PASSENGERLIST_Info.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ChangeFee", pBK_PASSENGERLIST_Info.ChangeFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ChangeDate", pBK_PASSENGERLIST_Info.ChangeDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ChangeFee2", pBK_PASSENGERLIST_Info.ChangeFee2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ChangeDate2", pBK_PASSENGERLIST_Info.ChangeDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ChangeCount", pBK_PASSENGERLIST_Info.ChangeCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("MaxChange", pBK_PASSENGERLIST_Info.MaxChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("MaxPax1", pBK_PASSENGERLIST_Info.MaxPax1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("MaxPax2", pBK_PASSENGERLIST_Info.MaxPax2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncCreate", pBK_PASSENGERLIST_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncLastUpd", pBK_PASSENGERLIST_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_PASSENGERLIST", string.Empty);

                        lstSQL.Add(strSQL);
                        strPrint += strSQL + "\n";
                    }
                }

                if (sesscon.GetAllPassengerContainer() != null) //grabbing journey details
                {
                    lstPassengerContainerSSR = sesscon.GetAllPassengerContainer();
                    foreach (PassengerContainer objPassengerConts in lstPassengerContainerSSR)
                    {
                        foreach (PassengerContainer objPassengerCont in lstPassengerContainer)
                        {
                            if (objPassengerCont.FirstName == objPassengerConts.FirstName && objPassengerCont.LastName == objPassengerConts.LastName)
                            {
                                strSQL = " UPDATE BK_TRANSADDON SET RecordLocator='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "', PassengerID = '" + objPassengerCont.PassengerNumber + "' WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, prevPNR) + "' AND PassengerID = '" + objPassengerConts.PassengerNumber + "'";
                                lstSQL.Add(strSQL);
                                strPrint += strSQL + "\n";
                            }
                        }

                        lstPassengerContainerPrev.OrderBy(x => x.PassengerNumber);

                        foreach (PassengerContainer objPassengerCont in lstPassengerContainerPrev)
                        {
                            if (objPassengerCont.FirstName == objPassengerConts.FirstName && objPassengerCont.LastName == objPassengerConts.LastName)
                            {
                                //update SSR table
                                strSQL = " UPDATE BK_TRANSADDON SET PassengerID = '" + objPassengerCont.PassengerNumber + "' WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, prevPNR) + "' AND PassengerID = '" + objPassengerConts.PassengerNumber + "'";
                                lstSQL.Add(strSQL);
                                strPrint += strSQL + "\n";
                            }
                        }
                    }

                }

                log.Info(this, strPrint);
                if (lstSQL.Count > 0)
                    rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
            }



            //amended by diana 20131210 - try catch to check for valid booking
            catch (TimeoutException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (OutOfMemoryException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (IndexOutOfRangeException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ThreadInterruptedException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (NullReferenceException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (StackOverflowException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ApplicationException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (Exception ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public void UpdatePassengerInfantPNR(string prevPNR, string PNR, string TransID, string[] ID, string[] IDPass)
        {
            bool rValue = false;
            String strSQL = string.Empty;
            ArrayList lstSQL = new ArrayList();
            DataTable dt = new DataTable();
            log.Info(this, "UpdatePassengerPNR('" + prevPNR + "','" + PNR + "','" + TransID + "')");
            string strPrint = "";
            try
            {
                strSQL = "SELECT RecordLocator FROM BK_PASSENGERLIST WHERE TransID='" + TransID + "' AND RecordLocator = '" + prevPNR + "' AND Title = 'INFT'";
                dt = objDCom.Execute(strSQL, CommandType.Text, true);
                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (dt.Rows[i]["RecordLocator"].ToString().Trim() == prevPNR.Trim())
                        {
                            foreach (string str in ID)
                            {
                                strSQL = "UPDATE BK_PASSENGERLIST SET RecordLocator='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "' WHERE Title = 'INFT' AND TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, prevPNR) + "' AND PassengerID = '" + ID + "'";
                                lstSQL.Add(strSQL);
                                strPrint += strSQL + "\n";
                            }
                        }
                    }
                }
                log.Info(this, strPrint);
                if (lstSQL.Count > 0)
                    rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
            }
            //amended by diana 20131210 - try catch to check for valid booking
            catch (TimeoutException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (OutOfMemoryException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (IndexOutOfRangeException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ThreadInterruptedException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (NullReferenceException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (StackOverflowException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ApplicationException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (Exception ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public void UpdateSSRPNR(string prevPNR, string PNR, string TransID, string[] ID)
        {
            bool rValue = false;
            String strSQL = string.Empty;
            ArrayList lstSQL = new ArrayList();

            log.Info(this, "UpdateSSRPNR('" + prevPNR + "','" + PNR + "','" + TransID + "')");
            string strPrint = "";
            try
            {
                foreach (string str in ID)
                {
                    strSQL = "UPDATE BK_TRANSSSR SET RecordLocator='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "' WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, prevPNR) + "'";
                    lstSQL.Add(strSQL);
                    strPrint += strSQL + "\n";
                }
                log.Info(this, strPrint);
                if (lstSQL.Count > 0)
                    rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
            }
            //amended by diana 20131210 - try catch to check for valid booking
            catch (TimeoutException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (OutOfMemoryException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (IndexOutOfRangeException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ThreadInterruptedException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (NullReferenceException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (StackOverflowException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ApplicationException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (Exception ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public void UpdateNewSSRPNR(string prevPNR, string PNR, string TransID, string[] ID)
        {
            bool rValue = false;
            String strSQL = string.Empty;
            ArrayList lstSQL = new ArrayList();

            log.Info(this, "UpdateNewSSRPNR('" + prevPNR + "','" + PNR + "','" + TransID + "')");
            string strPrint = "";
            try
            {
                foreach (string str in ID)
                {
                    strSQL = "UPDATE BK_TRANSADDON SET RecordLocator='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "' WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, prevPNR) + "'";
                    lstSQL.Add(strSQL);
                    strPrint += strSQL + "\n";
                }
                log.Info(this, strPrint);
                if (lstSQL.Count > 0)
                    rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
            }
            //amended by diana 20131210 - try catch to check for valid booking
            catch (TimeoutException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (OutOfMemoryException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (IndexOutOfRangeException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ThreadInterruptedException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (NullReferenceException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (StackOverflowException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ApplicationException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (Exception ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public void UpdateTransFeesPNR(string prevPNR, string PNR, string TransID, string[] ID)
        {
            bool rValue = false;
            String strSQL = string.Empty;
            ArrayList lstSQL = new ArrayList();

            log.Info(this, "UpdateTransFeesPNR('" + prevPNR + "','" + PNR + "','" + TransID + "')");
            string strPrint = "";
            try
            {
                foreach (string str in ID)
                {
                    strSQL = "UPDATE BK_TRANSFEES SET RecordLocator='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "' WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, prevPNR) + "'";
                    lstSQL.Add(strSQL);
                    strPrint += strSQL + "\n";
                }
                log.Info(this, strPrint);
                if (lstSQL.Count > 0)
                    rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
            }
            //amended by diana 20131210 - try catch to check for valid booking
            catch (TimeoutException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (OutOfMemoryException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (IndexOutOfRangeException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ThreadInterruptedException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (NullReferenceException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (StackOverflowException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ApplicationException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (Exception ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public void InsertTransDetailPNR(string prevPNR, string PNR)
        {
            bool rValue = false;
            String strSQL = string.Empty;
            ArrayList lstSQL = new ArrayList();

            log.Info(this, "UpdatePNR('" + prevPNR + "','" + PNR + "')");
            string strPrint = "";
            try
            {
                strSQL = "UPDATE BK_TRANSDTL SET RecordLocator='" + PNR + "' WHERE RecordLocator = '" + prevPNR + "'";
                lstSQL.Add(strSQL);
                strPrint += strSQL + "\n";
                //strSQL = "UPDATE BK_PASSENGERLIST SET RecordLocator='" + PNR + "' WHERE RecordLocator = '" + prevPNR + "'";
                //lstSQL.Add(strSQL);
                //strPrint += strSQL + "\n";
                //strSQL = "UPDATE BK_TRANSSSR SET RecordLocator='" + PNR + "' WHERE RecordLocator = '" + prevPNR + "'";
                //lstSQL.Add(strSQL);
                //strPrint += strSQL + "\n";

                log.Info(this, strPrint);
                if (lstSQL.Count > 0)
                    rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
            }
            //amended by diana 20131210 - try catch to check for valid booking
            catch (TimeoutException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (OutOfMemoryException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (IndexOutOfRangeException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ThreadInterruptedException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (NullReferenceException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (StackOverflowException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (ApplicationException ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            catch (Exception ex) { log.Error(this, ex); CheckJourneyExist(ex.Message.ToString(), "", PNR); }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<BookingTransactionMain> GetAllBK_TRANSMAINFilter(DateTime StartDate, DateTime EndDate, string TransID, string AgentID, int Status, string PNR = "")
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBookingTransMain = new List<BookingTransactionMain>();
            DataTable dt;
            DateTime dateValue;
            decimal numValue;
            String strSQL = string.Empty;
            string strFilter = string.Empty;
            string strFilterDate = string.Empty;
            string strFilterTransIDPNR = string.Empty;
            string strFilterStatus = string.Empty;

            try
            {
                //strFilter = "AND ('" + String.Format("{0:yyyy-MM-dd}", StartDate) + " 00:00:00'<= BookingDate AND '" + String.Format("{0:yyyy-MM-dd}", EndDate) + " 23:59:59' >= BookingDate) ";
                //if (TransID != string.Empty || PNR != string.Empty)
                //    strFilter += "AND (TransID='" + TransID + "' OR TransID =(SELECT DISTINCT TransID FROM BK_TRANSDTL WHERE RecordLocator='" + PNR + "')) ";//amended by diana 20140112 - for filtering PNR

                if (AgentID != string.Empty)
                    strFilter += "AND tm.AgentID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, AgentID) + "' ";

                if (Status != 0) //amended by diana 20140108 - check for needpaymentstatus
                {
                    //    //if (Status == 1)
                    //    //    strFilter += "AND ((TransStatus='" + Status + "' AND ExpiryDate > GETDATE()) OR (TransStatus IN ('2','3') AND NeedPaymentStatus = '1')) ";
                    //    //else if (Status == 2)
                    //    //    strFilter += "AND (TransStatus='" + Status + "' AND NeedPaymentStatus = '0')";

                    //    //20170309 Sienny
                    //    if (Status == 1)
                    //        strFilter += "AND ((TransStatus='" + Status + "' AND ExpiryDate > GETDATE()) OR (TransStatus IN ('2','3') AND NeedPaymentStatus = '1')) ";
                    //    else if (Status == 2)
                    //        strFilter += "AND (TransStatus='" + Status + "' AND NeedPaymentStatus = '0')";
                    //    else if (Status == 3)
                    //        strFilter += "AND (TransStatus='" + Status + "' AND NeedPaymentStatus = '0')";
                    //    else if (Status == 4)
                    //        strFilter += "AND (TransStatus>='" + Status + "')";

                    if (Status == 1)
                        strFilterStatus = "AND ((TransStatus='" + Status + "' AND ExpiryDate > GETDATE()) OR (TransStatus IN ('2','3') AND NeedPaymentStatus = '1')) ";
                    else if (Status == 2)
                        strFilterStatus = "AND (TransStatus='" + Status + "' AND NeedPaymentStatus = '0')";
                    else if (Status == 3)
                        strFilterStatus = "AND (TransStatus='" + Status + "' AND NeedPaymentStatus = '0')";
                    else if (Status == 4)
                        strFilterStatus = "AND (TransStatus>='" + Status + "')";
                }

                //no need to filter date and status if key in trans id or pnr (20170228 - Sienny)
                strFilterDate = "AND ('" + String.Format("{0:yyyy-MM-dd}", StartDate) + " 00:00:00'<= BookingDate AND '" + String.Format("{0:yyyy-MM-dd}", EndDate) + " 23:59:59' >= BookingDate) ";
                if (TransID != string.Empty || PNR != string.Empty)
                    strFilterTransIDPNR = "AND (TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' OR TransID=(SELECT DISTINCT TransID FROM BK_TRANSDTL WHERE RecordLocator='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "')) ";//amended by diana 20140112 - for filtering PNR
                if (strFilterTransIDPNR != string.Empty)
                    strFilter += strFilterTransIDPNR;
                else
                    strFilter += strFilterDate + strFilterStatus;

                //amended by diana - case when transstatus is 2 or 3 and needpaymentstatus is 1 then pending
                strSQL = "SELECT TransID, TransType, tm.AgentID, tm.AgentCatgID,(ContactFirstName +' ' + ContactLastName) as FullName, BookingDate, PaymentDateEx1, PaymentAmtEx1, PaymentDateEx2, PaymentAmtEx2, " +
                      "PaymentDateEx3, PaymentAmtEx3, PaymentDate, CancelDate, ExpiryDate,STDDate, Currency, CurrencyPaid, CollectedAmt," +
                      "TotalAmtAVG, TotalAmtGoing, TotalAmtReturn, TransSubTotal, TransTotalAmt, TransTotalFee, TransTotalTax, TransTotalPaxFee," +
                      "TransTotalOth, TransTotalDisc, TransTotalPromoDisc, TransTotalPAX, TransTotalSSR, TransTotalSeat, TransTotalNameChange, TransTotalProcess, TransTotalInfant, TransRemark1, TransRemark2,CurReminderDate,NextReminderDate,ReminderType, TransStatus, Posted, tm.rowguid, tm.CreateBy, tm.SyncCreate, tm.SyncLastUpd, tm.LastSyncBy, tm.PromoCode, " +
                        "CASE " +
                        "WHEN Transstatus = '0' THEN 'Pending' " +
                        "WHEN Transstatus = '1' THEN 'Pending' " +
                        "WHEN Transstatus = '2' AND NeedPaymentStatus = '1' THEN 'Pending' " +
                        "WHEN Transstatus = '3' AND NeedPaymentStatus = '1' THEN 'Pending' " +
                        "WHEN Transstatus = '2' AND NeedPaymentStatus = '0' THEN 'Pending for Passenger Upload' " +
                        "WHEN Transstatus = '3' AND NeedPaymentStatus = '0' THEN 'Confirmed' " +
                        "WHEN Transstatus IN ('4','6','7') THEN 'Cancelled' " +
                        "END AS 'Status' " +
                        " FROM BK_TRANSMAIN tm JOIN AG_PROFILE ag (NOLOCK) on tm.AgentID=ag.AgentID " +
                        "WHERE TransStatus != '0' AND TransStatus != '5' AND TransStatus != '9' " + strFilter;
                /*
                "WHEN Transstatus = '0' THEN 'Pending' " +
                "WHEN Transstatus = '1' THEN 'Confirmed' " +
                "WHEN Transstatus = '2' THEN 'Guaranteed' " +
                "WHEN Transstatus = '3' THEN 'Reconfirmed' " +
                "WHEN Transstatus = '4' THEN 'Cancel' " +
                 * */
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransactionMain = new BookingTransactionMain();
                        objBookingTransactionMain.TransID = (string)drRow["TransID"];
                        objBookingTransactionMain.TransType = (byte)drRow["TransType"];
                        objBookingTransactionMain.AgentID = (string)drRow["AgentID"];
                        objBookingTransactionMain.AgentCatgID = drRow["AgentCatgID"].ToString();
                        objBookingTransactionMain.Status = drRow["Status"].ToString();
                        objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];
                        if (DateTime.TryParse(drRow["PaymentDateEx1"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx1 = (DateTime)drRow["PaymentDateEx1"];
                        if (decimal.TryParse(drRow["PaymentAmtEx1"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx1 = (decimal)drRow["PaymentAmtEx1"];
                        if (DateTime.TryParse(drRow["PaymentDateEx2"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx2 = (DateTime)drRow["PaymentDateEx2"];
                        if (decimal.TryParse(drRow["PaymentAmtEx2"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx2 = (decimal)drRow["PaymentAmtEx2"];
                        if (DateTime.TryParse(drRow["PaymentDateEx3"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx3 = (DateTime)drRow["PaymentDateEx3"];
                        if (decimal.TryParse(drRow["PaymentAmtEx3"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx3 = (decimal)drRow["PaymentAmtEx3"];
                        if (DateTime.TryParse(drRow["PaymentDate"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDate = (DateTime)drRow["PaymentDate"];
                        if (DateTime.TryParse(drRow["CancelDate"].ToString(), out dateValue)) objBookingTransactionMain.CancelDate = (DateTime)drRow["CancelDate"];
                        if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                        if (DateTime.TryParse(drRow["STDDate"].ToString(), out dateValue)) objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];
                        objBookingTransactionMain.Currency = drRow["Currency"].ToString();
                        objBookingTransactionMain.CurrencyPaid = drRow["CurrencyPaid"].ToString();
                        objBookingTransactionMain.CollectedAmt = (decimal)drRow["CollectedAmt"];
                        objBookingTransactionMain.TotalAmtAVG = (decimal)drRow["TotalAmtAVG"];
                        objBookingTransactionMain.AgentName = drRow["FullName"].ToString();
                        objBookingTransactionMain.TotalAmtGoing = (decimal)drRow["TotalAmtGoing"];
                        objBookingTransactionMain.TotalAmtReturn = (decimal)drRow["TotalAmtReturn"];
                        objBookingTransactionMain.TransSubTotal = (decimal)drRow["TransSubTotal"];
                        objBookingTransactionMain.TransTotalAmt = (decimal)drRow["TransTotalAmt"];
                        objBookingTransactionMain.TransTotalFee = (decimal)drRow["TransTotalFee"];
                        objBookingTransactionMain.TransTotalTax = (decimal)drRow["TransTotalTax"];
                        objBookingTransactionMain.TransTotalPaxFee = (decimal)drRow["TransTotalPaxFee"];
                        objBookingTransactionMain.TransTotalOth = (decimal)drRow["TransTotalOth"];
                        objBookingTransactionMain.TransTotalSSR = (decimal)drRow["TransTotalSSR"];
                        objBookingTransactionMain.TransTotalDisc = (decimal)drRow["TransTotalDisc"];
                        objBookingTransactionMain.TransTotalPromoDisc = (decimal)drRow["TransTotalPromoDisc"];
                        objBookingTransactionMain.TransTotalPAX = (int)drRow["TransTotalPAX"];
                        objBookingTransactionMain.TransTotalSeat = (decimal)drRow["TransTotalSeat"];
                        objBookingTransactionMain.TransTotalNameChange = (decimal)drRow["TransTotalNameChange"];
                        objBookingTransactionMain.TransTotalProcess = (decimal)drRow["TransTotalProcess"];
                        objBookingTransactionMain.TransTotalInfant = (decimal)drRow["TransTotalInfant"];
                        objBookingTransactionMain.TransRemark1 = drRow["TransRemark1"].ToString();
                        objBookingTransactionMain.TransRemark2 = drRow["TransRemark2"].ToString();
                        objBookingTransactionMain.TransStatus = (byte)drRow["TransStatus"];
                        objBookingTransactionMain.Posted = (byte)drRow["Posted"];
                        objBookingTransactionMain.rowguid = (Guid)drRow["rowguid"];
                        objBookingTransactionMain.CreateBy = drRow["CreateBy"].ToString();
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTransactionMain.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBookingTransactionMain.LastSyncBy = drRow["LastSyncBy"].ToString();
                        if (DateTime.TryParse(drRow["CurReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.CurReminderDate = (DateTime)drRow["CurReminderDate"];
                        if (DateTime.TryParse(drRow["NextReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.NextReminderDate = (DateTime)drRow["NextReminderDate"];
                        objBookingTransactionMain.ReminderType = (byte)drRow["ReminderType"];
                        objBookingTransactionMain.PromoCode = (string)drRow["PromoCode"];

                        objListBookingTransMain.Add(objBookingTransactionMain);
                    }
                    return objListBookingTransMain;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        //added by bernad 20170117 - filter Management booking page
        public List<BookingTransactionMain> GetAllBK_TRANSMAINFilterManagementBooking(DateTime StartDate, DateTime EndDate, string TransID, string AgentID, int Status, string PNR = "")
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBookingTransMain = new List<BookingTransactionMain>();
            DataTable dt;
            DateTime dateValue;
            decimal numValue;
            String strSQL = string.Empty;
            string strFilter = string.Empty;
            string strFilterDate = string.Empty;
            string strFilterTransIDPNR = string.Empty;
            string strFilterStatus = string.Empty;

            try
            {
                //strFilter = "AND ('" + String.Format("{0:yyyy-MM-dd}", StartDate) + " 00:00:00'<= BookingDate AND '" + String.Format("{0:yyyy-MM-dd}", EndDate) + " 23:59:59' >= BookingDate) ";
                //if (TransID != string.Empty || PNR != string.Empty)
                //    strFilter += "AND (TransID='" + TransID + "' OR TransID =(SELECT DISTINCT TransID FROM BK_TRANSDTL WHERE RecordLocator='" + PNR + "')) ";//amended by diana 20140112 - for filtering PNR

                if (AgentID != string.Empty)
                    strFilter += "AND tm.AgentID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, AgentID) + "' ";

                if (Status != 0) //amended by diana 20140108 - check for needpaymentstatus
                {
                    //if (Status == 1)
                    //    strFilter += "AND ((TransStatus='" + Status + "' AND ExpiryDate > GETDATE()) OR (TransStatus IN ('2','3') AND NeedPaymentStatus = '1')) ";
                    //else if (Status == 2)
                    //    strFilter += "AND (TransStatus='" + Status + "' AND NeedPaymentStatus = '0')";
                    //else if (Status == 3)
                    //    strFilter += "AND (TransStatus='" + Status + "' AND NeedPaymentStatus = '0')";
                    //else if (Status == 4)
                    //    strFilter += "AND (TransStatus>='" + Status + "')";

                    if (Status == 1)
                        strFilterStatus = "AND ((TransStatus='" + Status + "' AND ExpiryDate > GETDATE()) OR (TransStatus IN ('2','3') AND NeedPaymentStatus = '1')) ";
                    else if (Status == 2)
                        strFilterStatus = "AND (TransStatus='" + Status + "' AND NeedPaymentStatus = '0')";
                    else if (Status == 3)
                        strFilterStatus = "AND (TransStatus='" + Status + "' AND NeedPaymentStatus = '0')";
                    else if (Status == 4)
                        strFilterStatus = "AND (TransStatus>='" + Status + "')";
                    else if (Status == 123) //20170331 - Sienny (Upcoming Flight)
                        //strFilterStatus = "AND (TransStatus IN (1,2,3) AND STDDate >= GetDate()) ";
                        strFilter += "AND (TransStatus IN (3) AND STDDate >= GetDate())";
                }

                //no need to filter date and status if key in trans id or pnr (20170228 - Sienny)
                strFilterDate = "AND ('" + String.Format("{0:yyyy-MM-dd}", StartDate) + " 00:00:00'<= BookingDate AND '" + String.Format("{0:yyyy-MM-dd}", EndDate) + " 23:59:59' >= BookingDate) ";
                if (TransID != string.Empty || PNR != string.Empty)
                    strFilterTransIDPNR = "AND (TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' OR TransID=(SELECT DISTINCT TransID FROM BK_TRANSDTL WHERE RecordLocator='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "')) ";//amended by diana 20140112 - for filtering PNR
                if (strFilterTransIDPNR != string.Empty)
                    strFilter += strFilterTransIDPNR;
                else
                    strFilter += strFilterDate + strFilterStatus;

                strFilter += " ORDER BY TransID ";

                //amended by diana - case when transstatus is 2 or 3 and needpaymentstatus is 1 then pending
                strSQL = "SELECT TransID, TransType, tm.AgentID, tm.AgentCatgID,(ContactFirstName +' ' + ContactLastName) as FullName, BookingDate, PaymentDateEx1, PaymentAmtEx1, PaymentDateEx2, PaymentAmtEx2, " +
                      "PaymentDateEx3, PaymentAmtEx3, PaymentDate, CancelDate, ExpiryDate,STDDate, Currency, CurrencyPaid, CollectedAmt," +
                      "TotalAmtAVG, TotalAmtGoing, TotalAmtReturn, TransSubTotal, TransTotalAmt, TransTotalFee, TransTotalTax, TransTotalPaxFee," +
                      "TransTotalOth, TransTotalDisc, TransTotalPromoDisc, TransTotalPAX, TransTotalSSR, TransTotalSeat, TransTotalNameChange, TransTotalProcess, TransTotalInfant, TransRemark1, TransRemark2,CurReminderDate,NextReminderDate,ReminderType, TransStatus, Posted, tm.rowguid, tm.CreateBy, tm.SyncCreate, tm.SyncLastUpd, tm.LastSyncBy, tm.PromoCode, " +
                        "CASE " +
                        "WHEN Transstatus = '0' THEN 'Pending' " +
                        "WHEN Transstatus = '1' THEN 'Pending' " +
                        "WHEN Transstatus = '2' AND NeedPaymentStatus = '1' THEN 'Pending' " +
                        "WHEN Transstatus = '3' AND NeedPaymentStatus = '1' THEN 'Pending' " +
                        "WHEN Transstatus = '2' AND NeedPaymentStatus = '0' THEN 'Pending for Passenger Upload' " +
                        "WHEN Transstatus = '3' AND NeedPaymentStatus = '0' THEN 'Confirmed' " +
                        "WHEN Transstatus IN ('4','6','7') THEN 'Cancelled' " +
                        "END AS 'Status' " +
                        "FROM BK_TRANSMAIN tm JOIN AG_PROFILE ag (NOLOCK) on tm.AgentID=ag.AgentID " +
                        "WHERE tm.IsOverride = 1 " + //added by Sienny 20170316 (for new GBS)
                        "AND TransStatus != '0' AND TransStatus != '5' AND TransStatus != '9' " + strFilter;
                /*
                "WHEN Transstatus = '0' THEN 'Pending' " +
                "WHEN Transstatus = '1' THEN 'Confirmed' " +
                "WHEN Transstatus = '2' THEN 'Guaranteed' " +
                "WHEN Transstatus = '3' THEN 'Reconfirmed' " +
                "WHEN Transstatus = '4' THEN 'Cancel' " +
                 * */
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransactionMain = new BookingTransactionMain();
                        objBookingTransactionMain.TransID = (string)drRow["TransID"];
                        objBookingTransactionMain.TransType = (byte)drRow["TransType"];
                        objBookingTransactionMain.AgentID = (string)drRow["AgentID"];
                        objBookingTransactionMain.AgentCatgID = drRow["AgentCatgID"].ToString();
                        objBookingTransactionMain.Status = drRow["Status"].ToString();
                        objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];
                        if (DateTime.TryParse(drRow["PaymentDateEx1"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx1 = (DateTime)drRow["PaymentDateEx1"];
                        if (decimal.TryParse(drRow["PaymentAmtEx1"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx1 = (decimal)drRow["PaymentAmtEx1"];
                        if (DateTime.TryParse(drRow["PaymentDateEx2"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx2 = (DateTime)drRow["PaymentDateEx2"];
                        if (decimal.TryParse(drRow["PaymentAmtEx2"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx2 = (decimal)drRow["PaymentAmtEx2"];
                        if (DateTime.TryParse(drRow["PaymentDateEx3"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx3 = (DateTime)drRow["PaymentDateEx3"];
                        if (decimal.TryParse(drRow["PaymentAmtEx3"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx3 = (decimal)drRow["PaymentAmtEx3"];
                        if (DateTime.TryParse(drRow["PaymentDate"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDate = (DateTime)drRow["PaymentDate"];
                        if (DateTime.TryParse(drRow["CancelDate"].ToString(), out dateValue)) objBookingTransactionMain.CancelDate = (DateTime)drRow["CancelDate"];
                        if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                        if (DateTime.TryParse(drRow["STDDate"].ToString(), out dateValue)) objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];
                        objBookingTransactionMain.Currency = drRow["Currency"].ToString();
                        objBookingTransactionMain.CurrencyPaid = drRow["CurrencyPaid"].ToString();
                        objBookingTransactionMain.CollectedAmt = (decimal)drRow["CollectedAmt"];
                        objBookingTransactionMain.TotalAmtAVG = (decimal)drRow["TotalAmtAVG"];
                        objBookingTransactionMain.AgentName = drRow["FullName"].ToString();
                        objBookingTransactionMain.TotalAmtGoing = (decimal)drRow["TotalAmtGoing"];
                        objBookingTransactionMain.TotalAmtReturn = (decimal)drRow["TotalAmtReturn"];
                        objBookingTransactionMain.TransSubTotal = (decimal)drRow["TransSubTotal"];
                        objBookingTransactionMain.TransTotalAmt = (decimal)drRow["TransTotalAmt"];
                        objBookingTransactionMain.TransTotalFee = (decimal)drRow["TransTotalFee"];
                        objBookingTransactionMain.TransTotalTax = (decimal)drRow["TransTotalTax"];
                        objBookingTransactionMain.TransTotalPaxFee = (decimal)drRow["TransTotalPaxFee"];
                        objBookingTransactionMain.TransTotalOth = (decimal)drRow["TransTotalOth"];
                        objBookingTransactionMain.TransTotalSSR = (decimal)drRow["TransTotalSSR"];
                        objBookingTransactionMain.TransTotalDisc = (decimal)drRow["TransTotalDisc"];
                        objBookingTransactionMain.TransTotalPromoDisc = (decimal)drRow["TransTotalPromoDisc"];
                        objBookingTransactionMain.TransTotalPAX = (int)drRow["TransTotalPAX"];
                        objBookingTransactionMain.TransTotalSeat = (decimal)drRow["TransTotalSeat"];
                        objBookingTransactionMain.TransTotalNameChange = (decimal)drRow["TransTotalNameChange"];
                        objBookingTransactionMain.TransTotalProcess = (decimal)drRow["TransTotalProcess"];
                        objBookingTransactionMain.TransTotalInfant = (decimal)drRow["TransTotalInfant"];
                        objBookingTransactionMain.TransRemark1 = drRow["TransRemark1"].ToString();
                        objBookingTransactionMain.TransRemark2 = drRow["TransRemark2"].ToString();
                        objBookingTransactionMain.TransStatus = (byte)drRow["TransStatus"];
                        objBookingTransactionMain.Posted = (byte)drRow["Posted"];
                        objBookingTransactionMain.rowguid = (Guid)drRow["rowguid"];
                        objBookingTransactionMain.CreateBy = drRow["CreateBy"].ToString();
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTransactionMain.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBookingTransactionMain.LastSyncBy = drRow["LastSyncBy"].ToString();
                        if (DateTime.TryParse(drRow["CurReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.CurReminderDate = (DateTime)drRow["CurReminderDate"];
                        if (DateTime.TryParse(drRow["NextReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.NextReminderDate = (DateTime)drRow["NextReminderDate"];
                        objBookingTransactionMain.ReminderType = (byte)drRow["ReminderType"];
                        objBookingTransactionMain.PromoCode = (string)drRow["PromoCode"];

                        objListBookingTransMain.Add(objBookingTransactionMain);
                    }
                    return objListBookingTransMain;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        //Added by Ellis 20170320, for booking expiry, pending payment, pending passenger upload, cancel to show on booking management
        public List<BookingTransactionMain> GetBKTransWithFilter(String strExpiryDate, string AgentID, string TransID, int Status, string PNR = "")
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBookingTransMain = new List<BookingTransactionMain>();
            DataTable dt;
            DateTime dateValue;
            DateTime expiryDate;
            decimal numValue;
            String strSQL = string.Empty;
            string strFilter = string.Empty;
            string strFilterDate = string.Empty;
            string strFilterTransIDPNR = string.Empty;
            string strFilterStatus = string.Empty;
            string strOrderBy = string.Empty;

            try
            {
                if (Status != 0)
                {
                    if (Status == 1)
                        strFilterStatus = "AND ((TransStatus='" + Status + "' AND ExpiryDate > GETDATE()) OR (TransStatus IN ('2','3') AND NeedPaymentStatus = '1')) ";
                    else if (Status == 2)
                        strFilterStatus = "AND (TransStatus='" + Status + "' AND NeedPaymentStatus = '0')";
                    else if (Status == 3)
                        strFilterStatus = "AND (TransStatus='" + Status + "' AND NeedPaymentStatus = '0')";
                    else if (Status == 4)
                        //strFilterStatus = "AND (TransStatus>='" + Status + "')";
                        strFilterStatus = "AND (TransStatus>='" + Status + "') and year(CancelDate)=year(getdate()) ";
                    else if (Status == 123) //20170331 - Sienny (Upcoming Flight)
                        //strFilterStatus = "AND (TransStatus IN (1,2,3) AND STDDate >= GetDate()) ";
                        strFilter += "AND (TransStatus IN (3) AND STDDate >= GetDate())";

                    strOrderBy = "ORDER BY TransID ";
                }
                else
                {
                    if (strExpiryDate != null || strExpiryDate != String.Empty)
                    {
                        expiryDate = Convert.ToDateTime(strExpiryDate);
                        //strFilterDate = "AND (tm.CollectedAmt > 0) AND (tm.STDDate > GETDATE()) AND (tm.ExpiryDate < '" + String.Format("{0:yyyy-MM-dd}", expiryDate) + " 23:59:59') ";
                        strFilterDate = "AND (tm.CollectedAmt > 0) AND (tm.STDDate > GETDATE()) AND (tm.ExpiryDate = '" + expiryDate + "') ";
                        strFilterStatus = "AND ((tm.TransStatus IN (1, 2, 3) AND tm.NeedPaymentStatus = '1') OR (tm.TransStatus IN (2) AND tm.NeedPaymentStatus = '0')) ";
                        strOrderBy = "ORDER BY ExpiryDate ";
                    }
                    else
                    {
                        return null;
                    }
                }

                if (AgentID != string.Empty)
                    strFilter += "AND tm.AgentID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, AgentID) + "' ";

                if (TransID != string.Empty || PNR != string.Empty)
                    strFilterTransIDPNR = "AND (TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' OR TransID=(SELECT DISTINCT TransID FROM BK_TRANSDTL WHERE RecordLocator='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "')) ";

                strSQL = "SELECT TransID, TransType, tm.AgentID, tm.AgentCatgID, ContactFirstName +' ' + ContactLastName as FullName, BookingDate, " +
                         "PaymentDateEx1, PaymentAmtEx1, PaymentDateEx2, PaymentAmtEx2, PaymentDateEx3, PaymentAmtEx3, PaymentDate, CancelDate, " +
                         "ExpiryDate, STDDate, Currency, CurrencyPaid, CollectedAmt, TotalAmtAVG, TotalAmtGoing, TotalAmtReturn, TransSubTotal, " +
                         "TransTotalAmt, TransTotalFee, TransTotalTax, TransTotalPaxFee, TransTotalOth, TransTotalDisc, TransTotalPromoDisc, TransTotalPAX, TransTotalSSR, " +
                         "TransTotalSeat, TransTotalNameChange, TransTotalProcess, TransTotalInfant, TransRemark1, TransRemark2, CurReminderDate, " +
                         "NextReminderDate,ReminderType, TransStatus, Posted, tm.rowguid, tm.CreateBy, tm.SyncCreate, tm.SyncLastUpd, tm.LastSyncBy, tm.PromoCode, " +
                         "CASE WHEN Transstatus = '0' THEN 'Pending' WHEN Transstatus = '1' THEN 'Pending' " +
                         "WHEN Transstatus = '2' AND NeedPaymentStatus = '1' THEN 'Pending' " +
                         "WHEN Transstatus = '3' AND NeedPaymentStatus = '1' THEN 'Pending' " +
                         "WHEN Transstatus = '2' AND NeedPaymentStatus = '0' THEN 'Pending for Passenger Upload' " +
                         "WHEN Transstatus = '3' AND NeedPaymentStatus = '0' THEN 'Confirmed' " +
                         "WHEN Transstatus IN ('4','6','7') THEN 'Cancelled' END AS 'Status' " +
                         "FROM BK_TRANSMAIN tm INNER JOIN AG_PROFILE ag (NOLOCK) on tm.AgentID=ag.AgentID " +
                         "WHERE tm.IsOverride = 1 " +
                         "AND TransStatus != '0' AND TransStatus != '5' AND TransStatus != '9' " +
                         strFilter + strFilterStatus + strFilterDate + strFilterTransIDPNR + strOrderBy;

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransactionMain = new BookingTransactionMain();
                        objBookingTransactionMain.TransID = (string)drRow["TransID"];
                        objBookingTransactionMain.TransType = (byte)drRow["TransType"];
                        objBookingTransactionMain.AgentID = (string)drRow["AgentID"];
                        objBookingTransactionMain.AgentCatgID = drRow["AgentCatgID"].ToString();
                        objBookingTransactionMain.Status = drRow["Status"].ToString();
                        objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];
                        if (DateTime.TryParse(drRow["PaymentDateEx1"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx1 = (DateTime)drRow["PaymentDateEx1"];
                        if (decimal.TryParse(drRow["PaymentAmtEx1"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx1 = (decimal)drRow["PaymentAmtEx1"];
                        if (DateTime.TryParse(drRow["PaymentDateEx2"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx2 = (DateTime)drRow["PaymentDateEx2"];
                        if (decimal.TryParse(drRow["PaymentAmtEx2"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx2 = (decimal)drRow["PaymentAmtEx2"];
                        if (DateTime.TryParse(drRow["PaymentDateEx3"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx3 = (DateTime)drRow["PaymentDateEx3"];
                        if (decimal.TryParse(drRow["PaymentAmtEx3"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx3 = (decimal)drRow["PaymentAmtEx3"];
                        if (DateTime.TryParse(drRow["PaymentDate"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDate = (DateTime)drRow["PaymentDate"];
                        if (DateTime.TryParse(drRow["CancelDate"].ToString(), out dateValue)) objBookingTransactionMain.CancelDate = (DateTime)drRow["CancelDate"];
                        if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                        if (DateTime.TryParse(drRow["STDDate"].ToString(), out dateValue)) objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];
                        objBookingTransactionMain.Currency = drRow["Currency"].ToString();
                        objBookingTransactionMain.CurrencyPaid = drRow["CurrencyPaid"].ToString();
                        objBookingTransactionMain.CollectedAmt = (decimal)drRow["CollectedAmt"];
                        objBookingTransactionMain.TotalAmtAVG = (decimal)drRow["TotalAmtAVG"];
                        objBookingTransactionMain.AgentName = drRow["FullName"].ToString();
                        objBookingTransactionMain.TotalAmtGoing = (decimal)drRow["TotalAmtGoing"];
                        objBookingTransactionMain.TotalAmtReturn = (decimal)drRow["TotalAmtReturn"];
                        objBookingTransactionMain.TransSubTotal = (decimal)drRow["TransSubTotal"];
                        objBookingTransactionMain.TransTotalAmt = (decimal)drRow["TransTotalAmt"];
                        objBookingTransactionMain.TransTotalFee = (decimal)drRow["TransTotalFee"];
                        objBookingTransactionMain.TransTotalTax = (decimal)drRow["TransTotalTax"];
                        objBookingTransactionMain.TransTotalPaxFee = (decimal)drRow["TransTotalPaxFee"];
                        objBookingTransactionMain.TransTotalOth = (decimal)drRow["TransTotalOth"];
                        objBookingTransactionMain.TransTotalSSR = (decimal)drRow["TransTotalSSR"];
                        objBookingTransactionMain.TransTotalDisc = (decimal)drRow["TransTotalDisc"];
                        objBookingTransactionMain.TransTotalPromoDisc = (decimal)drRow["TransTotalPromoDisc"];
                        objBookingTransactionMain.TransTotalPAX = (int)drRow["TransTotalPAX"];
                        objBookingTransactionMain.TransTotalSeat = (decimal)drRow["TransTotalSeat"];
                        objBookingTransactionMain.TransTotalNameChange = (decimal)drRow["TransTotalNameChange"];
                        objBookingTransactionMain.TransTotalProcess = (decimal)drRow["TransTotalProcess"];
                        objBookingTransactionMain.TransTotalInfant = (decimal)drRow["TransTotalInfant"];
                        objBookingTransactionMain.TransRemark1 = drRow["TransRemark1"].ToString();
                        objBookingTransactionMain.TransRemark2 = drRow["TransRemark2"].ToString();
                        objBookingTransactionMain.TransStatus = (byte)drRow["TransStatus"];
                        objBookingTransactionMain.Posted = (byte)drRow["Posted"];
                        objBookingTransactionMain.rowguid = (Guid)drRow["rowguid"];
                        objBookingTransactionMain.CreateBy = drRow["CreateBy"].ToString();
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTransactionMain.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBookingTransactionMain.LastSyncBy = drRow["LastSyncBy"].ToString();
                        if (DateTime.TryParse(drRow["CurReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.CurReminderDate = (DateTime)drRow["CurReminderDate"];
                        if (DateTime.TryParse(drRow["NextReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.NextReminderDate = (DateTime)drRow["NextReminderDate"];
                        objBookingTransactionMain.ReminderType = (byte)drRow["ReminderType"];
                        objBookingTransactionMain.PromoCode = (string)drRow["PromoCode"];

                        objListBookingTransMain.Add(objBookingTransactionMain);
                    }
                    return objListBookingTransMain;
                }
                else
                {
                    return null;
                    throw new ApplicationException("Booking Expiry does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }


        public List<BookingTransactionMain> GetAllBK_TRANSMAINCancelFilter(DateTime StartDate, DateTime EndDate, string TransID, string AgentID, string AgentName, int Status, string PNR = "")
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBookingTransMain = new List<BookingTransactionMain>();
            DataTable dt;
            DateTime dateValue;
            decimal numValue;
            String strSQL = string.Empty;
            string strFilter = string.Empty;
            try
            {
                strFilter = " ('" + String.Format("{0:yyyy-MM-dd}", StartDate) + " 00:00:00'<= STDDate AND '" + String.Format("{0:yyyy-MM-dd}", EndDate) + " 23:59:59' >= STDDate) ";

                if (TransID != string.Empty || PNR != string.Empty)
                    strFilter += "AND (TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' OR TransID=(SELECT DISTINCT TransID FROM BK_TRANSDTL WHERE RecordLocator='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "')) ";//amended by diana 20140112 - for filtering PNR
                if (AgentID != string.Empty)
                    strFilter += "AND tm.AgentID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, AgentID) + "' ";
                if (AgentName != string.Empty)
                    strFilter += "AND (ContactFirstName LIKE '%" + AgentName + "%' OR ContactLastName Like '%" + AgentName + "%' OR (ContactFirstName+' '+ContactLastName) LIKE '%" + AgentName + "%')";
                if (Status != 0)
                    strFilter += "AND TransStatus='" + Status + "' ";

                strSQL = "SELECT TransID, TransType, tm.AgentID, tm.AgentCatgID,ContactFirstName,(ContactFirstName+' '+ContactLastName) as FullName, BookingDate, PaymentDateEx1, PaymentAmtEx1, PaymentDateEx2, PaymentAmtEx2, " +
                      "PaymentDateEx3, PaymentAmtEx3, PaymentDate, CancelDate, ExpiryDate,STDDate, Currency, CurrencyPaid, CollectedAmt," +
                      "TotalAmtAVG, TotalAmtGoing, TotalAmtReturn, TransSubTotal, TransTotalAmt, TransTotalFee, TransTotalTax, TransTotalPaxFee," +
                      "TransTotalOth, TransTotalSSR, TransTotalDisc, TransTotalPromoDisc, TransTotalPAX, TransTotalSeat, TransTotalNameChange, TransTotalProcess, TransTotalInfant, TransRemark1, TransRemark2,CurReminderDate,NextReminderDate,ReminderType, TransStatus, Posted, tm.rowguid, tm.CreateBy, tm.SyncCreate, tm.SyncLastUpd, tm.LastSyncBy, tm.PromoCode, " +
                        "CASE " +
                        "WHEN Transstatus = '0' THEN 'Pending' " +
                        "WHEN Transstatus = '1' THEN 'Confirmed' " +
                        "WHEN Transstatus = '2' THEN 'Guaranteed' " +
                        "WHEN Transstatus = '3' THEN 'Reconfirmed' " +
                        "WHEN Transstatus = '4' THEN 'Cancel' " +
                        "END AS 'Status' " +
                        " FROM BK_TRANSMAIN tm JOIN AG_PROFILE ag (NOLOCK) on tm.AgentID=ag.AgentID " +
                        "WHERE TransStatus != '0' AND " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransactionMain = new BookingTransactionMain();
                        objBookingTransactionMain.TransID = (string)drRow["TransID"];
                        objBookingTransactionMain.TransType = (byte)drRow["TransType"];
                        objBookingTransactionMain.AgentID = (string)drRow["AgentID"];
                        objBookingTransactionMain.AgentCatgID = drRow["AgentCatgID"].ToString();
                        objBookingTransactionMain.Status = drRow["Status"].ToString();
                        objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];
                        if (DateTime.TryParse(drRow["PaymentDateEx1"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx1 = (DateTime)drRow["PaymentDateEx1"];
                        if (decimal.TryParse(drRow["PaymentAmtEx1"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx1 = (decimal)drRow["PaymentAmtEx1"];
                        if (DateTime.TryParse(drRow["PaymentDateEx2"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx2 = (DateTime)drRow["PaymentDateEx2"];
                        if (decimal.TryParse(drRow["PaymentAmtEx2"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx2 = (decimal)drRow["PaymentAmtEx2"];
                        if (DateTime.TryParse(drRow["PaymentDateEx3"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx3 = (DateTime)drRow["PaymentDateEx3"];
                        if (decimal.TryParse(drRow["PaymentAmtEx3"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx3 = (decimal)drRow["PaymentAmtEx3"];
                        if (DateTime.TryParse(drRow["PaymentDate"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDate = (DateTime)drRow["PaymentDate"];
                        if (DateTime.TryParse(drRow["CancelDate"].ToString(), out dateValue)) objBookingTransactionMain.CancelDate = (DateTime)drRow["CancelDate"];
                        if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                        if (DateTime.TryParse(drRow["STDDate"].ToString(), out dateValue)) objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];
                        objBookingTransactionMain.Currency = drRow["Currency"].ToString();
                        objBookingTransactionMain.CurrencyPaid = drRow["CurrencyPaid"].ToString();
                        objBookingTransactionMain.CollectedAmt = (decimal)drRow["CollectedAmt"];
                        objBookingTransactionMain.TotalAmtAVG = (decimal)drRow["TotalAmtAVG"];
                        objBookingTransactionMain.AgentName = drRow["FullName"].ToString();
                        objBookingTransactionMain.TotalAmtGoing = (decimal)drRow["TotalAmtGoing"];
                        objBookingTransactionMain.TotalAmtReturn = (decimal)drRow["TotalAmtReturn"];
                        objBookingTransactionMain.TransSubTotal = (decimal)drRow["TransSubTotal"];
                        objBookingTransactionMain.TransTotalAmt = (decimal)drRow["TransTotalAmt"];
                        objBookingTransactionMain.TransTotalFee = (decimal)drRow["TransTotalFee"];
                        objBookingTransactionMain.TransTotalTax = (decimal)drRow["TransTotalTax"];
                        objBookingTransactionMain.TransTotalPaxFee = (decimal)drRow["TransTotalPaxFee"];
                        objBookingTransactionMain.TransTotalOth = (decimal)drRow["TransTotalOth"];
                        objBookingTransactionMain.TransTotalSSR = (decimal)drRow["TransTotalSSR"];
                        objBookingTransactionMain.TransTotalDisc = (decimal)drRow["TransTotalDisc"];
                        objBookingTransactionMain.TransTotalPromoDisc = (decimal)drRow["TransTotalPromoDisc"];
                        objBookingTransactionMain.TransTotalPAX = (int)drRow["TransTotalPAX"];
                        objBookingTransactionMain.TransTotalSeat = (decimal)drRow["TransTotalSeat"];
                        objBookingTransactionMain.TransTotalNameChange = (decimal)drRow["TransTotalNameChange"];
                        objBookingTransactionMain.TransTotalProcess = (decimal)drRow["TransTotalProcess"];
                        objBookingTransactionMain.TransTotalInfant = (decimal)drRow["TransTotalInfant"];
                        objBookingTransactionMain.TransRemark1 = drRow["TransRemark1"].ToString();
                        objBookingTransactionMain.TransRemark2 = drRow["TransRemark2"].ToString();
                        objBookingTransactionMain.TransStatus = (byte)drRow["TransStatus"];
                        objBookingTransactionMain.Posted = (byte)drRow["Posted"];
                        objBookingTransactionMain.rowguid = (Guid)drRow["rowguid"];
                        objBookingTransactionMain.CreateBy = drRow["CreateBy"].ToString();
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTransactionMain.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBookingTransactionMain.LastSyncBy = drRow["LastSyncBy"].ToString();
                        if (DateTime.TryParse(drRow["CurReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.CurReminderDate = (DateTime)drRow["CurReminderDate"];
                        if (DateTime.TryParse(drRow["NextReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.NextReminderDate = (DateTime)drRow["NextReminderDate"];
                        objBookingTransactionMain.ReminderType = (byte)drRow["ReminderType"];
                        objBookingTransactionMain.PromoCode = (string)drRow["PromoCode"];

                        objListBookingTransMain.Add(objBookingTransactionMain);
                    }
                    return objListBookingTransMain;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<BookingTransactionMain> GetAllTransWithPenalty()
        {
            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBookingTransMain = new List<BookingTransactionMain>();
            DataTable dt;
            String strSQL = string.Empty;
            try
            {
                strSQL = "SELECT tm.TransID, tm.AgentID,ContactFirstName,(ContactFirstName+' '+ContactLastName) as FullName, tm.TransTotalOth " +
                             " FROM BK_TRANSMAIN tm JOIN AG_PROFILE ag (NOLOCK) on tm.AgentID=ag.AgentID " +
                             " LEFT JOIN REQAPPL req (NOLOCK) on req.TransID=tm.TransID AND ReqType='F' AND req.ExpiryDate > GETDATE() AND ApprovedBy IS NULL " +
                            "WHERE TransStatus != '0' AND req.TransID is NULL AND TransTotalOth!=0";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransactionMain = new BookingTransactionMain();
                        objBookingTransactionMain.TransID = (string)drRow["TransID"];

                        objBookingTransactionMain.AgentID = (string)drRow["AgentID"];


                        objBookingTransactionMain.AgentName = drRow["FullName"].ToString();

                        objBookingTransactionMain.TransTotalOth = (decimal)drRow["TransTotalOth"];

                        objListBookingTransMain.Add(objBookingTransactionMain);
                    }
                    return objListBookingTransMain;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }


            }
            catch (Exception ex)
            {
                return null;
                throw new ApplicationException("Data not found");
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }


        }

        public List<BookingTransactionMain> GetAllTransWithExpiryPayment(TransactionFilter Filter = 0, string FilterValue = "")
        {
            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBookingTransMain = new List<BookingTransactionMain>();
            DataTable dt;
            String strSQL = string.Empty;
            string strFilter = string.Empty;
            try
            {
                if (Filter != TransactionFilter.Default && FilterValue != "")
                {
                    switch (Filter)
                    {
                        case TransactionFilter.AgentID:
                            strFilter = " AND tm.AgentID='" + FilterValue + "'";
                            break;
                        case TransactionFilter.AgentName:
                            strFilter = " AND ag.UserName='" + FilterValue + "'";
                            break;
                        case TransactionFilter.TransID:
                            strFilter = " AND tm.TransID='" + FilterValue + "'";
                            break;
                    }
                }
                strSQL = "SELECT tm.TransID, tm.AgentID,ContactFirstName,(ContactFirstName+' '+ContactLastName) as FullName, tm.BookingDate,tm.ExpiryDate,tm.STDDate " +
                             " FROM BK_TRANSMAIN tm JOIN AG_PROFILE ag (NOLOCK) on tm.AgentID=ag.AgentID " +
                             " LEFT JOIN REQAPPL req (NOLOCK) on req.TransID=tm.TransID AND ReqType='PE' AND req.ExpiryDate > GETDATE() AND ApprovedBy IS NULL " +
                             "WHERE TransStatus = '1' AND req.TransID is NULL AND  CAST(GETDATE() as date) < CAST(tm.ExpiryDate as date)  AND tm.STDDate > GETDATE()" + strFilter;
                //"WHERE TransStatus = '1' AND req.TransID is NULL AND tm.ExpiryDate <= GETDATE() AND tm.STDDate > GETDATE()";

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransactionMain = new BookingTransactionMain();
                        objBookingTransactionMain.TransID = (string)drRow["TransID"];

                        objBookingTransactionMain.AgentID = (string)drRow["AgentID"];


                        objBookingTransactionMain.AgentName = drRow["FullName"].ToString();

                        objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];

                        objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];

                        objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];

                        objListBookingTransMain.Add(objBookingTransactionMain);
                    }
                    return objListBookingTransMain;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }


            }
            catch (Exception ex)
            {
                return null;
                throw new ApplicationException("Data not found");
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }


        }

        public List<BookingTransactionMain> GetAllTransFlightChangeByAgent(string strAgentID)
        {
            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBookingTransMain = new List<BookingTransactionMain>();
            DataTable dt;
            String strSQL = string.Empty;
            try
            {
                strSQL = "SELECT tm.TransID, tm.AgentID,ContactFirstName,(ContactFirstName+' '+ContactLastName) as FullName, tm.BookingDate,tm.ExpiryDate,tm.STDDate " +
                             " FROM BK_TRANSMAIN tm JOIN AG_PROFILE ag (NOLOCK) on tm.AgentID=ag.AgentID " +
                             "WHERE TransStatus = '2' AND tm.ExpiryDate > GETDATE() AND tm.STDDate > GETDATE() AND tm.AgentID='" + strAgentID + "'";
                //"WHERE (TransStatus = '1' OR TransStatus = '2') AND (tm.ExpiryDate > GETDATE() OR TransStatus = '2') AND tm.STDDate > GETDATE()";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransactionMain = new BookingTransactionMain();

                        objBookingTransactionMain.TransID = (string)drRow["TransID"];

                        objBookingTransactionMain.AgentID = (string)drRow["AgentID"];

                        objBookingTransactionMain.AgentName = drRow["FullName"].ToString();

                        objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];

                        objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];

                        objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];

                        objListBookingTransMain.Add(objBookingTransactionMain);
                    }
                    return objListBookingTransMain;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
                throw new ApplicationException("Data not found");
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }


        public List<BookingTransactionMain> GetAllTransFlightChange()
        {
            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBookingTransMain = new List<BookingTransactionMain>();
            DataTable dt;
            String strSQL = string.Empty;
            try
            {
                strSQL = "SELECT tm.TransID, tm.AgentID,ContactFirstName,(ContactFirstName+' '+ContactLastName) as FullName, tm.BookingDate,tm.ExpiryDate,tm.STDDate " +
                             " FROM BK_TRANSMAIN tm JOIN AG_PROFILE ag (NOLOCK) on tm.AgentID=ag.AgentID " +
                             "WHERE TransStatus = '2' AND tm.ExpiryDate > GETDATE() AND tm.STDDate > GETDATE()";
                //"WHERE (TransStatus = '1' OR TransStatus = '2') AND (tm.ExpiryDate > GETDATE() OR TransStatus = '2') AND tm.STDDate > GETDATE()";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransactionMain = new BookingTransactionMain();

                        objBookingTransactionMain.TransID = (string)drRow["TransID"];

                        objBookingTransactionMain.AgentID = (string)drRow["AgentID"];

                        objBookingTransactionMain.AgentName = drRow["FullName"].ToString();

                        objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];

                        objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];

                        objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];

                        objListBookingTransMain.Add(objBookingTransactionMain);
                    }
                    return objListBookingTransMain;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
                throw new ApplicationException("Data not found");
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }


        public List<BookingTransactionMain> GetTransWithPenalty(string AgentID, string AgentName, int Status)
        {

            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBookingTransMain = new List<BookingTransactionMain>();
            DataTable dt;

            String strSQL = string.Empty;
            string strFilter = string.Empty;
            try
            {

                if (AgentID != string.Empty)
                    strFilter += "AND tm.AgentID='" + AgentID + "' ";
                if (AgentName != string.Empty)
                    strFilter += "AND (ContactFirstName LIKE '%" + AgentName + "%' OR ContactLastName Like '%" + AgentName + "%') OR ((ContactFirstName+' '+ContactLastName) LIKE '%" + AgentName + "%')";
                if (Status != 0)
                    strFilter += "AND TransStatus='" + Status + "' ";
                strFilter += "ORDER BY ExpiryDate";
                strSQL = "SELECT tm.TransID, tm.AgentID,ContactFirstName,(ContactFirstName+' '+ContactLastName) as FullName, tm.TransTotalOth " +
                         " FROM BK_TRANSMAIN tm JOIN AG_PROFILE ag (NOLOCK) on tm.AgentID=ag.AgentID " +
                         " LEFT JOIN REQAPPL req (NOLOCK) on req.TransID=tm.TransID AND ReqType='W' AND req.ExpiryDate > GETDATE() AND ApprovedBy IS NULL " +
                        "WHERE TransStatus != '0' AND req.TransID is NULL AND TransTotalOth!=0" + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransactionMain = new BookingTransactionMain();
                        objBookingTransactionMain.TransID = (string)drRow["TransID"];

                        objBookingTransactionMain.AgentID = (string)drRow["AgentID"];


                        objBookingTransactionMain.AgentName = drRow["FullName"].ToString();

                        objBookingTransactionMain.TransTotalOth = (decimal)drRow["TransTotalOth"];

                        objListBookingTransMain.Add(objBookingTransactionMain);
                    }
                    return objListBookingTransMain;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public BookingTransactionMain GetSingleBK_TRANSMAIN(string pTransID, byte pTransType, string pAgentID, string pAgentCatgID, DateTime pBookingDate)
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            BookingTransactionMain objBookingTransactionMain;
            DataTable dt;
            DateTime dateValue;
            decimal numValue;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();
                }

                lstFields.Add("BK_TRANSMAIN.TransID");
                lstFields.Add("BK_TRANSMAIN.TransType");
                lstFields.Add("BK_TRANSMAIN.AgentID");
                lstFields.Add("BK_TRANSMAIN.AgentCatgID");
                lstFields.Add("BK_TRANSMAIN.BookingDate");
                lstFields.Add("BK_TRANSMAIN.PaymentDateEx1");
                lstFields.Add("BK_TRANSMAIN.PaymentAmtEx1");
                lstFields.Add("BK_TRANSMAIN.PaymentDateEx2");
                lstFields.Add("BK_TRANSMAIN.PaymentAmtEx2");
                lstFields.Add("BK_TRANSMAIN.PaymentDateEx3");
                lstFields.Add("BK_TRANSMAIN.PaymentAmtEx3");
                lstFields.Add("BK_TRANSMAIN.PaymentDate");
                lstFields.Add("BK_TRANSMAIN.CancelDate");
                lstFields.Add("BK_TRANSMAIN.ExpiryDate");
                lstFields.Add("BK_TRANSMAIN.STDDate");
                lstFields.Add("BK_TRANSMAIN.Currency");
                lstFields.Add("BK_TRANSMAIN.CurrencyPaid");
                lstFields.Add("BK_TRANSMAIN.CollectedAmt");
                lstFields.Add("BK_TRANSMAIN.TotalAmtAVG");
                lstFields.Add("BK_TRANSMAIN.TotalAmtGoing");
                lstFields.Add("BK_TRANSMAIN.TotalAmtReturn");
                lstFields.Add("BK_TRANSMAIN.TransSubTotal");
                lstFields.Add("BK_TRANSMAIN.TransTotalAmt");
                lstFields.Add("BK_TRANSMAIN.TransTotalFee");
                lstFields.Add("BK_TRANSMAIN.TransTotalTax");
                lstFields.Add("BK_TRANSMAIN.TransTotalPaxFee");
                lstFields.Add("BK_TRANSMAIN.TransTotalOth");
                lstFields.Add("BK_TRANSMAIN.TransTotalSSR");
                lstFields.Add("BK_TRANSMAIN.TransTotalDisc");
                lstFields.Add("BK_TRANSMAIN.TransTotalPromoDisc");
                lstFields.Add("BK_TRANSMAIN.TransTotalPAX");
                lstFields.Add("BK_TRANSMAIN.TransTotalSeat");
                lstFields.Add("BK_TRANSMAIN.TransTotalNameChange");
                lstFields.Add("BK_TRANSMAIN.TransTotalProcess");
                lstFields.Add("BK_TRANSMAIN.TransTotalInfant");
                lstFields.Add("BK_TRANSMAIN.TransRemark1");
                lstFields.Add("BK_TRANSMAIN.TransRemark2");
                lstFields.Add("BK_TRANSMAIN.TransStatus");
                lstFields.Add("BK_TRANSMAIN.NeedPaymentStatus");
                lstFields.Add("BK_TRANSMAIN.Posted");
                lstFields.Add("BK_TRANSMAIN.rowguid");
                lstFields.Add("BK_TRANSMAIN.CreateBy");
                lstFields.Add("BK_TRANSMAIN.SyncCreate");
                lstFields.Add("BK_TRANSMAIN.SyncLastUpd");
                lstFields.Add("BK_TRANSMAIN.LastSyncBy");
                lstFields.Add("BK_TRANSMAIN.CurReminderDate");
                lstFields.Add("BK_TRANSMAIN.NextReminderDate");
                lstFields.Add("BK_TRANSMAIN.ReminderType");
                lstFields.Add("BK_TRANSMAIN.SchemeCode");
                //added by ketee, get IsOverride 20170308
                lstFields.Add("BK_TRANSMAIN.IsOverride");
                lstFields.Add("BK_TRANSMAIN.PromoCode");
                lstFields.Add("BK_TRANSMAIN.ForfeitedAmount");

                strFields = GetSqlFields(lstFields);
                strFilter = "WHERE BK_TRANSMAIN.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pTransID) + "' AND BK_TRANSMAIN.BookingDate='" + pBookingDate + "' AND BK_TRANSMAIN.TransType ='" + pTransType + "' AND BK_TRANSMAIN.AgentID ='" + pAgentID + "' AND BK_TRANSMAIN.AgentCatgID ='" + pAgentCatgID + "' ";
                strFilter += " AND BK_TRANSMAIN.IsOverride = 1 "; //added by Sienny 20170316 (for new GBS)
                strSQL = "SELECT " + strFields + " FROM BK_TRANSMAIN " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];

                    objBookingTransactionMain = new BookingTransactionMain();
                    objBookingTransactionMain.TransID = (string)drRow["TransID"];
                    objBookingTransactionMain.TransType = (byte)drRow["TransType"];
                    objBookingTransactionMain.AgentID = (string)drRow["AgentID"];
                    objBookingTransactionMain.AgentCatgID = (string)drRow["AgentCatgID"];
                    objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];
                    if (DateTime.TryParse(drRow["PaymentDateEx1"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx1 = (DateTime)drRow["PaymentDateEx1"];
                    if (decimal.TryParse(drRow["PaymentAmtEx1"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx1 = (decimal)drRow["PaymentAmtEx1"];
                    if (DateTime.TryParse(drRow["PaymentDateEx2"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx2 = (DateTime)drRow["PaymentDateEx2"];
                    if (decimal.TryParse(drRow["PaymentAmtEx2"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx2 = (decimal)drRow["PaymentAmtEx2"];
                    if (DateTime.TryParse(drRow["PaymentDateEx3"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx3 = (DateTime)drRow["PaymentDateEx3"];
                    if (decimal.TryParse(drRow["PaymentAmtEx3"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx3 = (decimal)drRow["PaymentAmtEx3"];
                    if (DateTime.TryParse(drRow["PaymentDate"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDate = (DateTime)drRow["PaymentDate"];
                    if (DateTime.TryParse(drRow["CancelDate"].ToString(), out dateValue)) objBookingTransactionMain.CancelDate = (DateTime)drRow["CancelDate"];
                    if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                    if (DateTime.TryParse(drRow["STDDate"].ToString(), out dateValue)) objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];
                    objBookingTransactionMain.Currency = (string)drRow["Currency"];
                    objBookingTransactionMain.CurrencyPaid = (string)drRow["CurrencyPaid"];
                    objBookingTransactionMain.CollectedAmt = (decimal)drRow["CollectedAmt"];
                    objBookingTransactionMain.TotalAmtAVG = (decimal)drRow["TotalAmtAVG"];
                    objBookingTransactionMain.TotalAmtGoing = (decimal)drRow["TotalAmtGoing"];
                    objBookingTransactionMain.TotalAmtReturn = (decimal)drRow["TotalAmtReturn"];
                    objBookingTransactionMain.TransSubTotal = (decimal)drRow["TransSubTotal"];
                    objBookingTransactionMain.TransTotalAmt = (decimal)drRow["TransTotalAmt"];
                    objBookingTransactionMain.TransTotalFee = (decimal)drRow["TransTotalFee"];
                    objBookingTransactionMain.TransTotalTax = (decimal)drRow["TransTotalTax"];
                    objBookingTransactionMain.TransTotalPaxFee = (decimal)drRow["TransTotalPaxFee"];
                    objBookingTransactionMain.TransTotalOth = (decimal)drRow["TransTotalOth"];
                    objBookingTransactionMain.TransTotalSSR = (decimal)drRow["TransTotalSSR"];
                    objBookingTransactionMain.TransTotalDisc = (decimal)drRow["TransTotalDisc"];
                    objBookingTransactionMain.TransTotalPromoDisc = (decimal)drRow["TransTotalPromoDisc"];
                    objBookingTransactionMain.TransTotalPAX = (int)drRow["TransTotalPAX"];
                    objBookingTransactionMain.TransTotalSeat = (decimal)drRow["TransTotalSeat"];
                    objBookingTransactionMain.TransTotalNameChange = (decimal)drRow["TransTotalNameChange"];
                    objBookingTransactionMain.TransTotalProcess = (decimal)drRow["TransTotalProcess"];
                    objBookingTransactionMain.TransTotalInfant = (decimal)drRow["TransTotalInfant"];
                    objBookingTransactionMain.TransRemark1 = (string)drRow["TransRemark1"];
                    objBookingTransactionMain.TransRemark2 = (string)drRow["TransRemark2"];
                    objBookingTransactionMain.TransStatus = (byte)drRow["TransStatus"];
                    objBookingTransactionMain.NeedPaymentStatus = (byte)drRow["NeedPaymentStatus"];
                    objBookingTransactionMain.Posted = (byte)drRow["Posted"];
                    objBookingTransactionMain.rowguid = (Guid)drRow["rowguid"];
                    objBookingTransactionMain.CreateBy = (string)drRow["CreateBy"];
                    if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTransactionMain.SyncCreate = (DateTime)drRow["SyncCreate"];
                    if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                    objBookingTransactionMain.LastSyncBy = (string)drRow["LastSyncBy"];
                    if (DateTime.TryParse(drRow["CurReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.CurReminderDate = (DateTime)drRow["CurReminderDate"];
                    if (DateTime.TryParse(drRow["NextReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.NextReminderDate = (DateTime)drRow["NextReminderDate"];
                    objBookingTransactionMain.ReminderType = (byte)drRow["ReminderType"];
                    objBookingTransactionMain.PayScheme = (string)drRow["SchemeCode"];
                    objBookingTransactionMain.PromoCode = (string)drRow["PromoCode"];
                    objBookingTransactionMain.ForfeitedAmount = (decimal)drRow["ForfeitedAmount"];
                    //Added by ketee, add isOverride field
                    objBookingTransactionMain.IsOverride = Convert.ToInt16(drRow["IsOverride"]);
                    return objBookingTransactionMain;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                EndSQLControl();
                EndConnection();
                //objDCom.CloseConnection();
            }
        }

        public Boolean GetPaymentExtensionDate(string pTransID, ref DateTime paymentExtensionDate)
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            BookingTransactionMain objBookingTransactionMain;
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            String strOrder = string.Empty;

            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("REQAPPL.ReqID");
                lstFields.Add("REQAPPL.ReqType");
                lstFields.Add("REQAPPL.TransID");
                lstFields.Add("REQAPPL.ExpiryDate");
                lstFields.Add("REQAPPL.ApprovedBy");
                lstFields.Add("REQAPPL.ApprovedDate");

                strFields = GetSqlFields(lstFields);
                strFilter = "WHERE REQAPPL.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pTransID) + "' AND REQAPPL.ReqType='PE' AND ApprovedBy IS NOT NULL AND ApprovedDate IS NOT NULL";
                strSQL = "SELECT " + strFields + " FROM REQAPPL " + strFilter + " ORDER BY ExpiryDate DESC";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];

                    if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) paymentExtensionDate = (DateTime)drRow["ExpiryDate"];
                    return true;
                }
                else
                {
                    return false;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                return false;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public BookingTransactionMain GetSingleBK_TRANSMAIN(string pTransID)
        {
            //objSQL.ClearFields();
            //objSQL.ClearCondtions();
            BookingTransactionMain objBookingTransactionMain;
            DataTable dt = new DataTable();
            DateTime dateValue;
            decimal numValue;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("BK_TRANSMAIN.TransID");
                lstFields.Add("BK_TRANSMAIN.TransType");
                lstFields.Add("BK_TRANSMAIN.AgentID");
                lstFields.Add("BK_TRANSMAIN.AgentCatgID");
                lstFields.Add("BK_TRANSMAIN.BookingDate");
                lstFields.Add("BK_TRANSMAIN.PaymentDateEx1");
                lstFields.Add("BK_TRANSMAIN.PaymentAmtEx1");
                lstFields.Add("BK_TRANSMAIN.PaymentDateEx2");
                lstFields.Add("BK_TRANSMAIN.PaymentAmtEx2");
                lstFields.Add("BK_TRANSMAIN.PaymentDateEx3");
                lstFields.Add("BK_TRANSMAIN.PaymentAmtEx3");
                lstFields.Add("BK_TRANSMAIN.PaymentDate");
                lstFields.Add("BK_TRANSMAIN.CancelDate");
                lstFields.Add("BK_TRANSMAIN.ExpiryDate");
                lstFields.Add("BK_TRANSMAIN.STDDate");
                lstFields.Add("BK_TRANSMAIN.Currency");
                lstFields.Add("BK_TRANSMAIN.ExchgRate");
                lstFields.Add("BK_TRANSMAIN.CurrencyPaid");
                lstFields.Add("BK_TRANSMAIN.CollectedAmt");
                lstFields.Add("BK_TRANSMAIN.TotalAmtAVG");
                lstFields.Add("BK_TRANSMAIN.TotalAmtGoing");
                lstFields.Add("BK_TRANSMAIN.TotalAmtReturn");
                lstFields.Add("BK_TRANSMAIN.TransSubTotal");
                lstFields.Add("BK_TRANSMAIN.TransTotalAmt");
                lstFields.Add("BK_TRANSMAIN.TransTotalFee");
                lstFields.Add("BK_TRANSMAIN.TransTotalTax");
                lstFields.Add("BK_TRANSMAIN.TransTotalPaxFee");
                lstFields.Add("BK_TRANSMAIN.TransTotalOth");
                lstFields.Add("BK_TRANSMAIN.TransTotalSSR");
                lstFields.Add("BK_TRANSMAIN.TransTotalInfant");
                lstFields.Add("BK_TRANSMAIN.TransTotalDisc");
                lstFields.Add("BK_TRANSMAIN.TransTotalPromoDisc");
                lstFields.Add("BK_TRANSMAIN.TransTotalPAX");
                lstFields.Add("BK_TRANSMAIN.TransTotalSeat");
                lstFields.Add("BK_TRANSMAIN.TransTotalNameChange");
                lstFields.Add("BK_TRANSMAIN.TransTotalProcess");
                lstFields.Add("BK_TRANSMAIN.TransTotalInfant");
                lstFields.Add("BK_TRANSMAIN.TransRemark1");
                lstFields.Add("BK_TRANSMAIN.TransRemark2");
                lstFields.Add("BK_TRANSMAIN.TransStatus");
                lstFields.Add("BK_TRANSMAIN.NeedPaymentStatus");
                lstFields.Add("BK_TRANSMAIN.Posted");
                lstFields.Add("BK_TRANSMAIN.rowguid");
                lstFields.Add("BK_TRANSMAIN.CreateBy");
                lstFields.Add("BK_TRANSMAIN.SyncCreate");
                lstFields.Add("BK_TRANSMAIN.SyncLastUpd");
                lstFields.Add("BK_TRANSMAIN.LastSyncBy");
                //added by ketee ,20121016
                lstFields.Add("BK_TRANSMAIN.SchemeCode");
                //added by ketee, 20170310
                lstFields.Add("BK_TRANSMAIN.IsOverride");
                lstFields.Add("BK_TRANSMAIN.PromoCode");
                lstFields.Add("BK_TRANSMAIN.NameChangeMax");
                lstFields.Add("BK_TRANSMAIN.ForfeitedAmount");
                //lstFields.Add("BK_TRANSMAIN.NameChangeLimit1");
                //lstFields.Add("BK_TRANSMAIN.NameChangeLimit2");

                strFields = GetSqlFields(lstFields);
                strFilter = "Where BK_TRANSMAIN.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pTransID) + "'";
                strSQL = "SELECT " + strFields + " FROM BK_TRANSMAIN " + strFilter;

                using (var connection = new SqlConnection(ConnStr))
                {
                    connection.Open();
                    SqlCommand cmd = new SqlCommand(strSQL, connection);
                    SqlDataAdapter da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    connection.Close();
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];

                    objBookingTransactionMain = new BookingTransactionMain();
                    objBookingTransactionMain.TransID = (string)drRow["TransID"];
                    objBookingTransactionMain.TransType = (byte)drRow["TransType"];
                    objBookingTransactionMain.AgentID = (string)drRow["AgentID"];
                    objBookingTransactionMain.AgentCatgID = (string)drRow["AgentCatgID"];
                    objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];
                    if (DateTime.TryParse(drRow["PaymentDateEx1"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx1 = (DateTime)drRow["PaymentDateEx1"];
                    if (decimal.TryParse(drRow["PaymentAmtEx1"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx1 = (decimal)drRow["PaymentAmtEx1"];
                    if (DateTime.TryParse(drRow["PaymentDateEx2"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx2 = (DateTime)drRow["PaymentDateEx2"];
                    if (decimal.TryParse(drRow["PaymentAmtEx2"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx2 = (decimal)drRow["PaymentAmtEx2"];
                    if (DateTime.TryParse(drRow["PaymentDateEx3"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx3 = (DateTime)drRow["PaymentDateEx3"];
                    if (decimal.TryParse(drRow["PaymentAmtEx3"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx3 = (decimal)drRow["PaymentAmtEx3"];
                    if (DateTime.TryParse(drRow["PaymentDate"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDate = (DateTime)drRow["PaymentDate"];
                    if (DateTime.TryParse(drRow["CancelDate"].ToString(), out dateValue)) objBookingTransactionMain.CancelDate = (DateTime)drRow["CancelDate"];
                    if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                    if (DateTime.TryParse(drRow["STDDate"].ToString(), out dateValue)) objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];
                    objBookingTransactionMain.Currency = (string)drRow["Currency"];
                    objBookingTransactionMain.ExchangeRate = (decimal)drRow["ExchgRate"];
                    objBookingTransactionMain.CurrencyPaid = (string)drRow["CurrencyPaid"];
                    objBookingTransactionMain.CollectedAmt = (decimal)drRow["CollectedAmt"];
                    objBookingTransactionMain.TotalAmtAVG = (decimal)drRow["TotalAmtAVG"];
                    objBookingTransactionMain.TotalAmtGoing = (decimal)drRow["TotalAmtGoing"];
                    objBookingTransactionMain.TotalAmtReturn = (decimal)drRow["TotalAmtReturn"];
                    objBookingTransactionMain.TransSubTotal = (decimal)drRow["TransSubTotal"];
                    objBookingTransactionMain.TransTotalAmt = (decimal)drRow["TransTotalAmt"];
                    objBookingTransactionMain.TransTotalFee = (decimal)drRow["TransTotalFee"];
                    objBookingTransactionMain.TransTotalTax = (decimal)drRow["TransTotalTax"];
                    objBookingTransactionMain.TransTotalPaxFee = (decimal)drRow["TransTotalPaxFee"];
                    objBookingTransactionMain.TransTotalOth = (decimal)drRow["TransTotalOth"];
                    objBookingTransactionMain.TransTotalSSR = (decimal)drRow["TransTotalSSR"];
                    objBookingTransactionMain.TransTotalInfant = (decimal)drRow["TransTotalInfant"];
                    objBookingTransactionMain.TransTotalDisc = (decimal)drRow["TransTotalDisc"];
                    objBookingTransactionMain.TransTotalPromoDisc = (decimal)drRow["TransTotalPromoDisc"];
                    objBookingTransactionMain.TransTotalPAX = (int)drRow["TransTotalPAX"];
                    objBookingTransactionMain.TransTotalSeat = (decimal)drRow["TransTotalSeat"];
                    objBookingTransactionMain.TransTotalNameChange = (decimal)drRow["TransTotalNameChange"];
                    objBookingTransactionMain.TransTotalProcess = (decimal)drRow["TransTotalProcess"];
                    objBookingTransactionMain.TransTotalInfant = (decimal)drRow["TransTotalInfant"];
                    objBookingTransactionMain.TransRemark1 = (string)drRow["TransRemark1"];
                    objBookingTransactionMain.TransRemark2 = (string)drRow["TransRemark2"];
                    objBookingTransactionMain.TransStatus = (byte)drRow["TransStatus"];
                    objBookingTransactionMain.NeedPaymentStatus = (byte)drRow["NeedPaymentStatus"];
                    objBookingTransactionMain.Posted = (byte)drRow["Posted"];
                    objBookingTransactionMain.rowguid = (Guid)drRow["rowguid"];
                    objBookingTransactionMain.CreateBy = (string)drRow["CreateBy"];
                    if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTransactionMain.SyncCreate = (DateTime)drRow["SyncCreate"];
                    if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                    objBookingTransactionMain.LastSyncBy = (string)drRow["LastSyncBy"];
                    //added by ketee ,20121016
                    objBookingTransactionMain.PayScheme = (string)drRow["SchemeCode"];
                    objBookingTransactionMain.PromoCode = (string)drRow["PromoCode"];
                    objBookingTransactionMain.ForfeitedAmount = drRow["ForfeitedAmount"] != null && drRow["ForfeitedAmount"].ToString() != "" ? (decimal)drRow["ForfeitedAmount"] : 0;
                    //objBookingTransactionMain.NameChangeMax = (int)drRow["NameChangeMax"];
                    //objBookingTransactionMain.NameChangeLimit1 = (decimal)drRow["NameChangeLimit1"];
                    //objBookingTransactionMain.NameChangeLimit2 = (decimal)drRow["NameChangeLimit2"];
                    //added by ketee, 20170310
                    objBookingTransactionMain.IsOverride = Convert.ToInt16(drRow["IsOverride"]);
                    return objBookingTransactionMain;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        //added by ketee
        public void FillDataTableTransMain(BookingTransactionMain bookHeader, BookingTransactionMain previousBookHeader = null)
        {
            DataTable dtTransMain = this.dtTransMain();
            DataRow row = dtTransMain.NewRow(); ;
            if (bookHeader != null)
            {
                row["AgentID"] = bookHeader.AgentID;
                row["AgentCatgID"] = bookHeader.AgentCatgID;
                row["BookingDate"] = Convert.ToDateTime(bookHeader.BookingDate);
                row["TransID"] = bookHeader.TransID;
                row["TransType"] = bookHeader.TransType;
                row["TotalDepart"] = bookHeader.TotalAmtGoing;
                row["TotalReturn"] = bookHeader.TotalAmtReturn;
                row["TotalFee"] = bookHeader.TransTotalFee;
                row["TotalTax"] = bookHeader.TransTotalTax;
                row["TotalPaxFee"] = bookHeader.TransTotalPaxFee;
                row["TotalOth"] = bookHeader.TransTotalOth;
                row["TotalSSR"] = bookHeader.TransTotalSSR;
                row["TotalInfant"] = bookHeader.TransTotalInfant;
                row["TotalSeat"] = bookHeader.TransTotalSeat;
                row["TotalProcess"] = bookHeader.TransTotalProcess;
                row["TotalDisc"] = bookHeader.TransTotalDisc;
                row["TotalPromoDisc"] = bookHeader.TransTotalPromoDisc;
                row["TotalTrans"] = bookHeader.TransTotalAmt;
                row["CollectedAmt"] = bookHeader.CollectedAmt;
                row["TotalDue"] = (bookHeader.TransTotalAmt - bookHeader.CollectedAmt);
                row["Currency"] = bookHeader.Currency;
                row["ExchangeRate"] = bookHeader.ExchangeRate;
                row["CurrencyPaid"] = bookHeader.CurrencyPaid;
                //added by ketee, 20121016
                row["STDDate"] = bookHeader.STDDate;
                row["SchemeCode"] = bookHeader.PayScheme;
                row["TransStatus"] = bookHeader.TransStatus;
                row["PromoCode"] = bookHeader.PromoCode;
                //added by ketee, 20160205
                if (bookHeader.SyncLastUpd != null)
                {
                    row["SyncLastUpd"] = bookHeader.SyncLastUpd;
                }
                //added by ketee, 20160223
                if (bookHeader.ExpiryDate != null)
                {
                    row["ExpiryDate"] = bookHeader.ExpiryDate;
                }
                //added by ketee, 20170310
                row["IsOverride"] = bookHeader.IsOverride;

                if (previousBookHeader != null)
                {
                    row["CollectedAmt"] = previousBookHeader.CollectedAmt;
                    row["TotalDue"] = bookHeader.TransTotalAmt - previousBookHeader.CollectedAmt;
                }

                dtTransMain.Rows.Add(row);
                HttpContext.Current.Session.Remove("TransMain");
                HttpContext.Current.Session.Add("TransMain", dtTransMain);
            }
        }

        public void FillDataTableTransDetail(List<BookingTransactionDetail> listDetail, List<BookingTransactionDetail> previousListDetail = null)
        {
            DataTable dtTransDetail = this.dtTransDetail();
            DataRow row;
            if (listDetail != null && listDetail.Count > 0)
            {
                int i = 0;
                foreach (BookingTransactionDetail detail in listDetail)
                {
                    row = dtTransDetail.NewRow();
                    row["TransID"] = detail.TransID;
                    row["RecordLocator"] = detail.RecordLocator;
                    //row["SeqNo"] = detail.SeqNo;
                    row["DetailCollectedAmount"] = detail.CollectedAmount;
                    row["LineTotal"] = detail.LineTotal;
                    //row["CurrencyPaid"] = detail.Currency;
                    row["AmountDue"] = detail.LineTotal - detail.CollectedAmount;
                    //added by ketee, 20121016
                    row["PaxAdult"] = detail.PaxAdult;
                    row["PaxChild"] = detail.PaxChild;
                    row["LineFlight"] = detail.LineFlight;
                    row["LineFee"] = detail.LineFee;
                    row["SellKey"] = detail.SellKey;
                    row["LineTax"] = detail.LineTax;
                    row["LinePaxFee"] = detail.LinePaxFee;
                    row["LineOth"] = detail.LineOth;
                    row["LineProcess"] = detail.LineProcess;
                    row["LineSSR"] = detail.LineSSR;
                    row["LineInfant"] = detail.LineInfant;
                    row["LineSeat"] = detail.LineSeat;
                    row["LineNameChange"] = detail.LineNameChange;
                    row["LineInsureFee"] = detail.LineInsureFee;//added by romy 20170911 for Insure

                    row["LineDisc"] = detail.LineDisc;
                    row["LinePromoDisc"] = detail.LinePromoDisc;
                    // added by diana 20130920

                    row["NextDueDate"] = detail.NextDueDate;
                    row["PayDueAmount1"] = detail.PayDueAmount1;
                    row["PayDueAmount2"] = detail.PayDueAmount2;
                    row["PayDueAmount3"] = detail.PayDueAmount3;
                    row["PayDueDate1"] = detail.PayDueDate1;
                    row["PayDueDate2"] = detail.PayDueDate2;
                    row["PayDueDate3"] = detail.PayDueDate3;
                    // ended added by diana 20130920

                    row["CntRec"] = detail.CntRec;//added by diana 20140207, for storing num of recs

                    //added by ketee, 20170122
                    row["Origin"] = detail.Origin;

                    if (previousListDetail != null)
                    {
                        row["RecordLocator"] = previousListDetail[i].RecordLocator;
                        row["DetailCollectedAmount"] = previousListDetail[i].CollectedAmount;
                        row["AmountDue"] = detail.LineTotal - previousListDetail[i].CollectedAmount;
                    }
                    row["IsLatest"] = 0;

                    dtTransDetail.Rows.Add(row);

                    i += 1;
                }
                HttpContext.Current.Session.Remove("TransDetail");
                HttpContext.Current.Session.Add("TransDetail", dtTransDetail);
            }
        }

        public void FillDataTableTransDetailAll(List<BookingTransactionDetail> listDetail, List<BookingTransactionDetail> previousListDetail = null)
        {
            DataTable dtTransDetail = this.dtTransDetail();
            DataRow row;
            if (listDetail != null && listDetail.Count > 0)
            {
                int i = 0;
                foreach (BookingTransactionDetail detail in listDetail)
                {
                    row = dtTransDetail.NewRow();
                    row["TransID"] = detail.TransID;
                    row["RecordLocator"] = detail.RecordLocator;
                    //row["SeqNo"] = detail.SeqNo;
                    row["DetailCollectedAmount"] = detail.CollectedAmount;
                    row["LineTotal"] = detail.LineTotal;
                    //row["CurrencyPaid"] = detail.Currency;
                    row["AmountDue"] = detail.LineTotal - detail.CollectedAmount;
                    //added by ketee, 20121016
                    row["PaxAdult"] = detail.PaxAdult;
                    row["PaxChild"] = detail.PaxChild;
                    row["LineFee"] = detail.LineFee;
                    row["SellKey"] = detail.SellKey;
                    row["LineTax"] = detail.LineTax;
                    row["LinePaxFee"] = detail.LinePaxFee;
                    row["LineOth"] = detail.LineOth;
                    row["LineProcess"] = detail.LineProcess;
                    row["LineSSR"] = detail.LineSSR;
                    row["LineInfant"] = detail.LineInfant;
                    row["LineSeat"] = detail.LineSeat;
                    row["LineNameChange"] = detail.LineNameChange;

                    row["LineInsureFee"] = detail.LineInsureFee;//added by romy 20170911 for Insure
                    row["LineDisc"] = detail.LineDisc;
                    row["LinePromoDisc"] = detail.LinePromoDisc;
                    // added by diana 20130920
                    row["NextDueDate"] = detail.NextDueDate;
                    // ended added by diana 20130920

                    row["CntRec"] = detail.CntRec;//added by diana 20140207, for storing num of recs

                    //added by ketee, 20170122
                    row["Origin"] = detail.Origin;

                    if (previousListDetail != null)
                    {
                        row["RecordLocator"] = previousListDetail[i].RecordLocator;
                        row["DetailCollectedAmount"] = previousListDetail[i].CollectedAmount;
                        row["AmountDue"] = detail.LineTotal - previousListDetail[i].CollectedAmount;
                    }

                    dtTransDetail.Rows.Add(row);

                    i += 1;
                }
                HttpContext.Current.Session.Remove("TransDetailAll");
                HttpContext.Current.Session.Add("TransDetailAll", dtTransDetail);
            }
        }

        //added by diana 20170324, to update to latest changes amount
        public void FillChgTransMain(BookingTransactionMain bookHeader, BookingTransactionMain previousBookHeader = null)
        {
            DataTable dtTransMain = this.dtTransMain();
            DataRow row = dtTransMain.NewRow(); ;
            if (bookHeader != null)
            {
                row["AgentID"] = bookHeader.AgentID;
                row["AgentCatgID"] = bookHeader.AgentCatgID;
                row["BookingDate"] = Convert.ToDateTime(bookHeader.BookingDate);
                row["TransID"] = bookHeader.TransID;
                row["TransType"] = bookHeader.TransType;
                row["TotalDepart"] = bookHeader.TotalAmtGoing;
                row["TotalReturn"] = bookHeader.TotalAmtReturn;
                row["TotalFee"] = bookHeader.TransTotalFee;
                row["TotalTax"] = bookHeader.TransTotalTax;
                row["TotalPaxFee"] = bookHeader.TransTotalPaxFee;
                row["TotalOth"] = bookHeader.TransTotalOth;
                row["TotalSSR"] = bookHeader.TransTotalSSR;
                row["TotalInfant"] = bookHeader.TransTotalInfant;
                row["TotalSeat"] = bookHeader.TransTotalSeat;
                row["TotalProcess"] = bookHeader.TransTotalProcess;
                row["TotalDisc"] = bookHeader.TransTotalDisc;
                row["TotalPromoDisc"] = bookHeader.TransTotalPromoDisc;
                row["TotalTrans"] = bookHeader.TransTotalAmt;
                row["CollectedAmt"] = bookHeader.CollectedAmt;
                row["TotalDue"] = bookHeader.TransTotalAmt - bookHeader.CollectedAmt;
                row["Currency"] = bookHeader.Currency;
                row["ExchangeRate"] = bookHeader.ExchangeRate;
                row["CurrencyPaid"] = bookHeader.CurrencyPaid;
                //added by ketee, 20121016
                row["STDDate"] = bookHeader.STDDate;
                row["SchemeCode"] = bookHeader.PayScheme;
                row["PromoCode"] = bookHeader.PromoCode;
                row["TransStatus"] = bookHeader.TransStatus;
                //added by ketee, 20160205
                if (bookHeader.SyncLastUpd != null)
                {
                    row["SyncLastUpd"] = bookHeader.SyncLastUpd;
                }
                //added by ketee, 20160223
                if (bookHeader.ExpiryDate != null)
                {
                    row["ExpiryDate"] = bookHeader.ExpiryDate;
                }
                //added by ketee, 20170310
                row["IsOverride"] = bookHeader.IsOverride;

                if (previousBookHeader != null)
                {
                    row["CollectedAmt"] = previousBookHeader.CollectedAmt;
                    row["TotalDue"] = bookHeader.TransTotalAmt - previousBookHeader.CollectedAmt;
                }

                dtTransMain.Rows.Add(row);
                HttpContext.Current.Session.Remove("ChgTransMain");
                HttpContext.Current.Session.Add("ChgTransMain", dtTransMain);
            }
        }

        //added by diana 20170324, to update to latest changes amount
        public void FillChgTransDetail(List<BookingTransactionDetail> listDetail, List<BookingTransactionDetail> previousListDetail = null)
        {
            DataTable dtTransDetail = this.dtTransDetail();
            DataRow row;
            if (listDetail != null && listDetail.Count > 0)
            {
                int i = 0;
                foreach (BookingTransactionDetail detail in listDetail)
                {
                    row = dtTransDetail.NewRow();
                    row["TransID"] = detail.TransID;
                    row["RecordLocator"] = detail.RecordLocator;
                    row["DetailCollectedAmount"] = detail.CollectedAmount;
                    row["LineTotal"] = detail.LineTotal;
                    row["AmountDue"] = detail.LineTotal - detail.CollectedAmount;
                    row["PaxAdult"] = detail.PaxAdult;
                    row["PaxChild"] = detail.PaxChild;
                    row["LineFee"] = detail.LineFee;
                    row["SellKey"] = detail.SellKey;
                    row["LineTax"] = detail.LineTax;
                    row["LinePaxFee"] = detail.LinePaxFee;
                    row["LineOth"] = detail.LineOth;
                    row["LineProcess"] = detail.LineProcess;
                    row["LineSSR"] = detail.LineSSR;
                    row["LineInfant"] = detail.LineInfant;
                    row["LineSeat"] = detail.LineSeat;
                    row["LineNameChange"] = detail.LineNameChange;
                    row["LineDisc"] = detail.LineDisc;
                    row["LinePromoDisc"] = detail.LinePromoDisc;
                    row["NextDueDate"] = detail.NextDueDate;

                    row["LineInsureFee"] = detail.LineInsureFee;//added by romy 20170911 for Insure
                    row["CntRec"] = detail.CntRec;//added by diana 20140207, for storing num of recs

                    //added by ketee, 20170122
                    row["Origin"] = detail.Origin;

                    if (previousListDetail != null)
                    {
                        row["OldDetailCollectedAmount"] = previousListDetail[i].CollectedAmount;
                        row["OldLineTotal"] = previousListDetail[i].LineTotal;
                        row["OldAmountDue"] = previousListDetail[i].LineTotal - previousListDetail[i].CollectedAmount;
                        row["OldPaxAdult"] = previousListDetail[i].PaxAdult;
                        row["OldPaxChild"] = previousListDetail[i].PaxChild;
                        row["OldLineFee"] = previousListDetail[i].LineFee;
                        row["OldSellKey"] = previousListDetail[i].SellKey;
                        row["OldLineTax"] = previousListDetail[i].LineTax;
                        row["OldLinePaxFee"] = previousListDetail[i].LinePaxFee;
                        row["OldLineOth"] = previousListDetail[i].LineOth;
                        row["OldLineProcess"] = previousListDetail[i].LineProcess;
                        row["OldLineSSR"] = previousListDetail[i].LineSSR;
                        row["OldLineInfant"] = previousListDetail[i].LineInfant;
                        row["OldLineInsureFee"] = previousListDetail[i].LineInsureFee;//added by romy 20170911 for Insure
                        row["OldLineSeat"] = previousListDetail[i].LineSeat;
                        row["OldLineNameChange"] = previousListDetail[i].LineNameChange;
                        row["OldLineDisc"] = previousListDetail[i].LineDisc;
                        row["OldLinePromoDisc"] = previousListDetail[i].LinePromoDisc;
                    }

                    dtTransDetail.Rows.Add(row);

                    i += 1;
                }
                HttpContext.Current.Session.Remove("ChgTransDetail");
                HttpContext.Current.Session.Add("ChgTransDetail", dtTransDetail);
            }
        }

        public void FillChgdataTrans(string PrevTransID, string TransID, string PNR, string Currency, Decimal TotalInfantpax, string AgentID, string AgentName, string AgentCategoryID, DateTime TemFlightStd, string ReturnID, Boolean insert = false)
        {
            BookingTransactionDetail bookDTLInfo = new BookingTransactionDetail();
            byte seqNo = 1;
            decimal APT = 0;
            string keyCarrier = "";
            int num = 0;
            DataTable dataClass = dtClass();
            decimal totalOth = 0; //service charge total
            decimal totalDisc = 0; //discount charge total
            decimal totalPromoDisc = 0;
            decimal totalInfant = 0;
            decimal currencyRate = 1;
            decimal totalFlightFare = 0, totalServiceFee = 0, totalPaxFee = 0, totalServVAT = 0;
            Hashtable ht = new Hashtable();
            ArrayList save = new ArrayList();
            List<BookingTransactionDetail> lstbookDTLInfo = new List<BookingTransactionDetail>();
            BookingTransactionMain bookHDRInfo = new BookingTransactionMain();
            dataClass = (DataTable)HttpContext.Current.Session["dataClass"];
            foreach (DataRow dr in dataClass.Rows)
            {
                bookDTLInfo = new BookingTransactionDetail();
                bookDTLInfo.RecordLocator = PNR;
                bookDTLInfo.TransID = TransID;
                bookDTLInfo.SeqNo = seqNo;

                if (seqNo == 1)
                {
                    keyCarrier = bookDTLInfo.CarrierCode = dr["CarrierCode"].ToString();
                    ht.Add("keyCarrier", keyCarrier);
                }

                //service charge pax
                //decimal svcCharge = Convert.ToDecimal(objGeneral.getSysValueByKeyAndCarrierCode("SVCCHARGEPAX", keyCarrier)) / 100;
                bookDTLInfo.LineOth = Convert.ToDecimal(dr["OthChrg"].ToString());
                totalOth += bookDTLInfo.LineOth;

                bookDTLInfo.LineDisc = Convert.ToDecimal(dr["DiscChrg"].ToString());
                bookDTLInfo.LinePaxFee = Convert.ToDecimal(dr["PaxFeeChrg"].ToString());
                totalDisc += bookDTLInfo.LineDisc;

                bookDTLInfo.LinePromoDisc = Convert.ToDecimal(dr["PromoDiscChrg"].ToString());
                totalPromoDisc += bookDTLInfo.LinePromoDisc;

                seqNo += 1;
                bookDTLInfo.Currency = Currency;
                bookDTLInfo.CarrierCode = dr["CarrierCode"].ToString();
                bookDTLInfo.FlightNo = dr["FlightNumber"].ToString();
                bookDTLInfo.DepatureDate = Convert.ToDateTime(dr["DepartureDate"].ToString());
                bookDTLInfo.ArrivalDate = Convert.ToDateTime(dr["ArrivalDate"].ToString());
                bookDTLInfo.Origin = dr["Origin"].ToString();
                bookDTLInfo.Destination = dr["Destination"].ToString();

                //bookDTLInfo.LineFee = Convert.ToDecimal(dr["FuelChrg"].ToString());
                bookDTLInfo.LineFee = Convert.ToDecimal(dr["ServChrg"].ToString());
                //added by ketee
                bookDTLInfo.LineVAT = Convert.ToDecimal(dr["ServVAT"] == DBNull.Value ? 0 : dr["ServVAT"]);

                bookDTLInfo.LineInfant = Convert.ToDecimal(dr["InfantChrg"].ToString());

                if (Convert.ToDecimal(dr["InfantChrg"].ToString()) != 0)
                {
                    totalInfant = Convert.ToDecimal(dr["InfantChrg"].ToString()) / TotalInfantpax;
                }
                else
                {
                    totalInfant = 0;
                }

                totalServVAT += bookDTLInfo.LineVAT;

                totalServiceFee += bookDTLInfo.LineFee;
                totalPaxFee += bookDTLInfo.LinePaxFee;

                bookDTLInfo.FareClass = dr["FareClass"].ToString();
                bookDTLInfo.PaxAdult = Convert.ToInt16(dr["AdultPax"].ToString());
                bookDTLInfo.PaxChild = Convert.ToInt16(dr["ChildPax"].ToString());
                bookDTLInfo.LineTotal = Convert.ToDecimal(dr["FullPrice"].ToString());
                bookDTLInfo.SyncLastUpd = DateTime.Now;
                bookDTLInfo.LastSyncBy = AgentID;

                //bookDTLInfo.FarePerPax = Convert.ToDecimal(dr["FarePrice"].ToString());
                bookDTLInfo.FarePerPax = Convert.ToDecimal(dr["FarePrice"].ToString()) / Convert.ToDecimal(dr["Quantity"].ToString());

                if (dr["ChdTaxChrg"].ToString() == "") dr["ChdTaxChrg"] = 0; // || (dr["Origin"].ToString() != "HKG" && dr["Destination"].ToString() != "HKG")) dr["ChdTaxChrg"] = 0;
                //if (dr["ChdFuelChrg"].ToString() == "") dr["ChdFuelChrg"] = 0; // || (dr["Origin"].ToString() != "HKG" && dr["Destination"].ToString() != "HKG")) dr["ChdFuelChrg"] = 0;
                bookDTLInfo.LineTax = Convert.ToDecimal(dr["TaxChrg"].ToString()) + Convert.ToDecimal(dr["FuelChrg"].ToString()) + Convert.ToDecimal(dr["ChdTaxChrg"].ToString()); // + Convert.ToDecimal(dr["ChdFuelChrg"].ToString()); //apt + fuel

                //totalFlightFare += bookDTLInfo.LineTotal + bookDTLInfo.LineOth; //include service charge
                totalFlightFare += bookDTLInfo.LineTotal; //include service charge

                bookDTLInfo.TransVoid = 0;
                bookDTLInfo.CreateBy = AgentID;
                bookDTLInfo.SyncCreate = DateTime.Now;

                bookDTLInfo.Transit = dr["TemClassTransit"].ToString();
                bookDTLInfo.SellKey = dr["FareSellKey"].ToString();

                if (bookDTLInfo.Transit != "")
                {
                    bookDTLInfo.ArrivalDate2 = Convert.ToDateTime(dr["TemClassSta2"].ToString());
                    bookDTLInfo.DepatureDate2 = Convert.ToDateTime(dr["TemClassStd2"].ToString());
                    bookDTLInfo.OverridedSellKey = dr["FareSellKey2"].ToString();
                }

                bookDTLInfo.FlightDura = Convert.ToDecimal(dr["FlightDura"].ToString());
                bookDTLInfo.FlightDura2 = Convert.ToDecimal(dr["FlightDura2"].ToString());

                bookDTLInfo.CollectedAmount = 0;
                bookDTLInfo.Signature = dr["SellSignature"].ToString();

                //added by ketee 20130625
                //midchange = from CurrencyRate to ExchgRate
                //currencyRate = Convert.ToDecimal(dr["CurrencyRate"]);
                currencyRate = Convert.ToDecimal(dr["CurrencyRate"] == DBNull.Value ? 1 : dr["CurrencyRate"]);
                // objBooking.SaveBK_TRANSDTL(bookDTLInfo, ABS.Logic.GroupBooking.Booking.BookingControl.EnumSaveType.Insert);
                lstbookDTLInfo.Add(bookDTLInfo);

                APT += bookDTLInfo.LineTax;
            }

            bookHDRInfo.TransID = bookDTLInfo.TransID;

            ht.Add("TransID", bookHDRInfo.TransID);

            bookHDRInfo.TransType = 0;
            bookHDRInfo.AgentID = AgentID;
            bookHDRInfo.AgentCatgID = AgentCategoryID;
            bookHDRInfo.BookingDate = DateTime.Now;
            bookHDRInfo.STDDate = TemFlightStd;

            string expirySetting = objGeneral.getSysValueByKeyAndCarrierCode("STDEXPIRY", keyCarrier);

            int sysValue = 0;
            if (expirySetting != "")
            {
                sysValue = Convert.ToInt16(expirySetting);
            }

            ht.Add("Expiry", bookHDRInfo.ExpiryDate);

            bookHDRInfo.TransTotalPAX = Convert.ToInt16(num);
            bookHDRInfo.CollectedAmt = 0;

            bookHDRInfo.TransTotalAmt = totalFlightFare;
            bookHDRInfo.TransSubTotal = totalFlightFare;
            bookHDRInfo.TransTotalPaxFee = totalPaxFee;
            bookHDRInfo.TransTotalTax = APT;
            bookHDRInfo.TransTotalFee = totalServiceFee;
            bookHDRInfo.TransTotalOth = totalOth;
            bookHDRInfo.TransTotalDisc = totalDisc;
            bookHDRInfo.TransTotalPromoDisc = totalPromoDisc;
            bookHDRInfo.TransTotalInfant = totalInfant;
            //addede by ketee
            bookHDRInfo.TransTotalVAT = totalServVAT;

            bookHDRInfo.Currency = Currency;
            bookHDRInfo.CurrencyPaid = Currency;

            bookHDRInfo.TransStatus = 1;
            bookHDRInfo.CreateBy = AgentID;
            bookHDRInfo.SyncCreate = DateTime.Now;
            bookHDRInfo.SyncLastUpd = DateTime.Now;
            bookHDRInfo.LastSyncBy = AgentName;

            //added by ketee 20130625, currencyRate
            bookHDRInfo.ExchangeRate = currencyRate;

            //added by ketee, 20170307, all new booking will default the isoverride = 1 mean is GBS2
            bookHDRInfo.IsOverride = 1;
            //load fare

            if (HttpContext.Current.Session["Fare"] != null)
            {
                string a = "";
            }
            Hashtable htFare = (Hashtable)HttpContext.Current.Session["Fare"];
            decimal avg = Convert.ToDecimal(htFare["Avg"]);
            decimal dpt = Convert.ToDecimal(htFare["Dpt"]);
            decimal rtn = Convert.ToDecimal(htFare["Rtn"]);

            //bookHDRInfo.TotalAmtAVG = Convert.ToDecimal(lblAverageFare.Text);
            bookHDRInfo.TotalAmtAVG = avg;

            bookHDRInfo.TotalAmtGoing = dpt + totalInfant;

            if (ReturnID != "")
            { bookHDRInfo.TotalAmtReturn = rtn + totalInfant; }
            else
            { bookHDRInfo.TotalAmtReturn = 0; }

            string reminder = objGeneral.getSysValueByKeyAndCarrierCode("REMINDDURA1", keyCarrier);

            if (reminder != "")
            {
                sysValue = Convert.ToInt16(reminder);
            }
            //bookHDRInfo.CurReminderDate = bookHDRInfo.ExpiryDate.AddDays(-sysValue);

            reminder = objGeneral.getSysValueByKeyAndCarrierCode("REMINDDURA2", keyCarrier);

            if (reminder != "")
            {
                sysValue = Convert.ToInt16(reminder);
            }
            //bookHDRInfo.NextReminderDate = bookHDRInfo.ExpiryDate.AddDays(-sysValue);
            bookHDRInfo.ReminderType = 1;

            //load max failed payment try
            string maxPaymentFail = objGeneral.getSysValueByKeyAndCarrierCode("PAYMENTSUSPEND", keyCarrier);
            ht.Add("PaymentSuspend", maxPaymentFail);

            //added by ketee, 20170310, for new booking, set isoverride = 1
            ht.Add("IsOverride", "1");

            HttpContext.Current.Session.Remove("HashMain");
            HttpContext.Current.Session.Add("HashMain", ht);

            HttpContext.Current.Session.Remove("ChglstbookDTLInfo");
            HttpContext.Current.Session.Add("ChglstbookDTLInfo", lstbookDTLInfo);

            FillDataTableTransDetailAll(lstbookDTLInfo);

            HttpContext.Current.Session.Remove("ChgbookHDRInfo");
            HttpContext.Current.Session.Add("ChgbookHDRInfo", bookHDRInfo);

            string newTransID = TransID;
            save.Add(newTransID);
            string prevTransID = PrevTransID;
            save.Add(prevTransID);
            Boolean Insert = insert;
            save.Add(Insert);

            HttpContext.Current.Session.Remove("Chgsave");
            HttpContext.Current.Session.Add("Chgsave", save);

        }

        public void FillChgHistory(string TransID, string PNR)
        {
            DataTable dtTransDetail = this.dtTransDetail();
            DataRow row;
            row = dtTransDetail.NewRow();
            row["TransID"] = TransID;
            row["RecordLocator"] = PNR;

            dtTransDetail.Rows.Add(row);


            HttpContext.Current.Session.Remove("ChgHistory");
            HttpContext.Current.Session.Add("ChgHistory", dtTransDetail);
        }

        public void FillDataTableTransFees(BookingTransactionFees bookTransFees)
        {
            DataTable dtTransFees = this.dtTransFees();
            DataRow row = dtTransFees.NewRow(); ;
            if (bookTransFees != null)
            {
                row["TransID"] = bookTransFees.TransID;
                row["RecordLocator"] = bookTransFees.RecordLocator;
                row["SeqNo"] = bookTransFees.SeqNo;
                row["FeeCode"] = bookTransFees.FeeCode;
                row["FeeDesc"] = bookTransFees.FeeDesc;
                row["PaxType"] = bookTransFees.PaxType;
                row["Origin"] = bookTransFees.Origin;
                row["Transit"] = bookTransFees.Transit;
                row["Destination"] = bookTransFees.Destination;
                row["FeeType"] = bookTransFees.FeeType;
                row["FeeQty"] = bookTransFees.FeeQty;
                row["FeeRate"] = bookTransFees.FeeRate;
                row["FeeAmt"] = bookTransFees.FeeAmt;
                row["TransVoid"] = bookTransFees.Transvoid;

                dtTransFees.Rows.Add(row);
                HttpContext.Current.Session.Remove("TransFees");
                HttpContext.Current.Session.Add("TransFees", dtTransFees);
            }
        }

        //added by diana 20170325, to clear all session data related to change mode
        public void ClearSessionData()
        {
            HttpContext.Current.Session.Remove("Chgsave");
            HttpContext.Current.Session.Remove("ChglstbookDTLInfo");
            HttpContext.Current.Session.Remove("ChglistBookingDetailFlight");
            HttpContext.Current.Session.Remove("ChgbookingMain");
            HttpContext.Current.Session.Remove("ChgHistory");
            HttpContext.Current.Session.Remove("ChgbookHDRInfo");
            HttpContext.Current.Session.Remove("ChgTransMain");
            HttpContext.Current.Session.Remove("ChgTransDetail");
            HttpContext.Current.Session.Remove("lstPassengerData");
            HttpContext.Current.Session.Remove("lstPassInfantData");
            HttpContext.Current.Session.Remove("ChgMode");
            HttpContext.Current.Session.Remove("ChgTransSSR");
            HttpContext.Current.Session.Remove("listBookingDetail");
            HttpContext.Current.Session.Remove("bookingMain");
            HttpContext.Current.Session.Remove("listBookingDetailCombine");
            HttpContext.Current.Session.Remove("IsInternationalFlight");
        }

        //added by diana 20140210, for flight change purpose
        public void MoveDataTableTransMain(BookingTransactionMain bookHeader)
        {
            DataTable dtTransMain = this.dtTransMain();
            DataRow row = dtTransMain.NewRow(); ;
            if (bookHeader != null)
            {
                row["AgentID"] = bookHeader.AgentID;
                row["AgentCatgID"] = bookHeader.AgentCatgID;
                row["BookingDate"] = Convert.ToDateTime(bookHeader.BookingDate);
                row["TransID"] = bookHeader.TransID;
                row["TransType"] = bookHeader.TransType;
                row["TotalDepart"] = bookHeader.TotalAmtGoing;
                row["TotalReturn"] = bookHeader.TotalAmtReturn;
                row["TotalFee"] = bookHeader.TransTotalFee;
                row["TotalTax"] = bookHeader.TransTotalTax;
                row["TotalPaxFee"] = bookHeader.TransTotalPaxFee;
                row["TotalOth"] = bookHeader.TransTotalOth;
                row["TotalSSR"] = bookHeader.TransTotalSSR;
                row["TotalSeat"] = bookHeader.TransTotalSeat;
                row["TotalNameChange"] = bookHeader.TransTotalNameChange;
                row["TotalProcess"] = bookHeader.TransTotalProcess;
                row["TotalInfant"] = bookHeader.TransTotalInfant;
                row["TotalDisc"] = bookHeader.TransTotalDisc;
                row["TotalPromoDisc"] = bookHeader.TransTotalPromoDisc;
                row["TotalTrans"] = bookHeader.TransTotalAmt;
                row["CollectedAmt"] = bookHeader.CollectedAmt;
                row["TotalDue"] = bookHeader.TransTotalAmt - bookHeader.CollectedAmt;
                row["Currency"] = bookHeader.Currency;
                row["CurrencyPaid"] = bookHeader.CurrencyPaid;
                //added by ketee, 20121016
                row["STDDate"] = bookHeader.STDDate;
                row["SchemeCode"] = bookHeader.PayScheme;
                row["PromoCode"] = bookHeader.PromoCode;
                row["TransStatus"] = bookHeader.TransStatus;
                dtTransMain.Rows.Add(row);
                HttpContext.Current.Session.Remove("TransMain");
                HttpContext.Current.Session.Add("TransMain", dtTransMain);
            }
        }

        //added by diana 20140210, for flight change purpose
        public void MoveDataTableTransDetail(List<BookingTransactionDetail> listDetail)
        {
            DataTable dtTransDetail = this.dtTransDetail();
            DataRow row;
            if (listDetail != null && listDetail.Count > 0)
            {
                foreach (BookingTransactionDetail detail in listDetail)
                {
                    row = dtTransDetail.NewRow();
                    row["TransID"] = detail.TransID;
                    row["RecordLocator"] = detail.RecordLocator;
                    //row["SeqNo"] = detail.SeqNo;
                    row["DetailCollectedAmount"] = detail.CollectedAmount;
                    row["LineTotal"] = detail.LineTotal;
                    //row["CurrencyPaid"] = detail.Currency;
                    row["AmountDue"] = detail.LineTotal - detail.CollectedAmount;
                    //added by ketee, 20121016
                    row["PaxAdult"] = detail.PaxAdult;
                    row["PaxChild"] = detail.PaxChild;
                    row["LineFee"] = detail.LineFee;
                    row["SellKey"] = detail.SellKey;
                    row["LineTax"] = detail.LineTax;
                    row["LinePaxFee"] = detail.LinePaxFee;
                    row["LineOth"] = detail.LineOth;
                    row["LineProcess"] = detail.LineProcess;
                    row["LineSSR"] = detail.LineSSR;
                    row["LineSeat"] = detail.LineSeat;
                    row["LineInfant"] = detail.LineInfant;

                    row["LineDisc"] = detail.LineDisc;
                    row["LinePromoDisc"] = detail.LinePromoDisc;
                    // added by diana 20130920
                    row["NextDueDate"] = detail.NextDueDate;
                    // ended added by diana 20130920

                    row["CntRec"] = detail.CntRec;//added by diana 20140207, for storing num of recs
                    dtTransDetail.Rows.Add(row);
                }
                HttpContext.Current.Session.Remove("TransDetail");
                HttpContext.Current.Session.Add("TransDetail", dtTransDetail);
            }
        }

        public BookingTransactionMain SaveBK_TRANSMAIN(BookingTransactionMain pBK_TRANSMAIN_Info, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                objSQL.AddField("TransID", pBK_TRANSMAIN_Info.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransType", pBK_TRANSMAIN_Info.TransType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AgentID", pBK_TRANSMAIN_Info.AgentID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AgentCatgID", pBK_TRANSMAIN_Info.AgentCatgID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("BookingDate", pBK_TRANSMAIN_Info.BookingDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx1", pBK_TRANSMAIN_Info.PaymentDateEx1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx1", pBK_TRANSMAIN_Info.PaymentAmtEx1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx2", pBK_TRANSMAIN_Info.PaymentDateEx2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx2", pBK_TRANSMAIN_Info.PaymentAmtEx2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx3", pBK_TRANSMAIN_Info.PaymentDateEx3, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx3", pBK_TRANSMAIN_Info.PaymentAmtEx3, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDate", pBK_TRANSMAIN_Info.PaymentDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CancelDate", pBK_TRANSMAIN_Info.CancelDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ExpiryDate", pBK_TRANSMAIN_Info.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("STDDate", pBK_TRANSMAIN_Info.STDDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Currency", pBK_TRANSMAIN_Info.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CurrencyPaid", pBK_TRANSMAIN_Info.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CollectedAmt", pBK_TRANSMAIN_Info.CollectedAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtAVG", pBK_TRANSMAIN_Info.TotalAmtAVG, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtGoing", pBK_TRANSMAIN_Info.TotalAmtGoing, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtReturn", pBK_TRANSMAIN_Info.TotalAmtReturn, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransSubTotal", pBK_TRANSMAIN_Info.TransSubTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalAmt", pBK_TRANSMAIN_Info.TransTotalAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalFee", pBK_TRANSMAIN_Info.TransTotalFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalTax", pBK_TRANSMAIN_Info.TransTotalTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPaxFee", pBK_TRANSMAIN_Info.TransTotalPaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalOth", pBK_TRANSMAIN_Info.TransTotalOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalSSR", pBK_TRANSMAIN_Info.TransTotalSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalDisc", pBK_TRANSMAIN_Info.TransTotalDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPromoDisc", pBK_TRANSMAIN_Info.TransTotalPromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPAX", pBK_TRANSMAIN_Info.TransTotalPAX, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalSeat", pBK_TRANSMAIN_Info.TransTotalSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalNameChange", pBK_TRANSMAIN_Info.TransTotalNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalProcess", pBK_TRANSMAIN_Info.TransTotalProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalInfant", pBK_TRANSMAIN_Info.TransTotalInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransRemark1", pBK_TRANSMAIN_Info.TransRemark1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                objSQL.AddField("TransRemark2", pBK_TRANSMAIN_Info.TransRemark2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                objSQL.AddField("TransStatus", pBK_TRANSMAIN_Info.TransStatus, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Posted", pBK_TRANSMAIN_Info.Posted, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CreateBy", pBK_TRANSMAIN_Info.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", pBK_TRANSMAIN_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncLastUpd", pBK_TRANSMAIN_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LastSyncBy", pBK_TRANSMAIN_Info.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CurReminderDate", pBK_TRANSMAIN_Info.CurReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("NextReminderDate", pBK_TRANSMAIN_Info.NextReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ReminderType", pBK_TRANSMAIN_Info.ReminderType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PromoCode", pBK_TRANSMAIN_Info.PromoCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                //added by ketee, get payment scheme,20121016
                //DateTime todays = DateTime.Now;
                //int days = pBK_TRANSMAIN_Info.STDDate.Subtract(todays).Days;
                //string Scheme = "";
                //if (days > 60)
                //{
                //    Scheme = "SVCF";
                //}
                //else if (days <= 60 && days > 30)
                //{
                //    Scheme = "SVCF";
                //}
                //else if (days <= 30 && days > 7)
                //{
                //    Scheme = "SVCF";
                //}
                //else
                //{
                //    Scheme = "FULL";
                //}
                objSQL.AddField("SchemeCode", pBK_TRANSMAIN_Info.PayScheme, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                switch (saveType)
                {
                    case EnumSaveType.Insert:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSMAIN", string.Empty);
                        break;
                    case EnumSaveType.Update:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSMAIN", "BK_TRANSMAIN.TransID='" + pBK_TRANSMAIN_Info.TransID + "'" + " AND BK_TRANSMAIN.TransType='" + pBK_TRANSMAIN_Info.TransType + "' AND BK_TRANSMAIN.AgentID='" + pBK_TRANSMAIN_Info.AgentID + "'" + " AND BK_TRANSMAIN.AgentCatgID='" + pBK_TRANSMAIN_Info.AgentCatgID + "' AND BK_TRANSMAIN.BookingDate='" + pBK_TRANSMAIN_Info.BookingDate + "'");
                        break;
                }
                lstSQL.Add(strSQL);
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return null;
                }
                return GetSingleBK_TRANSMAIN(pBK_TRANSMAIN_Info.TransID, pBK_TRANSMAIN_Info.TransType, pBK_TRANSMAIN_Info.AgentID, pBK_TRANSMAIN_Info.AgentCatgID, pBK_TRANSMAIN_Info.BookingDate);
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public Boolean SaveHistoryBooking(string TransID, string PNR, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            DataTable dtMain = new DataTable();
            DataTable dtDtl = new DataTable();
            try
            {
                strSQL = "SELECT * FROM BK_TRANSMAIN WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'";
                dtMain = objDCom.Execute(strSQL, CommandType.Text, true);

                strSQL = "SELECT * FROM BK_TRANSDTL WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "'";
                dtDtl = objDCom.Execute(strSQL, CommandType.Text, true);

                if (dtMain != null && dtMain.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtMain.Rows)
                    {
                        objSQL.AddField("TransID", dr["TransID"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransType", Convert.ToInt32(dr["TransType"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("AgentID", dr["AgentID"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("AgentCatgID", dr["AgentCatgID"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("BookingDate", Convert.ToDateTime(dr["BookingDate"].ToString()), SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        if (dr["PaymentDateEx1"] != DBNull.Value) objSQL.AddField("PaymentDateEx1", Convert.ToDateTime(dr["PaymentDateEx1"].ToString()), SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaymentAmtEx1", Convert.ToDecimal(dr["PaymentAmtEx1"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        if (dr["PaymentDateEx2"] != DBNull.Value) objSQL.AddField("PaymentDateEx2", Convert.ToDateTime(dr["PaymentDateEx2"].ToString()), SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaymentAmtEx2", Convert.ToDecimal(dr["PaymentAmtEx2"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        if (dr["PaymentDateEx3"] != DBNull.Value) objSQL.AddField("PaymentDateEx3", Convert.ToDateTime(dr["PaymentDateEx3"].ToString()), SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaymentAmtEx3", Convert.ToDecimal(dr["PaymentAmtEx3"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        if (dr["PaymentDate"] != DBNull.Value) objSQL.AddField("PaymentDate", Convert.ToDateTime(dr["PaymentDate"].ToString()), SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        if (dr["CancelDate"] != DBNull.Value) objSQL.AddField("CancelDate", Convert.ToDateTime(dr["CancelDate"].ToString()), SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        //objSQL.AddField("ExpiryDate", BookingTransMain.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("STDDate", Convert.ToDateTime(dr["STDDate"].ToString()), SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Currency", dr["Currency"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CurrencyPaid", dr["CurrencyPaid"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CollectedAmt", Convert.ToDecimal(dr["CollectedAmt"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TotalAmtAVG", Convert.ToDecimal(dr["TotalAmtAVG"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TotalAmtGoing", Convert.ToDecimal(dr["TotalAmtGoing"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TotalAmtReturn", Convert.ToDecimal(dr["TotalAmtReturn"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransSubTotal", Convert.ToDecimal(dr["TransSubTotal"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalAmt", Convert.ToDecimal(dr["TransTotalAmt"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalFee", Convert.ToDecimal(dr["TransTotalFee"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalTax", Convert.ToDecimal(dr["TransTotalTax"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalPaxFee", Convert.ToDecimal(dr["TransTotalPaxFee"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalOth", Convert.ToDecimal(dr["TransTotalOth"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalSSR", Convert.ToDecimal(dr["TransTotalSSR"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalInfant", Convert.ToDecimal(dr["TransTotalInfant"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalDisc", Convert.ToDecimal(dr["TransTotalDisc"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalPromoDisc", Convert.ToDecimal(dr["TransTotalPromoDisc"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalPAX", Convert.ToDecimal(dr["TransTotalPAX"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalSeat", Convert.ToDecimal(dr["TransTotalSeat"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalNameChange", Convert.ToDecimal(dr["TransTotalNameChange"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalProcess", Convert.ToDecimal(dr["TransTotalProcess"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalInfant", Convert.ToDecimal(dr["TransTotalInfant"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransRemark1", dr["TransRemark1"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("TransRemark2", dr["TransRemark2"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("TransStatus", Convert.ToInt32(dr["TransStatus"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Posted", Convert.ToInt32(dr["Posted"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CreateBy", dr["CreateBy"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncCreate", Convert.ToDateTime(dr["SyncCreate"].ToString()), SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncLastUpd", Convert.ToDateTime(dr["SyncLastUpd"].ToString()), SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LastSyncBy", dr["LastSyncBy"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        //objSQL.AddField("CurReminderDate", BookingTransMain.CurReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        if (dr["NextReminderDate"] != DBNull.Value) objSQL.AddField("NextReminderDate", Convert.ToDateTime(dr["NextReminderDate"].ToString()), SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ReminderType", Convert.ToInt32(dr["ReminderType"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        //added by ketee , VAT
                        objSQL.AddField("TransTotalVAT", Convert.ToDecimal(dr["TransTotalVAT"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        //added by ketee 20130625 currencyRate
                        objSQL.AddField("ExchgRate", Convert.ToDecimal(dr["ExchgRate"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        //added by ketee, 20170307, add to save IsOverride = 1 if booking make in new GBS
                        objSQL.AddField("IsOverride", Convert.ToInt32(dr["IsOverride"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PromoCode", dr["PromoCode"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                        //added by ketee, get payment scheme,20121016

                        GeneralControl objGeneral = new GeneralControl();
                        string GroupName = objGeneral.getOPTGroupByCarrierCode(dtDtl.Rows[0]["CarrierCode"].ToString());

                        PaymentControl objPayment = new PaymentControl();
                        //string Scheme = objPayment.GetScheme(BookingTransMain.STDDate, "AA");
                        //amended by diana 20130925, change today to bookingdate
                        string Scheme = objPayment.GetScheme(Convert.ToDateTime(dr["STDDate"].ToString()), Convert.ToDateTime(dr["BookingDate"].ToString()), GroupName, dr["TransID"].ToString());
                        objSQL.AddField("SchemeCode", Scheme, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        //DateTime expiryDate = objPayment.GetExpiryDate(Scheme, "AA", BookingTransMain.STDDate, BookingTransMain.BookingDate);

                        // commented by diana 20130918
                        //DateTime expiryDate = objPayment.GetExpiryDate(Scheme, GroupName, BookingTransMain.STDDate, BookingTransMain.BookingDate);
                        //objSQL.AddField("ExpiryDate", expiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        // end commented by diana 20130918

                        DateTime expiryDate = objPayment.GetExpiryDate(Scheme, GroupName, Convert.ToDateTime(dr["STDDate"].ToString()), Convert.ToDateTime(dr["BookingDate"].ToString()), dr["TransID"].ToString());
                        //if (BookingTransMain.ExpiryDate != null)
                        //    expiryDate = BookingTransMain.ExpiryDate;
                        objSQL.AddField("ExpiryDate", expiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);

                        DateTime CurReminderDate = expiryDate.Date.AddDays(-5);
                        objSQL.AddField("CurReminderDate", CurReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);


                        switch (saveType)
                        {
                            case EnumSaveType.Insert:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_HIST_TRANSMAIN", string.Empty);
                                break;
                            case EnumSaveType.Update:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_HIST_TRANSMAIN", "BK_HIST_TRANSMAIN.TransID='" + dr["TransID"].ToString() + "'" + " AND BK_HIST_TRANSMAIN.TransType='" + dr["TransType"].ToString() + "' AND BK_HIST_TRANSMAIN.AgentID='" + dr["AgentID"].ToString() + "' AND BK_HIST_TRANSMAIN.AgentCatgID='" + dr["AgentCatgID"].ToString() + "'");
                                break;
                        }
                        lstSQL.Add(strSQL);
                    }
                }
                if (dtDtl != null && dtDtl.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtDtl.Rows)
                    {
                        objSQL.AddField("RecordLocator", dr["RecordLocator"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransID", dr["TransID"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SeqNo", Convert.ToInt32(dr["SeqNo"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CarrierCode", dr["CarrierCode"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightNo", dr["FlightNo"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DepartureDate", Convert.ToDateTime(dr["DepartureDate"].ToString()), SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        if (dr["DepartureDate2"] != DBNull.Value) objSQL.AddField("DepartureDate2", Convert.ToDateTime(dr["DepartureDate2"].ToString()), SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Origin", dr["Origin"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Transit", dr["Transit"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Destination", dr["Destination"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        if (dr["ArrivalDate"] != DBNull.Value) objSQL.AddField("ArrivalDate", Convert.ToDateTime(dr["ArrivalDate"].ToString()), SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        if (dr["ArrivalDate2"] != DBNull.Value) objSQL.AddField("ArrivalDate2", Convert.ToDateTime(dr["ArrivalDate2"].ToString()), SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        //objSQL.AddField("FlightDura", Convert.ToDecimal(dr["FlightDura"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        //objSQL.AddField("FlightDura2", Convert.ToDecimal(dr["FlightDura2"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FareClass", dr["FareClass"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FareSellKey", dr["FareSellKey"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("OverridedFareSellKey", dr["OverridedFareSellKey"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FarePerPax", Convert.ToDecimal(dr["FarePerPax"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineTotal", Convert.ToDecimal(dr["LineTotal"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineTax", Convert.ToDecimal(dr["LineTax"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LinePaxFee", Convert.ToDecimal(dr["LinePaxFee"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineFee", Convert.ToDecimal(dr["LineFee"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineOth", Convert.ToDecimal(dr["LineOth"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineProcess", Convert.ToDecimal(dr["LineProcess"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineSSR", Convert.ToDecimal(dr["LineSSR"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineInfant", Convert.ToDecimal(dr["LineInfant"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineSeat", Convert.ToDecimal(dr["LineSeat"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineNameChange", Convert.ToDecimal(dr["LineNameChange"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineDisc", Convert.ToDecimal(dr["LineDisc"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LinePromoDisc", Convert.ToDecimal(dr["LinePromoDisc"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("AttemptCount", Convert.ToInt32(dr["AttemptCount"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Currency", dr["Currency"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaxAdult", Convert.ToInt32(dr["PaxAdult"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaxChild", Convert.ToInt32(dr["PaxChild"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransVoid", Convert.ToInt32(dr["TransVoid"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CreateBy", dr["CreateBy"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncCreate", Convert.ToDateTime(dr["SyncCreate"].ToString()), SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncLastUpd", Convert.ToDateTime(dr["SyncLastUpd"].ToString()), SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LastSyncBy", dr["LastSyncBy"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DetailCollectedAmt", Convert.ToDecimal(dr["DetailCollectedAmt"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SellKey", dr["SellKey"].ToString(), SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        //added by ketee
                        objSQL.AddField("LineVAT", Convert.ToDecimal(dr["LineVAT"].ToString()), SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                        switch (saveType)
                        {
                            case EnumSaveType.Insert:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_HIST_TRANSDTL", string.Empty);
                                break;
                            case EnumSaveType.Update:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_HIST_TRANSDTL", "BK_HIST_TRANSDTL.RecordLocator='" + dr["RecordLocator"].ToString() + "' AND BK_HIST_TRANSDTL.TransID='" + dr["TransID"].ToString() + "' AND BK_HIST_TRANSDTL.SeqNo='" + dr["SeqNo"].ToString() + "'");
                                break;
                        }
                        lstSQL.Add(strSQL);
                    }
                }

                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public Boolean SaveTransFee(EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            string TransID = string.Empty;
            string AgentCountryCode = string.Empty;
            string CountryCode = string.Empty;
            try
            {
                
                //20170707 - Sienny (save to transfee)
                List<BookingTransactionFees> lstTransFees = new List<BookingTransactionFees>();
                if (HttpContext.Current.Session["listTransFees"] != null)
                {
                    lstTransFees = (List<BookingTransactionFees>)HttpContext.Current.Session["listTransFees"];
                    foreach (BookingTransactionFees pBK_TRANSFEES_Info in lstTransFees)
                    {
                        objSQL.AddField("TransID", pBK_TRANSFEES_Info.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("RecordLocator", pBK_TRANSFEES_Info.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SeqNo", pBK_TRANSFEES_Info.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeCode", pBK_TRANSFEES_Info.FeeCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeDesc", pBK_TRANSFEES_Info.FeeDesc, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaxType", pBK_TRANSFEES_Info.PaxType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Origin", pBK_TRANSFEES_Info.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Transit", pBK_TRANSFEES_Info.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Destination", pBK_TRANSFEES_Info.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeType", pBK_TRANSFEES_Info.FeeType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeQty", pBK_TRANSFEES_Info.FeeQty, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeRate", pBK_TRANSFEES_Info.FeeRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeAmt", pBK_TRANSFEES_Info.FeeAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Transvoid", pBK_TRANSFEES_Info.Transvoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CreateBy", pBK_TRANSFEES_Info.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncCreate", pBK_TRANSFEES_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncLastUpd", pBK_TRANSFEES_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LastSyncBy", pBK_TRANSFEES_Info.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        switch (saveType)
                        {
                            case EnumSaveType.Insert:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSFEES", string.Empty);
                                break;
                            case EnumSaveType.Update:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSFEES", "BK_TRANSFEES.TransID='" + pBK_TRANSFEES_Info.TransID + "' AND BK_TRANSFEES.FeeCode='" + pBK_TRANSFEES_Info.FeeCode + "'");
                                break;
                        }
                        lstSQL.Add(strSQL);
                    }
                }

                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return false;
                }
                return true;
                //return GetSingleBK_TRANSMAIN(BookingTransMain.TransID, BookingTransMain.TransType, BookingTransMain.AgentID, BookingTransMain.AgentCatgID, BookingTransMain.BookingDate);

            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                log.Error(this, ex);
                return false;
            }
            finally
            {
                //objSQL.Dispose();
                rValue = false;
                //EndSQLControl();
                //EndConnection();
                //objDCom.CloseConnection();
            }
            //}
        }

        public BookingTransactionMain SaveBooking(BookingTransactionMain BookingTransMain, List<BookingTransactionDetail> lstBookingTransDetail, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            string TransID = string.Empty;
            string AgentCountryCode = string.Empty;
            string CountryCode = string.Empty;

            //using (objDCom = new DataAccess())
            //{
            try
            {
                //objDCom.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnStr"].ToString();
                //if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                //{
                //StartSQLControl();
                //}
                //Remark Thread.Sleep by ketee, 20170916, increase performance
                //Thread.Sleep(1000);
                TransID = BookingTransMain.TransID;
                GeneralControl objGeneral = new GeneralControl();
                string GroupName = objGeneral.getOPTGroupByCarrierCode(lstBookingTransDetail[0].CarrierCode);

                PaymentControl objPayment = new PaymentControl();
                //string Scheme = objPayment.GetScheme(BookingTransMain.STDDate, "AA");
                //amended by diana 20130925, change today to bookingdate
                if (HttpContext.Current.Session["CountryCode"].ToString() != null)
                    AgentCountryCode = HttpContext.Current.Session["CountryCode"].ToString();
                if (HttpContext.Current.Session["Country"] != null)
                    CountryCode = HttpContext.Current.Session["Country"].ToString().Substring(0, 2);


                string Scheme = objPayment.GetScheme(BookingTransMain.STDDate, BookingTransMain.BookingDate, GroupName, BookingTransMain.TransID, CountryCode, BookingTransMain.Currency, AgentCountryCode);
                DateTime expiryDate = objPayment.GetExpiryDate(Scheme, GroupName, BookingTransMain.STDDate, BookingTransMain.BookingDate, BookingTransMain.TransID);
                DateTime CurReminderDate = expiryDate.Date.AddDays(-5);
                //Added by Ellis 20170323 to clear recordlocator for bk_transmain
                objSQL.ClearFields();
                objSQL.ClearCondtions();
                //End of added by Ellis 20170323
                objSQL.AddField("TransID", BookingTransMain.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransType", BookingTransMain.TransType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AgentID", BookingTransMain.AgentID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AgentCatgID", BookingTransMain.AgentCatgID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("BookingDate", BookingTransMain.BookingDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx1", BookingTransMain.PaymentDateEx1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx1", BookingTransMain.PaymentAmtEx1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx2", BookingTransMain.PaymentDateEx2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx2", BookingTransMain.PaymentAmtEx2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx3", BookingTransMain.PaymentDateEx3, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx3", BookingTransMain.PaymentAmtEx3, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDate", BookingTransMain.PaymentDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CancelDate", BookingTransMain.CancelDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("ExpiryDate", BookingTransMain.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("STDDate", BookingTransMain.STDDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Currency", BookingTransMain.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CurrencyPaid", BookingTransMain.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CollectedAmt", BookingTransMain.CollectedAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtAVG", BookingTransMain.TotalAmtAVG, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtGoing", BookingTransMain.TotalAmtGoing, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtReturn", BookingTransMain.TotalAmtReturn, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransSubTotal", BookingTransMain.TransSubTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalAmt", BookingTransMain.TransTotalAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalFee", BookingTransMain.TransTotalFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalTax", BookingTransMain.TransTotalTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPaxFee", BookingTransMain.TransTotalPaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalOth", BookingTransMain.TransTotalOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalSSR", BookingTransMain.TransTotalSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalInfant", BookingTransMain.TransTotalInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalDisc", BookingTransMain.TransTotalDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPromoDisc", BookingTransMain.TransTotalPromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPAX", BookingTransMain.TransTotalPAX, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalSeat", BookingTransMain.TransTotalSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalNameChange", BookingTransMain.TransTotalNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalProcess", BookingTransMain.TransTotalProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalInfant", BookingTransMain.TransTotalInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransRemark1", BookingTransMain.TransRemark1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                objSQL.AddField("TransRemark2", BookingTransMain.TransRemark2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                objSQL.AddField("TransStatus", BookingTransMain.TransStatus, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Posted", BookingTransMain.Posted, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CreateBy", BookingTransMain.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", BookingTransMain.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncLastUpd", BookingTransMain.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LastSyncBy", BookingTransMain.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("CurReminderDate", BookingTransMain.CurReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("NextReminderDate", BookingTransMain.NextReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ReminderType", BookingTransMain.ReminderType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                //added by ketee , VAT
                objSQL.AddField("TransTotalVAT", BookingTransMain.TransTotalVAT, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                //added by ketee 20130625 currencyRate
                objSQL.AddField("ExchgRate", BookingTransMain.ExchangeRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                //added by ketee, 20170307, add to save IsOverride = 1 if booking make in new GBS
                objSQL.AddField("IsOverride", BookingTransMain.IsOverride, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                //20170411 - Sienny (organizationID added to BK_TRANSMAIN)
                objSQL.AddField("OrgID", BookingTransMain.OrganizationID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PromoCode", BookingTransMain.PromoCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("NameChangeMax", BookingTransMain.NameChangeMax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("NameChangeLimit1", BookingTransMain.NameChangeLimit1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("NameChangeLimit2", BookingTransMain.NameChangeLimit2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                //added by ketee, get payment scheme,20121016


                objSQL.AddField("SchemeCode", Scheme, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                //DateTime expiryDate = objPayment.GetExpiryDate(Scheme, "AA", BookingTransMain.STDDate, BookingTransMain.BookingDate);

                // commented by diana 20130918
                //DateTime expiryDate = objPayment.GetExpiryDate(Scheme, GroupName, BookingTransMain.STDDate, BookingTransMain.BookingDate);
                //objSQL.AddField("ExpiryDate", expiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                // end commented by diana 20130918


                //if (BookingTransMain.ExpiryDate != null)
                //    expiryDate = BookingTransMain.ExpiryDate;
                objSQL.AddField("ExpiryDate", expiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);


                objSQL.AddField("CurReminderDate", CurReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);


                switch (saveType)
                {
                    case EnumSaveType.Insert:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSMAIN", string.Empty);
                        break;
                    case EnumSaveType.Update:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSMAIN", "BK_TRANSMAIN.TransID='" + BookingTransMain.TransID + "'" + " AND BK_TRANSMAIN.TransType='" + BookingTransMain.TransType + "' AND BK_TRANSMAIN.AgentID='" + BookingTransMain.AgentID + "' AND BK_TRANSMAIN.AgentCatgID='" + BookingTransMain.AgentCatgID + "'");
                        break;
                }
                lstSQL.Add(strSQL);
                foreach (BookingTransactionDetail pBookingTransDetail in lstBookingTransDetail)
                {
                    objSQL.AddField("RecordLocator", pBookingTransDetail.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransID", pBookingTransDetail.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SeqNo", pBookingTransDetail.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CarrierCode", pBookingTransDetail.CarrierCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightNo", pBookingTransDetail.FlightNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DepartureDate", pBookingTransDetail.DepatureDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DepartureDate2", pBookingTransDetail.DepatureDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightDura", pBookingTransDetail.FlightDura, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightDura2", pBookingTransDetail.FlightDura2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Origin", pBookingTransDetail.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Transit", pBookingTransDetail.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Destination", pBookingTransDetail.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ArrivalDate", pBookingTransDetail.ArrivalDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ArrivalDate2", pBookingTransDetail.ArrivalDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FareClass", pBookingTransDetail.FareClass, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FareSellKey", pBookingTransDetail.SellKey, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("OverridedFareSellKey", pBookingTransDetail.OverridedSellKey, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FarePerPax", pBookingTransDetail.FarePerPax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineTotal", pBookingTransDetail.LineTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineTax", pBookingTransDetail.LineTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LinePaxFee", pBookingTransDetail.LinePaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineFee", pBookingTransDetail.LineFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineOth", pBookingTransDetail.LineOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineProcess", pBookingTransDetail.LineProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineSSR", pBookingTransDetail.LineSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineInfant", pBookingTransDetail.LineInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineSeat", pBookingTransDetail.LineSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineNameChange", pBookingTransDetail.LineNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineInsureFee", pBookingTransDetail.LineInsureFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);//added by romy for insure
                    objSQL.AddField("LineDisc", pBookingTransDetail.LineDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LinePromoDisc", pBookingTransDetail.LinePromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("AttemptCount", pBookingTransDetail.AttemptCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Currency", pBookingTransDetail.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaxAdult", pBookingTransDetail.PaxAdult, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaxChild", pBookingTransDetail.PaxChild, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransVoid", pBookingTransDetail.TransVoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CreateBy", pBookingTransDetail.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncCreate", pBookingTransDetail.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncLastUpd", pBookingTransDetail.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LastSyncBy", pBookingTransDetail.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DetailCollectedAmt", pBookingTransDetail.CollectedAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SellKey", pBookingTransDetail.Signature, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    //added by ketee
                    objSQL.AddField("LineVAT", pBookingTransDetail.LineVAT, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                    switch (saveType)
                    {
                        case EnumSaveType.Insert:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSDTL", string.Empty);
                            break;
                        case EnumSaveType.Update:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.RecordLocator='" + pBookingTransDetail.RecordLocator + "' AND BK_TRANSDTL.TransID='" + pBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBookingTransDetail.SeqNo + "'");
                            break;
                    }
                    lstSQL.Add(strSQL);
                }

                //added by ketee
                List<PassengerData> lstPassenger = new List<PassengerData>();
                if (HttpContext.Current.Session["listPassengers"] != null)
                {
                    lstPassenger = (List<PassengerData>)HttpContext.Current.Session["listPassengers"];
                    foreach (PassengerData pBK_PASSENGERLIST_Info in lstPassenger)
                    {
                        objSQL.AddField("TransID", TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("RecordLocator", pBK_PASSENGERLIST_Info.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("PassengerID", pBK_PASSENGERLIST_Info.PassengerID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("Title", pBK_PASSENGERLIST_Info.Title, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("Gender", pBK_PASSENGERLIST_Info.Gender, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("FirstName", pBK_PASSENGERLIST_Info.FirstName, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("LastName", pBK_PASSENGERLIST_Info.LastName, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("PrevFirstName1", pBK_PASSENGERLIST_Info.PrevFirstName1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("PrevLastName1", pBK_PASSENGERLIST_Info.PrevLastName1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("PrevFirstName2", pBK_PASSENGERLIST_Info.PrevFirstName2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("PrevLastName2", pBK_PASSENGERLIST_Info.PrevLastName2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("Nationality", pBK_PASSENGERLIST_Info.Nationality, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("DOB", pBK_PASSENGERLIST_Info.DOB, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PassportNo", pBK_PASSENGERLIST_Info.PassportNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("IssuingCountry", pBK_PASSENGERLIST_Info.IssuingCountry, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("ExpiryDate", pBK_PASSENGERLIST_Info.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ChangeFee", pBK_PASSENGERLIST_Info.ChangeFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ChangeDate", pBK_PASSENGERLIST_Info.ChangeDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ChangeFee2", pBK_PASSENGERLIST_Info.ChangeFee2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ChangeDate2", pBK_PASSENGERLIST_Info.ChangeDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ChangeCount", pBK_PASSENGERLIST_Info.ChangeCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("MaxChange", pBK_PASSENGERLIST_Info.MaxChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("MaxPax1", pBK_PASSENGERLIST_Info.MaxPax1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("MaxPax2", pBK_PASSENGERLIST_Info.MaxPax2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncCreate", pBK_PASSENGERLIST_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncLastUpd", pBK_PASSENGERLIST_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LastSyncBy", pBK_PASSENGERLIST_Info.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        //added by ketee,
                        objSQL.AddField("DepartSeat", pBK_PASSENGERLIST_Info.DepartSeat, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("DepartConnectingSeat", pBK_PASSENGERLIST_Info.DepartConnectingSeat, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("ReturnSeat", pBK_PASSENGERLIST_Info.ReturnSeat, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("ReturnConnectingSeat", pBK_PASSENGERLIST_Info.ReturnConnectingSeat, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);

                        switch (saveType)
                        {
                            case EnumSaveType.Insert:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_PASSENGERLIST", string.Empty);
                                break;
                            case EnumSaveType.Update:
                                string sign = "!=";
                                if (pBK_PASSENGERLIST_Info.Title == "INFT")
                                    sign = "=";
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_PASSENGERLIST", "TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND PassengerID=" + pBK_PASSENGERLIST_Info.PassengerID + " AND RecordLocator='" + pBK_PASSENGERLIST_Info.RecordLocator + "' AND Title " + sign + " 'INFT'");
                                //strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_PASSENGERLIST", "BK_PASSENGERLIST.PassengerID='" + pBK_PASSENGERLIST_Info.PassengerID + "'");
                                break;
                        }
                        lstSQL.Add(strSQL);
                    }
                }

                //20170707 - Sienny (save to transfee)
                List<BookingTransactionFees> lstTransFees = new List<BookingTransactionFees>();
                if (HttpContext.Current.Session["listTransFees"] != null)
                {
                    lstTransFees = (List<BookingTransactionFees>)HttpContext.Current.Session["listTransFees"];
                    foreach (BookingTransactionFees pBK_TRANSFEES_Info in lstTransFees)
                    {
                        objSQL.AddField("TransID", pBK_TRANSFEES_Info.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("RecordLocator", pBK_TRANSFEES_Info.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SeqNo", pBK_TRANSFEES_Info.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeCode", pBK_TRANSFEES_Info.FeeCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeDesc", pBK_TRANSFEES_Info.FeeDesc, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaxType", pBK_TRANSFEES_Info.PaxType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Origin", pBK_TRANSFEES_Info.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Transit", pBK_TRANSFEES_Info.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Destination", pBK_TRANSFEES_Info.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeType", pBK_TRANSFEES_Info.FeeType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeQty", pBK_TRANSFEES_Info.FeeQty, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeRate", pBK_TRANSFEES_Info.FeeRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeAmt", pBK_TRANSFEES_Info.FeeAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Transvoid", pBK_TRANSFEES_Info.Transvoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CreateBy", pBK_TRANSFEES_Info.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncCreate", pBK_TRANSFEES_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncLastUpd", pBK_TRANSFEES_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LastSyncBy", pBK_TRANSFEES_Info.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        switch (saveType)
                        {
                            case EnumSaveType.Insert:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSFEES", string.Empty);
                                break;
                            case EnumSaveType.Update:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSFEES", "BK_TRANSFEES.TransID='" + pBK_TRANSFEES_Info.TransID + "' AND BK_TRANSFEES.FeeCode='" + pBK_TRANSFEES_Info.FeeCode + "'");
                                break;
                        }
                        lstSQL.Add(strSQL);
                    }
                }

                //if (objDCom.ConnectionStatus == ConnectionState.Open)
                //{
                //    objDCom.CloseConnection();
                //}

                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return null;
                }
                return BookingTransMain;
                //return GetSingleBK_TRANSMAIN(BookingTransMain.TransID, BookingTransMain.TransType, BookingTransMain.AgentID, BookingTransMain.AgentCatgID, BookingTransMain.BookingDate);

            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                log.Error(this, ex);
                return null;
            }
            finally
            {
                //objSQL.Dispose();
                rValue = false;
                //EndSQLControl();
                //EndConnection();
                //objDCom.CloseConnection();
            }
            //}
        }

        public Boolean UpdateTotalSSR(string TransID, BookingTransactionMain bookMainInfo, List<BookingTransactionDetail> lstbookDTLInfo)
        {
            try
            {
                string strSQL = "";
                ArrayList lstSQL = new ArrayList();
                Boolean rValue;


                if (bookMainInfo != null)
                {
                    strSQL = "UPDATE BK_TRANSMAIN SET TotalAmtAVG=" + (bookMainInfo.TransTotalAmt / bookMainInfo.TransTotalPAX) + ", TransSubTotal=" + bookMainInfo.TransSubTotal + ", TransTotalAmt=" + bookMainInfo.TransTotalAmt + ", TotalAmtGoing=" + bookMainInfo.TotalAmtGoing + ", TotalAmtReturn=" + bookMainInfo.TotalAmtReturn + ", TransTotalSSR=" + bookMainInfo.TransTotalSSR + ", TransTotalInfant =" + bookMainInfo.TransTotalInfant + " WHERE TransID='" + bookMainInfo.TransID + "'";
                    lstSQL.Add(strSQL);
                }

                if (lstbookDTLInfo != null)
                {
                    foreach (BookingTransactionDetail bookDTLInfo in lstbookDTLInfo)
                    {
                        strSQL = "UPDATE BK_TRANSDTL SET LineSSR=" + bookDTLInfo.LineSSR + " , LineInfant = " + bookDTLInfo.LineInfant + " WHERE TransID='" + bookDTLInfo.TransID + "' AND SeqNo=" + bookDTLInfo.SeqNo;
                        lstSQL.Add(strSQL);
                    }

                    if (bookMainInfo != null)
                    {
                        strSQL = "UPDATE BK_TRANSDTL SET LineTotal=LineTax+LinePaxFee+LineFee+LineCharge+LineVAT+LineOth+LineDisc+LinePromoDisc+LineGST+LineKLIA2+LineSSR+LineInfant+LineSeat+LineNameChange+(FarePerPax*(PaxAdult+PaxChild)) WHERE TransID='" + bookMainInfo.TransID + "'";
                        lstSQL.Add(strSQL);
                    }
                }

                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public Boolean UpdateTotalSeat(string TransID, BookingTransactionMain bookMainInfo, List<BookingTransactionDetail> lstbookDTLInfo)
        {
            try
            {
                string strSQL = "";
                ArrayList lstSQL = new ArrayList();
                Boolean rValue;

                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();
                }

                if (bookMainInfo != null)
                {
                    strSQL = "UPDATE BK_TRANSMAIN SET TotalAmtAVG=" + (bookMainInfo.TransTotalAmt / bookMainInfo.TransTotalPAX) + ", TransTotalAmt=" + bookMainInfo.TransTotalAmt + ", TotalAmtGoing=" + bookMainInfo.TotalAmtGoing + ", TotalAmtReturn=" + bookMainInfo.TotalAmtReturn + ", TransTotalSeat=" + bookMainInfo.TransTotalSeat + ", TransTotalNameChange=" + bookMainInfo.TransTotalNameChange + " WHERE TransID='" + bookMainInfo.TransID + "'";
                    lstSQL.Add(strSQL);
                }

                if (lstbookDTLInfo != null)
                {
                    foreach (BookingTransactionDetail bookDTLInfo in lstbookDTLInfo)
                    {
                        strSQL = "UPDATE BK_TRANSDTL SET LineSeat=" + bookDTLInfo.LineSeat + " WHERE TransID='" + bookDTLInfo.TransID + "' AND SeqNo=" + bookDTLInfo.SeqNo;
                        lstSQL.Add(strSQL);
                    }
                    if (bookMainInfo != null)
                    {
                        strSQL = "UPDATE BK_TRANSDTL SET LineTotal=LineTax+LinePaxFee+LineFee+LineCharge+LineVAT+LineOth+LineProcess+LineDisc+LinePromoDisc+LineGST+LineKLIA2+LineSSR+LineInfant+LineSeat+LineNameChange+(FarePerPax*(PaxAdult+PaxChild)) WHERE TransID='" + bookMainInfo.TransID + "'";
                        lstSQL.Add(strSQL);
                    }
                }

                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                objSQL.Dispose();
                EndSQLControl();
                EndConnection();
                //objDCom.CloseConnection();
            }
        }

        //added by ketee, update bk_transdtl
        public Boolean UpdateTransactionDetails(string TransID, List<BookingTransactionDetail> lstbookDTLInfo)
        {
            try
            {
                string strSQL = "";
                ArrayList lstSQL = new ArrayList();
                Boolean rValue;


                if (lstbookDTLInfo != null)
                {
                    foreach (BookingTransactionDetail bookDTLInfo in lstbookDTLInfo)
                    {
                        strSQL = "UPDATE BK_TRANSDTL SET LineTotal=" + bookDTLInfo.LineTotal + ", LineOth=" + bookDTLInfo.LineOth + " WHERE TransID='" + bookDTLInfo.TransID + "' AND SeqNo=" + bookDTLInfo.SeqNo;
                        lstSQL.Add(strSQL);
                    }
                }

                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public Boolean UpdateTransactionStatus(string TransID, string Status)
        {
            try
            {
                List<BookingTransactionDetail> lstDetailCombinePNR = new List<BookingTransactionDetail>();
                List<BookingTransactionDetail> lstbookDTLInfo = new List<BookingTransactionDetail>();
                BookingTransactionDetail bookDTLInfo = new BookingTransactionDetail();
                BookingTransactionMain bookHDRInfo = new BookingTransactionMain();
                BookingTransTender bookTransTenderInfo = new BookingTransTender();
                List<PassengerData> lstPassenger = new List<PassengerData>();
                List<PaymentInfo> lstPayment = new List<PaymentInfo>();
                string strSQL = "";
                ArrayList lstSQL = new ArrayList();
                Boolean rValue;

                bookHDRInfo = GetSingleBK_TRANSMAIN(TransID);
                //lstDetailCombinePNR = GetAllBK_TRANSDTLCombinePNR(TransID);
                //lstbookDTLInfo = GetAllBK_TRANSDTLFilter(TransID, 2);

                if (bookHDRInfo != null)
                {
                    //amended by diana 20130821
                    string cancelStr = "";
                    //if (Convert.ToInt16(Status) == 9 || Convert.ToInt16(Status) == 4)
                    if (Convert.ToInt16(Status) >= 5)
                        cancelStr = ",TransRemark1='AUTO CANCEL PROCESS',CANCELDATE=GETDATE()";
                    strSQL = "UPDATE BK_Transmain SET TransStatus=" + Convert.ToInt16(Status) + cancelStr + " WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'";

                    lstSQL.Add(strSQL);
                    rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                    if (rValue == false)
                    {
                        return false;
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public Boolean UpdateTransMainStatus(string TransID, int Status)
        {
            try
            {
                string strSQL = "";
                ArrayList lstSQL = new ArrayList();
                Boolean rValue;

                strSQL = "UPDATE BK_Transmain SET TransStatus=" + (Status) + " WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'";

                lstSQL.Add(strSQL);
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return false;
                }

                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public DataTable GetTransStatusByID(string TransID, string agentID)
        {
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    strSQL = "SELECT TransStatus,NeedPaymentStatus,STDDate,ExpiryDate,TransRemark1 FROM BK_TRANSMAIN WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND AgentID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, agentID) + "'";
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        return dt;
                    }
                    else
                    {
                        return null;
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public DataTable GetNearestTransExpiry()
        {
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    strSQL = "select TransID, ExpiryDate from BK_TRANSMAIN where TransStatus=1 or (TransStatus in (2,3) and NeedPaymentStatus=1)";
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        return dt;
                    }
                    else
                    {
                        return null;
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        //Lily: 2017-01-01 SQL copied from GetAllBK_TRANSMAINBookingExpiry with fixed GROUP BY statement
        public List<BookingTransactionMain> GetNearestBookingExpiry(string AgentID, string AgentName, string RecordLocator, string Status, bool GetUptoDate = false, int DayBeforeExpiry = 0)
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBookingTransMain = new List<BookingTransactionMain>();
            DataTable dt;
            DateTime dateValue;
            decimal numValue;
            String strSQL = string.Empty;
            string strFilter = string.Empty;
            string strOrder = string.Empty;
            string strFilterAgentID = string.Empty;
            try
            {
                if (AgentID != "")
                {
                    strFilterAgentID = " AND ag.AgentID = '" + AgentID + "' ";
                }

                if (GetUptoDate == true)
                {
                    strFilter = " AND tm.SyncLastUpd > DATEADD(MINUTE, -60, GETDATE()) ";
                }

                //strSQL = " SELECT BK_TRANSDTL.RecordLocator, tm.ExpiryDate, tm.STDDate, tm.CollectedAmt,  ag.ContactFirstName + ' ' + ag.ContactLastName AS FullName," +
                //         " CASE WHEN Transstatus = '0' THEN 'Pending' WHEN Transstatus = '1' THEN 'Pending Payment' WHEN Transstatus = '2' THEN 'Pending Passenger Upload' " +
                //         " WHEN Transstatus = '3' THEN 'Reconfirmed' WHEN Transstatus IN ('4', '6', '7') THEN 'Cancel' END AS 'Status', tm.TransID, tm.AgentID, tm.TransTotalAmt, tm.SyncLastUpd, ag.Username, tm.BookingDate, tm.PaymentAmtEx3, " +
                //         " (SELECT TOP (1) SyncCreate FROM AG_EMAIL WHERE (TransID = tm.TransID) AND (EmailType IN (3, 6)) AND (SyncCreate > DATEADD(DAY, - 2, tm.curreminderdate)) ORDER BY SyncCreate DESC) AS PaymentDateEx3" +
                //         " FROM BK_TRANSMAIN AS tm " +
                //         " INNER JOIN AG_PROFILE AS ag WITH (NOLOCK) ON tm.AgentID = ag.AgentID " +
                //         " INNER JOIN BK_TRANSDTL ON tm.TransID = BK_TRANSDTL.TransID " +
                //         " LEFT OUTER JOIN REQAPPL AS req WITH (NOLOCK) ON req.TransID = tm.TransID AND req.ReqType = 'C' AND req.ExpiryDate > GETDATE() AND req.ApprovedBy IS NULL " +
                //         " WHERE (req.TransID IS NULL) AND (req.TransID IS NULL) " + strFilterAgentID +
                //         " AND tm.IsOverride = 1 " + //added by Sienny 20170316 (for new GBS)
                //         " GROUP BY BK_TRANSDTL.RecordLocator, tm.TransStatus, tm.CollectedAmt, tm.ExpiryDate, tm.STDDate, tm.TransID, tm.AgentID, tm.TransTotalAmt, tm.SyncLastUpd, " +
                //         " ag.Username, tm.BookingDate, ag.ContactFirstName, ag.ContactLastName, tm.curreminderdate, tm.PaymentAmtEx3 " +
                //         " HAVING (tm.TransStatus <> '0') AND (tm.TransStatus <> '5') AND (tm.TransStatus IN (" + Status + ")) AND (tm.CollectedAmt > 0) AND (tm.ExpiryDate < DATEADD(day, " + DayBeforeExpiry + ", GETDATE())) AND " +
                //         " (tm.STDDate > GETDATE()) AND (LEN(BK_TRANSDTL.RecordLocator) >= 6) " + strFilter +
                //         " ORDER BY tm.Transstatus, tm.STDDate, tm.ExpiryDate ";
                //Amended by Ellis 20170320, to show counter for booking expiry
                strSQL = "SELECT td.RecordLocator, tm.ExpiryDate, tm.STDDate, tm.CollectedAmt, ag.ContactFirstName + ' ' + ag.ContactLastName AS FullName, " +
                         "CASE WHEN Transstatus = '0' THEN 'Pending' WHEN Transstatus = '1' THEN 'Pending'  " +
                         "WHEN Transstatus = '2' AND tm.NeedPaymentStatus = '1' THEN 'Pending' " +
                         "WHEN Transstatus = '3' AND tm.NeedPaymentStatus = '1' THEN 'Pending' " +
                         "WHEN Transstatus = '2' AND tm.NeedPaymentStatus = '0' THEN 'Pending for Passenger Upload' " +
                         "WHEN Transstatus = '3' AND tm.NeedPaymentStatus = '0' THEN 'Confirmed' " +
                         "WHEN Transstatus IN ('4','6','7') THEN 'Cancelled' END AS 'Status', " +
                         "tm.TransID, tm.AgentID, tm.TransTotalAmt, tm.SyncLastUpd, ag.Username, tm.BookingDate, tm.PaymentAmtEx3, " +
                         "(SELECT TOP (1) SyncCreate FROM AG_EMAIL WHERE (TransID = tm.TransID) AND (EmailType IN (3, 6)) " +
                         "AND (SyncCreate > DATEADD(DAY, - 2, tm.curreminderdate)) ORDER BY SyncCreate DESC) AS PaymentDateEx3 " +
                         "FROM BK_TRANSMAIN AS tm " +
                         "INNER JOIN AG_PROFILE AS ag WITH (NOLOCK) ON tm.AgentID = ag.AgentID " +
                         "INNER JOIN BK_TRANSDTL td ON tm.TransID = td.TransID " +
                         "LEFT OUTER JOIN REQAPPL AS req WITH (NOLOCK) ON req.TransID = tm.TransID AND req.ReqType = 'C' " +
                         "AND req.ExpiryDate > GETDATE() AND req.ApprovedBy IS NULL " +
                         "WHERE (req.TransID IS NULL) AND (req.TransID IS NULL) " + strFilterAgentID +
                         "AND tm.IsOverride = 1 " +
                         "GROUP BY td.RecordLocator, tm.ExpiryDate, tm.STDDate, tm.CollectedAmt, ag.ContactFirstName, ag.ContactLastName, " +
                         "tm.TransStatus, tm.NeedPaymentStatus, tm.TransID, tm.AgentID, tm.TransTotalAmt, tm.SyncLastUpd, ag.Username, tm.BookingDate, " +
                         "tm.curreminderdate, tm.PaymentAmtEx3 " +
                         "HAVING ((tm.TransStatus IN (1, 2, 3) AND tm.NeedPaymentStatus = '1') OR (tm.TransStatus IN (2) AND tm.NeedPaymentStatus = '0')) " +
                         "AND (tm.CollectedAmt > 0) AND (tm.ExpiryDate < DATEADD(day, " + DayBeforeExpiry + ", GETDATE())) AND " +
                         "(tm.STDDate > GETDATE()) AND (LEN(td.RecordLocator) >= 6) " + strFilter +
                         "ORDER BY tm.Transstatus, tm.STDDate, tm.ExpiryDate ";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransactionMain = new BookingTransactionMain();
                        objBookingTransactionMain.TransID = (string)drRow["TransID"];
                        objBookingTransactionMain.AgentID = (string)drRow["AgentID"];
                        objBookingTransactionMain.Status = drRow["Status"].ToString();
                        objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];
                        if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                        if (DateTime.TryParse(drRow["STDDate"].ToString(), out dateValue)) objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];
                        objBookingTransactionMain.AgentName = drRow["FullName"].ToString();
                        objBookingTransactionMain.DueAmt = (decimal)drRow["TransTotalAmt"] - (decimal)drRow["CollectedAmt"];
                        objBookingTransactionMain.CollectedAmt = (decimal)drRow["CollectedAmt"];
                        objBookingTransactionMain.TransTotalAmt = (decimal)drRow["TransTotalAmt"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        if (DateTime.TryParse(drRow["PaymentDateEx3"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx3 = (DateTime)drRow["PaymentDateEx3"];
                        if (decimal.TryParse(drRow["PaymentAmtEx3"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx3 = (decimal)drRow["PaymentAmtEx3"];
                        objBookingTransactionMain.RecordLocator = drRow["RecordLocator"].ToString();

                        objListBookingTransMain.Add(objBookingTransactionMain);
                    }
                    return objListBookingTransMain;
                }
                else
                {
                    return null;
                    //throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                throw new Exception("GetAllBK_TRANSMAINBookingExpiry: ", ex);
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }

        }

        //20170404 - Sienny
        public DataTable GetUpcomingBookingExpiry(string AgentID)
        {
            String strSQL = string.Empty;
            String strFilterAgentID = string.Empty;
            DataTable dt = new DataTable();
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    if (AgentID != "")
                    {
                        strFilterAgentID = " AND AgentID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, AgentID) + "' ";
                    }

                    strSQL = "SELECT TOP (1) TransID, ExpiryDate FROM BK_TRANSMAIN WHERE TransStatus IN (1,2,3) AND NeedPaymentStatus=1 AND ExpiryDate > GetDate() " + strFilterAgentID;
                    strSQL += " AND BK_TRANSMAIN.IsOverride = 1 "; //added by Sienny 20170316 (for new GBS)
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        return dt;
                    }
                    else
                    {
                        return null;
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        //20170418 - Sienny
        public DataTable GetUpcomingBookingExpiryPNR(string TransID)
        {
            String strSQL = string.Empty;
            String strFilterTransID = string.Empty;
            DataTable dt = new DataTable();
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    if (TransID != "")
                        strFilterTransID = " AND TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' ";

                    strSQL = "SELECT DISTINCT TransID, RecordLocator FROM BK_TRANSDTL WHERE LEN(RecordLocator) >= 6 " + strFilterTransID;
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        return dt;
                    }
                    else
                    {
                        return null;
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        public DataTable GetCountPendingPayment(string AgentID)
        {
            String strSQL = string.Empty;
            String strFilterAgentID = string.Empty;
            DataTable dt = new DataTable();
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    if (AgentID != "")
                    {
                        strFilterAgentID = " AND AgentID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, AgentID) + "' ";
                    }

                    //Amended by Ellis 20170321
                    //strSQL = "select count(TransID) as PendingPayment from BK_TRANSMAIN where (TransStatus=1 or (TransStatus in (2,3) and NeedPaymentStatus=1)) " + strFilterAgentID;
                    strSQL = "select count(TransID) as PendingPayment from BK_TRANSMAIN where ((TransStatus='1' AND ExpiryDate > GETDATE()) OR (TransStatus IN ('2','3') AND NeedPaymentStatus = '1')) " + strFilterAgentID;
                    strSQL += " AND BK_TRANSMAIN.IsOverride = 1 "; //added by Sienny 20170316 (for new GBS)
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        return dt;
                    }
                    else
                    {
                        return null;
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        //20170404 - Sienny
        public DataTable GetRestAmountOfPendingPayment(string AgentID)
        {
            String strSQL = string.Empty;
            String strFilterAgentID = string.Empty;
            DataTable dt = new DataTable();
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    if (AgentID != "")
                    {
                        strFilterAgentID = " AND AgentID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, AgentID) + "' ";
                    }

                    strSQL = "select AgentID, SUM(TransTotalAmt - CollectedAmt) AS RestAmount from BK_TRANSMAIN where ((TransStatus='1' AND ExpiryDate > GETDATE()) OR (TransStatus IN ('2','3') AND NeedPaymentStatus = '1')) " + strFilterAgentID;
                    strSQL += " AND BK_TRANSMAIN.IsOverride = 1 "; //added by Sienny 20170316 (for new GBS)
                    strSQL += " GROUP BY AgentID ORDER BY AgentID ";
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        return dt;
                    }
                    else
                    {
                        return null;
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        public DataTable GetCountPendingPassUpload(string AgentID)
        {
            String strSQL = string.Empty;
            String strFilterAgentID = string.Empty;
            DataTable dt = new DataTable();
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    if (AgentID != "")
                    {
                        strFilterAgentID = " AND AgentID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, AgentID) + "' ";
                    }

                    //Amended by Ellis 20170321
                    //strSQL = "select count(TransID) as PendingPassUpload from BK_TRANSMAIN where TransStatus=2 " + strFilterAgentID;
                    strSQL = "select count(TransID) as PendingPassUpload from BK_TRANSMAIN where (TransStatus='2' AND NeedPaymentStatus = '0') " + strFilterAgentID;
                    strSQL += " AND BK_TRANSMAIN.IsOverride = 1 "; //added by Sienny 20170316 (for new GBS)
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        return dt;
                    }
                    else
                    {
                        return null;
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        //20170331 - Sienny (counter of upcoming flight)
        public DataTable GetCountUpcomingFlight(string AgentID)
        {
            String strSQL = string.Empty;
            String strFilterAgentID = string.Empty;
            DataTable dt = new DataTable();
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    if (AgentID != "")
                    {
                        strFilterAgentID = " AND AgentID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, AgentID) + "' ";
                    }

                    strSQL = "select count(TransID) as UpcomingFlight from BK_TRANSMAIN where (TransStatus IN (3) AND STDDate >= GETDATE()) " + strFilterAgentID;
                    strSQL += " AND BK_TRANSMAIN.IsOverride = 1 "; //added by Sienny 20170316 (for new GBS)
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        return dt;
                    }
                    else
                    {
                        return null;
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        public DataTable GetUpcomingFlightInsure(string AgentID, string TransID)//added by romy, 20170815, Insurance
        {
            String strSQL = string.Empty;
            String strFilterAgentID = string.Empty;
            DataTable GetConfirm = new DataTable();
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    if (AgentID != "")
                    {
                        strFilterAgentID = " AND AgentID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, AgentID) + "'  AND TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' ";
                    }

                    strSQL = "select TransStatus as UpcomingFlight from BK_TRANSMAIN where (TransStatus IN (3)) " + strFilterAgentID;
                    strSQL += " AND BK_TRANSMAIN.IsOverride = 1 "; //added by Sienny 20170316 (for new GBS)
                    GetConfirm = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (GetConfirm.Rows.Count > 0)
                    {
                        return GetConfirm;
                    }
                    else
                    {
                        return null;
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        public DataTable GetCountCanceledTrans(string AgentID)
        {
            String strSQL = string.Empty;
            String strFilterAgentID = string.Empty;
            DataTable dt = new DataTable();
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    if (AgentID != "")
                    {
                        strFilterAgentID = " AND AgentID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, AgentID) + "' ";
                    }

                    //Amended by Ellis 20170321
                    //strSQL = "select count(TransID) as CancelledTrans from BK_TRANSMAIN where Transstatus IN ('4', '6', '7') and year(CancelDate)=year(getdate()) " + strFilterAgentID;
                    strSQL = "select count(TransID) as CancelledTrans from BK_TRANSMAIN where (TransStatus>='4' AND TransStatus != '5' AND TransStatus != '9') and year(CancelDate)=year(getdate()) " + strFilterAgentID;
                    strSQL += " AND BK_TRANSMAIN.IsOverride = 1 "; //added by Sienny 20170316 (for new GBS)
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        return dt;
                    }
                    else
                    {
                        return null;
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        #endregion

        #region BookingTransactionDetail
        public List<BookingTransactionDetail> GetAllBK_TRANSDTL()
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                strSQL = "SELECT * FROM BK_TRANSDTL ";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSDTL_Info.SeqNo = (byte)drRow["SeqNo"];
                        objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                        objBK_TRANSDTL_Info.FlightNo = (string)drRow["FlightNo"];
                        if (DateTime.TryParse(drRow["DepatureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepatureDate"];
                        if (DateTime.TryParse(drRow["DepatureDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate2 = (DateTime)drRow["DepatureDate2"];
                        objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                        objBK_TRANSDTL_Info.Transit = (string)drRow["Transit"];
                        objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                        if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];
                        if (DateTime.TryParse(drRow["ArrivalDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate2 = (DateTime)drRow["ArrivalDate2"];
                        objBK_TRANSDTL_Info.FareClass = (string)drRow["FareClass"];
                        objBK_TRANSDTL_Info.FarePerPax = (decimal)drRow["FarePerPax"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                        objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["LinePaxFee"];
                        objBK_TRANSDTL_Info.LineFee = (decimal)drRow["LineFee"];
                        objBK_TRANSDTL_Info.LineOth = (decimal)drRow["LineOth"];
                        objBK_TRANSDTL_Info.LineProcess = (decimal)drRow["LineProcess"];
                        objBK_TRANSDTL_Info.LineSSR = (decimal)drRow["LineSSR"];
                        objBK_TRANSDTL_Info.LineSeat = (decimal)drRow["LineSeat"];
                        objBK_TRANSDTL_Info.LineNameChange = (decimal)drRow["LineNameChange"];
                        objBK_TRANSDTL_Info.LineInfant = (decimal)drRow["LineInfant"];
                        objBK_TRANSDTL_Info.LineDisc = (decimal)drRow["LineDisc"];
                        objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["LinePromoDisc"];
                        //objBK_TRANSDTL_Info.AttemptCount = (int)drRow["AttemptCount"];
                        objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.TransVoid = (byte)drRow["TransVoid"];
                        objBK_TRANSDTL_Info.rowguid = (Guid)drRow["rowguid"];
                        objBK_TRANSDTL_Info.CreateBy = (string)drRow["CreateBy"];
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBK_TRANSDTL_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                        objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];
                        objBK_TRANSDTL_Info.Signature = (string)drRow["SellKey"];
                        //added by ketee
                        if (DateTime.TryParse(drRow["NextDueDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.NextDueDate = (DateTime)drRow["NextDueDate"];
                        objBK_TRANSDTL_Info.NextDueAmount = (decimal)drRow["NextDueAmount"];
                        if (DateTime.TryParse(drRow["PayDueDate1"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate1 = (DateTime)drRow["PayDueDate1"];
                        objBK_TRANSDTL_Info.PayDueAmount1 = (decimal)drRow["PayDueAmount1"];
                        if (DateTime.TryParse(drRow["PayDueDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate2 = (DateTime)drRow["PayDueDate2"];
                        objBK_TRANSDTL_Info.PayDueAmount2 = (decimal)drRow["PayDueAmount2"];
                        if (DateTime.TryParse(drRow["PayDueDate3"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate3 = (DateTime)drRow["PayDueDate3"];
                        objBK_TRANSDTL_Info.PayDueAmount3 = (decimal)drRow["PayDueAmount3"];
                        //objBK_TRANSDTL_Info.RemindAttempt = (int)drRow["RemindAttempt"];
                        //objBK_TRANSDTL_Info.RemindLog = (string)drRow["RemindLog"];

                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<BookingTransactionDetail> GetAllBK_TRANSDTLTOCANCEL(string intAgentID, string TransID)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();

            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                strSQL = "SELECT BK_TRANSDTL.* FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID = BK_TRANSMAIN.TransID AND BK_TRANSMAIN.AgentID = " + intAgentID + " and BK_TRANSMAIN.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' and BK_TRANSMAIN.SyncCreate < DATEADD(MINUTE, -1, GETDATE()) and BK_TRANSMAIN.SyncCreate > DATEADD(MINUTE, -30, GETDATE()) and BK_TRANSMAIN.TransStatus = 0 ";
                strSQL += " AND BK_TRANSMAIN.IsOverride = 1 "; //added by Sienny 20170316 (for new GBS)
                //strSQL = "SELECT BK_TRANSDTL.* FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID = BK_TRANSMAIN.TransID AND BK_TRANSMAIN.AgentID = " + intAgentID + " and BK_TRANSMAIN.TransID='" + TransID + "' and BK_TRANSMAIN.TransStatus = 0 ";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSDTL_Info.SeqNo = (byte)drRow["SeqNo"];
                        objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                        objBK_TRANSDTL_Info.FlightNo = (string)drRow["FlightNo"];
                        //if (DateTime.TryParse(drRow["DepatureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepatureDate"];
                        //if (DateTime.TryParse(drRow["DepatureDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate2 = (DateTime)drRow["DepatureDate2"];
                        objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                        objBK_TRANSDTL_Info.Transit = (string)drRow["Transit"];
                        objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                        //if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];
                        //if (DateTime.TryParse(drRow["ArrivalDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate2 = (DateTime)drRow["ArrivalDate2"];
                        objBK_TRANSDTL_Info.FareClass = (string)drRow["FareClass"];
                        objBK_TRANSDTL_Info.FarePerPax = (decimal)drRow["FarePerPax"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                        objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["LinePaxFee"];
                        objBK_TRANSDTL_Info.LineFee = (decimal)drRow["LineFee"];
                        objBK_TRANSDTL_Info.LineOth = (decimal)drRow["LineOth"];
                        objBK_TRANSDTL_Info.LineProcess = (decimal)drRow["LineProcess"];
                        objBK_TRANSDTL_Info.LineSSR = (decimal)drRow["LineSSR"];
                        objBK_TRANSDTL_Info.LineSeat = (decimal)drRow["LineSeat"];
                        objBK_TRANSDTL_Info.LineNameChange = (decimal)drRow["LineNameChange"];
                        objBK_TRANSDTL_Info.LineInfant = (decimal)drRow["LineInfant"];
                        objBK_TRANSDTL_Info.LineDisc = (decimal)drRow["LineDisc"];
                        objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["LinePromoDisc"];
                        //objBK_TRANSDTL_Info.AttemptCount = (int)drRow["AttemptCount"];
                        objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.TransVoid = (byte)drRow["TransVoid"];
                        objBK_TRANSDTL_Info.rowguid = (Guid)drRow["rowguid"];
                        objBK_TRANSDTL_Info.CreateBy = (string)drRow["CreateBy"];
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBK_TRANSDTL_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                        objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];
                        objBK_TRANSDTL_Info.Signature = (string)drRow["SellKey"];
                        //added by ketee
                        if (DateTime.TryParse(drRow["NextDueDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.NextDueDate = (DateTime)drRow["NextDueDate"];
                        objBK_TRANSDTL_Info.NextDueAmount = (decimal)drRow["NextDueAmount"];
                        if (DateTime.TryParse(drRow["PayDueDate1"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate1 = (DateTime)drRow["PayDueDate1"];
                        objBK_TRANSDTL_Info.PayDueAmount1 = (decimal)drRow["PayDueAmount1"];
                        if (DateTime.TryParse(drRow["PayDueDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate2 = (DateTime)drRow["PayDueDate2"];
                        objBK_TRANSDTL_Info.PayDueAmount2 = (decimal)drRow["PayDueAmount2"];
                        if (DateTime.TryParse(drRow["PayDueDate3"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate3 = (DateTime)drRow["PayDueDate3"];
                        objBK_TRANSDTL_Info.PayDueAmount3 = (decimal)drRow["PayDueAmount3"];
                        //objBK_TRANSDTL_Info.RemindAttempt = (int)drRow["RemindAttempt"];
                        //objBK_TRANSDTL_Info.RemindLog = (string)drRow["RemindLog"];

                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    //throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<BookingTransactionDetail> Get_TRANSDTL(string intAgentID, string TransID)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();

            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                strSQL = "SELECT Distinct BK_TRANSDTL.RecordLocator, BK_TRANSDTL.TransID, BK_TRANSDTL.SeqNo, BK_TRANSDTL.Transit, BK_TRANSDTL.SellKey, ";
                strSQL += " BK_TRANSDTL.NextDueDate, BK_TRANSDTL.Currency, BK_TRANSDTL.TransVoid, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination ";
                strSQL += " FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID = BK_TRANSMAIN.TransID AND BK_TRANSMAIN.AgentID = '" + intAgentID + "' and BK_TRANSMAIN.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND LEN(BK_TRANSDTL.RecordLocator) >= 6 ";
                strSQL += " WHERE BK_TRANSMAIN.IsOverride = 1"; //added by Sienny 20170316 (for new GBS)
                strSQL += " ORDER BY SeqNo "; //added by Sienny 20170406 (Add select SeqNo too to know which depart/return on 1st row)
                //strSQL = "SELECT BK_TRANSDTL.* FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID = BK_TRANSMAIN.TransID AND BK_TRANSMAIN.AgentID = " + intAgentID + " and BK_TRANSMAIN.TransID='" + TransID + "' and BK_TRANSMAIN.TransStatus = 0 ";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSDTL_Info.SeqNo = (byte)drRow["SeqNo"];
                        //objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                        //objBK_TRANSDTL_Info.FlightNo = (string)drRow["FlightNo"];
                        //if (DateTime.TryParse(drRow["DepatureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepatureDate"];
                        //if (DateTime.TryParse(drRow["DepatureDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate2 = (DateTime)drRow["DepatureDate2"];
                        objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                        objBK_TRANSDTL_Info.Transit = (string)drRow["Transit"];
                        objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                        //if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];
                        //if (DateTime.TryParse(drRow["ArrivalDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate2 = (DateTime)drRow["ArrivalDate2"];
                        //objBK_TRANSDTL_Info.FareClass = (string)drRow["FareClass"];
                        //objBK_TRANSDTL_Info.FarePerPax = (decimal)drRow["FarePerPax"];
                        //objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                        //objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"];
                        //objBK_TRANSDTL_Info.LineFee = (decimal)drRow["LineFee"];
                        //objBK_TRANSDTL_Info.LineOth = (decimal)drRow["LineOth"];
                        objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];
                        //objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        //objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.TransVoid = (byte)drRow["TransVoid"];
                        //objBK_TRANSDTL_Info.rowguid = (Guid)drRow["rowguid"];
                        //objBK_TRANSDTL_Info.CreateBy = (string)drRow["CreateBy"];
                        //if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        //if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        //objBK_TRANSDTL_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                        //objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];
                        objBK_TRANSDTL_Info.Signature = (string)drRow["SellKey"];
                        //added by ketee
                        if (DateTime.TryParse(drRow["NextDueDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.NextDueDate = (DateTime)drRow["NextDueDate"];
                        //objBK_TRANSDTL_Info.NextDueAmount = (decimal)drRow["NextDueAmount"];
                        //if (DateTime.TryParse(drRow["PayDueDate1"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate1 = (DateTime)drRow["PayDueDate1"];
                        //objBK_TRANSDTL_Info.PayDueAmount1 = (decimal)drRow["PayDueAmount1"];
                        //if (DateTime.TryParse(drRow["PayDueDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate2 = (DateTime)drRow["PayDueDate2"];
                        //objBK_TRANSDTL_Info.PayDueAmount2 = (decimal)drRow["PayDueAmount2"];
                        //if (DateTime.TryParse(drRow["PayDueDate3"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate3 = (DateTime)drRow["PayDueDate3"];
                        //objBK_TRANSDTL_Info.PayDueAmount3 = (decimal)drRow["PayDueAmount3"];
                        //objBK_TRANSDTL_Info.RemindAttempt = (int)drRow["RemindAttempt"];
                        //objBK_TRANSDTL_Info.RemindLog = (string)drRow["RemindLog"];

                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    //throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<BookingTransactionDetail> Get_DISTINCTTRANSDTL(string intAgentID, string TransID)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();

            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                strSQL = "SELECT Distinct BK_TRANSDTL.RecordLocator, BK_TRANSDTL.TransID, BK_TRANSDTL.SellKey, ";
                strSQL += " BK_TRANSDTL.NextDueDate, BK_TRANSDTL.Currency, BK_TRANSDTL.TransVoid ";
                strSQL += " FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID = BK_TRANSMAIN.TransID AND BK_TRANSMAIN.AgentID = " + objSQL.ParseValue(SQLControl.EnumDataType.dtString, intAgentID) + " and BK_TRANSMAIN.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND LEN(BK_TRANSDTL.RecordLocator) >= 6 ";
                strSQL += " WHERE BK_TRANSMAIN.IsOverride = 1 "; //added by Sienny 20170316 (for new GBS)
                //strSQL = "SELECT BK_TRANSDTL.* FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID = BK_TRANSMAIN.TransID AND BK_TRANSMAIN.AgentID = " + intAgentID + " and BK_TRANSMAIN.TransID='" + TransID + "' and BK_TRANSMAIN.TransStatus = 0 ";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                        //objBK_TRANSDTL_Info.SeqNo = (byte)drRow["SeqNo"];
                        //objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                        //objBK_TRANSDTL_Info.FlightNo = (string)drRow["FlightNo"];
                        //if (DateTime.TryParse(drRow["DepatureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepatureDate"];
                        //if (DateTime.TryParse(drRow["DepatureDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate2 = (DateTime)drRow["DepatureDate2"];
                        //objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                        //objBK_TRANSDTL_Info.Transit = (string)drRow["Transit"];
                        //objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                        //if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];
                        //if (DateTime.TryParse(drRow["ArrivalDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate2 = (DateTime)drRow["ArrivalDate2"];
                        //objBK_TRANSDTL_Info.FareClass = (string)drRow["FareClass"];
                        //objBK_TRANSDTL_Info.FarePerPax = (decimal)drRow["FarePerPax"];
                        //objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                        //objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"];
                        //objBK_TRANSDTL_Info.LineFee = (decimal)drRow["LineFee"];
                        //objBK_TRANSDTL_Info.LineOth = (decimal)drRow["LineOth"];
                        objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];
                        //objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        //objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.TransVoid = (byte)drRow["TransVoid"];
                        //objBK_TRANSDTL_Info.rowguid = (Guid)drRow["rowguid"];
                        //objBK_TRANSDTL_Info.CreateBy = (string)drRow["CreateBy"];
                        //if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        //if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        //objBK_TRANSDTL_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                        //objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];
                        objBK_TRANSDTL_Info.Signature = (string)drRow["SellKey"];
                        //added by ketee
                        if (DateTime.TryParse(drRow["NextDueDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.NextDueDate = (DateTime)drRow["NextDueDate"];
                        //objBK_TRANSDTL_Info.NextDueAmount = (decimal)drRow["NextDueAmount"];
                        //if (DateTime.TryParse(drRow["PayDueDate1"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate1 = (DateTime)drRow["PayDueDate1"];
                        //objBK_TRANSDTL_Info.PayDueAmount1 = (decimal)drRow["PayDueAmount1"];
                        //if (DateTime.TryParse(drRow["PayDueDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate2 = (DateTime)drRow["PayDueDate2"];
                        //objBK_TRANSDTL_Info.PayDueAmount2 = (decimal)drRow["PayDueAmount2"];
                        //if (DateTime.TryParse(drRow["PayDueDate3"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate3 = (DateTime)drRow["PayDueDate3"];
                        //objBK_TRANSDTL_Info.PayDueAmount3 = (decimal)drRow["PayDueAmount3"];
                        //objBK_TRANSDTL_Info.RemindAttempt = (int)drRow["RemindAttempt"];
                        //objBK_TRANSDTL_Info.RemindLog = (string)drRow["RemindLog"];

                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    //throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        //added by ketee
        public List<string> GetAllExpiryTrans_Dtl_NextDueDate(string intAgentID)
        {
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            List<string> TransIDs = new List<string>();
            DataTable dt;
            String strSQL = string.Empty;

            try
            {
                strSQL = "SELECT BK_TRANSMAIN.TransID FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID = BK_TRANSMAIN.TransID AND BK_TRANSMAIN.AgentID = " + intAgentID +
                    " and BK_TRANSMAIN.expirydate < GETDATE() and BK_TRANSMAIN.TransStatus = 1 " +
                    " and BK_TRANSMAIN.IsOverride = 1 " + //added by Sienny 20170316 (for new GBS)
                    " GROUP BY BK_TRANSMAIN.TransID ";

                /* strSQL = "SELECT BK_TRANSMAIN.TransID, BK_TRANSDTL.NextDueDate FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID = BK_TRANSMAIN.TransID AND BK_TRANSMAIN.AgentID = " + intAgentID +
                    " and BK_TRANSMAIN.expirydate < GETDATE() and BK_TRANSMAIN.STDDate > GETDATE() and BK_TRANSMAIN.TransStatus = 1 " +
                    " GROUP BY BK_TRANSMAIN.TransID, BK_TRANSDTL.NextDueDate"; */
                //strSQL = "SELECT BK_TRANSDTL.* FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID = BK_TRANSMAIN.TransID AND BK_TRANSMAIN.AgentID = " + intAgentID + " and BK_TRANSMAIN.TransID='" + TransID + "' and BK_TRANSMAIN.TransStatus = 0 ";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        TransIDs.Add((string)drRow["TransID"]);
                    }
                    return TransIDs;
                }
                else
                {
                    return null;
                    //throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<string> GetAllExpiryUploadPassengersTrans(string intAgentID)
        {
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            List<string> TransIDs = new List<string>();
            DataTable dt;
            String strSQL = string.Empty;

            try
            {
                strSQL = "SELECT BK_TRANSMAIN.TransID, BK_TRANSDTL.NextDueDate, BK_TRANSMAIN.STDDate ,BK_TRANSMAIN.SchemeCode, DateAdd(dd, -7, BK_TRANSMAIN.STDDate) as duedate, GETDATE() as today " +
                    " FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID = BK_TRANSMAIN.TransID AND BK_TRANSMAIN.AgentID = " +
                    intAgentID + " and CONVERT(DATE,GETDATE()) > CONVERT(DATE,BK_TRANSMAIN.EXPIRYDATE) and BK_TRANSMAIN.TransStatus = 2 AND BK_TRANSMAIN.SchemeCode not in ('W1W', 'SVCF')";
                strSQL += " WHERE BK_TRANSMAIN.IsOverride = 1 "; //added by Sienny 20170316 (for new GBS)

                /* strSQL = "SELECT BK_TRANSMAIN.TransID, BK_TRANSDTL.NextDueDate, BK_TRANSMAIN.STDDate ,BK_TRANSMAIN.SchemeCode, DateAdd(dd, -7, BK_TRANSMAIN.STDDate) as duedate, GETDATE() as today " +
                    " FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID = BK_TRANSMAIN.TransID AND BK_TRANSMAIN.AgentID = " +
                    intAgentID + " and GETDATE() > DateAdd(dd, -7, BK_TRANSMAIN.STDDate) and BK_TRANSMAIN.TransStatus = 2 AND BK_TRANSMAIN.SchemeCode not in ('W1W', 'SVCF')"; */
                //strSQL = "SELECT BK_TRANSDTL.* FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID = BK_TRANSMAIN.TransID AND BK_TRANSMAIN.AgentID = " + intAgentID + " and BK_TRANSMAIN.TransID='" + TransID + "' and BK_TRANSMAIN.TransStatus = 0 ";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        TransIDs.Add((string)drRow["TransID"]);
                    }
                    return TransIDs;
                }
                else
                {
                    return null;
                    //throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public BookingTransactionDetail GetSingleBK_TRANSDTL(string pRecordLocator, string pTransID, byte pSeqNo)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("BK_TRANSDTL.RecordLocator");
                lstFields.Add("BK_TRANSDTL.TransID");
                lstFields.Add("BK_TRANSDTL.SeqNo");
                lstFields.Add("BK_TRANSDTL.CarrierCode");
                lstFields.Add("BK_TRANSDTL.FlightNo");
                lstFields.Add("BK_TRANSDTL.DepartureDate");
                lstFields.Add("BK_TRANSDTL.DepartureDate2");
                lstFields.Add("BK_TRANSDTL.FlightDura");
                lstFields.Add("BK_TRANSDTL.FlightDura2");
                lstFields.Add("BK_TRANSDTL.Origin");
                lstFields.Add("BK_TRANSDTL.Transit");
                lstFields.Add("BK_TRANSDTL.Destination");
                lstFields.Add("BK_TRANSDTL.ArrivalDate");
                lstFields.Add("BK_TRANSDTL.ArrivalDate2");
                lstFields.Add("BK_TRANSDTL.FareClass");
                lstFields.Add("BK_TRANSDTL.FarePerPax");
                lstFields.Add("BK_TRANSDTL.LineTotal");
                lstFields.Add("BK_TRANSDTL.LineTax");
                lstFields.Add("BK_TRANSDTL.LinePaxFee");
                lstFields.Add("BK_TRANSDTL.LineFee");
                lstFields.Add("BK_TRANSDTL.LineOth");
                lstFields.Add("BK_TRANSDTL.LineSSR");
                lstFields.Add("BK_TRANSDTL.LineInfant");
                lstFields.Add("BK_TRANSDTL.LineSeat");
                lstFields.Add("BK_TRANSDTL.LineNameChange");
                lstFields.Add("BK_TRANSDTL.LineDisc");
                lstFields.Add("BK_TRANSDTL.LineProcess");
                lstFields.Add("BK_TRANSDTL.LinePromoDisc");
                lstFields.Add("BK_TRANSDTL.AttemptCount");
                lstFields.Add("BK_TRANSDTL.Currency");
                lstFields.Add("BK_TRANSDTL.PaxAdult");
                lstFields.Add("BK_TRANSDTL.PaxChild");
                lstFields.Add("BK_TRANSDTL.TransVoid");
                lstFields.Add("BK_TRANSDTL.rowguid");
                lstFields.Add("BK_TRANSDTL.CreateBy");
                lstFields.Add("BK_TRANSDTL.SyncCreate");
                lstFields.Add("BK_TRANSDTL.SyncLastUpd");
                lstFields.Add("BK_TRANSDTL.LastSyncBy");
                lstFields.Add("BK_TRANSDTL.DetailCollectedAmt");
                lstFields.Add("BK_TRANSDTL.SellKey");
                //added by ketee
                lstFields.Add("NextDueDate");
                lstFields.Add("NextDueAmount");
                lstFields.Add("PayDueDate1");
                lstFields.Add("PayDueAmount1");
                lstFields.Add("PayDueDate2");
                lstFields.Add("PayDueAmount2");
                lstFields.Add("PayDueDate3");
                lstFields.Add("PayDueAmount3");
                lstFields.Add("RemindAttempt");
                lstFields.Add("RemindLog");


                strFields = GetSqlFields(lstFields);
                strFilter = "WHERE BK_TRANSDTL.RecordLocator='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pRecordLocator) + "' AND BK_TRANSDTL.SeqNo='" + pSeqNo + "' AND BK_TRANSDTL.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pTransID) + "'";
                strSQL = "SELECT " + strFields + " FROM BK_TRANSDTL " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];

                    objBK_TRANSDTL_Info = new BookingTransactionDetail();
                    objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                    objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                    objBK_TRANSDTL_Info.SeqNo = (byte)drRow["SeqNo"];
                    objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                    objBK_TRANSDTL_Info.FlightNo = (string)drRow["FlightNo"];
                    if (DateTime.TryParse(drRow["DepartureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepartureDate"];
                    if (DateTime.TryParse(drRow["DepartureDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate2 = (DateTime)drRow["DepartureDate2"];
                    objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                    objBK_TRANSDTL_Info.Transit = (string)drRow["Transit"];
                    objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                    if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];
                    if (DateTime.TryParse(drRow["ArrivalDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate2 = (DateTime)drRow["ArrivalDate2"];
                    objBK_TRANSDTL_Info.FlightDura = (decimal)drRow["FlightDura"];
                    objBK_TRANSDTL_Info.FlightDura2 = (decimal)drRow["FlightDura2"];
                    objBK_TRANSDTL_Info.FareClass = (string)drRow["FareClass"];
                    objBK_TRANSDTL_Info.FarePerPax = (decimal)drRow["FarePerPax"];
                    objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                    objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"];
                    objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["LinePaxFee"];
                    objBK_TRANSDTL_Info.LineFee = (decimal)drRow["LineFee"];
                    objBK_TRANSDTL_Info.LineOth = (decimal)drRow["LineOth"];
                    objBK_TRANSDTL_Info.LineSSR = (decimal)drRow["LineSSR"];
                    objBK_TRANSDTL_Info.LineInfant = (decimal)drRow["LineInfant"];
                    objBK_TRANSDTL_Info.LineProcess = (decimal)drRow["LineProcess"];
                    objBK_TRANSDTL_Info.LineSeat = (decimal)drRow["LineSeat"];
                    objBK_TRANSDTL_Info.LineNameChange = (decimal)drRow["LineNameChange"];
                    objBK_TRANSDTL_Info.LineDisc = (decimal)drRow["LineDisc"];
                    objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["LinePromoDisc"];
                    //objBK_TRANSDTL_Info.AttemptCount = (int)drRow["AttemptCount"];
                    objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];
                    objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                    objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                    objBK_TRANSDTL_Info.TransVoid = (byte)drRow["TransVoid"];
                    objBK_TRANSDTL_Info.rowguid = (Guid)drRow["rowguid"];
                    objBK_TRANSDTL_Info.CreateBy = (string)drRow["CreateBy"];
                    if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                    if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                    objBK_TRANSDTL_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                    objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];
                    objBK_TRANSDTL_Info.Signature = (string)drRow["SellKey"];
                    //added by ketee
                    if (DateTime.TryParse(drRow["NextDueDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.NextDueDate = (DateTime)drRow["NextDueDate"];
                    objBK_TRANSDTL_Info.NextDueAmount = (decimal)drRow["NextDueAmount"];
                    if (DateTime.TryParse(drRow["PayDueDate1"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate1 = (DateTime)drRow["PayDueDate1"];
                    objBK_TRANSDTL_Info.PayDueAmount1 = (decimal)drRow["PayDueAmount1"];
                    if (DateTime.TryParse(drRow["PayDueDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate2 = (DateTime)drRow["PayDueDate2"];
                    objBK_TRANSDTL_Info.PayDueAmount2 = (decimal)drRow["PayDueAmount2"];
                    if (DateTime.TryParse(drRow["PayDueDate3"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate3 = (DateTime)drRow["PayDueDate3"];
                    objBK_TRANSDTL_Info.PayDueAmount3 = (decimal)drRow["PayDueAmount3"];
                    objBK_TRANSDTL_Info.RemindAttempt = (int)drRow["RemindAttempt"];
                    objBK_TRANSDTL_Info.RemindLog = (string)drRow["RemindLog"];

                    return objBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public BookingTransactionDetail GetSingleDetail(string TransID, string PNR, byte SeqNo)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("BK_TRANSDTL.RecordLocator");
                lstFields.Add("BK_TRANSDTL.TransID");
                lstFields.Add("BK_TRANSDTL.SeqNo");
                lstFields.Add("BK_TRANSDTL.CarrierCode");
                lstFields.Add("BK_TRANSDTL.FlightNo");
                lstFields.Add("BK_TRANSDTL.DepartureDate");
                lstFields.Add("BK_TRANSDTL.DepartureDate2");
                lstFields.Add("BK_TRANSDTL.FlightDura");
                lstFields.Add("BK_TRANSDTL.FlightDura2");
                lstFields.Add("BK_TRANSDTL.Origin");
                lstFields.Add("BK_TRANSDTL.Transit");
                lstFields.Add("BK_TRANSDTL.Destination");
                lstFields.Add("BK_TRANSDTL.ArrivalDate");
                lstFields.Add("BK_TRANSDTL.ArrivalDate2");
                lstFields.Add("BK_TRANSDTL.FareClass");
                lstFields.Add("BK_TRANSDTL.FarePerPax");
                lstFields.Add("BK_TRANSDTL.LineTotal");
                lstFields.Add("BK_TRANSDTL.LineTax");
                lstFields.Add("BK_TRANSDTL.LinePaxFee");
                lstFields.Add("BK_TRANSDTL.LineFee");
                lstFields.Add("BK_TRANSDTL.LineOth");
                lstFields.Add("BK_TRANSDTL.LineProcess");
                lstFields.Add("BK_TRANSDTL.LineSSR");
                lstFields.Add("BK_TRANSDTL.LineSeat");
                lstFields.Add("BK_TRANSDTL.LineNameChange");
                lstFields.Add("BK_TRANSDTL.LineInfant");
                lstFields.Add("BK_TRANSDTL.LineDisc");
                lstFields.Add("BK_TRANSDTL.LinePromoDisc");
                lstFields.Add("BK_TRANSDTL.AttemptCount");
                lstFields.Add("BK_TRANSDTL.Currency");
                lstFields.Add("BK_TRANSDTL.PaxAdult");
                lstFields.Add("BK_TRANSDTL.PaxChild");
                lstFields.Add("BK_TRANSDTL.TransVoid");
                lstFields.Add("BK_TRANSDTL.rowguid");
                lstFields.Add("BK_TRANSDTL.CreateBy");
                lstFields.Add("BK_TRANSDTL.SyncCreate");
                lstFields.Add("BK_TRANSDTL.SyncLastUpd");
                lstFields.Add("BK_TRANSDTL.LastSyncBy");
                lstFields.Add("BK_TRANSDTL.DetailCollectedAmt");
                lstFields.Add("BK_TRANSDTL.SellKey");

                strFields = GetSqlFields(lstFields);
                strFilter = "WHERE BK_TRANSDTL.RecordLocator='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "' AND BK_TRANSDTL.SeqNo!='" + SeqNo + "' AND BK_TRANSDTL.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'";
                strSQL = "SELECT " + strFields + " FROM BK_TRANSDTL " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];

                    objBK_TRANSDTL_Info = new BookingTransactionDetail();
                    objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                    objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                    objBK_TRANSDTL_Info.SeqNo = (byte)drRow["SeqNo"];
                    objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                    objBK_TRANSDTL_Info.FlightNo = (string)drRow["FlightNo"];
                    if (DateTime.TryParse(drRow["DepartureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepartureDate"];
                    if (DateTime.TryParse(drRow["DepartureDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate2 = (DateTime)drRow["DepartureDate2"];
                    objBK_TRANSDTL_Info.FlightDura = (decimal)drRow["FlightDura"];
                    objBK_TRANSDTL_Info.FlightDura2 = (decimal)drRow["FlightDura2"];
                    objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                    objBK_TRANSDTL_Info.Transit = (string)drRow["Transit"];
                    objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                    if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];
                    if (DateTime.TryParse(drRow["ArrivalDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate2 = (DateTime)drRow["ArrivalDate2"];
                    objBK_TRANSDTL_Info.FareClass = (string)drRow["FareClass"];
                    objBK_TRANSDTL_Info.FarePerPax = (decimal)drRow["FarePerPax"];
                    objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                    objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"];
                    objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["LinePaxFee"];
                    objBK_TRANSDTL_Info.LineFee = (decimal)drRow["LineFee"];
                    objBK_TRANSDTL_Info.LineOth = (decimal)drRow["LineOth"];
                    objBK_TRANSDTL_Info.LineProcess = (decimal)drRow["LineProcess"];
                    objBK_TRANSDTL_Info.LineSSR = (decimal)drRow["LineSSR"];
                    objBK_TRANSDTL_Info.LineSeat = (decimal)drRow["LineSeat"];
                    objBK_TRANSDTL_Info.LineNameChange = (decimal)drRow["LineNameChange"];
                    objBK_TRANSDTL_Info.LineInfant = (decimal)drRow["LineInfant"];
                    objBK_TRANSDTL_Info.LineDisc = (decimal)drRow["LineDisc"];
                    objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["LinePromoDisc"];
                    //objBK_TRANSDTL_Info.AttemptCount = (int)drRow["AttemptCount"];
                    objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];
                    objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                    objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                    objBK_TRANSDTL_Info.TransVoid = (byte)drRow["TransVoid"];
                    objBK_TRANSDTL_Info.rowguid = (Guid)drRow["rowguid"];
                    objBK_TRANSDTL_Info.CreateBy = (string)drRow["CreateBy"];
                    if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                    if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                    objBK_TRANSDTL_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                    objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];
                    objBK_TRANSDTL_Info.Signature = (string)drRow["SellKey"];

                    return objBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }


        public List<BookingTransactionDetail> GetTransDTLByAttempt(int AttemptCount)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> lstobjBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("BK_TRANSDTL.RecordLocator");
                lstFields.Add("BK_TRANSDTL.TransID");
                //lstFields.Add("BK_TRANSDTL.SeqNo");
                //lstFields.Add("BK_TRANSDTL.CarrierCode");
                //lstFields.Add("BK_TRANSDTL.FlightNo");
                //lstFields.Add("BK_TRANSDTL.DepartureDate");
                //lstFields.Add("BK_TRANSDTL.DepartureDate2");
                //lstFields.Add("BK_TRANSDTL.FlightDura");
                //lstFields.Add("BK_TRANSDTL.FlightDura2");
                //lstFields.Add("BK_TRANSDTL.Origin");
                //lstFields.Add("BK_TRANSDTL.Transit");
                //lstFields.Add("BK_TRANSDTL.Destination");
                //lstFields.Add("BK_TRANSDTL.ArrivalDate");
                //lstFields.Add("BK_TRANSDTL.ArrivalDate2");
                //lstFields.Add("BK_TRANSDTL.FareClass");
                //lstFields.Add("BK_TRANSDTL.FarePerPax");
                //lstFields.Add("BK_TRANSDTL.LineTotal");
                //lstFields.Add("BK_TRANSDTL.LineTax");
                //lstFields.Add("BK_TRANSDTL.LinePaxFee");
                //lstFields.Add("BK_TRANSDTL.LineFee");
                //lstFields.Add("BK_TRANSDTL.LineOth");
                //lstFields.Add("BK_TRANSDTL.LineSSR");
                //lstFields.Add("BK_TRANSDTL.LineInfant");
                //lstFields.Add("BK_TRANSDTL.LineSeat");
                //lstFields.Add("BK_TRANSDTL.LineNameChange");
                //lstFields.Add("BK_TRANSDTL.LineDisc");
                //lstFields.Add("BK_TRANSDTL.LinePromoDisc");
                //lstFields.Add("BK_TRANSDTL.AttemptCount");
                //lstFields.Add("BK_TRANSDTL.Currency");
                //lstFields.Add("BK_TRANSDTL.PaxAdult");
                //lstFields.Add("BK_TRANSDTL.PaxChild");
                //lstFields.Add("BK_TRANSDTL.TransVoid");
                //lstFields.Add("BK_TRANSDTL.rowguid");
                //lstFields.Add("BK_TRANSDTL.CreateBy");
                //lstFields.Add("BK_TRANSDTL.SyncCreate");
                //lstFields.Add("BK_TRANSDTL.SyncLastUpd");
                //lstFields.Add("BK_TRANSDTL.LastSyncBy");
                //lstFields.Add("BK_TRANSDTL.DetailCollectedAmt");
                //lstFields.Add("BK_TRANSDTL.SellKey");
                //lstFields.Add("NextDueDate");
                //lstFields.Add("NextDueAmount");
                //lstFields.Add("PayDueDate1");
                //lstFields.Add("PayDueAmount1");
                //lstFields.Add("PayDueDate2");
                //lstFields.Add("PayDueAmount2");
                //lstFields.Add("PayDueDate3");
                //lstFields.Add("PayDueAmount3");
                //lstFields.Add("RemindAttempt");
                //lstFields.Add("RemindLog");


                strFields = GetSqlFields(lstFields);
                strFilter = "WHERE BK_TRANSDTL.AttempCount > " + AttemptCount + " AND BK_TRANSDTL.TransVoid=0";
                strSQL = "SELECT DISTINCT " + strFields + " FROM BK_TRANSDTL " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true);

                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {

                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSDTL_Info.SeqNo = (byte)drRow["SeqNo"];
                        objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                        objBK_TRANSDTL_Info.FlightNo = (string)drRow["FlightNo"];
                        if (DateTime.TryParse(drRow["DepartureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepartureDate"];
                        if (DateTime.TryParse(drRow["DepartureDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate2 = (DateTime)drRow["DepartureDate2"];
                        objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                        objBK_TRANSDTL_Info.Transit = (string)drRow["Transit"];
                        objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                        if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];
                        if (DateTime.TryParse(drRow["ArrivalDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate2 = (DateTime)drRow["ArrivalDate2"];
                        objBK_TRANSDTL_Info.FlightDura = (decimal)drRow["FlightDura"];
                        objBK_TRANSDTL_Info.FlightDura2 = (decimal)drRow["FlightDura2"];
                        objBK_TRANSDTL_Info.FareClass = (string)drRow["FareClass"];
                        objBK_TRANSDTL_Info.FarePerPax = (decimal)drRow["FarePerPax"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                        objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["LinePaxFee"];
                        objBK_TRANSDTL_Info.LineFee = (decimal)drRow["LineFee"];
                        objBK_TRANSDTL_Info.LineOth = (decimal)drRow["LineOth"];
                        objBK_TRANSDTL_Info.LineSSR = (decimal)drRow["LineSSR"];
                        objBK_TRANSDTL_Info.LineInfant = (decimal)drRow["LineInfant"];
                        objBK_TRANSDTL_Info.LineSeat = (decimal)drRow["LineSeat"];
                        objBK_TRANSDTL_Info.LineNameChange = (decimal)drRow["LineNameChange"];
                        objBK_TRANSDTL_Info.LineDisc = (decimal)drRow["LineDisc"];
                        objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["LinePromoDisc"];
                        //objBK_TRANSDTL_Info.AttemptCount = (int)drRow["AttemptCount"];
                        objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.TransVoid = (byte)drRow["TransVoid"];
                        objBK_TRANSDTL_Info.rowguid = (Guid)drRow["rowguid"];
                        objBK_TRANSDTL_Info.CreateBy = (string)drRow["CreateBy"];
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBK_TRANSDTL_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                        objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];
                        objBK_TRANSDTL_Info.Signature = (string)drRow["SellKey"];
                        //added by ketee
                        if (DateTime.TryParse(drRow["NextDueDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.NextDueDate = (DateTime)drRow["NextDueDate"];
                        objBK_TRANSDTL_Info.NextDueAmount = (decimal)drRow["NextDueAmount"];
                        if (DateTime.TryParse(drRow["PayDueDate1"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate1 = (DateTime)drRow["PayDueDate1"];
                        objBK_TRANSDTL_Info.PayDueAmount1 = (decimal)drRow["PayDueAmount1"];
                        if (DateTime.TryParse(drRow["PayDueDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate2 = (DateTime)drRow["PayDueDate2"];
                        objBK_TRANSDTL_Info.PayDueAmount2 = (decimal)drRow["PayDueAmount2"];
                        if (DateTime.TryParse(drRow["PayDueDate3"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate3 = (DateTime)drRow["PayDueDate3"];
                        objBK_TRANSDTL_Info.PayDueAmount3 = (decimal)drRow["PayDueAmount3"];
                        objBK_TRANSDTL_Info.RemindAttempt = (int)drRow["RemindAttempt"];
                        objBK_TRANSDTL_Info.RemindLog = (string)drRow["RemindLog"];
                        lstobjBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return lstobjBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public BookingTransactionDetail GetSingle_TRANSDTLBySellKey(string SellKey, int TransVoid = 2)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info = new BookingTransactionDetail();
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                string str = "";
                if (TransVoid <= 1)
                {
                    str = " AND TransVoid=" + TransVoid;
                }
                strSQL = "SELECT * FROM BK_TRANSDTL WHERE SellKey='" + SellKey + "'" + str + " ORDER BY SeqNo ASC";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        //if (TransVoid == 1)
                        //    objBK_TRANSDTL_Info.RecordLocator = "Rejected";
                        //else
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSDTL_Info.SeqNo = (byte)drRow["SeqNo"];
                        objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                        objBK_TRANSDTL_Info.FlightNo = (string)drRow["CarrierCode"] + (string)drRow["FlightNo"];
                        if (DateTime.TryParse(drRow["DepartureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepartureDate"];
                        objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                        objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                        if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];
                        objBK_TRANSDTL_Info.FareClass = (string)drRow["FareClass"];
                        objBK_TRANSDTL_Info.FarePerPax = (decimal)drRow["FarePerPax"];
                        objBK_TRANSDTL_Info.Journey = (string)drRow["Origin"] + "-" + (string)drRow["Destination"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                        objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["LineTotal"] - (decimal)drRow["LineTax"] - (decimal)drRow["LinePaxFee"] - (decimal)drRow["LineFee"] - (decimal)drRow["LineOth"] - (decimal)drRow["LineProcess"] - (decimal)drRow["LineDisc"] - (decimal)drRow["LinePromoDisc"];
                        objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["LinePaxFee"];
                        objBK_TRANSDTL_Info.LineFee = (decimal)drRow["LineFee"];
                        objBK_TRANSDTL_Info.LineOth = (decimal)drRow["LineOth"];
                        objBK_TRANSDTL_Info.LineProcess = (decimal)drRow["LineProcess"];
                        objBK_TRANSDTL_Info.LineSSR = (decimal)drRow["LineSSR"];
                        objBK_TRANSDTL_Info.LineSeat = (decimal)drRow["LineSeat"];
                        objBK_TRANSDTL_Info.LineNameChange = (decimal)drRow["LineNameChange"];
                        objBK_TRANSDTL_Info.LineInfant = (decimal)drRow["LineInfant"];
                        objBK_TRANSDTL_Info.LineDisc = (decimal)drRow["LineDisc"];
                        objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["LinePromoDisc"];
                        //objBK_TRANSDTL_Info.AttemptCount = (int)drRow["AttemptCount"];
                        objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];

                        objBK_TRANSDTL_Info.PayDueAmount1 = (decimal)drRow["PayDueAmount1"];

                        objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.TransVoid = (byte)drRow["TransVoid"];
                        objBK_TRANSDTL_Info.rowguid = (Guid)drRow["rowguid"];
                        objBK_TRANSDTL_Info.CreateBy = (string)drRow["CreateBy"];
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBK_TRANSDTL_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                        break;
                    }
                    return objBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public BookingTransactionDetail SaveBK_TRANSDTL(BookingTransactionDetail pBK_TRANSDTL_Info, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                objSQL.AddField("RecordLocator", pBK_TRANSDTL_Info.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransID", pBK_TRANSDTL_Info.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SeqNo", pBK_TRANSDTL_Info.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CarrierCode", pBK_TRANSDTL_Info.CarrierCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("FlightNo", pBK_TRANSDTL_Info.FlightNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("DepartureDate", pBK_TRANSDTL_Info.DepatureDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("DepartureDate2", pBK_TRANSDTL_Info.DepatureDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("FlightDura", pBK_TRANSDTL_Info.FlightDura, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("FlightDura2", pBK_TRANSDTL_Info.FlightDura2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Origin", pBK_TRANSDTL_Info.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Transit", pBK_TRANSDTL_Info.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Destination", pBK_TRANSDTL_Info.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ArrivalDate", pBK_TRANSDTL_Info.ArrivalDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ArrivalDate2", pBK_TRANSDTL_Info.ArrivalDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("FareClass", pBK_TRANSDTL_Info.FareClass, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("FarePerPax", pBK_TRANSDTL_Info.FarePerPax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LineTotal", pBK_TRANSDTL_Info.LineTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LineTax", pBK_TRANSDTL_Info.LineTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LinePaxFee", pBK_TRANSDTL_Info.LinePaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LineFee", pBK_TRANSDTL_Info.LineFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LineOth", pBK_TRANSDTL_Info.LineOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LineProcess", pBK_TRANSDTL_Info.LineProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LineSSR", pBK_TRANSDTL_Info.LineSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LineSeat", pBK_TRANSDTL_Info.LineSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LineNameChange", pBK_TRANSDTL_Info.LineNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LineInsureFee", pBK_TRANSDTL_Info.LineInsureFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);//added by romy for insure
                objSQL.AddField("LineInfant", pBK_TRANSDTL_Info.LineInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LineDisc", pBK_TRANSDTL_Info.LineDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LinePromoDisc", pBK_TRANSDTL_Info.LinePromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AttemptCount", pBK_TRANSDTL_Info.AttemptCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Currency", pBK_TRANSDTL_Info.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaxAdult", pBK_TRANSDTL_Info.PaxAdult, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaxChild", pBK_TRANSDTL_Info.PaxChild, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransVoid", pBK_TRANSDTL_Info.TransVoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CreateBy", pBK_TRANSDTL_Info.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", pBK_TRANSDTL_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncLastUpd", pBK_TRANSDTL_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LastSyncBy", pBK_TRANSDTL_Info.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("DetailCollectedAmt", pBK_TRANSDTL_Info.CollectedAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SellKey", pBK_TRANSDTL_Info.Signature, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                switch (saveType)
                {
                    case EnumSaveType.Insert:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSDTL", string.Empty);
                        break;
                    case EnumSaveType.Update:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.RecordLocator='" + pBK_TRANSDTL_Info.RecordLocator + "' AND BK_TRANSDTL.TransID='" + pBK_TRANSDTL_Info.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBK_TRANSDTL_Info.SeqNo + "'");
                        break;
                }
                lstSQL.Add(strSQL);
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return null;
                }
                return GetSingleBK_TRANSDTL(pBK_TRANSDTL_Info.RecordLocator, pBK_TRANSDTL_Info.TransID, pBK_TRANSDTL_Info.SeqNo);
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<BookingTransactionDetail> GetAllBK_TRANSDTLFilter(string pTransID, int TransVoid = 2)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                string str = "";

                if (TransVoid <= 1)
                {
                    str = " AND TransVoid=" + TransVoid;
                }
                /// commented by diana 20131021
                //if (TransVoid <= 1)
                //{
                //    str = " AND TransVoid IN(0,1)";
                //}
                strSQL = "SELECT * FROM BK_TRANSDTL WHERE LEN(RecordLocator) >= 6 AND TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pTransID) + "'" + str + " ORDER BY SeqNo ASC";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        //if (TransVoid == 1)
                        //    objBK_TRANSDTL_Info.RecordLocator = "Rejected";
                        //else
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSDTL_Info.SeqNo = (byte)drRow["SeqNo"];
                        objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                        objBK_TRANSDTL_Info.FlightNo = (string)drRow["CarrierCode"] + (string)drRow["FlightNo"];
                        if (DateTime.TryParse(drRow["DepartureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepartureDate"];
                        objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                        objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                        if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];
                        if (drRow["FareSellKey"] != DBNull.Value) objBK_TRANSDTL_Info.FareSellKey = (string)drRow["FareSellKey"];
                        if (drRow["OverridedFareSellKey"] != DBNull.Value) objBK_TRANSDTL_Info.OverridedFareSellKey = (string)drRow["OverridedFareSellKey"];
                        objBK_TRANSDTL_Info.FareClass = (string)drRow["FareClass"];
                        objBK_TRANSDTL_Info.FarePerPax = (decimal)drRow["FarePerPax"];
                        objBK_TRANSDTL_Info.Journey = (string)drRow["Origin"] + "-" + (string)drRow["Destination"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];

                        /// amended by diana 20130829
                        /// subtracted total by fare fee
                        if ((int)drRow["PaxChild"] > 0)
                        {
                            objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2;
                            objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTotal"] - (decimal)drRow["LinePaxFee"] - ((decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2);
                        }
                        else
                        {
                            objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]);
                            objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTotal"] - (decimal)drRow["LinePaxFee"] - ((decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]));
                        }
                        //objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["LineTotal"] - (decimal)drRow["LineTax"] - (decimal)drRow["LineFee"] - (decimal)drRow["LineOth"];
                        //objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"];
                        objBK_TRANSDTL_Info.LineFee = (decimal)drRow["LineFee"];
                        objBK_TRANSDTL_Info.LineOth = (decimal)drRow["LineOth"];
                        objBK_TRANSDTL_Info.LineProcess = (decimal)drRow["LineProcess"];
                        objBK_TRANSDTL_Info.LineSSR = (decimal)drRow["LineSSR"];
                        objBK_TRANSDTL_Info.LineSeat = (decimal)drRow["LineSeat"];
                        objBK_TRANSDTL_Info.LineNameChange = (decimal)drRow["LineNameChange"];
                        objBK_TRANSDTL_Info.LineInfant = (decimal)drRow["LineInfant"];
                        objBK_TRANSDTL_Info.LineDisc = (decimal)drRow["LineDisc"];
                        objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["LinePromoDisc"];
                        //objBK_TRANSDTL_Info.AttemptCount = (int)drRow["AttemptCount"];
                        objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];
                        objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.TransVoid = (byte)drRow["TransVoid"];
                        objBK_TRANSDTL_Info.rowguid = (Guid)drRow["rowguid"];
                        objBK_TRANSDTL_Info.CreateBy = (string)drRow["CreateBy"];
                        objBK_TRANSDTL_Info.Signature = (string)drRow["SellKey"];
                        //added by ketee
                        objBK_TRANSDTL_Info.TotalPax = objBK_TRANSDTL_Info.PaxAdult + objBK_TRANSDTL_Info.PaxChild;

                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBK_TRANSDTL_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<BookingTransactionDetail> GetAllBK_TRANSDTLFilterOrderByPNR(string pTransID, int TransVoid = 2)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                string str = "";

                if (TransVoid <= 1)
                {
                    str = " AND TransVoid=" + TransVoid;
                }
                /// commented by diana 20131021
                //if (TransVoid <= 1)
                //{
                //    str = " AND TransVoid IN(0,1)";
                //}
                strSQL = "SELECT * FROM BK_TRANSDTL WHERE LEN(RecordLocator) >= 6 AND TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pTransID) + "'" + str + " ORDER BY RecordLocator ASC";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        //if (TransVoid == 1)
                        //    objBK_TRANSDTL_Info.RecordLocator = "Rejected";
                        //else
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSDTL_Info.SeqNo = (byte)drRow["SeqNo"];
                        objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                        objBK_TRANSDTL_Info.FlightNo = (string)drRow["CarrierCode"] + (string)drRow["FlightNo"];
                        if (DateTime.TryParse(drRow["DepartureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepartureDate"];
                        objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                        objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                        if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];
                        if (drRow["FareSellKey"] != DBNull.Value) objBK_TRANSDTL_Info.FareSellKey = (string)drRow["FareSellKey"];
                        if (drRow["OverridedFareSellKey"] != DBNull.Value) objBK_TRANSDTL_Info.OverridedFareSellKey = (string)drRow["OverridedFareSellKey"];
                        objBK_TRANSDTL_Info.FareClass = (string)drRow["FareClass"];
                        objBK_TRANSDTL_Info.FarePerPax = (decimal)drRow["FarePerPax"];
                        objBK_TRANSDTL_Info.Journey = (string)drRow["Origin"] + "-" + (string)drRow["Destination"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["LinePaxFee"];

                        /// amended by diana 20130829
                        /// subtracted total by fare fee
                        if ((int)drRow["PaxChild"] > 0)
                        {
                            objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2;
                            objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTotal"] - (decimal)drRow["LinePaxFee"] - ((decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2);
                        }
                        else
                        {
                            objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]);
                            objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTotal"] - (decimal)drRow["LinePaxFee"] - ((decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]));
                        }
                        //objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["LineTotal"] - (decimal)drRow["LineTax"] - (decimal)drRow["LineFee"] - (decimal)drRow["LineOth"];
                        //objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"];
                        objBK_TRANSDTL_Info.LineFee = (decimal)drRow["LineFee"];
                        objBK_TRANSDTL_Info.LineOth = (decimal)drRow["LineOth"];
                        objBK_TRANSDTL_Info.LineProcess = (decimal)drRow["LineProcess"];
                        objBK_TRANSDTL_Info.LineSSR = (decimal)drRow["LineSSR"];
                        objBK_TRANSDTL_Info.LineSeat = (decimal)drRow["LineSeat"];
                        objBK_TRANSDTL_Info.LineNameChange = (decimal)drRow["LineNameChange"];
                        objBK_TRANSDTL_Info.LineInfant = (decimal)drRow["LineInfant"];
                        objBK_TRANSDTL_Info.LineDisc = (decimal)drRow["LineDisc"];
                        objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["LinePromoDisc"];
                        //objBK_TRANSDTL_Info.AttemptCount = (int)drRow["AttemptCount"];
                        objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];
                        objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.TransVoid = (byte)drRow["TransVoid"];
                        objBK_TRANSDTL_Info.rowguid = (Guid)drRow["rowguid"];
                        objBK_TRANSDTL_Info.CreateBy = (string)drRow["CreateBy"];
                        //added by ketee
                        objBK_TRANSDTL_Info.TotalPax = objBK_TRANSDTL_Info.PaxAdult + objBK_TRANSDTL_Info.PaxChild;

                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBK_TRANSDTL_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<BookingTransactionDetail> GetAllBK_TRANSDTLFilterAll(string pTransID, int TransVoid = 2)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                string str = "";

                if (TransVoid <= 1)
                {
                    str = " AND TransVoid=" + TransVoid;
                }
                /// commented by diana 20131021
                //if (TransVoid <= 1)
                //{
                //    str = " AND TransVoid IN(0,1)";
                //}
                strSQL = "SELECT * FROM BK_TRANSDTL WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pTransID) + "'" + str + " ORDER BY SeqNo ASC";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    int i = 0;
                    int CountTotalPax = 0;
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        //if (TransVoid == 1)
                        //    objBK_TRANSDTL_Info.RecordLocator = "Rejected";
                        //else
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSDTL_Info.SeqNo = (byte)drRow["SeqNo"];
                        objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                        objBK_TRANSDTL_Info.FlightNo = (string)drRow["CarrierCode"] + (string)drRow["FlightNo"];
                        if (DateTime.TryParse(drRow["DepartureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepartureDate"];
                        objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                        objBK_TRANSDTL_Info.Transit = (string)drRow["Transit"];
                        objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                        if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];

                        objBK_TRANSDTL_Info.PayDueAmount1 = (decimal)drRow["PayDueAmount1"];
                        objBK_TRANSDTL_Info.PayDueAmount2 = (decimal)drRow["PayDueAmount2"];
                        objBK_TRANSDTL_Info.PayDueAmount3 = (decimal)drRow["PayDueAmount3"];
                        objBK_TRANSDTL_Info.ForfeitedAmount = (decimal)drRow["ForfeitedAmount"];
                        if (DateTime.TryParse(drRow["PayDueDate1"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate1 = (DateTime)drRow["PayDueDate1"];
                        if (DateTime.TryParse(drRow["PayDueDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate2 = (DateTime)drRow["PayDueDate2"];
                        if (DateTime.TryParse(drRow["PayDueDate3"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate3 = (DateTime)drRow["PayDueDate3"];

                        objBK_TRANSDTL_Info.FareClass = (string)drRow["FareClass"];
                        objBK_TRANSDTL_Info.FarePerPax = (decimal)drRow["FarePerPax"];
                        objBK_TRANSDTL_Info.Journey = (string)drRow["Origin"] + "-" + (string)drRow["Destination"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["LinePaxFee"];
                        objBK_TRANSDTL_Info.SellKey = (string)drRow["FareSellKey"];

                        /// amended by diana 20130829
                        /// subtracted total by fare fee
                        if ((int)drRow["PaxChild"] > 0)
                        {
                            objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2;
                            objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"]; //(decimal)drRow["LineTotal"] - ((decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2);
                        }
                        else
                        {
                            objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]);
                            objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"]; //(decimal)drRow["LineTotal"] - ((decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]));
                        }
                        //objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["LineTotal"] - (decimal)drRow["LineTax"] - (decimal)drRow["LineFee"] - (decimal)drRow["LineOth"];
                        //objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"];
                        objBK_TRANSDTL_Info.LineFee = (decimal)drRow["LineFee"];
                        objBK_TRANSDTL_Info.LineOth = (decimal)drRow["LineOth"];
                        objBK_TRANSDTL_Info.LineProcess = (decimal)drRow["LineProcess"];
                        objBK_TRANSDTL_Info.LineSSR = (decimal)drRow["LineSSR"];
                        objBK_TRANSDTL_Info.LineSeat = (decimal)drRow["LineSeat"];
                        objBK_TRANSDTL_Info.LineInfant = (decimal)drRow["LineInfant"];
                        objBK_TRANSDTL_Info.LineNameChange = (decimal)drRow["LineNameChange"];
                        objBK_TRANSDTL_Info.LineDisc = (decimal)drRow["LineDisc"];
                        objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["LinePromoDisc"];
                        //objBK_TRANSDTL_Info.AttemptCount = (int)drRow["AttemptCount"];
                        objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];
                        objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.TransVoid = (byte)drRow["TransVoid"];
                        objBK_TRANSDTL_Info.Signature = (string)drRow["SellKey"]; //objBK_TRANSDTL_Info.SellKey = (string)drRow["SellKey"];
                        objBK_TRANSDTL_Info.rowguid = (Guid)drRow["rowguid"];
                        objBK_TRANSDTL_Info.CreateBy = (string)drRow["CreateBy"];

                        objBK_TRANSDTL_Info.FlightDura = (decimal)drRow["FlightDura"];
                        objBK_TRANSDTL_Info.FlightDura2 = (decimal)drRow["FlightDura2"];
                        objBK_TRANSDTL_Info.FlightDuration = objBK_TRANSDTL_Info.FlightDura + objBK_TRANSDTL_Info.FlightDura2; // (decimal)(objBK_TRANSDTL_Info.ArrivalDate - objBK_TRANSDTL_Info.DepatureDate).TotalHours;


                        //added by ketee
                        objBK_TRANSDTL_Info.TotalPax = objBK_TRANSDTL_Info.PaxAdult + objBK_TRANSDTL_Info.PaxChild;

                        ////added by Sienny (condition for totalpax)
                        //if (i == 0) CountTotalPax += objBK_TRANSDTL_Info.PaxAdult + objBK_TRANSDTL_Info.PaxChild;
                        //else
                        //{
                        //    if (dt.Rows[i]["RecordLocator"].ToString() == dt.Rows[i - 1]["RecordLocator"].ToString())
                        //    {
                        //        CountTotalPax += 0;
                        //    }
                        //    else CountTotalPax += objBK_TRANSDTL_Info.PaxAdult + objBK_TRANSDTL_Info.PaxChild;
                        //}
                        //objBK_TRANSDTL_Info.TotalPax = CountTotalPax;

                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBK_TRANSDTL_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);

                        i++;
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<BookingTransactionDetail> GetOneBK_TRANSDTLFilterAll(string pTransID, int TransVoid = 2)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                string str = "";

                if (TransVoid <= 1)
                {
                    str = " AND TransVoid=" + TransVoid;
                }
                /// commented by diana 20131021
                //if (TransVoid <= 1)
                //{
                //    str = " AND TransVoid IN(0,1)";
                //}
                strSQL = "SELECT TOP 1 * FROM BK_TRANSDTL WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pTransID) + "'" + str + " ORDER BY SeqNo ASC";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    int i = 0;
                    int CountTotalPax = 0;
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        //if (TransVoid == 1)
                        //    objBK_TRANSDTL_Info.RecordLocator = "Rejected";
                        //else
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSDTL_Info.SeqNo = (byte)drRow["SeqNo"];
                        objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                        objBK_TRANSDTL_Info.FlightNo = (string)drRow["CarrierCode"] + (string)drRow["FlightNo"];
                        if (DateTime.TryParse(drRow["DepartureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepartureDate"];
                        objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                        objBK_TRANSDTL_Info.Transit = (string)drRow["Transit"];
                        objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                        if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];

                        objBK_TRANSDTL_Info.PayDueAmount1 = (decimal)drRow["PayDueAmount1"];
                        objBK_TRANSDTL_Info.PayDueAmount2 = (decimal)drRow["PayDueAmount2"];
                        objBK_TRANSDTL_Info.PayDueAmount3 = (decimal)drRow["PayDueAmount3"];
                        if (DateTime.TryParse(drRow["PayDueDate1"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate1 = (DateTime)drRow["PayDueDate1"];
                        if (DateTime.TryParse(drRow["PayDueDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate2 = (DateTime)drRow["PayDueDate2"];
                        if (DateTime.TryParse(drRow["PayDueDate3"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate3 = (DateTime)drRow["PayDueDate3"];

                        objBK_TRANSDTL_Info.FareClass = (string)drRow["FareClass"];
                        objBK_TRANSDTL_Info.FarePerPax = (decimal)drRow["FarePerPax"];
                        objBK_TRANSDTL_Info.Journey = (string)drRow["Origin"] + "-" + (string)drRow["Destination"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["LinePaxFee"];

                        /// amended by diana 20130829
                        /// subtracted total by fare fee
                        if ((int)drRow["PaxChild"] > 0)
                        {
                            objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2;
                            objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"]; //(decimal)drRow["LineTotal"] - ((decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2);
                        }
                        else
                        {
                            objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]);
                            objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"]; //(decimal)drRow["LineTotal"] - ((decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]));
                        }
                        //objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["LineTotal"] - (decimal)drRow["LineTax"] - (decimal)drRow["LineFee"] - (decimal)drRow["LineOth"];
                        //objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"];
                        objBK_TRANSDTL_Info.LineFee = (decimal)drRow["LineFee"];
                        objBK_TRANSDTL_Info.LineOth = (decimal)drRow["LineOth"];
                        objBK_TRANSDTL_Info.LineProcess = (decimal)drRow["LineProcess"];
                        objBK_TRANSDTL_Info.LineSSR = (decimal)drRow["LineSSR"];
                        objBK_TRANSDTL_Info.LineSeat = (decimal)drRow["LineSeat"];
                        objBK_TRANSDTL_Info.LineInfant = (decimal)drRow["LineInfant"];
                        objBK_TRANSDTL_Info.LineNameChange = (decimal)drRow["LineNameChange"];
                        objBK_TRANSDTL_Info.LineDisc = (decimal)drRow["LineDisc"];
                        objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["LinePromoDisc"];
                        //objBK_TRANSDTL_Info.AttemptCount = (int)drRow["AttemptCount"];
                        objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];
                        objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.TransVoid = (byte)drRow["TransVoid"];
                        objBK_TRANSDTL_Info.Signature = (string)drRow["SellKey"]; //objBK_TRANSDTL_Info.SellKey = (string)drRow["SellKey"];
                        objBK_TRANSDTL_Info.rowguid = (Guid)drRow["rowguid"];
                        objBK_TRANSDTL_Info.CreateBy = (string)drRow["CreateBy"];

                        objBK_TRANSDTL_Info.FlightDura = (decimal)drRow["FlightDura"];
                        objBK_TRANSDTL_Info.FlightDura2 = (decimal)drRow["FlightDura2"];
                        objBK_TRANSDTL_Info.FlightDuration = objBK_TRANSDTL_Info.FlightDura + objBK_TRANSDTL_Info.FlightDura2; // (decimal)(objBK_TRANSDTL_Info.ArrivalDate - objBK_TRANSDTL_Info.DepatureDate).TotalHours;


                        //added by ketee
                        objBK_TRANSDTL_Info.TotalPax = objBK_TRANSDTL_Info.PaxAdult + objBK_TRANSDTL_Info.PaxChild;

                        ////added by Sienny (condition for totalpax)
                        //if (i == 0) CountTotalPax += objBK_TRANSDTL_Info.PaxAdult + objBK_TRANSDTL_Info.PaxChild;
                        //else
                        //{
                        //    if (dt.Rows[i]["RecordLocator"].ToString() == dt.Rows[i - 1]["RecordLocator"].ToString())
                        //    {
                        //        CountTotalPax += 0;
                        //    }
                        //    else CountTotalPax += objBK_TRANSDTL_Info.PaxAdult + objBK_TRANSDTL_Info.PaxChild;
                        //}
                        //objBK_TRANSDTL_Info.TotalPax = CountTotalPax;

                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBK_TRANSDTL_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);

                        i++;
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public DataTable GetAllBK_TRANSDTLFeesFilterAll(string pTransID, int TransVoid = 2)
        {
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            String strSQL = string.Empty;

            try
            {
                string str = "";

                if (TransVoid <= 1)
                {
                    str = " AND BK_TRANSDTL.TransVoid=" + TransVoid;
                }
                /// commented by diana 20131021
                //if (TransVoid <= 1)
                //{
                //    str = " AND TransVoid IN(0,1)";
                //}
                strSQL = "SELECT BK_TRANSFEES.FeeCode, BK_TRANSFEES.Origin FeeOrigin, BK_TRANSFEES.Destination FeeDestination, BK_TRANSFEES.FeeRate, BK_TRANSFEES.FeeAmt, BK_TRANSDTL.Origin DTLOrigin, BK_TRANSDTL.Destination FROM BK_TRANSFEES LEFT JOIN BK_TRANSDTL ON BK_TRANSFEES.TransID = BK_TRANSDTL.TransID WHERE BK_TRANSDTL.TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pTransID) + "'" + str + " ORDER BY BK_TRANSDTL.SeqNo DESC";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {

                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<BookingTransactionDetail> BookingDetailFilter(string pTransID, int TransVoid = -1, int ValidPNR = -1)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                string sTransVoid = "";
                string sValidPNR = "";
                if (TransVoid >= 0)
                    sTransVoid = " AND TransVoid = " + TransVoid;
                if (ValidPNR >= 0)
                    sValidPNR = " AND LEN(RecordLocator) >= 6 ";
                strSQL = "SELECT * FROM BK_TRANSDTL WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pTransID) + "' " + sTransVoid + sValidPNR;
                strSQL += " ORDER BY SeqNo"; //added by diana 20140121
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSDTL_Info.SeqNo = (byte)drRow["SeqNo"];
                        objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                        objBK_TRANSDTL_Info.FlightNo = (string)drRow["FlightNo"];
                        if (DateTime.TryParse(drRow["DepartureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepartureDate"];
                        objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                        objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                        if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];
                        objBK_TRANSDTL_Info.FareClass = (string)drRow["FareClass"];
                        objBK_TRANSDTL_Info.FarePerPax = (decimal)drRow["FarePerPax"];
                        objBK_TRANSDTL_Info.Journey = (string)drRow["Origin"] + "-" + (string)drRow["Destination"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                        objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["LineTotal"] - (decimal)drRow["LineTax"] - (decimal)drRow["LinePaxFee"] - (decimal)drRow["LineFee"] - (decimal)drRow["LineOth"] - (decimal)drRow["LineProcess"] - (decimal)drRow["LineSSR"] - (decimal)drRow["LineSeat"] - (decimal)drRow["LineNameChange"] - (decimal)drRow["LineInfant"] - (decimal)drRow["LineDisc"] - (decimal)drRow["LinePromoDisc"];
                        objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["LinePaxFee"];
                        objBK_TRANSDTL_Info.LineFee = (decimal)drRow["LineFee"];
                        objBK_TRANSDTL_Info.LineOth = (decimal)drRow["LineOth"];
                        objBK_TRANSDTL_Info.LineProcess = (decimal)drRow["LineProcess"];
                        objBK_TRANSDTL_Info.LineSSR = (decimal)drRow["LineSSR"];
                        objBK_TRANSDTL_Info.LineSeat = (decimal)drRow["LineSeat"];
                        objBK_TRANSDTL_Info.LineNameChange = (decimal)drRow["LineNameChange"];
                        objBK_TRANSDTL_Info.LineInfant = (decimal)drRow["LineInfant"];
                        objBK_TRANSDTL_Info.LineDisc = (decimal)drRow["LineDisc"];
                        objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["LinePromoDisc"];
                        //objBK_TRANSDTL_Info.AttemptCount = (int)drRow["AttemptCount"];
                        objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];
                        objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.TransVoid = (byte)drRow["TransVoid"];
                        objBK_TRANSDTL_Info.rowguid = (Guid)drRow["rowguid"];
                        objBK_TRANSDTL_Info.CreateBy = (string)drRow["CreateBy"];

                        //added by ketee
                        objBK_TRANSDTL_Info.TotalPax = objBK_TRANSDTL_Info.PaxAdult + objBK_TRANSDTL_Info.PaxChild;

                        //added by romy for Insure
                        objBK_TRANSDTL_Info.FlightDura = (decimal)drRow["FlightDura"];
                        objBK_TRANSDTL_Info.FlightDura2 = (decimal)drRow["FlightDura2"];
                        objBK_TRANSDTL_Info.FlightDuration = objBK_TRANSDTL_Info.FlightDura + objBK_TRANSDTL_Info.FlightDura2; // (decimal)(objBK_TRANSDTL_Info.ArrivalDate - objBK_TRANSDTL_Info.DepatureDate).TotalHours;

                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBK_TRANSDTL_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        //public List<BookingTransactionDetail> GetAllPNR(string transID, int TransVoid = -1, string filterPNR = "", bool ReturnOnly = false, bool devide = false)
        //{
        //    BookingTransactionDetail objBK_TRANSDTL_Info;
        //    List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
        //    DataTable dt;
        //    String strSQL = string.Empty;
        //    try
        //    {
        //        string strFilter = "";
        //        if (TransVoid != -1)
        //            strFilter = " AND TransVoid IN(0,1)";
        //        strSQL = "SELECT DISTINCT MIN(RecordLocator) AS RecordLocator, TransID FROM bk_transaddon WHERE " + filterPNR + " TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, transID) + "' " + strFilter;

        //        dt = objDCom.Execute(strSQL, CommandType.Text, true);
        //        if (dt != null && dt.Rows.Count > 0)
        //        {
        //            foreach (DataRow drRow in dt.Rows)
        //            {
        //                objBK_TRANSDTL_Info = new BookingTransactionDetail();
        //                objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
        //                objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
        //                objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
        //            }
        //            return objListBK_TRANSDTL_Info;
        //        }
        //        else
        //        {
        //            return null;
        //            throw new ApplicationException("BK_TRANSDTL does not exist.");
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }
        //    finally
        //    {
        //        objSQL.Dispose();
        //    }
        //}

        public List<BookingTransactionDetail> GetAllBK_TRANSDTLCombinePNR(string transID, int TransVoid = -1, string filterPNR = "", bool ReturnOnly = false, bool devide = false)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            String strSQL = string.Empty;
            DateTime dateValue;
            try
            {
                string strFilter = "";
                /// need to be checked
                //if (TransVoid != -1)
                //    strFilter = " AND TransVoid = '" + TransVoid + "'";

                if (ReturnOnly == true) //if return only, take second seqNo only
                {
                    if (TransVoid != -1)
                        strFilter = " AND TransVoid IN(0,1)";
                    //amended by diana 20140110 - throw DISTINCT for RecordLocator, do not group by NextDueDate
                    //strSQL = "SELECT TOP 1 RecordLocator, Origin, TransID, 1 AS CntRec, LineTotal, DetailCollectedAmt, DepartureDate, NextDueDate, LineFee AS ServiceCharge, LineTax AS ServiceTax, LinePaxFee AS ServicePaxFee, LineOth AS OtherTax, LineProcess AS ProcessFee, LineSSR AS SSRFee,  LineInfant AS InfantFee, LineSeat AS SeatFee, LineNameChange AS NameChangeFee, LineDisc AS ServiceDiscount, LinePromoDisc AS ServicePromoDiscount, PaxAdult, PaxChild, (PaxAdult  + PaxChild) TotalPax, FareSellKey, OverridedFareSellKey, SellKey, SeqNo, PayDueAmount1, PayDueAmount2, PayDueAmount3, PayDueDate1, PayDueDate2, PayDueDate3, ForfeitedAmount ";
                    //strSQL += "FROM BK_TRANSDTL WHERE TransID = '" + transID + "' AND TransVoid=" + TransVoid;
                    strSQL = "SELECT TOP 1 RecordLocator, Origin, TransID, 1 AS CntRec, LineTotal, DetailCollectedAmt, DepartureDate, NextDueDate, LineFee AS ServiceCharge, LineTax AS ServiceTax, LinePaxFee AS ServicePaxFee, LineOth AS OtherTax, LineProcess AS ProcessFee, LineSSR AS SSRFee,  LineInfant AS InfantFee, LineInsureFee AS InsureFee, LineSeat AS SeatFee, LineNameChange AS NameChangeFee, LineDisc AS ServiceDiscount, LinePromoDisc AS ServicePromoDiscount, PaxAdult, PaxChild, (PaxAdult  + PaxChild) TotalPax, FareSellKey, OverridedFareSellKey, SellKey, SeqNo, PayDueAmount1, PayDueAmount2, PayDueAmount3, PayDueDate1, PayDueDate2, PayDueDate3, ForfeitedAmount ";//edited by romy for insure
                    strSQL += "FROM BK_TRANSDTL WHERE " + filterPNR + " TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, transID) + "' " + strFilter;
                    strSQL += "ORDER BY TransID, DepartureDate DESC, SeqNo DESC"; //amended by diana 20140127 - change PaxAdult to DepartureDate
                }
                else
                {
                    if (TransVoid != -1)
                        strFilter = " AND TransVoid IN(0,1)";
                    //amended by diana 20140110 - throw DISTINCT for RecordLocator, do not group by NextDueDate
                    //Change by Tays to avoid duplicate RecordLocator
                    //strSQL = "SELECT DISTINCT RecordLocator, Origin, TransID, COUNT(LineTotal) AS CntRec, SUM(LineTotal) AS LineTotal, SUM(DetailCollectedAmt) AS DetailCollectedAmt, MIN(DepartureDate) AS DepartureDate, MAX(NextDueDate) AS NextDueDate, SUM(LineFee) AS ServiceCharge, SUM(LineTax) AS ServiceTax, Sum(LineOth) AS OtherTax, Sum(LineProcess) AS ProcessFee, Sum(LineSSR) AS SSRFee, Sum(LineSeat) AS SeatFee, Sum(LineInfant) AS InfantFee, SUM(LineDisc) AS ServiceDiscount, LinePromoDisc AS ServicePromoDiscount, PaxAdult, PaxChild, SellKey, MIN(SeqNo) AS SeqNo ";
                    //strSQL = "SELECT DISTINCT MIN(RecordLocator) AS RecordLocator, TransID, COUNT(LineTotal) AS CntRec, SUM(LineTotal) AS LineTotal, SUM(FarePerPax) AS FarePerPax, SUM(DetailCollectedAmt) AS DetailCollectedAmt, MIN(DepartureDate) AS DepartureDate, MAX(NextDueDate) AS NextDueDate, SUM(LineFee) AS ServiceCharge, SUM(LineTax) AS ServiceTax, SUM(LinePaxFee) AS ServicePaxFee, Sum(LineOth) AS OtherTax, Sum(LineProcess) AS ProcessFee, Sum(LineSSR) AS SSRFee, Sum(LineSeat) AS SeatFee, Sum(LineNameChange) AS NameChangeFee, Sum(LineInfant) AS InfantFee, SUM(LineDisc) AS ServiceDiscount, SUM(LinePromoDisc) AS ServicePromoDiscount, PaxAdult, PaxChild, (PaxAdult + PaxChild) TotalPax, MIN(FareSellKey) FareSellKey, MIN(OverridedFareSellKey) OverridedFareSellKey, SellKey, MIN(SeqNo) AS SeqNo,  MAX(PayDueAmount1) AS PayDueAmount1, MAX(PayDueDate1) AS PayDueDate1, MAX(PayDueAmount2) AS PayDueAmount2, MAX(PayDueDate2) AS PayDueDate2, MAX(PayDueAmount3) AS PayDueAmount3, MAX(PayDueDate3) AS PayDueDate3, MAX(ForfeitedAmount) AS ForfeitedAmount ";
                    //strSQL += "FROM BK_TRANSDTL WHERE TransID = '" + transID + "' AND TransVoid=" + TransVoid;
                    strSQL = "SELECT DISTINCT MIN(RecordLocator) AS RecordLocator, TransID, COUNT(LineTotal) AS CntRec, SUM(LineTotal) AS LineTotal, SUM(FarePerPax) AS FarePerPax, SUM(DetailCollectedAmt) AS DetailCollectedAmt, MIN(DepartureDate) AS DepartureDate, MAX(NextDueDate) AS NextDueDate, SUM(LineFee) AS ServiceCharge, SUM(LineTax) AS ServiceTax, SUM(LinePaxFee) AS ServicePaxFee, Sum(LineOth) AS OtherTax, Sum(LineProcess) AS ProcessFee, Sum(LineSSR) AS SSRFee, Sum(LineSeat) AS SeatFee, Sum(LineNameChange) AS NameChangeFee, Sum(LineInfant) AS InfantFee, Sum(LineInsureFee) AS InsureFee, SUM(LineDisc) AS ServiceDiscount, SUM(LinePromoDisc) AS ServicePromoDiscount, PaxAdult, PaxChild, (PaxAdult + PaxChild) TotalPax, MIN(FareSellKey) FareSellKey, MIN(OverridedFareSellKey) OverridedFareSellKey, SellKey, MIN(SeqNo) AS SeqNo,  MAX(PayDueAmount1) AS PayDueAmount1, MAX(PayDueDate1) AS PayDueDate1, MAX(PayDueAmount2) AS PayDueAmount2, MAX(PayDueDate2) AS PayDueDate2, MAX(PayDueAmount3) AS PayDueAmount3, MAX(PayDueDate3) AS PayDueDate3, MAX(ForfeitedAmount) AS ForfeitedAmount ";//edited by romy for insure
                    strSQL += "FROM BK_TRANSDTL WHERE " + filterPNR + " TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, transID) + "' " + strFilter;
                    strSQL += "GROUP BY TransID, PaxAdult, PaxChild, SellKey ORDER BY TransID, DepartureDate, SeqNo"; //amended by diana 20140127 - change PaxAdult to DepartureDate
                }

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                        if ((int)drRow["PaxChild"] > 0)
                        {
                            objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2;

                        }
                        else
                        {
                            objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]);

                        }
                        objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];
                        // added by diana 20130920
                        objBK_TRANSDTL_Info.NextDueDate = (DateTime)drRow["NextDueDate"];
                        // end added by diana 20130920
                        //added by ketee, 20121016
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.TotalPax = (int)drRow["TotalPax"];
                        objBK_TRANSDTL_Info.LineFee = (decimal)drRow["ServiceCharge"];
                        objBK_TRANSDTL_Info.SellKey = (string)drRow["SellKey"];
                        objBK_TRANSDTL_Info.LineTax = (decimal)drRow["ServiceTax"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["ServicePaxFee"];
                        objBK_TRANSDTL_Info.LineOth = (decimal)drRow["OtherTax"];
                        objBK_TRANSDTL_Info.LineProcess = (decimal)drRow["ProcessFee"];
                        objBK_TRANSDTL_Info.LineSSR = (decimal)drRow["SSRFee"];
                        objBK_TRANSDTL_Info.LineInfant = (decimal)drRow["InfantFee"];
                        objBK_TRANSDTL_Info.LineSeat = (decimal)drRow["SeatFee"];
                        objBK_TRANSDTL_Info.LineNameChange = (decimal)drRow["NameChangeFee"];
                        objBK_TRANSDTL_Info.LineDisc = (decimal)drRow["ServiceDiscount"];
                        objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["ServicePromoDiscount"];
                        objBK_TRANSDTL_Info.ForfeitedAmount = (decimal)drRow["ForfeitedAmount"];
                        //objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                        if (drRow["FareSellKey"] != DBNull.Value) objBK_TRANSDTL_Info.FareSellKey = (string)drRow["FareSellKey"];
                        if (drRow["OverridedFareSellKey"] != DBNull.Value) objBK_TRANSDTL_Info.OverridedFareSellKey = (string)drRow["OverridedFareSellKey"];
                        //added by ketee, 20170122
                        //remark by Tyas to avoid duplicate PNR
                        //objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];

                        objBK_TRANSDTL_Info.CntRec = (int)drRow["CntRec"];
                        objBK_TRANSDTL_Info.PayDueAmount1 = (decimal)drRow["PayDueAmount1"];
                        if (DateTime.TryParse(drRow["PayDueDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate2 = (DateTime)drRow["PayDueDate2"];
                        objBK_TRANSDTL_Info.PayDueAmount2 = (decimal)drRow["PayDueAmount2"];
                        if (DateTime.TryParse(drRow["PayDueDate3"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate3 = (DateTime)drRow["PayDueDate3"];
                        objBK_TRANSDTL_Info.PayDueAmount3 = (decimal)drRow["PayDueAmount3"];
                        if (DateTime.TryParse(drRow["PayDueDate1"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate1 = (DateTime)drRow["PayDueDate1"];
                        if (DateTime.TryParse(drRow["PayDueDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate2 = (DateTime)drRow["PayDueDate2"];
                        if (DateTime.TryParse(drRow["PayDueDate3"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate3 = (DateTime)drRow["PayDueDate3"];

                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<BookingTransactionDetail> GetAllBK_TRANSDTLCombinePNROrderByPNR(string transID, int TransVoid = -1, string filterPNR = "", bool ReturnOnly = false, bool devide = false)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            String strSQL = string.Empty;

            try
            {
                string strFilter = "";
                /// need to be checked
                //if (TransVoid != -1)
                //    strFilter = " AND TransVoid = '" + TransVoid + "'";

                if (ReturnOnly == true) //if return only, take second seqNo only
                {
                    if (TransVoid != -1)
                        strFilter = " AND TransVoid IN(0,1)";
                    //amended by diana 20140110 - throw DISTINCT for RecordLocator, do not group by NextDueDate
                    strSQL = "SELECT TOP 1 RecordLocator, Origin, TransID, 1 AS CntRec, LineTotal, DetailCollectedAmt, DepartureDate, NextDueDate, LineFee AS ServiceCharge, LineTax AS ServiceTax, LinePaxFee AS ServicePaxFee, LineOth AS OtherTax, LineProcess AS ProcessFee, LineSSR AS SSRFee,  LineInfant AS InfantFee, LineSeat AS SeatFee, LineNameChange AS NameChangeFee, LineDisc AS ServiceDiscount, LinePromoDisc AS ServicePromoDiscount, PaxAdult, PaxChild, (PaxAdult  + PaxChild) TotalPax, FareSellKey, OverridedFareSellKey, SellKey, SeqNo ";
                    //strSQL += "FROM BK_TRANSDTL WHERE TransID = '" + transID + "' AND TransVoid=" + TransVoid;
                    strSQL += "FROM BK_TRANSDTL WHERE " + filterPNR + " TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, transID) + "' AND LEN(RecordLocator) >= 6 " + strFilter;
                    strSQL += "ORDER BY TransID, DepartureDate DESC, SeqNo DESC"; //amended by diana 20140127 - change PaxAdult to DepartureDate
                }
                else
                {
                    if (TransVoid != -1)
                        strFilter = " AND TransVoid IN(0,1)";
                    //amended by diana 20140110 - throw DISTINCT for RecordLocator, do not group by NextDueDate
                    //Change by Tays to avoid duplicate RecordLocator
                    //strSQL = "SELECT DISTINCT RecordLocator, Origin, TransID, COUNT(LineTotal) AS CntRec, SUM(LineTotal) AS LineTotal, SUM(DetailCollectedAmt) AS DetailCollectedAmt, MIN(DepartureDate) AS DepartureDate, MAX(NextDueDate) AS NextDueDate, SUM(LineFee) AS ServiceCharge, SUM(LineTax) AS ServiceTax, Sum(LineOth) AS OtherTax, Sum(LineProcess) AS ProcessFee, Sum(LineSSR) AS SSRFee, Sum(LineSeat) AS SeatFee, Sum(LineInfant) AS InfantFee, SUM(LineDisc) AS ServiceDiscount, SUM(LinePromoDisc) AS ServicePromoDiscount, PaxAdult, PaxChild, SellKey, MIN(SeqNo) AS SeqNo ";
                    strSQL = "SELECT DISTINCT MIN(RecordLocator) AS RecordLocator, TransID, COUNT(LineTotal) AS CntRec, SUM(LineTotal) AS LineTotal, SUM(DetailCollectedAmt) AS DetailCollectedAmt, MIN(DepartureDate) AS DepartureDate, MAX(NextDueDate) AS NextDueDate, SUM(LineFee) AS ServiceCharge, SUM(LineTax) AS ServiceTax, SUM(LinePaxFee) AS ServicePaxFee, Sum(LineOth) AS OtherTax, Sum(LineProcess) AS ProcessFee, Sum(LineSSR) AS SSRFee, Sum(LineSeat) AS SeatFee, Sum(LineNameChange) AS NameChangeFee, Sum(LineInfant) AS InfantFee, SUM(LineDisc) AS ServiceDiscount, SUM(LinePromoDisc) AS ServicePromoDiscount, PaxAdult, PaxChild, (PaxAdult + PaxChild) TotalPax, MIN(FareSellKey) FareSellKey, MIN(OverridedFareSellKey) OverridedFareSellKey, SellKey, MIN(SeqNo) AS SeqNo ";
                    //strSQL += "FROM BK_TRANSDTL WHERE TransID = '" + transID + "' AND TransVoid=" + TransVoid;
                    strSQL += "FROM BK_TRANSDTL WHERE " + filterPNR + " TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, transID) + "' AND LEN(RecordLocator) >= 6 " + strFilter;
                    strSQL += "GROUP BY TransID, PaxAdult, PaxChild, SellKey ORDER BY RecordLocator"; //amended by diana 20140127 - change PaxAdult to DepartureDate
                }

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                        objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];
                        // added by diana 20130920
                        objBK_TRANSDTL_Info.NextDueDate = (DateTime)drRow["NextDueDate"];
                        // end added by diana 20130920
                        //added by ketee, 20121016
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.TotalPax = (int)drRow["TotalPax"];
                        objBK_TRANSDTL_Info.LineFee = (decimal)drRow["ServiceCharge"];
                        objBK_TRANSDTL_Info.SellKey = (string)drRow["SellKey"];
                        objBK_TRANSDTL_Info.LineTax = (decimal)drRow["ServiceTax"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["ServicePaxFee"];
                        objBK_TRANSDTL_Info.LineOth = (decimal)drRow["OtherTax"];
                        objBK_TRANSDTL_Info.LineProcess = (decimal)drRow["ProcessFee"];
                        objBK_TRANSDTL_Info.LineSSR = (decimal)drRow["SSRFee"];
                        objBK_TRANSDTL_Info.LineInfant = (decimal)drRow["InfantFee"];
                        objBK_TRANSDTL_Info.LineSeat = (decimal)drRow["SeatFee"];
                        objBK_TRANSDTL_Info.LineNameChange = (decimal)drRow["NameChangeFee"];
                        objBK_TRANSDTL_Info.LineDisc = (decimal)drRow["ServiceDiscount"];
                        objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["ServicePromoDiscount"];
                        //objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                        if (drRow["FareSellKey"] != DBNull.Value) objBK_TRANSDTL_Info.FareSellKey = (string)drRow["FareSellKey"];
                        if (drRow["OverridedFareSellKey"] != DBNull.Value) objBK_TRANSDTL_Info.OverridedFareSellKey = (string)drRow["OverridedFareSellKey"];
                        //added by ketee, 20170122
                        //remark by Tyas to avoid duplicate PNR
                        //objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];

                        objBK_TRANSDTL_Info.CntRec = (int)drRow["CntRec"];//added by diana 20140207, for counting records for each PNR
                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<BookingTransactionDetail> GetAllBK_TRANSDTLCombinePNRDevide(string transID, bool devide = false, int TransVoid = -1)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                string strFilter = "";
                /// need to be checked
                //if (TransVoid != -1)
                //    strFilter = " AND TransVoid = '" + TransVoid + "'";

                if (devide == true)
                {
                    if (TransVoid != -1)
                        strFilter = " AND TransVoid IN(0,1)";
                    //amended by diana 20140110 - throw DISTINCT for RecordLocator, do not group by NextDueDate
                    //Change by Tays to avoid duplicate RecordLocator
                    //strSQL = "SELECT DISTINCT RecordLocator, Origin, TransID, COUNT(LineTotal) AS CntRec, SUM(LineTotal) AS LineTotal, SUM(DetailCollectedAmt) AS DetailCollectedAmt, MIN(DepartureDate) AS DepartureDate, MAX(NextDueDate) AS NextDueDate, SUM(LineFee) AS ServiceCharge, SUM(LineTax) AS ServiceTax, Sum(LineOth) AS OtherTax, Sum(LineProcess) AS ProcessFee, Sum(LineSSR) AS SSRFee, Sum(LineSeat) AS SeatFee, Sum(LineInfant) AS InfantFee, SUM(LineDisc) AS ServiceDiscount, SUM(LinePromoDisc) AS ServicePromoDiscount, PaxAdult, PaxChild, SellKey, MIN(SeqNo) AS SeqNo ";
                    strSQL = "SELECT DISTINCT RecordLocator, MIN(Origin) AS Origin, TransID, COUNT(LineTotal) AS CntRec, SUM(LineTotal) AS LineTotal, SUM(DetailCollectedAmt) AS DetailCollectedAmt, MIN(DepartureDate) AS DepartureDate, MAX(NextDueDate) AS NextDueDate, SUM(LineFee) AS ServiceCharge, SUM(LineTax) AS ServiceTax, SUM(LinePaxFee) AS ServicePaxFee, Sum(LineOth) AS OtherTax, Sum(LineProcess) AS ProcessFee, Sum(LineSSR) AS SSRFee, Sum(LineSeat) AS SeatFee, Sum(LineNameChange) AS NameChangeFee, Sum(LineInfant) AS InfantFee, SUM(LineDisc) AS ServiceDiscount, SUM(LinePromoDisc) AS ServicePromoDiscount, PaxAdult, PaxChild, SellKey, MIN(SeqNo) AS SeqNo ";
                    strSQL += ", MAX(PayDueAmount1) AS PayDueAmount1, MAX(PayDueDate1) AS PayDueDate1, MAX(PayDueAmount2) AS PayDueAmount2, MAX(PayDueDate2) AS PayDueDate2, MAX(PayDueAmount3) AS PayDueAmount3, MAX(PayDueDate3) AS PayDueDate3 ";
                    //strSQL += "FROM BK_TRANSDTL WHERE TransID = '" + transID + "' AND TransVoid=" + TransVoid;
                    strSQL += "FROM BK_TRANSDTL WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, transID) + "' " + strFilter;
                    strSQL += "GROUP BY RecordLocator, TransID, PaxAdult, PaxChild, SellKey ORDER BY TransID, DepartureDate, SeqNo"; //amended by diana 20140127 - change PaxAdult to DepartureDate
                }
                else
                {
                    if (TransVoid != -1)
                        strFilter = " AND TransVoid IN(0,1)";
                    //amended by diana 20140110 - throw DISTINCT for RecordLocator, do not group by NextDueDate
                    //Change by Tays to avoid duplicate RecordLocator
                    //strSQL = "SELECT DISTINCT RecordLocator, Origin, TransID, COUNT(LineTotal) AS CntRec, SUM(LineTotal) AS LineTotal, SUM(DetailCollectedAmt) AS DetailCollectedAmt, MIN(DepartureDate) AS DepartureDate, MAX(NextDueDate) AS NextDueDate, SUM(LineFee) AS ServiceCharge, SUM(LineTax) AS ServiceTax, Sum(LineOth) AS OtherTax, Sum(LineProcess) AS ProcessFee, Sum(LineSSR) AS SSRFee, Sum(LineSeat) AS SeatFee, Sum(LineInfant) AS InfantFee, SUM(LineDisc) AS ServiceDiscount, SUM(LinePromoDisc) AS ServicePromoDiscount, PaxAdult, PaxChild, SellKey, MIN(SeqNo) AS SeqNo ";
                    strSQL = "SELECT DISTINCT MIN(RecordLocator) AS RecordLocator, MIN(Origin) AS Origin, TransID, COUNT(LineTotal) AS CntRec, SUM(LineTotal) AS LineTotal, SUM(DetailCollectedAmt) AS DetailCollectedAmt, MIN(DepartureDate) AS DepartureDate, MAX(NextDueDate) AS NextDueDate, SUM(LineFee) AS ServiceCharge, SUM(LineTax) AS ServiceTax, SUM(LinePaxFee) AS ServicePaxFee, Sum(LineOth) AS OtherTax, Sum(LineProcess) AS ProcessFee, Sum(LineSSR) AS SSRFee, Sum(LineSeat) AS SeatFee, Sum(LineNameChange) AS NameChangeFee, Sum(LineInfant) AS InfantFee, SUM(LineDisc) AS ServiceDiscount, SUM(LinePromoDisc) AS ServicePromoDiscount, PaxAdult, PaxChild, SellKey, MIN(SeqNo) AS SeqNo ";
                    //strSQL += "FROM BK_TRANSDTL WHERE TransID = '" + transID + "' AND TransVoid=" + TransVoid;
                    strSQL += ", MAX(PayDueAmount1) AS PayDueAmount1, MAX(PayDueDate1) AS PayDueDate1, MAX(PayDueAmount2) AS PayDueAmount2, MAX(PayDueDate2) AS PayDueDate2, MAX(PayDueAmount3) AS PayDueAmount3, MAX(PayDueDate3) AS PayDueDate3 ";
                    strSQL += "FROM BK_TRANSDTL WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, transID) + "' " + strFilter;
                    strSQL += "GROUP BY TransID, PaxAdult, PaxChild, SellKey ORDER BY TransID, DepartureDate, SeqNo"; //amended by diana 20140127 - change PaxAdult to DepartureDate
                }

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                        objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];

                        objBK_TRANSDTL_Info.PayDueAmount1 = (decimal)drRow["PayDueAmount1"];
                        objBK_TRANSDTL_Info.PayDueAmount2 = (decimal)drRow["PayDueAmount2"];
                        objBK_TRANSDTL_Info.PayDueAmount3 = (decimal)drRow["PayDueAmount3"];
                        if (DateTime.TryParse(drRow["PayDueDate1"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate1 = (DateTime)drRow["PayDueDate1"];
                        if (DateTime.TryParse(drRow["PayDueDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate2 = (DateTime)drRow["PayDueDate2"];
                        if (DateTime.TryParse(drRow["PayDueDate3"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate3 = (DateTime)drRow["PayDueDate3"];

                        // added by diana 20130920
                        objBK_TRANSDTL_Info.NextDueDate = (DateTime)drRow["NextDueDate"];
                        // end added by diana 20130920
                        //added by ketee, 20121016
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.LineFee = (decimal)drRow["ServiceCharge"];
                        objBK_TRANSDTL_Info.SellKey = (string)drRow["SellKey"];
                        objBK_TRANSDTL_Info.LineTax = (decimal)drRow["ServiceTax"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["ServicePaxFee"];
                        objBK_TRANSDTL_Info.LineOth = (decimal)drRow["OtherTax"];
                        objBK_TRANSDTL_Info.LineProcess = (decimal)drRow["ProcessFee"];
                        objBK_TRANSDTL_Info.LineSSR = (decimal)drRow["SSRFee"];
                        objBK_TRANSDTL_Info.LineInfant = (decimal)drRow["InfantFee"];
                        objBK_TRANSDTL_Info.LineSeat = (decimal)drRow["SeatFee"];
                        objBK_TRANSDTL_Info.LineNameChange = (decimal)drRow["NameChangeFee"];
                        objBK_TRANSDTL_Info.LineDisc = (decimal)drRow["ServiceDiscount"];
                        objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["ServicePromoDiscount"];

                        //added by ketee, 20170122
                        //remark by Tyas to avoid duplicate PNR
                        objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];

                        objBK_TRANSDTL_Info.CntRec = (int)drRow["CntRec"];//added by diana 20140207, for counting records for each PNR
                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public BookingTransactionDetail GetSingleBK_TRANSDTLCombinePNR(string transID, string PNR)
        {
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            try
            {
                objListBK_TRANSDTL_Info = GetAllBK_TRANSDTLCombinePNR(transID);
                if (objListBK_TRANSDTL_Info != null)
                {
                    int iIndex = objListBK_TRANSDTL_Info.FindIndex(item => item.RecordLocator == PNR);
                    if (iIndex >= 0)
                        return objListBK_TRANSDTL_Info[iIndex];
                    else
                        return null;
                }
                else
                    return null;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<BookingTransactionDetail> GetAllBK_TRANSDTLFlight(string pTransID, int TransVoid = 0)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                /// need to be checked
                strSQL = "SELECT RecordLocator,CarrierCode, FlightNo, DepartureDate, Origin, Destination,Currency,ArrivalDate,Transit,DepartureDate2,ArrivalDate2,FlightDura,FlightDura2,sum(PaxChild) as PaxChild,sum(PaxAdult) as PaxAdult,sum(FarePerPax) as FarePerPax,SUM(LineTotal) as LnTotal, SUM(LineTax) as LnTax, SUM(LinePaxFee) as LnPaxFee, SUM(LineFee) as LnFee, SUM(LineOth) as LnOth, SUM(LineProcess) as LnProcess, SUM(LineSSR) as LnSSR, SUM(LineSeat) as LnSeat, SUM(LineNameChange) as LnNameChange, SUM(LineInfant) as LnInfant, SUM(LineDisc) AS LnDisc, SUM(LinePromoDisc) AS LnPromoDisc FROM BK_TRANSDTL WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pTransID) + "' AND TransVoid IN(0,1) GROUP BY RecordLocator,CarrierCode, FlightNo, DepartureDate, Origin, Destination, ArrivalDate,Currency,Transit,DepartureDate2,ArrivalDate2, FlightDura, FlightDura2 order by DepartureDate";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                        objBK_TRANSDTL_Info.FlightNo = (string)drRow["FlightNo"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LnTotal"];
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["LnPaxFee"];

                        /// amended by diana 20130829
                        /// subtracted total by fare fee

                        //objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["LnTotal"] - (decimal)drRow["LnFee"] - (decimal)drRow["LnTax"] - (decimal)drRow["LnOth"];
                        objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];

                        if ((int)drRow["PaxChild"] > 0)
                        {
                            objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2;
                            objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LnTotal"] - (decimal)drRow["LnPaxFee"] - ((decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2);
                        }
                        else
                        {
                            objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]);
                            objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LnTotal"] - (decimal)drRow["LnPaxFee"] - ((decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]));
                        }

                        //objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LnFee"];
                        if (DateTime.TryParse(drRow["DepartureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepartureDate"];
                        objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                        objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                        if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];
                        objBK_TRANSDTL_Info.Transit = drRow["Transit"].ToString().Trim();
                        if (DateTime.TryParse(drRow["DepartureDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate2 = (DateTime)drRow["DepartureDate2"];
                        if (DateTime.TryParse(drRow["ArrivalDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate2 = (DateTime)drRow["ArrivalDate2"];
                        objBK_TRANSDTL_Info.FlightDura = (decimal)drRow["FlightDura"];
                        objBK_TRANSDTL_Info.FlightDura2 = (decimal)drRow["FlightDura2"];
                        objBK_TRANSDTL_Info.FlightDuration = objBK_TRANSDTL_Info.FlightDura + objBK_TRANSDTL_Info.FlightDura2; //(decimal)(objBK_TRANSDTL_Info.ArrivalDate - objBK_TRANSDTL_Info.DepatureDate).TotalHours;

                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }
        public List<BookingTransactionDetail> GetAllBK_TRANSDTLFlightGrp(string pTransID, int TransVoid = 0)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                /// need to be checked
                strSQL = "SELECT MIN(RecordLocator) AS RecordLocator, MIN(CarrierCode) AS CarrierCode, MIN(FlightNo) AS FlightNo, MIN(DepartureDate) AS DepartureDate, MIN(Origin) AS Origin, MIN(Destination) AS Destination, MIN(Currency) AS Currency, MIN(ArrivalDate) AS ArrivalDate, MIN(Transit) AS Transit, MIN(DepartureDate2) AS DepartureDate2, MIN(ArrivalDate2) AS ArrivalDate2, MAX(FlightDura) AS FlightDura, MAX(FlightDura2) AS FlightDura2, MAX(FareSellKey) AS FareSellKey, SellKey, MAX(PaxChild) as PaxChild, MAX(PaxAdult) as PaxAdult,sum(FarePerPax) as FarePerPax,SUM(LineTotal) as LnTotal, SUM(LineTax) as LnTax, SUM(LinePaxFee) as LnPaxFee, SUM(LineFee) as LnFee, SUM(LineOth) as LnOth, SUM(LineProcess) as LnProcess, SUM(LineSSR) as LnSSR, SUM(LineSeat) as LnSeat, SUM(LineNameChange) as LnNameChange, SUM(LineInfant) as LnInfant, SUM(LineDisc) AS LnDisc, SUM(LinePromoDisc) AS LnPromoDisc, MAX(PayDueAmount1) AS PayDueAmount1, MAX(PayDueDate1) AS PayDueDate1, MAX(PayDueAmount2) AS PayDueAmount2, MAX(PayDueDate2) AS PayDueDate2, MAX(PayDueAmount3) AS PayDueAmount3, MAX(PayDueDate3) AS PayDueDate3, MAX(ForfeitedAmount) AS ForfeitedAmount FROM BK_TRANSDTL WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pTransID) + "' AND TransVoid IN(0,1) GROUP BY SellKey order by DepartureDate";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                        objBK_TRANSDTL_Info.FlightNo = (string)drRow["FlightNo"];
                        objBK_TRANSDTL_Info.Signature = (string)drRow["SellKey"];
                        objBK_TRANSDTL_Info.SellKey = (string)drRow["FareSellKey"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LnTotal"];
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["LnPaxFee"];
                        objBK_TRANSDTL_Info.LineProcess = (decimal)drRow["LnProcess"];
                        objBK_TRANSDTL_Info.ForfeitedAmount = (decimal)drRow["ForfeitedAmount"];
                        /// amended by diana 20130829
                        /// subtracted total by fare fee

                        //objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["LnTotal"] - (decimal)drRow["LnFee"] - (decimal)drRow["LnTax"] - (decimal)drRow["LnOth"];
                        objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];

                        if ((int)drRow["PaxChild"] > 0)
                        {
                            objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2;
                            objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LnTotal"] - (decimal)drRow["LnPaxFee"] - ((decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2);
                        }
                        else
                        {
                            objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]);
                            objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LnTotal"] - (decimal)drRow["LnPaxFee"] - ((decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]));
                        }

                        objBK_TRANSDTL_Info.LineFee = (decimal)drRow["LnFee"];
                        if (DateTime.TryParse(drRow["DepartureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepartureDate"];
                        objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                        objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                        if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];
                        objBK_TRANSDTL_Info.Transit = drRow["Transit"].ToString().Trim();
                        if (DateTime.TryParse(drRow["DepartureDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate2 = (DateTime)drRow["DepartureDate2"];
                        if (DateTime.TryParse(drRow["ArrivalDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate2 = (DateTime)drRow["ArrivalDate2"];

                        objBK_TRANSDTL_Info.FlightDura = (decimal)drRow["FlightDura"];
                        objBK_TRANSDTL_Info.FlightDura2 = (decimal)drRow["FlightDura2"];

                        objBK_TRANSDTL_Info.PayDueAmount1 = (decimal)drRow["PayDueAmount1"];
                        objBK_TRANSDTL_Info.PayDueAmount2 = (decimal)drRow["PayDueAmount2"];
                        objBK_TRANSDTL_Info.PayDueAmount3 = (decimal)drRow["PayDueAmount3"];
                        if (DateTime.TryParse(drRow["PayDueDate1"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate1 = (DateTime)drRow["PayDueDate1"];
                        if (DateTime.TryParse(drRow["PayDueDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate2 = (DateTime)drRow["PayDueDate2"];
                        if (DateTime.TryParse(drRow["PayDueDate3"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate3 = (DateTime)drRow["PayDueDate3"];

                        objBK_TRANSDTL_Info.FlightDuration = objBK_TRANSDTL_Info.FlightDura + objBK_TRANSDTL_Info.FlightDura2; // (decimal)(objBK_TRANSDTL_Info.ArrivalDate - objBK_TRANSDTL_Info.DepatureDate).TotalHours;

                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<BookingTransactionDetail> GetAllBK_TRANSDTLFlightGrpNoSellKey(string pTransID, int TransVoid = 0)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                /// need to be checked
                strSQL = "SELECT MIN(RecordLocator) AS RecordLocator, MIN(CarrierCode) AS CarrierCode, MIN(FlightNo) AS FlightNo, MIN(DepartureDate) AS DepartureDate, MIN(Origin) AS Origin, MIN(Destination) AS Destination, MIN(Currency) AS Currency, MIN(ArrivalDate) AS ArrivalDate, MIN(Transit) AS Transit, MIN(DepartureDate2) AS DepartureDate2, MIN(ArrivalDate2) AS ArrivalDate2, MAX(FlightDura) AS FlightDura, MAX(FlightDura2) AS FlightDura2, MAX(FareSellKey) AS FareSellKey, MAX(PaxChild) as PaxChild, MAX(PaxAdult) as PaxAdult,sum(FarePerPax) as FarePerPax,SUM(LineTotal) as LnTotal,SUM(LineTax) as LnTax,SUM(LinePaxFee) as LnPaxFee,SUM(LineFee) as LnFee, SUM(LineOth) as LnOth, SUM(LineProcess) as LnProcess, SUM(LineSSR) as LnSSR, SUM(LineSeat) as LnSeat, SUM(LineNameChange) as LnNameChange, (LineInfant) as LnInfant, SUM(LineDisc) AS LnDisc, SUM(LinePromoDisc) AS LnPromoDisc FROM BK_TRANSDTL WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pTransID) + "' AND TransVoid IN(0,1) order by DepartureDate";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                        objBK_TRANSDTL_Info.FlightNo = (string)drRow["FlightNo"];
                        //objBK_TRANSDTL_Info.Signature = (string)drRow["SellKey"];
                        //objBK_TRANSDTL_Info.SellKey = (string)drRow["FareSellKey"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LnTotal"];
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["LnPaxFee"];

                        /// amended by diana 20130829
                        /// subtracted total by fare fee

                        //objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["LnTotal"] - (decimal)drRow["LnFee"] - (decimal)drRow["LnTax"] - (decimal)drRow["LnOth"];
                        objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];

                        if ((int)drRow["PaxChild"] > 0)
                        {
                            objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2;
                            objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LnTotal"] - (decimal)drRow["LnPaxFee"] - ((decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2);
                        }
                        else
                        {
                            objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]);
                            objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LnTotal"] - (decimal)drRow["LnPaxFee"] - ((decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]));
                        }

                        objBK_TRANSDTL_Info.LineFee = (decimal)drRow["LnFee"];
                        if (DateTime.TryParse(drRow["DepartureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepartureDate"];
                        objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                        objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                        if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];
                        objBK_TRANSDTL_Info.Transit = drRow["Transit"].ToString().Trim();
                        if (DateTime.TryParse(drRow["DepartureDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate2 = (DateTime)drRow["DepartureDate2"];
                        if (DateTime.TryParse(drRow["ArrivalDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate2 = (DateTime)drRow["ArrivalDate2"];

                        objBK_TRANSDTL_Info.FlightDura = (decimal)drRow["FlightDura"];
                        objBK_TRANSDTL_Info.FlightDura2 = (decimal)drRow["FlightDura2"];
                        objBK_TRANSDTL_Info.FlightDuration = objBK_TRANSDTL_Info.FlightDura + objBK_TRANSDTL_Info.FlightDura2; // (decimal)(objBK_TRANSDTL_Info.ArrivalDate - objBK_TRANSDTL_Info.DepatureDate).TotalHours;

                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public List<BookingTransactionDetail> GetAllBK_TRANSDTLFlightGrpNoSellKey1(string pTransID, int TransVoid = 0)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                /// need to be checked
                strSQL = "SELECT TOP 2 RecordLocator, CarrierCode, FlightNo, DepartureDate, Origin, Destination, Currency, ArrivalDate, Transit, DepartureDate2, ArrivalDate2, FlightDura, FlightDura2, FareSellKey, PaxChild, PaxAdult, FarePerPax, LineTotal as LnTotal, LineTax as LnTax, LinePaxFee as LnPaxFee, LinePaxFee as LnPaxFee, LineFee as LnFee, LineOth as LnOth, LineProcess as LnProcess, LineSSR as LnSSR, LineSeat as LnSeat, LineNameChange as LNNameChange, LineInfant as LnInfant, LineDisc AS LnDisc, LinePromoDisc AS LnPromoDisc FROM BK_TRANSDTL WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pTransID) + "' AND LEN(RecordLocator)>=6 order by SeqNo";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    var i = 0;
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();

                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];

                        if (i == 0 || (i == 1 && dt.Rows[i]["RecordLocator"].ToString() == dt.Rows[i - 1]["RecordLocator"].ToString()))
                        {
                            objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                            objBK_TRANSDTL_Info.FlightNo = (string)drRow["FlightNo"];
                            //objBK_TRANSDTL_Info.Signature = (string)drRow["SellKey"];
                            //objBK_TRANSDTL_Info.SellKey = (string)drRow["FareSellKey"];
                            objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LnTotal"];
                            objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["LnPaxFee"];
                            objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["LnPromoDisc"];
                            objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                            objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];

                            /// amended by diana 20130829
                            /// subtracted total by fare fee

                            //objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["LnTotal"] - (decimal)drRow["LnFee"] - (decimal)drRow["LnTax"] - (decimal)drRow["LnOth"];
                            objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];

                            if ((int)drRow["PaxChild"] > 0)
                            {
                                objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2;
                                objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LnTotal"] - (decimal)drRow["LnPaxFee"] - ((decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2);
                            }
                            else
                            {
                                objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]);
                                objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LnTotal"] - (decimal)drRow["LnPaxFee"] - ((decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]));
                            }

                            objBK_TRANSDTL_Info.LineFee = (decimal)drRow["LnFee"];
                            if (DateTime.TryParse(drRow["DepartureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepartureDate"];
                            objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                            objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                            if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];
                            objBK_TRANSDTL_Info.Transit = drRow["Transit"].ToString().Trim();
                            if (DateTime.TryParse(drRow["DepartureDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate2 = (DateTime)drRow["DepartureDate2"];
                            if (DateTime.TryParse(drRow["ArrivalDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate2 = (DateTime)drRow["ArrivalDate2"];

                            objBK_TRANSDTL_Info.FlightDura = (decimal)drRow["FlightDura"];
                            objBK_TRANSDTL_Info.FlightDura2 = (decimal)drRow["FlightDura2"];
                            objBK_TRANSDTL_Info.FlightDuration = objBK_TRANSDTL_Info.FlightDura + objBK_TRANSDTL_Info.FlightDura2; // (decimal)(objBK_TRANSDTL_Info.ArrivalDate - objBK_TRANSDTL_Info.DepatureDate).TotalHours;

                            objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                        }
                        i++;
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        /// <summary>
        /// get transdetail by PNR
        /// </summary>
        /// <param name="pTransID"></param>
        /// <param name="TransVoid"></param>
        /// <returns></returns>
        public List<BookingTransactionDetail> GetAllBK_TRANSDTLFlightByPNR(string PNR, int TransVoid = 0)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                /// need to be checked
                strSQL = "SELECT SellKey, RecordLocator,CarrierCode, FlightNo, DepartureDate, Origin, Destination,Currency,ArrivalDate,Transit,DepartureDate2,ArrivalDate2, FlightDura, FlightDura2, MAX(SeqNo) AS SeqNo, sum(PaxChild) as PaxChild,sum(PaxAdult) as PaxAdult,sum(FarePerPax) as FarePerPax,SUM(LineTotal) as LnTotal,SUM(LineTax) as LnTax,SUM(LinePaxFee) as LnPaxFee,SUM(LineFee) as LnFee, SUM(LineOth) as LnOth, SUM(LineProcess) as LnProcess, SUM(LineSSR) as LnSSR, SUM(LineSeat) as LnSeat, SUM(LineNameChange) as LnNameChange, SUM(LineInfant) as LnInfant, SUM(LineDisc) as LnDisc, SUM(LinePromoDisc) AS LnPromoDisc, MAX(PayDueAmount1) AS PayDueAmount1, MAX(PayDueDate1) AS PayDueDate1, MAX(PayDueAmount2) AS PayDueAmount2, MAX(PayDueDate2) AS PayDueDate2, MAX(PayDueAmount3) AS PayDueAmount3, MAX(PayDueDate3) AS PayDueDate3 FROM BK_TRANSDTL WHERE RecordLocator='" + PNR + "' AND TransVoid IN(0,1) GROUP BY SellKey, RecordLocator,CarrierCode, FlightNo, DepartureDate, Origin, Destination, ArrivalDate,Currency,Transit,DepartureDate2,ArrivalDate2, FlightDura, FlightDura2 order by DepartureDate";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                        objBK_TRANSDTL_Info.FlightNo = (string)drRow["FlightNo"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LnTotal"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["LnPaxFee"];

                        objBK_TRANSDTL_Info.SeqNo = (byte)drRow["SeqNo"];

                        ///added by diana 20140122 - get paxADT and paxCHD
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];

                        /// amended by diana 20130829
                        /// subtracted total by fare fee

                        //objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["LnTotal"] - (decimal)drRow["LnFee"] - (decimal)drRow["LnTax"] - (decimal)drRow["LnOth"];
                        objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];

                        if ((int)drRow["PaxChild"] > 0)
                        {
                            objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2;
                            objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LnTotal"] - (decimal)drRow["LnPaxFee"] - ((decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2);
                        }
                        else
                        {
                            objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]);
                            objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LnTotal"] - (decimal)drRow["LnPaxFee"] - ((decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]));
                        }

                        objBK_TRANSDTL_Info.Signature = (string)drRow["SellKey"];
                        if (DateTime.TryParse(drRow["DepartureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepartureDate"];
                        objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                        objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                        if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];
                        objBK_TRANSDTL_Info.Transit = drRow["Transit"].ToString().Trim();
                        if (DateTime.TryParse(drRow["DepartureDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate2 = (DateTime)drRow["DepartureDate2"];
                        if (DateTime.TryParse(drRow["ArrivalDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate2 = (DateTime)drRow["ArrivalDate2"];
                        objBK_TRANSDTL_Info.FlightDura = (decimal)drRow["FlightDura"];
                        objBK_TRANSDTL_Info.FlightDura2 = (decimal)drRow["FlightDura2"];

                        objBK_TRANSDTL_Info.PayDueAmount1 = (decimal)drRow["PayDueAmount1"];
                        objBK_TRANSDTL_Info.PayDueAmount2 = (decimal)drRow["PayDueAmount2"];
                        objBK_TRANSDTL_Info.PayDueAmount3 = (decimal)drRow["PayDueAmount3"];
                        if (DateTime.TryParse(drRow["PayDueDate1"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate1 = (DateTime)drRow["PayDueDate1"];
                        if (DateTime.TryParse(drRow["PayDueDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate2 = (DateTime)drRow["PayDueDate2"];
                        if (DateTime.TryParse(drRow["PayDueDate3"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate3 = (DateTime)drRow["PayDueDate3"];

                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        /// <summary>
        /// added by diana 20140121 - get flight details by PNR
        /// </summary>
        /// <param name="PNR"></param>
        /// <param name="TransVoid"></param>
        /// <returns></returns>
        public BookingTransactionDetail GetBK_TRANSDTLFlightByPNR(string PNR, int TransVoid = 0)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                /// need to be checked
                strSQL = "SELECT TransID, MIN(RecordLocator) AS RecordLocator, MIN(CarrierCode) AS CarrierCode, MIN(FlightNo) AS FlightNo, MIN(DepartureDate) AS DepartureDate, MIN(Origin) AS Origin, MIN(Destination) AS Destination, MIN(Currency) AS Currency, MIN(ArrivalDate) AS ArrivalDate, MIN(Transit) AS Transit, MIN(DepartureDate2) AS DepartureDate2, MIN(ArrivalDate2) AS ArrivalDate2, MAX(FlightDura) AS FlightDura, MAX(FlightDura2) AS FlightDura2, MAX(FareSellKey) AS FareSellKey, MIN(PaxChild) as PaxChild, MIN(PaxAdult) as PaxAdult,sum(FarePerPax) as FarePerPax,SUM(LineTotal) as LnTotal,SUM(LineTax) as LnTax,SUM(LinePaxFee) as LnPaxFee,SUM(LineFee) as LnFee, SUM(LineOth) as LnOth, SUM(LineProcess) as LnProcess, SUM(LineSSR) as LnSSR, SUM(LineSeat) as LnSeat, SUM(LineNameChange) as LnNameChange, SUM(LineInfant) as LnInfant, SUM(LineDisc) AS LnDisc, SUM(LinePromoDisc) AS LnPromoDisc, MAX(PayDueAmount1) AS PayDueAmount1, MAX(PayDueDate1) AS PayDueDate1, MAX(PayDueAmount2) AS PayDueAmount2, MAX(PayDueDate2) AS PayDueDate2, MAX(PayDueAmount3) AS PayDueAmount3, MAX(PayDueDate3) AS PayDueDate3 FROM BK_TRANSDTL WHERE RecordLocator='" + PNR + "' AND TransVoid IN(0,1) GROUP BY TransID order by DepartureDate";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];
                    objBK_TRANSDTL_Info = new BookingTransactionDetail();
                    objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                    objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                    objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                    objBK_TRANSDTL_Info.FlightNo = (string)drRow["FlightNo"];
                    objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepartureDate"];
                    objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];
                    objBK_TRANSDTL_Info.FlightDura = (decimal)drRow["FlightDura"];
                    objBK_TRANSDTL_Info.FlightDura2 = (decimal)drRow["FlightDura2"];
                    objBK_TRANSDTL_Info.FlightDuration = objBK_TRANSDTL_Info.FlightDura + objBK_TRANSDTL_Info.FlightDura2; // (Decimal)(objBK_TRANSDTL_Info.ArrivalDate - objBK_TRANSDTL_Info.DepatureDate).TotalHours;
                    objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];
                    objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                    objBK_TRANSDTL_Info.Transit = (string)drRow["Transit"];
                    objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                    objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                    objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                    objBK_TRANSDTL_Info.SellKey = (string)drRow["FareSellKey"];
                    objBK_TRANSDTL_Info.TotalPax = objBK_TRANSDTL_Info.PaxChild + objBK_TRANSDTL_Info.PaxAdult;
                    if (DateTime.TryParse(drRow["PayDueDate1"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate1 = (DateTime)drRow["PayDueDate1"];
                    objBK_TRANSDTL_Info.PayDueAmount1 = (decimal)drRow["PayDueAmount1"];
                    if (DateTime.TryParse(drRow["PayDueDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate2 = (DateTime)drRow["PayDueDate2"];
                    objBK_TRANSDTL_Info.PayDueAmount2 = (decimal)drRow["PayDueAmount2"];
                    if (DateTime.TryParse(drRow["PayDueDate3"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate3 = (DateTime)drRow["PayDueDate3"];
                    objBK_TRANSDTL_Info.PayDueAmount3 = (decimal)drRow["PayDueAmount3"];
                    return objBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }


        //added by ketee, 20161231
        public BookingTransactionDetail GetBK_TRANSDTLFlightBySellKey(string SellKey, int TransVoid = 0)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                /// need to be checked
                strSQL = "SELECT RecordLocator,CarrierCode, FlightNo, DepartureDate, Origin, Destination,Currency,ArrivalDate,Transit," +
                 " DepartureDate2,ArrivalDate2, FlightDura, FlightDura2, FareSellKey, sum(PaxChild) as PaxChild,sum(PaxAdult) as PaxAdult,sum(FarePerPax) as FarePerPax," +
                 " SUM(LineTotal) as LnTotal,SUM(LineTax) as LnTax,SUM(LinePaxFee) as LnPaxFee,SUM(LineFee) as LnFee,SUM(LineOth) as LnOth, SUM(LineProcess) as LnProcess, SUM(LineSSR) as LnSSR, " +
                 " SUM(LineSeat) as LnSeat, SUM(LineNameChange) as LnNameChange, SUM(LineInfant) as LnInfant, SUM(LineDisc) AS LnDisc, SUM(LinePromoDisc) AS LnPromoDisc FROM BK_TRANSDTL WHERE SellKey='" + SellKey + "' AND TransVoid IN(0,1) GROUP BY RecordLocator,CarrierCode, FlightNo, DepartureDate, Origin, Destination, ArrivalDate,Currency,Transit,DepartureDate2,ArrivalDate2, FlightDura, FlightDura2, FareSellKey order by DepartureDate";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];
                    objBK_TRANSDTL_Info = new BookingTransactionDetail();
                    objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                    objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                    objBK_TRANSDTL_Info.FlightNo = (string)drRow["FlightNo"];
                    objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepartureDate"];
                    objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];
                    objBK_TRANSDTL_Info.FlightDura = (decimal)drRow["FlightDura"];
                    objBK_TRANSDTL_Info.FlightDura2 = (decimal)drRow["FlightDura2"];
                    objBK_TRANSDTL_Info.FlightDuration = objBK_TRANSDTL_Info.FlightDura + objBK_TRANSDTL_Info.FlightDura2; // (Decimal)(objBK_TRANSDTL_Info.ArrivalDate - objBK_TRANSDTL_Info.DepatureDate).TotalHours;
                    objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];
                    objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                    objBK_TRANSDTL_Info.Transit = (string)drRow["Transit"];
                    objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                    objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                    objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                    objBK_TRANSDTL_Info.SellKey = (string)drRow["FareSellKey"];
                    objBK_TRANSDTL_Info.TotalPax = objBK_TRANSDTL_Info.PaxChild + objBK_TRANSDTL_Info.PaxAdult;
                    return objBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }

        }



        public bool CancelTransactionByPNR(string TransID, string PNR, string UpdatedBy)
        {
            string errMessage = "";
            BookingTransactionMain headerData = new BookingTransactionMain();
            List<BookingTransactionDetail> detailDatas = new List<BookingTransactionDetail>();
            List<BookingTransactionDetail> listDetailDatas = new List<BookingTransactionDetail>();
            BookingTransactionDetail detailInfo = new BookingTransactionDetail();
            List<BookingTransTender> paymentData = new List<BookingTransTender>();
            ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");
            try
            {
                detailDatas = BookingDetailFilter(TransID);
                foreach (BookingTransactionDetail detail in detailDatas)
                {
                    if (detail.RecordLocator == PNR)
                    {
                        string signature = apiBooking.AgentLogon();
                        //absNavitaire.SellSegment(detail.RecordLocator, signature, ref errMessage); //cancel journey to api
                        detail.LastSyncBy = UpdatedBy;
                        detail.SyncLastUpd = DateTime.Now;
                        detail.TransVoid = 1;
                        if (detail.RecordLocator.Trim().Length >= 6)
                        {
                            apiBooking.CancelJourney(detail.RecordLocator, -detail.CollectedAmount, detail.Currency, signature, ref errMessage); //cancel journey to api
                            if (errMessage == "")
                            {
                                log.Warning(this, "Record void and CancelJourney: TransID:" + detail.TransID + " RecordLocator:" + detail.RecordLocator + " SeqNo:" + detail.SeqNo);
                            }
                            else
                            {
                                log.Warning(this, errMessage + "; TransID:" + detail.TransID + " RecordLocator:" + detail.RecordLocator + " SeqNo:" + detail.SeqNo);
                            }
                        }
                        else
                        {
                            log.Info(this, "Cancel TransID:" + detail.TransID + " RecordLocator:" + detail.RecordLocator + " SeqNo:" + detail.SeqNo);
                        }
                        listDetailDatas.Add(detail);
                    }
                }

                //if (listDetailDatas.Count > 0)
                //{
                //    if (UpdateHeaderDetailTrans(null, listDetailDatas, null, ABS.Logic.GroupBooking.Booking.BookingControl.EnumSaveType.Update) == false)
                //    {
                //        log.Info(this,"Cancel transaction details fail.");
                //        return false;
                //    }
                //}
                //else
                //{
                //    log.Info(this,"Cancel transaction details with nothing.");
                //    return false;
                //}

                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }

        }

        public void CancelTransaction(string TransID, string AgentID, ref int intErrorCode, ref string strErrorDesc)
        {
            //Connection = ConnectionType.eBusiness;          
            try
            {
                DataTable dt;
                objDCom.AddParameter("@TransID", ParameterDirection.Input, TransID, SqlDbType.VarChar, 20);
                objDCom.AddParameter("@AgentID", ParameterDirection.Input, AgentID, SqlDbType.VarChar, 20);
                objDCom.Execute("GBS_CancelBooking", DataAccess.EnumRtnType.rtNone, CommandType.StoredProcedure);
            }
            catch (Exception ex)
            {
                //Log.LogException(ex, this);

                //Store Error Code From SQL
                try
                {
                    intErrorCode = (int)objDCom.OutputParameters["@Return"];
                }
                catch (Exception ex1)
                {
                    //    Log.LogException(ex1, this);
                    intErrorCode = -1;
                }

                //Customize Error Messsage
                switch (intErrorCode)
                {
                    case -102:
                        strErrorDesc = "Error";
                        break;

                    default:
                        strErrorDesc = "Unclassified error: Failed to execute command";
                        break;
                }
            }
        }

        public bool UpdateTransMainPaymentCancel(BookingTransactionMain BookingTransMain, List<BookingTransactionDetail> lstBookingTransDetail, List<BookingTransTender> listTransTender, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                objSQL.AddField("TransID", BookingTransMain.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransType", BookingTransMain.TransType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AgentID", BookingTransMain.AgentID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AgentCatgID", BookingTransMain.AgentCatgID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("BookingDate", BookingTransMain.BookingDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx1", BookingTransMain.PaymentDateEx1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx1", BookingTransMain.PaymentAmtEx1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx2", BookingTransMain.PaymentDateEx2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx2", BookingTransMain.PaymentAmtEx2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx3", BookingTransMain.PaymentDateEx3, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx3", BookingTransMain.PaymentAmtEx3, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDate", BookingTransMain.PaymentDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CancelDate", BookingTransMain.CancelDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ExpiryDate", BookingTransMain.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("STDDate", BookingTransMain.STDDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Currency", BookingTransMain.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CurrencyPaid", BookingTransMain.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CollectedAmt", BookingTransMain.CollectedAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtAVG", BookingTransMain.TotalAmtAVG, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtGoing", BookingTransMain.TotalAmtGoing, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtReturn", BookingTransMain.TotalAmtReturn, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransSubTotal", BookingTransMain.TransSubTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalAmt", BookingTransMain.TransTotalAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalFee", BookingTransMain.TransTotalFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalTax", BookingTransMain.TransTotalTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPaxFee", BookingTransMain.TransTotalPaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalOth", BookingTransMain.TransTotalOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalSSR", BookingTransMain.TransTotalSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalDisc", BookingTransMain.TransTotalDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPromoDisc", BookingTransMain.TransTotalPromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPAX", BookingTransMain.TransTotalPAX, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalSeat", BookingTransMain.TransTotalSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalProcess", BookingTransMain.TransTotalProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalInfant", BookingTransMain.TransTotalInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransRemark1", BookingTransMain.TransRemark1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                objSQL.AddField("TransRemark2", BookingTransMain.TransRemark2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                objSQL.AddField("TransStatus", BookingTransMain.TransStatus, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Posted", BookingTransMain.Posted, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CreateBy", BookingTransMain.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", BookingTransMain.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncLastUpd", BookingTransMain.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LastSyncBy", BookingTransMain.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CurReminderDate", BookingTransMain.CurReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("NextReminderDate", BookingTransMain.NextReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ReminderType", BookingTransMain.ReminderType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PromoCode", BookingTransMain.PromoCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                switch (saveType)
                {
                    case EnumSaveType.Insert:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSMAIN", string.Empty);
                        break;
                    case EnumSaveType.Update:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSMAIN", "BK_TRANSMAIN.TransID='" + BookingTransMain.TransID + "'" + " AND BK_TRANSMAIN.TransType='" + BookingTransMain.TransType + "' AND BK_TRANSMAIN.AgentID='" + BookingTransMain.AgentID + "' AND BK_TRANSMAIN.AgentCatgID='" + BookingTransMain.AgentCatgID + "' AND BK_TRANSMAIN.BookingDate='" + BookingTransMain.BookingDate + "'");
                        break;
                }
                lstSQL.Add(strSQL);
                foreach (BookingTransactionDetail pBookingTransDetail in lstBookingTransDetail)
                {
                    objSQL.AddField("RecordLocator", pBookingTransDetail.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransID", pBookingTransDetail.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SeqNo", pBookingTransDetail.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CarrierCode", pBookingTransDetail.CarrierCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightNo", pBookingTransDetail.FlightNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DepartureDate", pBookingTransDetail.DepatureDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DepartureDate2", pBookingTransDetail.DepatureDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightDura", pBookingTransDetail.FlightDura, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightDura2", pBookingTransDetail.FlightDura2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Origin", pBookingTransDetail.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Transit", pBookingTransDetail.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Destination", pBookingTransDetail.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ArrivalDate", pBookingTransDetail.ArrivalDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ArrivalDate2", pBookingTransDetail.ArrivalDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FareClass", pBookingTransDetail.FareClass, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FarePerPax", pBookingTransDetail.FarePerPax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineTotal", pBookingTransDetail.LineTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineTax", pBookingTransDetail.LineTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LinePaxFee", pBookingTransDetail.LinePaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineFee", pBookingTransDetail.LineFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineOth", pBookingTransDetail.LineOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineProcess", pBookingTransDetail.LineProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineSSR", pBookingTransDetail.LineSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineSeat", pBookingTransDetail.LineSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineNameChange", pBookingTransDetail.LineNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineInsureFee", pBookingTransDetail.LineInsureFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);//added by romy for insure
                    objSQL.AddField("LineInfant", pBookingTransDetail.LineInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineDisc", pBookingTransDetail.LineDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LinePromoDisc", pBookingTransDetail.LinePromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("AttemptCount", pBookingTransDetail.AttemptCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Currency", pBookingTransDetail.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaxAdult", pBookingTransDetail.PaxAdult, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaxChild", pBookingTransDetail.PaxChild, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransVoid", pBookingTransDetail.TransVoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CreateBy", pBookingTransDetail.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncCreate", pBookingTransDetail.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncLastUpd", pBookingTransDetail.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LastSyncBy", pBookingTransDetail.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DetailCollectedAmt", pBookingTransDetail.CollectedAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SellKey", pBookingTransDetail.Signature, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                    switch (saveType)
                    {
                        case EnumSaveType.Insert:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSDTL", string.Empty);
                            break;
                        case EnumSaveType.Update:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.TransID='" + pBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBookingTransDetail.SeqNo + "'");
                            break;
                    }
                    lstSQL.Add(strSQL);
                }
                if (listTransTender != null)
                {
                    foreach (BookingTransTender transTender in listTransTender)
                    {
                        objSQL.AddField("TransID", transTender.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SeqNo", transTender.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransDate", transTender.TransDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Currency", transTender.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CurrencyPaid", transTender.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TenderID", transTender.TenderID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeType", transTender.FeeType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TenderAmt", transTender.TenderAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ExchgRate", transTender.ExchgRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TenderDue", transTender.TenderDue, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeAmt", transTender.FeeAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PayAmt", transTender.PayAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Transvoid", transTender.Transvoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncCreate", transTender.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("RefNo", transTender.RefNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("AuthorizationCode", transTender.AuthorizationCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("MerchantID", transTender.MerchantID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CreateBy", transTender.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                        switch (saveType)
                        {
                            case EnumSaveType.Insert:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSTENDER", string.Empty);
                                break;
                            case EnumSaveType.Update:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSTENDER", "BK_TRANSTENDER.TransID='" + transTender.TransID + "' AND BK_TRANSTENDER.SeqNo='" + transTender.SeqNo + "'");
                                break;
                        }

                        lstSQL.Add(strSQL);
                    }

                }
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);

                return rValue;
            }
            catch (Exception ex)
            {
                return rValue;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public bool UpdateTransMainReqInfo(BookingTransactionMain BookingTransMain, RequestApp pREQAPPL_Info, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                objSQL.AddField("TransID", BookingTransMain.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransType", BookingTransMain.TransType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AgentID", BookingTransMain.AgentID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AgentCatgID", BookingTransMain.AgentCatgID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("BookingDate", BookingTransMain.BookingDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx1", BookingTransMain.PaymentDateEx1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx1", BookingTransMain.PaymentAmtEx1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx2", BookingTransMain.PaymentDateEx2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx2", BookingTransMain.PaymentAmtEx2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx3", BookingTransMain.PaymentDateEx3, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx3", BookingTransMain.PaymentAmtEx3, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDate", BookingTransMain.PaymentDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CancelDate", BookingTransMain.CancelDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ExpiryDate", BookingTransMain.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("STDDate", BookingTransMain.STDDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Currency", BookingTransMain.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CurrencyPaid", BookingTransMain.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CollectedAmt", BookingTransMain.CollectedAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtAVG", BookingTransMain.TotalAmtAVG, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtGoing", BookingTransMain.TotalAmtGoing, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtReturn", BookingTransMain.TotalAmtReturn, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransSubTotal", BookingTransMain.TransSubTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalAmt", BookingTransMain.TransTotalAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalFee", BookingTransMain.TransTotalFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalTax", BookingTransMain.TransTotalTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPaxFee", BookingTransMain.TransTotalPaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalOth", BookingTransMain.TransTotalOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalSSR", BookingTransMain.TransTotalSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalDisc", BookingTransMain.TransTotalDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPromoDisc", BookingTransMain.TransTotalPromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPAX", BookingTransMain.TransTotalPAX, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalSeat", BookingTransMain.TransTotalSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalNameChange", BookingTransMain.TransTotalNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalProcess", BookingTransMain.TransTotalProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalInfant", BookingTransMain.TransTotalInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransRemark1", BookingTransMain.TransRemark1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                objSQL.AddField("TransRemark2", BookingTransMain.TransRemark2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                objSQL.AddField("TransStatus", BookingTransMain.TransStatus, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Posted", BookingTransMain.Posted, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CreateBy", BookingTransMain.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", BookingTransMain.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncLastUpd", BookingTransMain.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LastSyncBy", BookingTransMain.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CurReminderDate", BookingTransMain.CurReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("NextReminderDate", BookingTransMain.NextReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ReminderType", BookingTransMain.ReminderType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PromoCode", BookingTransMain.PromoCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                switch (saveType)
                {
                    case EnumSaveType.Insert:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSMAIN", string.Empty);
                        break;
                    case EnumSaveType.Update:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSMAIN", "BK_TRANSMAIN.TransID='" + BookingTransMain.TransID + "'" + " AND BK_TRANSMAIN.TransType='" + BookingTransMain.TransType + "' AND BK_TRANSMAIN.AgentID='" + BookingTransMain.AgentID + "' AND BK_TRANSMAIN.AgentCatgID='" + BookingTransMain.AgentCatgID + "' AND BK_TRANSMAIN.BookingDate='" + BookingTransMain.BookingDate + "'");
                        break;
                }
                lstSQL.Add(strSQL);

                pREQAPPL_Info.ExpiryDate = BookingTransMain.ExpiryDate;
                objSQL.AddField("ReqID", pREQAPPL_Info.ReqID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("UserID", pREQAPPL_Info.UserID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ReqType", pREQAPPL_Info.ReqType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransID", pREQAPPL_Info.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("RequestDate", pREQAPPL_Info.RequestDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ExpiryDate", pREQAPPL_Info.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Remark", pREQAPPL_Info.Remark, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ApprovedBy", pREQAPPL_Info.ApprovedBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ApprovedDate", pREQAPPL_Info.ApprovedDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", pREQAPPL_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncLastUpd", pREQAPPL_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LastSyncBy", pREQAPPL_Info.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "REQAPPL", "REQAPPL.ReqID='" + pREQAPPL_Info.ReqID + "'");

                lstSQL.Add(strSQL);

                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);

                return rValue;
            }
            catch (Exception ex)
            {
                return rValue;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public bool UpdateTransMainPaymentCancelApprove(BookingTransactionMain BookingTransMain, List<BookingTransactionDetail> lstBookingTransDetail, List<BookingTransTender> listTransTender, RequestApp pREQAPPL_Info, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                objSQL.AddField("TransID", BookingTransMain.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransType", BookingTransMain.TransType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AgentID", BookingTransMain.AgentID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AgentCatgID", BookingTransMain.AgentCatgID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("BookingDate", BookingTransMain.BookingDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx1", BookingTransMain.PaymentDateEx1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx1", BookingTransMain.PaymentAmtEx1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx2", BookingTransMain.PaymentDateEx2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx2", BookingTransMain.PaymentAmtEx2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx3", BookingTransMain.PaymentDateEx3, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx3", BookingTransMain.PaymentAmtEx3, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDate", BookingTransMain.PaymentDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CancelDate", BookingTransMain.CancelDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ExpiryDate", BookingTransMain.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("STDDate", BookingTransMain.STDDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Currency", BookingTransMain.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CurrencyPaid", BookingTransMain.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CollectedAmt", BookingTransMain.CollectedAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtAVG", BookingTransMain.TotalAmtAVG, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtGoing", BookingTransMain.TotalAmtGoing, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtReturn", BookingTransMain.TotalAmtReturn, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransSubTotal", BookingTransMain.TransSubTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalAmt", BookingTransMain.TransTotalAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalFee", BookingTransMain.TransTotalFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalTax", BookingTransMain.TransTotalTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPaxFee", BookingTransMain.TransTotalPaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalOth", BookingTransMain.TransTotalOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalSSR", BookingTransMain.TransTotalSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalDisc", BookingTransMain.TransTotalDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPromoDisc", BookingTransMain.TransTotalPromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPAX", BookingTransMain.TransTotalPAX, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalSeat", BookingTransMain.TransTotalSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalNameChange", BookingTransMain.TransTotalNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalProcess", BookingTransMain.TransTotalProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalInfant", BookingTransMain.TransTotalInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransRemark1", BookingTransMain.TransRemark1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                objSQL.AddField("TransRemark2", BookingTransMain.TransRemark2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                objSQL.AddField("TransStatus", BookingTransMain.TransStatus, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Posted", BookingTransMain.Posted, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CreateBy", BookingTransMain.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", BookingTransMain.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncLastUpd", BookingTransMain.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LastSyncBy", BookingTransMain.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CurReminderDate", BookingTransMain.CurReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("NextReminderDate", BookingTransMain.NextReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ReminderType", BookingTransMain.ReminderType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PromoCode", BookingTransMain.PromoCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                switch (saveType)
                {
                    case EnumSaveType.Insert:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSMAIN", string.Empty);
                        break;
                    case EnumSaveType.Update:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSMAIN", "BK_TRANSMAIN.TransID='" + BookingTransMain.TransID + "'" + " AND BK_TRANSMAIN.TransType='" + BookingTransMain.TransType + "' AND BK_TRANSMAIN.AgentID='" + BookingTransMain.AgentID + "' AND BK_TRANSMAIN.AgentCatgID='" + BookingTransMain.AgentCatgID + "' AND BK_TRANSMAIN.BookingDate='" + BookingTransMain.BookingDate + "'");
                        break;
                }
                lstSQL.Add(strSQL);
                foreach (BookingTransactionDetail pBookingTransDetail in lstBookingTransDetail)
                {
                    objSQL.AddField("RecordLocator", pBookingTransDetail.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransID", pBookingTransDetail.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SeqNo", pBookingTransDetail.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CarrierCode", pBookingTransDetail.CarrierCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightNo", pBookingTransDetail.FlightNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DepartureDate", pBookingTransDetail.DepatureDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DepartureDate2", pBookingTransDetail.DepatureDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightDura", pBookingTransDetail.FlightDura, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightDura2", pBookingTransDetail.FlightDura2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Origin", pBookingTransDetail.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Transit", pBookingTransDetail.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Destination", pBookingTransDetail.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ArrivalDate", pBookingTransDetail.ArrivalDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ArrivalDate2", pBookingTransDetail.ArrivalDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FareClass", pBookingTransDetail.FareClass, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FarePerPax", pBookingTransDetail.FarePerPax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineTotal", pBookingTransDetail.LineTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineTax", pBookingTransDetail.LineTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LinePaxFee", pBookingTransDetail.LinePaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineFee", pBookingTransDetail.LineFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineOth", pBookingTransDetail.LineOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineProcess", pBookingTransDetail.LineProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineSSR", pBookingTransDetail.LineSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineSeat", pBookingTransDetail.LineSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineNameChange", pBookingTransDetail.LineNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineInfant", pBookingTransDetail.LineInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineDisc", pBookingTransDetail.LineDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LinePromoDisc", pBookingTransDetail.LinePromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("AttemptCount", pBookingTransDetail.AttemptCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Currency", pBookingTransDetail.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaxAdult", pBookingTransDetail.PaxAdult, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaxChild", pBookingTransDetail.PaxChild, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransVoid", pBookingTransDetail.TransVoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CreateBy", pBookingTransDetail.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncCreate", pBookingTransDetail.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncLastUpd", pBookingTransDetail.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LastSyncBy", pBookingTransDetail.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DetailCollectedAmt", pBookingTransDetail.CollectedAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SellKey", pBookingTransDetail.Signature, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                    switch (saveType)
                    {
                        case EnumSaveType.Insert:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSDTL", string.Empty);
                            break;
                        case EnumSaveType.Update:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.TransID='" + pBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBookingTransDetail.SeqNo + "'");
                            break;
                    }
                    lstSQL.Add(strSQL);
                }

                foreach (BookingTransTender transTender in listTransTender)
                {
                    objSQL.AddField("TransID", transTender.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SeqNo", transTender.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransDate", transTender.TransDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Currency", transTender.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CurrencyPaid", transTender.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TenderID", transTender.TenderID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FeeType", transTender.FeeType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TenderAmt", transTender.TenderAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ExchgRate", transTender.ExchgRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TenderDue", transTender.TenderDue, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FeeAmt", transTender.FeeAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PayAmt", transTender.PayAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Transvoid", 1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncCreate", transTender.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("RefNo", transTender.RefNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("AuthorizationCode", transTender.AuthorizationCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("MerchantID", transTender.MerchantID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CreateBy", transTender.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                    switch (saveType)
                    {
                        case EnumSaveType.Insert:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSTENDER", string.Empty);
                            break;
                        case EnumSaveType.Update:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSTENDER", "BK_TRANSTENDER.TransID='" + transTender.TransID + "' AND BK_TRANSTENDER.SeqNo='" + transTender.SeqNo + "'");
                            break;
                    }

                    lstSQL.Add(strSQL);
                }

                objSQL.AddField("ReqID", pREQAPPL_Info.ReqID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("UserID", pREQAPPL_Info.UserID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ReqType", pREQAPPL_Info.ReqType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransID", pREQAPPL_Info.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("RequestDate", pREQAPPL_Info.RequestDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ExpiryDate", pREQAPPL_Info.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Remark", pREQAPPL_Info.Remark, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ApprovedBy", pREQAPPL_Info.ApprovedBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ApprovedDate", pREQAPPL_Info.ApprovedDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", pREQAPPL_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncLastUpd", pREQAPPL_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LastSyncBy", pREQAPPL_Info.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "REQAPPL", "REQAPPL.ReqID='" + pREQAPPL_Info.ReqID + "'");

                lstSQL.Add(strSQL);

                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);

                return rValue;
            }
            catch (Exception ex)
            {
                return rValue;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public bool UpdateTransMainPenaltyWaiveApprove(BookingTransactionMain BookingTransMain, RequestApp pREQAPPL_Info)
        {
            bool rValue = false;

            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {


                strSQL = "UPDATE BK_TRANSMAIN SET TransTotalOth=0 WHERE " + "BK_TRANSMAIN.TransID='" + BookingTransMain.TransID + "'" + " AND BK_TRANSMAIN.TransType='" + BookingTransMain.TransType + "' AND BK_TRANSMAIN.AgentID='" + BookingTransMain.AgentID + "' AND BK_TRANSMAIN.AgentCatgID='" + BookingTransMain.AgentCatgID + "'";

                lstSQL.Add(strSQL);

                objSQL.AddField("ReqID", pREQAPPL_Info.ReqID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("UserID", pREQAPPL_Info.UserID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ReqType", pREQAPPL_Info.ReqType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransID", pREQAPPL_Info.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("RequestDate", pREQAPPL_Info.RequestDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ExpiryDate", pREQAPPL_Info.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Remark", pREQAPPL_Info.Remark, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ApprovedBy", pREQAPPL_Info.ApprovedBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ApprovedDate", pREQAPPL_Info.ApprovedDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", pREQAPPL_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncLastUpd", pREQAPPL_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LastSyncBy", pREQAPPL_Info.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "REQAPPL", "REQAPPL.ReqID='" + pREQAPPL_Info.ReqID + "'");

                lstSQL.Add(strSQL);

                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);

                return rValue;
            }
            catch (Exception ex)
            {
                return rValue;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }
        #endregion

        #region SectorSuspend
        public DataTable GetAllSECTORSUSPENDFilter(String CarrierCode, byte Active)
        {
            //SectorSuspend objSECTORSUSPEND_Info;
            //List<SectorSuspend> objListSECTORSUSPEND_Info = new List<SectorSuspend>();
            DataTable dt;
            //DateTime dateValue;
            String strSQL = string.Empty;
            String strFilter = " WHERE CarrierCode='" + CarrierCode + "' AND Active=" + Active;
            try
            {
                strSQL = "SELECT SectorSuspendID,CodeDesc,AgentCatgDesc, CarrierCode, AgentGroup, (SELECT TOP(1) Name FROM City WHERE CityCode=sc.Origins) AS Origins, (SELECT TOP(1) Name FROM City WHERE CityCode=sc.Destination) AS Destination, EffectiveStartDate, EffectiveEndDate, Active FROM SECTORSUSPEND sc " +
                         "JOIN CODEMASTER (NOLOCK) ON Code=CarrierCode AND CodeType='OPT' " +
                         "JOIN AG_CATEGORY (NOLOCK) ON AgentCatgID=AgentGroup " + strFilter;

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    //foreach (DataRow drRow in dt.Rows)
                    //{
                    //    objSECTORSUSPEND_Info = new SectorSuspend();
                    //    objSECTORSUSPEND_Info.SectorSuspendID = (string)drRow["SectorSuspendID"];
                    //    objSECTORSUSPEND_Info.CarrierCode = (string)drRow["CarrierCode"];
                    //    objSECTORSUSPEND_Info.AgentGroup = (string)drRow["AgentCatgDesc"];
                    //    objSECTORSUSPEND_Info.Origins = (string)drRow["Origins"];
                    //    objSECTORSUSPEND_Info.Destination = (string)drRow["Destination"];
                    //    if (DateTime.TryParse(drRow["EffectiveStartDate"].ToString(), out dateValue)) objSECTORSUSPEND_Info.EffectiveStartDate = (DateTime)drRow["EffectiveStartDate"];
                    //    if (DateTime.TryParse(drRow["EffectiveEndDate"].ToString(), out dateValue)) objSECTORSUSPEND_Info.EffectiveEndDate = (DateTime)drRow["EffectiveEndDate"];
                    //    objSECTORSUSPEND_Info.Active = (byte)drRow["Active"];
                    //    if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objSECTORSUSPEND_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                    //    if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objSECTORSUSPEND_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                    //    objSECTORSUSPEND_Info.CreateBy = (string)drRow["CreateBy"];
                    //    objListSECTORSUSPEND_Info.Add(objSECTORSUSPEND_Info);
                    //}
                    //return objListSECTORSUSPEND_Info;
                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("SECTORSUSPEND does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public DataTable GetAllSECTORSUSPEND(String CarrierCode, string AgentGroup, string Origins, string Destination, DateTime dtDate)
        {
            //SectorSuspend objSECTORSUSPEND_Info;
            //List<SectorSuspend> objListSECTORSUSPEND_Info = new List<SectorSuspend>();
            DataTable dt;
            //DateTime dateValue;
            String strSQL = string.Empty;
            String strFilter = " WHERE AgentGroup='" + AgentGroup + "' AND Origins='" + Origins + "' AND Destination='" + Destination + "' AND ('" + dtDate + "' >= EffectiveStartDate AND '" + dtDate + "' < EffectiveEndDate) AND Active=1 ";
            if (CarrierCode != "AA,AX")
                strFilter += " AND CarrierCode='" + CarrierCode + "'";
            try
            {
                strSQL = "SELECT SectorSuspendID FROM SECTORSUSPEND  " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    //foreach (DataRow drRow in dt.Rows)
                    //{
                    //    objSECTORSUSPEND_Info = new SectorSuspend();
                    //    objSECTORSUSPEND_Info.SectorSuspendID = (string)drRow["SectorSuspendID"];
                    //    objSECTORSUSPEND_Info.CarrierCode = (string)drRow["CarrierCode"];
                    //    objSECTORSUSPEND_Info.AgentGroup = (string)drRow["AgentCatgDesc"];
                    //    objSECTORSUSPEND_Info.Origins = (string)drRow["Origins"];
                    //    objSECTORSUSPEND_Info.Destination = (string)drRow["Destination"];
                    //    if (DateTime.TryParse(drRow["EffectiveStartDate"].ToString(), out dateValue)) objSECTORSUSPEND_Info.EffectiveStartDate = (DateTime)drRow["EffectiveStartDate"];
                    //    if (DateTime.TryParse(drRow["EffectiveEndDate"].ToString(), out dateValue)) objSECTORSUSPEND_Info.EffectiveEndDate = (DateTime)drRow["EffectiveEndDate"];
                    //    objSECTORSUSPEND_Info.Active = (byte)drRow["Active"];
                    //    if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objSECTORSUSPEND_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                    //    if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objSECTORSUSPEND_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                    //    objSECTORSUSPEND_Info.CreateBy = (string)drRow["CreateBy"];
                    //    objListSECTORSUSPEND_Info.Add(objSECTORSUSPEND_Info);
                    //}
                    //return objListSECTORSUSPEND_Info;
                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("SECTORSUSPEND does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public SectorSuspend GetSingleSECTORSUSPEND(string pSectorSuspendID)
        {
            SectorSuspend objSECTORSUSPEND_Info;
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("SECTORSUSPEND.SectorSuspendID");
                lstFields.Add("SECTORSUSPEND.CarrierCode");
                lstFields.Add("SECTORSUSPEND.AgentGroup");
                lstFields.Add("SECTORSUSPEND.Origins");
                lstFields.Add("SECTORSUSPEND.Destination");
                lstFields.Add("SECTORSUSPEND.EffectiveStartDate");
                lstFields.Add("SECTORSUSPEND.EffectiveEndDate");
                lstFields.Add("SECTORSUSPEND.Active");
                lstFields.Add("SECTORSUSPEND.SyncCreate");
                lstFields.Add("SECTORSUSPEND.SyncLastUpd");
                lstFields.Add("SECTORSUSPEND.LastSyncBy");

                strFields = GetSqlFields(lstFields);
                strFilter = "WHERE SECTORSUSPEND.SectorSuspendID='" + pSectorSuspendID + "'";
                strSQL = "SELECT " + strFields + " FROM SECTORSUSPEND " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];

                    objSECTORSUSPEND_Info = new SectorSuspend();
                    objSECTORSUSPEND_Info.SectorSuspendID = (string)drRow["SectorSuspendID"];
                    objSECTORSUSPEND_Info.CarrierCode = (string)drRow["CarrierCode"];
                    objSECTORSUSPEND_Info.AgentGroup = (string)drRow["AgentGroup"];
                    objSECTORSUSPEND_Info.Origins = (string)drRow["Origins"];
                    objSECTORSUSPEND_Info.Destination = (string)drRow["Destination"];
                    if (DateTime.TryParse(drRow["EffectiveStartDate"].ToString(), out dateValue)) objSECTORSUSPEND_Info.EffectiveStartDate = (DateTime)drRow["EffectiveStartDate"];
                    if (DateTime.TryParse(drRow["EffectiveEndDate"].ToString(), out dateValue)) objSECTORSUSPEND_Info.EffectiveEndDate = (DateTime)drRow["EffectiveEndDate"];
                    objSECTORSUSPEND_Info.Active = (byte)drRow["Active"];
                    if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objSECTORSUSPEND_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                    if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objSECTORSUSPEND_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                    objSECTORSUSPEND_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                    return objSECTORSUSPEND_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("SECTORSUSPEND does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public SectorSuspend SaveSECTORSUSPEND(SectorSuspend pSECTORSUSPEND_Info, EnumSaveType saveType)
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                objSQL.AddField("SectorSuspendID", pSECTORSUSPEND_Info.SectorSuspendID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CarrierCode", pSECTORSUSPEND_Info.CarrierCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AgentGroup", pSECTORSUSPEND_Info.AgentGroup, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Origins", pSECTORSUSPEND_Info.Origins, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Destination", pSECTORSUSPEND_Info.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("EffectiveStartDate", pSECTORSUSPEND_Info.EffectiveStartDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("EffectiveEndDate", pSECTORSUSPEND_Info.EffectiveEndDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Active", pSECTORSUSPEND_Info.Active, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", pSECTORSUSPEND_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncLastUpd", pSECTORSUSPEND_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LastSyncBy", pSECTORSUSPEND_Info.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                switch (saveType)
                {
                    case EnumSaveType.Insert:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "SECTORSUSPEND", string.Empty);
                        break;
                    case EnumSaveType.Update:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "SECTORSUSPEND", "SECTORSUSPEND.SectorSuspendID='" + pSECTORSUSPEND_Info.SectorSuspendID + "'");
                        break;
                }
                lstSQL.Add(strSQL);
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return null;
                }
                return GetSingleSECTORSUSPEND(pSECTORSUSPEND_Info.SectorSuspendID);
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }
        #endregion

        #region RequestApp
        public List<RequestApp> GetAllREQAPPL()
        {
            RequestApp objREQAPPL_Info;
            List<RequestApp> objListREQAPPL_Info = new List<RequestApp>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                strSQL = "SELECT  ReqID,CODEMASTER.CodeDesc, req.UserID,us.UserName, ReqType, TransID, RequestDate, ExpiryDate, req.Remark, ApprovedBy, ApprovedDate, " +
                "req.rowguid, req.SyncCreate, req.SyncLastUpd, req.LastSyncBy " +
                "FROM REQAPPL req JOIN CODEMASTER (NOLOCK) on Code=ReqType AND CodeType='REQ' " +
                "JOIN USRPROFILE us (NOLOCK) on us.UserID=req.UserID WHERE ExpiryDate > GETDATE() AND ApprovedBy IS NULL";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objREQAPPL_Info = new RequestApp();
                        objREQAPPL_Info.ReqID = (string)drRow["ReqID"];
                        objREQAPPL_Info.UserID = (string)drRow["UserID"];
                        objREQAPPL_Info.ReqType = (string)drRow["ReqType"];
                        objREQAPPL_Info.TransID = (string)drRow["TransID"];
                        objREQAPPL_Info.UserName = (string)drRow["UserName"];
                        objREQAPPL_Info.RequestDesc = (string)drRow["CodeDesc"];
                        if (DateTime.TryParse(drRow["RequestDate"].ToString(), out dateValue)) objREQAPPL_Info.RequestDate = (DateTime)drRow["RequestDate"];
                        if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objREQAPPL_Info.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                        objREQAPPL_Info.Remark = drRow["Remark"].ToString();
                        objREQAPPL_Info.ApprovedBy = drRow["ApprovedBy"].ToString();
                        if (DateTime.TryParse(drRow["ApprovedDate"].ToString(), out dateValue)) objREQAPPL_Info.ApprovedDate = (DateTime)drRow["ApprovedDate"];
                        objREQAPPL_Info.rowguid = (Guid)drRow["rowguid"];
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objREQAPPL_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objREQAPPL_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objREQAPPL_Info.LastSyncBy = drRow["LastSyncBy"].ToString();
                        objListREQAPPL_Info.Add(objREQAPPL_Info);
                    }
                    return objListREQAPPL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("REQAPPL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public RequestApp GetSingleREQAPPL(string pReqID)
        {

            RequestApp objREQAPPL_Info;
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("REQAPPL.ReqID");
                lstFields.Add("REQAPPL.UserID");
                lstFields.Add("REQAPPL.ReqType");
                lstFields.Add("REQAPPL.TransID");
                lstFields.Add("REQAPPL.RequestDate");
                lstFields.Add("REQAPPL.ExpiryDate");
                lstFields.Add("REQAPPL.Remark");
                lstFields.Add("REQAPPL.ApprovedBy");
                lstFields.Add("REQAPPL.ApprovedDate");
                lstFields.Add("REQAPPL.rowguid");
                lstFields.Add("REQAPPL.SyncCreate");
                lstFields.Add("REQAPPL.SyncLastUpd");
                lstFields.Add("REQAPPL.LastSyncBy");
                lstFields.Add("CODEMASTER.CodeDesc");
                strFields = GetSqlFields(lstFields);
                strFilter = "WHERE REQAPPL.ReqID='" + pReqID + "'";
                strSQL = "SELECT " + strFields + " FROM REQAPPL JOIN CODEMASTER (NOLOCK) on Code=REQAPPL.ReqType AND CodeType='REQ' " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];

                    objREQAPPL_Info = new RequestApp();
                    objREQAPPL_Info.ReqID = (string)drRow["ReqID"];
                    objREQAPPL_Info.UserID = (string)drRow["UserID"];
                    objREQAPPL_Info.ReqType = (string)drRow["ReqType"];
                    objREQAPPL_Info.RequestDesc = (string)drRow["CodeDesc"];
                    objREQAPPL_Info.TransID = (string)drRow["TransID"];
                    if (DateTime.TryParse(drRow["RequestDate"].ToString(), out dateValue)) objREQAPPL_Info.RequestDate = (DateTime)drRow["RequestDate"];
                    if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objREQAPPL_Info.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                    objREQAPPL_Info.Remark = (string)drRow["Remark"];
                    objREQAPPL_Info.ApprovedBy = drRow["ApprovedBy"].ToString();
                    if (DateTime.TryParse(drRow["ApprovedDate"].ToString(), out dateValue)) objREQAPPL_Info.ApprovedDate = (DateTime)drRow["ApprovedDate"];
                    objREQAPPL_Info.rowguid = (Guid)drRow["rowguid"];
                    if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objREQAPPL_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                    if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objREQAPPL_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                    objREQAPPL_Info.LastSyncBy = drRow["LastSyncBy"].ToString();
                    return objREQAPPL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("REQAPPL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public RequestApp SaveREQAPPL(RequestApp pREQAPPL_Info, EnumSaveType pType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                objSQL.AddField("ReqID", pREQAPPL_Info.ReqID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("UserID", pREQAPPL_Info.UserID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ReqType", pREQAPPL_Info.ReqType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransID", pREQAPPL_Info.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("RequestDate", pREQAPPL_Info.RequestDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ExpiryDate", pREQAPPL_Info.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Remark", pREQAPPL_Info.Remark, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ApprovedBy", pREQAPPL_Info.ApprovedBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ApprovedDate", pREQAPPL_Info.ApprovedDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", pREQAPPL_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncLastUpd", pREQAPPL_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LastSyncBy", pREQAPPL_Info.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                switch (pType)
                {
                    case EnumSaveType.Insert:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "REQAPPL", string.Empty);
                        break;
                    case EnumSaveType.Update:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "REQAPPL", "REQAPPL.ReqID='" + pREQAPPL_Info.ReqID + "'");
                        break;
                }
                lstSQL.Add(strSQL);
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return null;
                }
                return GetSingleREQAPPL(pREQAPPL_Info.ReqID);
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }
        #endregion

        #region BookingTaxFeesControl
        public List<BookingTaxFeesControl> GetAllBK_TAXFEESCONTROL()
        {
            BookingTaxFeesControl objBookingTaxFeesControl;
            List<BookingTaxFeesControl> objListBookingTaxFeesControl = new List<BookingTaxFeesControl>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                strSQL = "SELECT * FROM BK_TAXFEESCONTROL ";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTaxFeesControl = new BookingTaxFeesControl();
                        objBookingTaxFeesControl.TaxFeesCode = (int)drRow["TaxFeesCode"];
                        objBookingTaxFeesControl.TaxFeesGroup = (string)drRow["TaxFeesGroup"];
                        objBookingTaxFeesControl.TaxFeesDesc = (string)drRow["TaxFeesDesc"];
                        objBookingTaxFeesControl.TaxFeesRate = (decimal)drRow["TaxFeesRate"];
                        objBookingTaxFeesControl.Active = (byte)drRow["Active"];
                        objBookingTaxFeesControl.Flag = (byte)drRow["Flag"];
                        objBookingTaxFeesControl.rowguid = (Guid)drRow["rowguid"];
                        objBookingTaxFeesControl.CreateBy = (string)drRow["CreateBy"];
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTaxFeesControl.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTaxFeesControl.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBookingTaxFeesControl.LastSyncBy = (string)drRow["LastSyncBy"];
                        objListBookingTaxFeesControl.Add(objBookingTaxFeesControl);
                    }
                    return objListBookingTaxFeesControl;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TAXFEESCONTROL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public BookingTaxFeesControl GetSingleBK_TAXFEESCONTROL(
                int TaxFeesCode,
        string TaxFeesGroup)
        {
            BookingTaxFeesControl objBookingTaxFeesControl;
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("BK_TAXFEESCONTROL.TaxFeesCode");
                lstFields.Add("BK_TAXFEESCONTROL.TaxFeesGroup");
                lstFields.Add("BK_TAXFEESCONTROL.TaxFeesDesc");
                lstFields.Add("BK_TAXFEESCONTROL.TaxFeesRate");
                lstFields.Add("BK_TAXFEESCONTROL.Active");
                lstFields.Add("BK_TAXFEESCONTROL.Flag");
                lstFields.Add("BK_TAXFEESCONTROL.rowguid");
                lstFields.Add("BK_TAXFEESCONTROL.CreateBy");
                lstFields.Add("BK_TAXFEESCONTROL.SyncCreate");
                lstFields.Add("BK_TAXFEESCONTROL.SyncLastUpd");
                lstFields.Add("BK_TAXFEESCONTROL.LastSyncBy");

                strFields = GetSqlFields(lstFields);
                strFilter = " AND BK_TAXFEESCONTROL.TaxFeesGroup='" + TaxFeesGroup + "'";
                strSQL = "SELECT " + strFields + " FROM BK_TAXFEESCONTROL " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];

                    objBookingTaxFeesControl = new BookingTaxFeesControl();
                    objBookingTaxFeesControl.TaxFeesCode = (int)drRow["TaxFeesCode"];
                    objBookingTaxFeesControl.TaxFeesGroup = (string)drRow["TaxFeesGroup"];
                    objBookingTaxFeesControl.TaxFeesDesc = (string)drRow["TaxFeesDesc"];
                    objBookingTaxFeesControl.TaxFeesRate = (decimal)drRow["TaxFeesRate"];
                    objBookingTaxFeesControl.Active = (byte)drRow["Active"];
                    objBookingTaxFeesControl.Flag = (byte)drRow["Flag"];
                    objBookingTaxFeesControl.rowguid = (Guid)drRow["rowguid"];
                    objBookingTaxFeesControl.CreateBy = (string)drRow["CreateBy"];
                    if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTaxFeesControl.SyncCreate = (DateTime)drRow["SyncCreate"];
                    if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTaxFeesControl.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                    objBookingTaxFeesControl.LastSyncBy = (string)drRow["LastSyncBy"];
                    return objBookingTaxFeesControl;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TAXFEESCONTROL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public BookingTaxFeesControl SaveBK_TAXFEESCONTROL(BookingTaxFeesControl pBookingTaxFeesControl, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                objSQL.AddField("TaxFeesCode", pBookingTaxFeesControl.TaxFeesCode, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TaxFeesGroup", pBookingTaxFeesControl.TaxFeesGroup, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TaxFeesDesc", pBookingTaxFeesControl.TaxFeesDesc, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TaxFeesRate", pBookingTaxFeesControl.TaxFeesRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Active", pBookingTaxFeesControl.Active, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Flag", pBookingTaxFeesControl.Flag, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CreateBy", pBookingTaxFeesControl.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", pBookingTaxFeesControl.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncLastUpd", pBookingTaxFeesControl.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LastSyncBy", pBookingTaxFeesControl.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                switch (saveType)
                {
                    case EnumSaveType.Insert:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TAXFEESCONTROL", string.Empty);
                        break;
                    case EnumSaveType.Update:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TAXFEESCONTROL", "BK_TAXFEESCONTROL.TaxFeesCode='" + pBookingTaxFeesControl.TaxFeesCode + "' and BK_TAXFEESCONTROL.TaxFeesGroup='" + pBookingTaxFeesControl.TaxFeesGroup + "'");
                        break;
                }
                lstSQL.Add(strSQL);
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return null;
                }
                return GetSingleBK_TAXFEESCONTROL(pBookingTaxFeesControl.TaxFeesCode, pBookingTaxFeesControl.TaxFeesGroup);
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        #endregion

        #region BookingTender

        public List<BookingTender> GetAllBK_TENDER()
        {
            BookingTender objBookingTender;
            List<BookingTender> objListBookingTender = new List<BookingTender>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                strSQL = "SELECT * FROM BK_TENDER ";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTender = new BookingTender();
                        objBookingTender.TenderID = (string)drRow["TenderID"];
                        objBookingTender.TenderType = (byte)drRow["TenderType"];
                        objBookingTender.TenderDesc = (string)drRow["TenderDesc"];
                        objBookingTender.Active = (byte)drRow["Active"];
                        objBookingTender.Flag = (byte)drRow["Flag"];
                        objBookingTender.rowguid = (Guid)drRow["rowguid"];
                        if (DateTime.TryParse(drRow["EffDate"].ToString(), out dateValue)) objBookingTender.EffDate = (DateTime)drRow["EffDate"];
                        if (DateTime.TryParse(drRow["EndDate"].ToString(), out dateValue)) objBookingTender.EndDate = (DateTime)drRow["EndDate"];
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTender.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTender.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBookingTender.LastSyncBy = (string)drRow["LastSyncBy"];
                        objListBookingTender.Add(objBookingTender);
                    }
                    return objListBookingTender;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TENDER does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public BookingTender GetSingleBK_TENDER(string TenderID)
        {
            BookingTender objBookingTender;
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("BK_TENDER.TenderID");
                lstFields.Add("BK_TENDER.TenderType");
                lstFields.Add("BK_TENDER.TenderDesc");
                lstFields.Add("BK_TENDER.Active");
                lstFields.Add("BK_TENDER.Flag");
                lstFields.Add("BK_TENDER.rowguid");
                lstFields.Add("BK_TENDER.EffDate");
                lstFields.Add("BK_TENDER.EndDate");
                lstFields.Add("BK_TENDER.SyncCreate");
                lstFields.Add("BK_TENDER.SyncLastUpd");
                lstFields.Add("BK_TENDER.LastSyncBy");

                strFields = GetSqlFields(lstFields);
                strFilter = " WHERE BK_TENDER.TenderID='" + TenderID + "'";
                strSQL = "SELECT " + strFields + " FROM BK_TENDER " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];

                    objBookingTender = new BookingTender();
                    objBookingTender.TenderID = (string)drRow["TenderID"];
                    objBookingTender.TenderType = (byte)drRow["TenderType"];
                    objBookingTender.TenderDesc = (string)drRow["TenderDesc"];
                    objBookingTender.Active = (byte)drRow["Active"];
                    objBookingTender.Flag = (byte)drRow["Flag"];
                    objBookingTender.rowguid = (Guid)drRow["rowguid"];
                    if (DateTime.TryParse(drRow["EffDate"].ToString(), out dateValue)) objBookingTender.EffDate = (DateTime)drRow["EffDate"];
                    if (DateTime.TryParse(drRow["EndDate"].ToString(), out dateValue)) objBookingTender.EndDate = (DateTime)drRow["EndDate"];
                    if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTender.SyncCreate = (DateTime)drRow["SyncCreate"];
                    if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTender.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                    objBookingTender.LastSyncBy = (string)drRow["LastSyncBy"];
                    return objBookingTender;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TENDER does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public BookingTender SaveBK_TENDER(BookingTender pBookingTender, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                objSQL.AddField("TenderID", pBookingTender.TenderID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TenderType", pBookingTender.TenderType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TenderDesc", pBookingTender.TenderDesc, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Active", pBookingTender.Active, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Flag", pBookingTender.Flag, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("EffDate", pBookingTender.EffDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("EndDate", pBookingTender.EndDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", pBookingTender.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncLastUpd", pBookingTender.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LastSyncBy", pBookingTender.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                switch (saveType)
                {
                    case EnumSaveType.Insert:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TENDER", string.Empty);
                        break;
                    case EnumSaveType.Update:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TENDER", "BK_TENDER.TenderID='" + pBookingTender.TenderID + "'");
                        break;
                }
                lstSQL.Add(strSQL);
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return null;
                }
                return GetSingleBK_TENDER(pBookingTender.TenderID);
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        #endregion

        #region BookingTransactionFees
        public List<BookingTransactionFees> GetAllBK_TRANSFEES()
        {
            BookingTransactionFees objBK_TRANSFEES_Info;
            List<BookingTransactionFees> objListBK_TRANSFEES_Info = new List<BookingTransactionFees>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                strSQL = "SELECT * FROM BK_TRANSFEES ";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSFEES_Info = new BookingTransactionFees();
                        objBK_TRANSFEES_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSFEES_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSFEES_Info.SeqNo = (byte)drRow["SeqNo"];
                        objBK_TRANSFEES_Info.FeeCode = (string)drRow["FeeCode"];
                        objBK_TRANSFEES_Info.FeeDesc = (string)drRow["FeeDesc"];
                        objBK_TRANSFEES_Info.PaxType = (string)drRow["PaxType"];
                        objBK_TRANSFEES_Info.Origin = (string)drRow["Origin"];
                        objBK_TRANSFEES_Info.Transit = (string)drRow["Transit"];
                        objBK_TRANSFEES_Info.Destination = (string)drRow["Destination"];
                        objBK_TRANSFEES_Info.FeeType = (string)drRow["FeeType"];
                        objBK_TRANSFEES_Info.FeeQty = (double)drRow["FeeQty"];
                        objBK_TRANSFEES_Info.FeeRate = (decimal)drRow["FeeRate"];
                        objBK_TRANSFEES_Info.FeeAmt = (decimal)drRow["FeeAmt"];
                        objBK_TRANSFEES_Info.Transvoid = (byte)drRow["Transvoid"];
                        objBK_TRANSFEES_Info.rowguid = (Guid)drRow["rowguid"];
                        objBK_TRANSFEES_Info.CreateBy = (string)drRow["CreateBy"];
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSFEES_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBK_TRANSFEES_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBK_TRANSFEES_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                        objListBK_TRANSFEES_Info.Add(objBK_TRANSFEES_Info);
                    }
                    return objListBK_TRANSFEES_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSFEES does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public BookingTransactionFees GetSingleBK_TRANSFEES(string pTransID, string pFeeCode)
        {
            BookingTransactionFees objBK_TRANSFEES_Info;
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("BK_TRANSFEES.TransID");
                lstFields.Add("BK_TRANSFEES.RecordLocator");
                lstFields.Add("BK_TRANSFEES.SeqNo");
                lstFields.Add("BK_TRANSFEES.FeeCode");
                lstFields.Add("BK_TRANSFEES.FeeDesc");
                lstFields.Add("BK_TRANSFEES.PaxType");
                lstFields.Add("BK_TRANSFEES.Origin");
                lstFields.Add("BK_TRANSFEES.Transit");
                lstFields.Add("BK_TRANSFEES.Destination");
                lstFields.Add("BK_TRANSFEES.FeeType");
                lstFields.Add("BK_TRANSFEES.FeeQty");
                lstFields.Add("BK_TRANSFEES.FeeRate");
                lstFields.Add("BK_TRANSFEES.FeeAmt");
                lstFields.Add("BK_TRANSFEES.Transvoid");
                lstFields.Add("BK_TRANSFEES.rowguid");
                lstFields.Add("BK_TRANSFEES.CreateBy");
                lstFields.Add("BK_TRANSFEES.SyncCreate");
                lstFields.Add("BK_TRANSFEES.SyncLastUpd");
                lstFields.Add("BK_TRANSFEES.LastSyncBy");

                strFields = GetSqlFields(lstFields);
                strFilter = "AND BK_TRANSFEES.FeeCode='" + pFeeCode + "'";
                strSQL = "SELECT " + strFields + " FROM BK_TRANSFEES " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];

                    objBK_TRANSFEES_Info = new BookingTransactionFees();
                    objBK_TRANSFEES_Info.TransID = (string)drRow["TransID"];
                    objBK_TRANSFEES_Info.RecordLocator = (string)drRow["RecordLocator"];
                    objBK_TRANSFEES_Info.SeqNo = (byte)drRow["SeqNo"];
                    objBK_TRANSFEES_Info.FeeCode = (string)drRow["FeeCode"];
                    objBK_TRANSFEES_Info.FeeDesc = (string)drRow["FeeDesc"];
                    objBK_TRANSFEES_Info.PaxType = (string)drRow["PaxType"];
                    objBK_TRANSFEES_Info.Origin = (string)drRow["Origin"];
                    objBK_TRANSFEES_Info.Transit = (string)drRow["Transit"];
                    objBK_TRANSFEES_Info.Destination = (string)drRow["Destination"];
                    objBK_TRANSFEES_Info.FeeType = (string)drRow["FeeType"];
                    objBK_TRANSFEES_Info.FeeQty = (double)drRow["FeeQty"];
                    objBK_TRANSFEES_Info.FeeRate = (decimal)drRow["FeeRate"];
                    objBK_TRANSFEES_Info.FeeAmt = (decimal)drRow["FeeAmt"];
                    objBK_TRANSFEES_Info.Transvoid = (byte)drRow["Transvoid"];
                    objBK_TRANSFEES_Info.rowguid = (Guid)drRow["rowguid"];
                    objBK_TRANSFEES_Info.CreateBy = (string)drRow["CreateBy"];
                    if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSFEES_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                    if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBK_TRANSFEES_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                    objBK_TRANSFEES_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                    return objBK_TRANSFEES_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSFEES does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public BookingTransactionFees SaveBK_TRANSFEES(BookingTransactionFees pBK_TRANSFEES_Info, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                objSQL.AddField("TransID", pBK_TRANSFEES_Info.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("RecordLocator", pBK_TRANSFEES_Info.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SeqNo", pBK_TRANSFEES_Info.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("FeeCode", pBK_TRANSFEES_Info.FeeCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("FeeDesc", pBK_TRANSFEES_Info.FeeDesc, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaxType", pBK_TRANSFEES_Info.PaxType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Origin", pBK_TRANSFEES_Info.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Transit", pBK_TRANSFEES_Info.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Destination", pBK_TRANSFEES_Info.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("FeeType", pBK_TRANSFEES_Info.FeeType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("FeeQty", pBK_TRANSFEES_Info.FeeQty, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("FeeRate", pBK_TRANSFEES_Info.FeeRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("FeeAmt", pBK_TRANSFEES_Info.FeeAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Transvoid", pBK_TRANSFEES_Info.Transvoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CreateBy", pBK_TRANSFEES_Info.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", pBK_TRANSFEES_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncLastUpd", pBK_TRANSFEES_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LastSyncBy", pBK_TRANSFEES_Info.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                switch (saveType)
                {
                    case EnumSaveType.Insert:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSFEES", string.Empty);
                        break;
                    case EnumSaveType.Update:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSFEES", "BK_TRANSFEES.TransID='" + pBK_TRANSFEES_Info.TransID + "' AND BK_TRANSFEES.FeeCode='" + pBK_TRANSFEES_Info.FeeCode + "'");
                        break;
                }
                lstSQL.Add(strSQL);
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return null;
                }
                return GetSingleBK_TRANSFEES(pBK_TRANSFEES_Info.TransID, pBK_TRANSFEES_Info.FeeCode);
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }
        #endregion

        #region PassengerControl
        public List<PassengerData> GetAllBK_PASSENGERLIST(string TransID)
        {
            PassengerData objBK_PASSENGERLIST_Info;
            List<PassengerData> objListBK_PASSENGERLIST_Info = new List<PassengerData>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;
            decimal number;
            try
            {
                string strfilter = "";
                strfilter = "WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND LEN(LTRIM(RTRIM(Recordlocator))) >= 6  AND Title <> 'INFT'";
                strSQL = "SELECT * FROM BK_PASSENGERLIST " + strfilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_PASSENGERLIST_Info = new PassengerData();
                        objBK_PASSENGERLIST_Info.TransID = (string)drRow["TransID"];
                        objBK_PASSENGERLIST_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_PASSENGERLIST_Info.PassengerID = (string)drRow["PassengerID"];
                        objBK_PASSENGERLIST_Info.Title = (string)drRow["Title"];
                        objBK_PASSENGERLIST_Info.Gender = (string)drRow["Gender"];
                        objBK_PASSENGERLIST_Info.FirstName = (string)drRow["FirstName"];
                        objBK_PASSENGERLIST_Info.LastName = (string)drRow["LastName"];
                        objBK_PASSENGERLIST_Info.PrevFirstName1 = (string)drRow["PrevFirstName1"];
                        objBK_PASSENGERLIST_Info.PrevLastName1 = (string)drRow["PrevLastName1"];
                        objBK_PASSENGERLIST_Info.PrevFirstName2 = (string)drRow["PrevFirstName2"];
                        objBK_PASSENGERLIST_Info.PrevLastName2 = (string)drRow["PrevLastName2"];
                        objBK_PASSENGERLIST_Info.Nationality = (string)drRow["Nationality"];
                        if (DateTime.TryParse(drRow["DOB"].ToString(), out dateValue)) objBK_PASSENGERLIST_Info.DOB = (DateTime)drRow["DOB"];
                        //edited by romy for divide before passengerupload
                        if ((string)drRow["PassportNo"] == "" || (string)drRow["PassportNo"] == "TBA")
                        {
                            objBK_PASSENGERLIST_Info.PassportNo = "TBA";
                        }
                        else
                        {
                            objBK_PASSENGERLIST_Info.PassportNo = (string)drRow["PassportNo"];
                        }

                        objBK_PASSENGERLIST_Info.IssuingCountry = (string)drRow["IssuingCountry"];
                        if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBK_PASSENGERLIST_Info.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                        if (decimal.TryParse(drRow["ChangeFee"].ToString(), out number)) objBK_PASSENGERLIST_Info.ChangeFee = System.Convert.ToDecimal(drRow["ChangeFee"]);
                        if (DateTime.TryParse(drRow["ChangeDate"].ToString(), out dateValue)) objBK_PASSENGERLIST_Info.ChangeDate = (DateTime)drRow["ChangeDate"];
                        if (decimal.TryParse(drRow["ChangeFee2"].ToString(), out number)) objBK_PASSENGERLIST_Info.ChangeFee2 = System.Convert.ToDecimal(drRow["ChangeFee2"]);
                        if (DateTime.TryParse(drRow["ChangeDate2"].ToString(), out dateValue)) objBK_PASSENGERLIST_Info.ChangeDate2 = (DateTime)drRow["ChangeDate2"];
                        objBK_PASSENGERLIST_Info.ChangeCount = (int)drRow["ChangeCount"];
                        objBK_PASSENGERLIST_Info.MaxChange = (int)drRow["MaxChange"];
                        objBK_PASSENGERLIST_Info.MaxPax1 = (int)drRow["MaxPax1"];
                        objBK_PASSENGERLIST_Info.MaxPax2 = (int)drRow["MaxPax2"];
                        objBK_PASSENGERLIST_Info.rowguid = (Guid)drRow["rowguid"];
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_PASSENGERLIST_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBK_PASSENGERLIST_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBK_PASSENGERLIST_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                        objListBK_PASSENGERLIST_Info.Add(objBK_PASSENGERLIST_Info);
                    }
                    return objListBK_PASSENGERLIST_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_PASSENGERLIST does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }
        //added by romy for insure
        public DataTable GetAllBK_PASSENGERLISTdataTable(string TransID)
        {
            DataTable dt;
            String strSQL = string.Empty;
            try
            {
                string strfilter = "";
                strfilter = "WHERE prn.TransID=" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + " AND LEN(LTRIM(RTRIM(prn.Recordlocator))) >= 6  AND prn.Title <> 'INFT'";
                strSQL = "SELECT prn.*, ROW_NUMBER() OVER  (ORDER BY prn.RecordLocator, CAST(prn.PassengerID as INT) ASC) AS SeqNo, CASE WHEN inf.PassengerID is null and prn.Title <> 'CHD' THEN 'Adult' ";
                strSQL += "WHEN inf.PassengerID is not null and prn.Title <> 'CHD' THEN 'Adult + Infant' WHEN prn.Title = 'CHD' THEN 'Child' END As PaxType, CASE WHEN prn.insurecode is null or prn.insurecode = '' THEN 'Added Insurance' WHEN prn.insurecode <> '' THEN 'Insured' END as Status, ";
                strSQL += "CASE WHEN prn.insurecode is null or prn.insurecode = '' THEN '' else cast(prn.insurefee as varchar(max)) END as InsureFee1, '0' AS IndicatorClear ";
                strSQL += "FROM BK_PASSENGERLIST prn cross apply (SELECT td.transid FROM bk_transdtl td where td.transid = prn.transid GROUP BY td.transid) td ";
                strSQL += "LEFT OUTER JOIN BK_PASSENGERLIST inf on inf.Recordlocator=prn.Recordlocator and prn.passengerid = inf.passengerid and inf.Title = 'INFT' " + strfilter;//edited by romy for insure
                //strfilter = "WHERE TransID=" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + " AND LEN(LTRIM(RTRIM(Recordlocator))) >= 6  AND Title <> 'INFT'";
                //strSQL = "SELECT *, ROW_NUMBER() OVER  (ORDER BY RecordLocator, CAST(PassengerID as INT) ASC) AS SeqNo FROM BK_PASSENGERLIST " + strfilter;//edited by romy for insure
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {

                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_PASSENGERLIST does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
            }
        }

        public DataTable GetAllBK_PASSENGERLISTSSRDataTable(string TransID, string Flight = "")
        {
            List<PassengerData> objListBK_PASSENGERLIST_Info = new List<PassengerData>();
            DataTable dt;
            String strSQL = string.Empty;
            String Filter = string.Empty;
            try
            {

                //edited by ketee
                string strfilter = "";
                strfilter = " WHERE BK_PASSENGERLIST.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND BK_PASSENGERLIST.Title <> 'INFT' ORDER BY BK_TRANSDTL.RecordLocator,  CAST(BK_PASSENGERLIST.PassengerID AS int)";
                strSQL = "SELECT '(' + LTRIM(RTRIM(BK_TRANSDTL.RecordLocator)) + ')' PNRs, ROW_NUMBER() OVER (ORDER BY BK_PASSENGERLIST.PassengerID ASC) AS SeqNo, BK_PASSENGERLIST.TransID, BK_TRANSDTL.CarrierCode,BK_TRANSDTL.FlightNo, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_TRANSDTL.RecordLocator AS PNR, BK_PASSENGERLIST.PassengerID, CASE BK_PASSENGERLIST.Title WHEN '' THEN 'Adult' WHEN 'Chd' THEN 'Child' END As PaxType, BK_PASSENGERLIST.FirstName, ";
                //strSQL += "BK_PASSENGERLIST.LastName, '' AS SSRCodeMeal,'' AS Meal, 0.00 As PriceMeal, '' AS SSRCodeMeal1,'' AS Meal1, 0.00 As PriceMeal1,  '' AS SSRCodeDrink,'' AS Drink, 0.00 As PriceDrink, '' AS SSRCodeDrink1,'' AS Drink1, 0.00 As PriceDrink1, '' AS SSRCodeBaggage, '' As Baggage, 0.00 As PriceBaggage, 0.00 As PriceBaggageS1, 0.00 As PriceBaggageS2, '' AS SSRCodeSport,'' As Sport, 0.00 As PriceSport, 0.00 As PriceSportS1, 0.00 As PriceSportS2, '' AS SSRCodeDuty, '' As Duty, 0.00 As PriceDuty, 0.00 As PriceDutyS1, 0.00 As PriceDutyS2, '' AS SSRCodeInfant,'' As Infant, 0.00 As PriceInfant, 0.00 As PriceInfantS1, 0.00 As PriceInfantS2, '' AS SSRCodeComfort, '' As Comfort, 0.00 As PriceComfort, 0.00 As PriceComfortS1, 0.00 As PriceComfortS2, BK_PASSENGERLIST.SyncCreate, ";
                strSQL += "BK_PASSENGERLIST.LastName, BK_PASSENGERLIST.Nationality, BK_PASSENGERLIST.IssuingCountry, '' AS SSRCodeMeal,'' AS Meal, 0.00 As PriceMeal, '' AS SSRCodeMeal1,'' AS Meal1, 0.00 As PriceMeal1,  '' AS SSRCodeDrink,'' AS Drink, 0.00 As PriceDrink, '' AS SSRCodeDrink1,'' AS Drink1, 0.00 As PriceDrink1, '' AS SSRCodeBaggage, '' As Baggage, 0.00 As PriceBaggage, 0.00 As PriceBaggageS1, 0.00 As PriceBaggageS2, '' AS SSRCodeSport,'' As Sport, 0.00 As PriceSport, 0.00 As PriceSportS1, 0.00 As PriceSportS2, '' AS SSRCodeInsure,'' As Insure, 0.00 As PriceInsure, 0.00 As PriceInsureS1, 0.00 As PriceInsureS2, '' AS SSRCodeDuty, '' As Duty, 0.00 As PriceDuty, 0.00 As PriceDutyS1, 0.00 As PriceDutyS2, '' AS SSRCodeInfant,'' As Infant, 0.00 As PriceInfant, 0.00 As PriceInfantS1, 0.00 As PriceInfantS2, '' AS SSRCodeComfort, '' As Comfort, 0.00 As PriceComfort, 0.00 As PriceComfortS1, 0.00 As PriceComfortS2, BK_PASSENGERLIST.SyncCreate, ";//edited by romy, 20170811, insurance
                strSQL += "BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy FROM BK_PASSENGERLIST INNER JOIN BK_TRANSDTL ";
                strSQL += "ON BK_TRANSDTL.TransID = BK_PASSENGERLIST.TransID AND BK_TRANSDTL.RecordLocator = BK_PASSENGERLIST.RecordLocator" + strfilter;

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {

                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_PASSENGERLIST does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public DataTable GetAllBK_PASSENGERLISTSSRDataTableChangeNew(string TransID, string Flight = "")
        {
            List<PassengerData> objListBK_PASSENGERLIST_Info = new List<PassengerData>();
            DataTable dt;
            String strSQL = string.Empty;
            String Filter = string.Empty;
            int TripMode = 0;
            try
            {
                if (Flight == "Depart") TripMode = 0;
                else if (Flight == "Return") TripMode = 1;

                strSQL = "SELECT ROW_NUMBER() OVER  (ORDER BY PNR, CAST(PassengerID as INT) ASC) AS SeqNo, TransID, PNR, PNRs, CASE Title WHEN 'Mr' THEN 'Adult' WHEN 'Ms' THEN 'Adult' WHEN 'Chd' THEN 'Child' END As PaxType,  FlightNo, CarrierCode, Origin, Transit, Destination, Currency, PassengerID, PaxNo, Title, Gender, CountryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, ChangeCount, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat, PaxType, ";
                strSQL += "CASE WHEN MAX(DBaggage) <> '' OR MAX(DCBaggage) <> '' THEN (SUBSTRING(MAX(DepartBaggage), 0, 24) + CAST(CAST(ROUND(SUM(DBaggagePrice) + SUM(DCBaggagePrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END Baggage, (SUM(DBaggagePrice) + SUM(DCBaggagePrice)) PriceBaggage, ";
                strSQL += "CASE WHEN MAX(DSport) <> '' OR MAX(DCSport) <> '' THEN (SUBSTRING(MAX(DepartSport), 0, 25) + CAST(CAST(ROUND(SUM(DSportPrice) + SUM(DCSportPrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END Sport, (SUM(DSportPrice) + SUM(DCSportPrice)) PriceSport, ";
                strSQL += "CASE WHEN MAX(DInsure) <> '' OR MAX(DCInsure) <> '' THEN (SUBSTRING(MAX(DepartInsure), 0, 25) + CAST(CAST(ROUND(SUM(DInsurePrice) + SUM(DCInsurePrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END Insure, (SUM(DInsurePrice) + SUM(DCInsurePrice)) PriceInsure, ";//added by romy, 20170811, insurance
                strSQL += "CASE WHEN MAX(DKit) <> '' OR MAX(DCKit) <> '' THEN (SUBSTRING(MAX(DepartComfort), 0, 15) + CAST(CAST(ROUND(SUM(DKitPrice) + SUM(DCKitPrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END Comfort, (SUM(DKitPrice) + SUM(DCKitPrice)) PriceComfort,  ";
                strSQL += "CASE WHEN MAX(DDuty) <> '' OR MAX(DCDuty) <> '' THEN (SUBSTRING(MAX(DDuty), 0, 15) + CAST(CAST(ROUND(SUM(DDutyPrice) + SUM(DCDutyPrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END Duty, (SUM(DDutyPrice) + SUM(DCDutyPrice)) PriceDuty,  ";
                strSQL += "CASE WHEN MAX(DInfant) <> '' OR MAX(DCInfant) <> '' THEN (SUBSTRING(MAX(DepartInfant), 0, 24) + CAST(CAST(ROUND(SUM(DInfantPrice) + SUM(DCInfantPrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END Infant, (SUM(DInfantPrice) + SUM(DCInfantPrice)) PriceInfant, ";
                strSQL += "MAX(DBaggageCode) SSRCodeBaggage, MAX(DBaggage) DBaggage, SUM(DBaggagePrice) PriceBaggageS1, ";
                strSQL += "MAX(DMealCode1) SSRCodeMeal, MAX(DMeal1) Meal, SUM(DMealPrice1) PriceMeal, ";
                strSQL += "MAX(DMealCode2) DMealCode2, MAX(DMeal2) DMeal2, SUM(DMealPrice2) DMealPrice2, ";
                strSQL += "MAX(DMealCode3) DMealCode3, MAX(DMeal3) DMeal3, SUM(DMealPrice3) DMealPrice3, ";
                strSQL += "MAX(DMealCode4) DMealCode4, MAX(DMeal4) DMeal4, SUM(DMealPrice4) DMealPrice4, ";
                strSQL += "MAX(DDrinkCode1) SSRCodeDrink, MAX(DDrink1) Drink, SUM(DDrinkPrice1) PriceDrink, ";
                strSQL += "MAX(DDrinkCode2) DDrinkCode2, MAX(DDrink2) DDrink2, SUM(DDrinkPrice2) DDrinkPrice2, ";
                strSQL += "MAX(DDrinkCode3) DDrinkCode3, MAX(DDrink3) DDrink3, SUM(DDrinkPrice3) DDrinkPrice3, ";
                strSQL += "MAX(DDrinkCode4) DDrinkCode4, MAX(DDrink4) DDrink4, SUM(DDrinkPrice4) DDrinkPrice4, ";
                strSQL += "MAX(DSportCode) SSRCodeSport, MAX(DSport) DSport, SUM(DSportPrice) PriceSportS1, ";
                strSQL += "MAX(DInsureCode) SSRCodeInsure, MAX(DInsure) DInsure, SUM(DInsurePrice) PriceInsureS1, ";//added by romy, 20170811, insurance
                strSQL += "MAX(DKitCode) SSRCodeComfort, MAX(DKit) Comfort, SUM(DKitPrice) PriceComfortS1, ";
                strSQL += "MAX(DDutyCode) SSRCodeDuty, MAX(DDuty) Duty, SUM(DDutyPrice) PriceDutyS1, SUM(DInfantPrice) PriceInfantS1,";
                strSQL += "MAX(DInfantCode) SSRCodeInfant, MAX(DInfant) DInfant, SUM(DInfantPrice) DInfantPrice, ";
                strSQL += "MAX(DCBaggageCode) DCBaggageCode, MAX(DCBaggage) DCBaggage, SUM(DCBaggagePrice) PriceBaggageS2, SUM(DCInfantPrice) PriceInfantS2, ";
                strSQL += "MAX(DCMealCode1) SSRCodeMeal1, MAX(DCMeal1) Meal1, SUM(DCMealPrice1) PriceMeal1, ";
                strSQL += "MAX(DCMealCode2) DCMealCode2, MAX(DCMeal2) DCMeal2, SUM(DCMealPrice2) DCMealPrice2,  ";
                strSQL += "MAX(DCMealCode3) DCMealCode3, MAX(DCMeal3) DCMeal3, SUM(DCMealPrice3) DCMealPrice3,  ";
                strSQL += "MAX(DCMealCode4) DCMealCode4, MAX(DCMeal4) DCMeal4, SUM(DCMealPrice4) DCMealPrice4,  ";
                strSQL += "MAX(DCDrinkCode1) SSRCodeDrink1, MAX(DCDrink1) Drink1, SUM(DCDrinkPrice1) PriceDrink1,  ";
                strSQL += "MAX(DCDrinkCode2) DCDrinkCode2, MAX(DCDrink2) DCDrink2, SUM(DCDrinkPrice2) DCDrinkPrice2,  ";
                strSQL += "MAX(DCDrinkCode3) DCDrinkCode3, MAX(DCDrink3) DCDrink3, SUM(DCDrinkPrice3) DCDrinkPrice3,  ";
                strSQL += "MAX(DCDrinkCode4) DCDrinkCode4, MAX(DCDrink4) DCDrink4, SUM(DCDrinkPrice4) DCDrinkPrice4, ";
                strSQL += "MAX(DCSportCode) DCSportCode, MAX(DCSport) DCSport, SUM(DCSportPrice) PriceSportS2,  ";
                strSQL += "MAX(DCInsureCode) DCInsureCode, MAX(DCInsure) DCInsure, SUM(DCInsurePrice) PriceInsureS2,  ";//added by romy, 20170811, insurance
                strSQL += "MAX(DKitCode) DCKitCode, MAX(DCKit) DCKit, SUM(DCKitPrice) PriceComfortS2,  ";
                strSQL += "MAX(DCDutyCode) DCDutyCode, MAX(DCDuty) DCDuty, SUM(DCDutyPrice) PriceDutyS2,  ";
                strSQL += "MAX(DCInfantCode) DCInfantCode, MAX(DCInfant) DCInfant, SUM(DCInfantPrice) DCInfantPrice ";
                strSQL += "FROM ( ";
                strSQL += "SELECT p.TransID, p.RecordLocator PNR, '(' + LTRIM(RTRIM(p.RecordLocator)) + ')' PNRs, d.FlightNo, d.CarrierCode, d.Origin, d.Transit, d.Destination, h.Currency, p.PassengerID, p.PaxNo, p.Title, p.Gender, ISNULL(c.Name,'') CountryName, p.Nationality, p.DOB, ISNULL(cp.Name,'') IssuingCountryName, p.IssuingCountry, p.ChangeCount, p.MaxChange, p.MaxPax1, p.MaxPax2, p.ExpiryDate, p.ContactNo, p.Email, p.ChangeFee, p.ChangeDate, p.ChangeFee2, p.ChangeDate2, p.FirstName, p.LastName, p.PassportNo, CASE WHEN p.ChangeCount >= 1 THEN(CONVERT(VARCHAR, p.ChangeCount) + 'x')  ELSE '-' END ChangeCnt, p.ChangeCount InitChange, p.PrevFirstName1, p.PrevLastName1, p.PrevFirstName2, p.PrevLastName2, (p.MaxChange - p.ChangeCount) CountChanged, p.DepartSeat, p.ReturnSeat, p.DepartConnectingSeat, p.ReturnConnectingSeat,  CASE p.Title WHEN '' THEN 'Adult' WHEN 'Mr' THEN 'Adult' WHEN 'Ms' THEN 'Adult' WHEN 'Chd' THEN 'Chd' END As PaxType, ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(ib.ItemDesc + ' : ' + cast(cast(round((CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.BaggageAmt ELSE 0 END) + (CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.BaggageAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DepartBaggage, ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.BaggageCode ELSE '' END DBaggageCode, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(ib.ItemDesc + ' : ' + cast(cast(round(s.BaggageAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DBaggage, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.BaggageAmt ELSE 0 END DBaggagePrice, ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.MealCode1 ELSE '' END DMealCode1, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(im1.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal1, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DMeal1, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.MealSubTotal1 ELSE 0 END DMealPrice1, ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.MealCode2 ELSE '' END DMealCode2, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(im2.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal2, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DMeal2, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.MealSubTotal2 ELSE 0 END DMealPrice2, ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.MealCode3 ELSE '' END DMealCode3, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(im3.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal3, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DMeal3, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.MealSubTotal3 ELSE 0 END DMealPrice3, ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.MealCode4 ELSE '' END DMealCode4, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(im4.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal4, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DMeal4, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.MealSubTotal4 ELSE 0 END DMealPrice4, ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.DrinkCode1 ELSE '' END DDrinkCode1, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(id1.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal1, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DDrink1, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.DrinkSubTotal1 ELSE 0 END DDrinkPrice1, ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.DrinkCode2 ELSE '' END DDrinkCode2, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(id2.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal2, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DDrink2, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.DrinkSubTotal2 ELSE 0 END DDrinkPrice2, ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.DrinkCode3 ELSE '' END DDrinkCode3, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(id3.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal3, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DDrink3, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.DrinkSubTotal3 ELSE 0 END DDrinkPrice3, ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.DrinkCode4 ELSE '' END DDrinkCode4, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(id4.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal4, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DDrink4, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.DrinkSubTotal4 ELSE 0 END DDrinkPrice4,  ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(isp.ItemDesc + ' : ' + cast(cast(round((CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.SportAmt ELSE 0 END) + (CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.SportAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DepartSport, ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(isi.ItemDesc + ' : ' + cast(cast(round((CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.InsureAmt ELSE 0 END) + (CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.InsureAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DepartInsure, ";//added by romy, 20170811, insurance
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(isp.ItemDesc + ' : ' + cast(cast(round((CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.InfantAmt ELSE 0 END) + (CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.InfantAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DepartInfant, ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.SportCode ELSE '' END DSportCode, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(isp.ItemDesc + ' : ' + cast(cast(round(s.SportAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DSport, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.SportAmt ELSE 0 END DSportPrice,  ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN p.InsureCode ELSE '' END DInsureCode, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(isi.ItemDesc + ' : ' + cast(cast(round(s.InsureAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DInsure, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.InsureAmt ELSE 0 END DInsurePrice,  ";//added by romy, 20170811, insurance
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(ik.ItemDesc + ' : ' + cast(cast(round((CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.KitAmt ELSE 0 END) + (CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.KitAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DepartComfort,  ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.KitCode ELSE '' END DKitCode, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(ik.ItemDesc + ' : ' + cast(cast(round(s.KitAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DKit, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.KitAmt ELSE 0 END DKitPrice,  ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.DutyCode ELSE '' END DDutyCode, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(id.ItemDesc + ' : ' + cast(cast(round(s.DutyAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DDuty, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.DutyAmt ELSE 0 END DDutyPrice,  ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.InfantCode ELSE '' END DInfantCode, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(ii.ItemDesc + ' : ' + cast(cast(round(s.InfantAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DInfant, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN s.InfantAmt ELSE 0 END DInfantPrice, ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.BaggageCode ELSE '' END DCBaggageCode, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN ISNULL(ib.ItemDesc + ' : ' + cast(cast(round(s.BaggageAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCBaggage, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.BaggageAmt ELSE 0 END DCBaggagePrice,  ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.MealCode1 ELSE '' END DCMealCode1, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN ISNULL(im1.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal1, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCMeal1, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.MealSubTotal1 ELSE 0 END DCMealPrice1, ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.MealCode2 ELSE '' END DCMealCode2, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN ISNULL(im2.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal2, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCMeal2, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.MealSubTotal2 ELSE 0 END DCMealPrice2, ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.MealCode3 ELSE '' END DCMealCode3, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN ISNULL(im3.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal3, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCMeal3, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.MealSubTotal3 ELSE 0 END DCMealPrice3, ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.MealCode4 ELSE '' END DCMealCode4, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN ISNULL(im4.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal4, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCMeal4, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.MealSubTotal4 ELSE 0 END DCMealPrice4,  ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.DrinkCode1 ELSE '' END DCDrinkCode1, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN ISNULL(id1.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal1, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCDrink1, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.DrinkSubTotal1 ELSE 0 END DCDrinkPrice1,  ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.DrinkCode2 ELSE '' END DCDrinkCode2, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN ISNULL(id2.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal2, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCDrink2, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.DrinkSubTotal2 ELSE 0 END DCDrinkPrice2,  ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.DrinkCode3 ELSE '' END DCDrinkCode3, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN ISNULL(id3.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal3, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCDrink3, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.DrinkSubTotal3 ELSE 0 END DCDrinkPrice3,  ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.DrinkCode4 ELSE '' END DCDrinkCode4, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN ISNULL(id4.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal4, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCDrink4, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.DrinkSubTotal4 ELSE 0 END DCDrinkPrice4,   ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.SportCode ELSE '' END DCSportCode, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(isp.ItemDesc + ' : ' + cast(cast(round(s.SportAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCSport, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.SportAmt ELSE 0 END DCSportPrice,   ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN p.InsureCode ELSE '' END DCInsureCode, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 0 THEN ISNULL(isi.ItemDesc + ' : ' + cast(cast(round(s.InsureAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCInsure, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.InsureAmt ELSE 0 END DCInsurePrice,   ";//added by romy, 20170811, insurance
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.KitCode ELSE '' END DCKitCode, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN ISNULL(ik.ItemDesc + ' : ' + cast(cast(round(s.KitAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCKit, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.KitAmt ELSE 0 END DCKitPrice,   ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.DutyCode ELSE '' END DCDutyCode, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN ISNULL(id.ItemDesc + ' : ' + cast(cast(round(s.DutyAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCDuty, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.DutyAmt ELSE 0 END DCDutyPrice,   ";
                strSQL += "CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.InfantCode ELSE '' END DCInfantCode, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN ISNULL(ii.ItemDesc + ' : ' + cast(cast(round(s.InfantAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCInfant, CASE WHEN s.TripMode = " + TripMode + " AND s.Segment = 1 THEN s.InfantAmt ELSE 0 END DCInfantPrice ";
                strSQL += "FROM BK_PASSENGERLIST p WITH (NOLOCK) ";
                strSQL += "INNER JOIN BK_TRANSMAIN h WITH (NOLOCK) ON h.TransID = p.TransID ";
                strSQL += "CROSS APPLY (SELECT TOP 1 d.FlightNo, d.CarrierCode, d.Origin, d.Transit, d.Destination FROM BK_TRANSDTL d WITH (NOLOCK) WHERE d.TransID = p.TransID AND d.RecordLocator = p.RecordLocator ORDER BY SeqNo ASC) d ";
                strSQL += "LEFT JOIN COUNTRY c WITH (NOLOCK) ON c.CountryCode = p.Nationality ";
                strSQL += "LEFT JOIN COUNTRY cp WITH (NOLOCK) ON cp.CountryCode = p.IssuingCountry ";
                strSQL += "LEFT JOIN BK_TRANSADDON s WITH (NOLOCK) ON p.TransID = s.TransID AND p.RecordLocator = s.RecordLocator AND p.PassengerID = s.PassengerID ";
                strSQL += "LEFT JOIN ITEM ib WITH (NOLOCK) ON ib.ItemCode = s.BaggageCode ";
                strSQL += "LEFT JOIN ITEM im1 WITH (NOLOCK) ON im1.ItemCode = s.MealCode1 ";
                strSQL += "LEFT JOIN ITEM im2 WITH (NOLOCK) ON im2.ItemCode = s.MealCode2 ";
                strSQL += "LEFT JOIN ITEM im3 WITH (NOLOCK) ON im3.ItemCode = s.MealCode3 ";
                strSQL += "LEFT JOIN ITEM im4 WITH (NOLOCK) ON im4.ItemCode = s.MealCode4 ";
                strSQL += "LEFT JOIN ITEM id1 WITH (NOLOCK) ON id1.ItemCode = s.DrinkCode1 ";
                strSQL += "LEFT JOIN ITEM id2 WITH (NOLOCK) ON id2.ItemCode = s.DrinkCode2 ";
                strSQL += "LEFT JOIN ITEM id3 WITH (NOLOCK) ON id3.ItemCode = s.DrinkCode3 ";
                strSQL += "LEFT JOIN ITEM id4 WITH (NOLOCK) ON id4.ItemCode = s.DrinkCode4 ";
                strSQL += "LEFT JOIN ITEM isp WITH (NOLOCK) ON isp.ItemCode = s.SportCode ";
                strSQL += "LEFT JOIN ITEM isi WITH (NOLOCK) ON isi.ItemCode = p.InsureCode ";//added by romy, 20170811, insurance
                strSQL += "LEFT JOIN ITEM ik WITH (NOLOCK) ON ik.ItemCode = s.KitCode ";
                strSQL += "LEFT JOIN ITEM id WITH (NOLOCK) ON id.ItemCode = s.DutyCode ";
                strSQL += "LEFT JOIN ITEM ii WITH (NOLOCK) ON ii.ItemCode = s.InfantCode ";
                strSQL += "WHERE p.Title <> 'INFT' AND p.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND LEN(p.RecordLocator)>=6  ";
                strSQL += "GROUP BY p.TransID, p.RecordLocator, d.FlightNo, d.CarrierCode, d.Origin, d.Transit, d.Destination, h.Currency, p.PassengerID, p.PaxNo, p.Title, p.Gender, ISNULL(c.Name,''), p.Nationality, p.DOB, ISNULL(cp.Name,''), p.IssuingCountry, p.ChangeCount, p.MaxChange, p.MaxPax1, p.MaxPax2, p.ExpiryDate, p.ContactNo, p.Email, p.ChangeFee, p.ChangeDate, p.ChangeFee2, p.ChangeDate2, p.FirstName, p.LastName, p.PassportNo, CASE WHEN p.ChangeCount >= 1 THEN(CONVERT(VARCHAR, p.ChangeCount) + 'x')  ELSE '-' END, p.ChangeCount, p.PrevFirstName1, p.PrevLastName1, p.PrevFirstName2, p.PrevLastName2, (p.MaxChange - p.ChangeCount), p.DepartSeat, p.ReturnSeat, p.DepartConnectingSeat, p.ReturnConnectingSeat, s.TripMode, s.Segment, s.BaggageCode, ib.ItemDesc, s.BaggageAmt, s.MealCode1, im1.ItemDesc, s.MealSubTotal1, s.MealCode2, im2.ItemDesc, s.MealSubTotal2, s.MealCode3, im3.ItemDesc, s.MealSubTotal3, s.MealCode4, im4.ItemDesc, s.MealSubTotal4, s.DrinkCode1, id1.ItemDesc, s.DrinkSubTotal1, s.DrinkCode2, id2.ItemDesc, s.DrinkSubTotal2, s.DrinkCode3, id3.ItemDesc, s.DrinkSubTotal3, s.DrinkCode4, id4.ItemDesc, s.DrinkSubTotal4, s.SportCode, p.InsureCode, isp.ItemDesc, isi.ItemDesc, s.SportAmt, s.InsureAmt, s.KitCode, ik.ItemDesc, s.KitAmt, s.DutyCode, id.ItemDesc, s.DutyAmt, s.InfantCode, ii.ItemDesc, s.InfantAmt ";
                strSQL += ") A ";
                strSQL += "GROUP BY TransID, PNR, PNRs, FlightNo, CarrierCode, Origin, Transit, Destination, Currency, PassengerID, PaxNo, Title, Gender, CountryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, ChangeCount, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat, PaxType";

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {

                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_PASSENGERLIST does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        //public DataTable GetAllBK_PASSENGERLISTSSRDataTableChangedepart(string TransID, string Flight = "")
        //{
        //    List<PassengerData> objListBK_PASSENGERLIST_Info = new List<PassengerData>();
        //    DataTable dt;
        //    String strSQL = string.Empty;
        //    String Filter = string.Empty;
        //    try
        //    {

        //        strSQL = "SELECT SeqNo, TransID, PNR, FlightNo, CarrierCode, Origin, Destination, Currency, PassengerID, PaxType, FirstName, LastName, ";
        //        strSQL += "ISNULL((SUBSTRING(max(DepartMeal), 0, CHARINDEX('|', max(DepartMeal)))),'') SSRCodeMeal, ";
        //        strSQL += "ISNULL(SUBSTRING(max(DepartMeal), CHARINDEX('|', max(DepartMeal)) + 1, (LEN(max(DepartMeal)) - CHARINDEX('|', REVERSE(max(DepartMeal))) - CHARINDEX('|', max(DepartMeal)))),'') Meal, ";
        //        strSQL += "ISNULL(CAST(SUBSTRING(max(DepartMeal), LEN(max(DepartMeal)) - CHARINDEX('|', REVERSE(max(DepartMeal))) + 2, CHARINDEX('|', REVERSE(max(DepartMeal)))) as decimal(12,2)),0.00) PriceMeal, ";
        //        strSQL += "ISNULL((SUBSTRING(max(DepartDrink), 0, CHARINDEX('|', max(DepartDrink)))),'') SSRCodeDrink, ";
        //        strSQL += "ISNULL(SUBSTRING(max(DepartDrink), CHARINDEX('|', max(DepartDrink)) + 1, (LEN(max(DepartDrink)) - CHARINDEX('|', REVERSE(max(DepartDrink))) - CHARINDEX('|', max(DepartDrink)))),'') Drink, ";
        //        strSQL += "ISNULL(CAST(SUBSTRING(max(DepartDrink), LEN(max(DepartDrink)) - CHARINDEX('|', REVERSE(max(DepartDrink))) + 2, CHARINDEX('|', REVERSE(max(DepartDrink)))) as decimal(12,2)),0.00) PriceDrink, ";
        //        strSQL += "ISNULL((SUBSTRING(max(DepartBaggage), 0, CHARINDEX('|', max(DepartBaggage)))),'') SSRCodeBaggage, ";
        //        strSQL += "ISNULL(SUBSTRING(max(DepartBaggage), CHARINDEX('|', max(DepartBaggage)) + 1, (LEN(max(DepartBaggage)) - CHARINDEX('|', REVERSE(max(DepartBaggage))) - CHARINDEX('|', max(DepartBaggage)))),'') Baggage, ";
        //        strSQL += "ISNULL(CAST(SUBSTRING(max(DepartBaggage), LEN(max(DepartBaggage)) - CHARINDEX('|', REVERSE(max(DepartBaggage))) + 2, CHARINDEX('|', REVERSE(max(DepartBaggage)))) as decimal(12,2)),0.00) + ISNULL(CAST(SUBSTRING(max(ConDepartBaggage), LEN(max(ConDepartBaggage)) - CHARINDEX('|', REVERSE(max(ConDepartBaggage))) + 2, CHARINDEX('|', REVERSE(max(ConDepartBaggage)))) as decimal(12,2)),0.00) PriceBaggage, ";
        //        strSQL += "ISNULL((SUBSTRING(max(DepartSportEquipment), 0, CHARINDEX('|', max(DepartSportEquipment)))),'') SSRCodeSport, ";
        //        strSQL += "ISNULL(SUBSTRING(max(DepartSportEquipment), CHARINDEX('|', max(DepartSportEquipment)) + 1, (LEN(max(DepartSportEquipment)) - CHARINDEX('|', REVERSE(max(DepartSportEquipment))) - CHARINDEX('|', max(DepartSportEquipment)))),'') Sport, ";
        //        strSQL += "ISNULL(CAST(SUBSTRING(max(DepartSportEquipment), LEN(max(DepartSportEquipment)) - CHARINDEX('|', REVERSE(max(DepartSportEquipment))) + 2, CHARINDEX('|', REVERSE(max(DepartSportEquipment)))) as decimal(12,2)),0.00) + ISNULL(CAST(SUBSTRING(max(ConDepartSportEquipment), LEN(max(ConDepartSportEquipment)) - CHARINDEX('|', REVERSE(max(ConDepartSportEquipment))) + 2, CHARINDEX('|', REVERSE(max(ConDepartSportEquipment)))) as decimal(12,2)),0.00) PriceSport, ";
        //        strSQL += "ISNULL((SUBSTRING(max(DepartComfortKit), 0, CHARINDEX('|', max(DepartComfortKit)))),'') SSRCodeComfort, ";
        //        strSQL += "ISNULL(SUBSTRING(max(DepartComfortKit), CHARINDEX('|', max(DepartComfortKit)) + 1, (LEN(max(DepartComfortKit)) - CHARINDEX('|', REVERSE(max(DepartComfortKit))) - CHARINDEX('|', max(DepartComfortKit)))),'') Comfort, ";
        //        strSQL += "ISNULL(CAST(SUBSTRING(max(DepartComfortKit), LEN(max(DepartComfortKit)) - CHARINDEX('|', REVERSE(max(DepartComfortKit))) + 2, CHARINDEX('|', REVERSE(max(DepartComfortKit)))) as decimal(12,2)),0.00) + ISNULL(CAST(SUBSTRING(max(ConDepartComfortKit), LEN(max(ConDepartComfortKit)) - CHARINDEX('|', REVERSE(max(ConDepartComfortKit))) + 2, CHARINDEX('|', REVERSE(max(ConDepartComfortKit)))) as decimal(12,2)),0.00) PriceComfort, ";
        //        strSQL += "ISNULL((SUBSTRING(max(ConDepartMeal), 0, CHARINDEX('|', max(ConDepartMeal)))),'') SSRCodeMeal1, ";
        //        strSQL += "ISNULL(SUBSTRING(max(ConDepartMeal), CHARINDEX('|', max(ConDepartMeal)) + 1, (LEN(max(ConDepartMeal)) - CHARINDEX('|', REVERSE(max(ConDepartMeal))) - CHARINDEX('|', max(ConDepartMeal)))),'') Meal1, ";
        //        strSQL += "ISNULL(CAST(SUBSTRING(max(ConDepartMeal), LEN(max(ConDepartMeal)) - CHARINDEX('|', REVERSE(max(ConDepartMeal))) + 2, CHARINDEX('|', REVERSE(max(ConDepartMeal)))) as decimal(12,2)),0.00) PriceMeal1, ";
        //        strSQL += "ISNULL((SUBSTRING(max(ConDepartDrink), 0, CHARINDEX('|', max(ConDepartDrink)))),'') SSRCodeDrink1, ";
        //        strSQL += "ISNULL(SUBSTRING(max(ConDepartDrink), CHARINDEX('|', max(ConDepartDrink)) + 1, (LEN(max(ConDepartDrink)) - CHARINDEX('|', REVERSE(max(ConDepartDrink))) - CHARINDEX('|', max(ConDepartDrink)))),'') Drink1, ";
        //        strSQL += "ISNULL(CAST(SUBSTRING(max(ConDepartDrink), LEN(max(ConDepartDrink)) - CHARINDEX('|', REVERSE(max(ConDepartDrink))) + 2, CHARINDEX('|', REVERSE(max(ConDepartDrink)))) as decimal(12,2)),0.00) PriceDrink1, '' AS SSRCodeDuty, '' As Duty, 0.00 As PriceDuty ";
        //        strSQL += "FROM( SELECT ROW_NUMBER() OVER(ORDER BY BK_PASSENGERLIST.RecordLocator, CAST(BK_PASSENGERLIST.PassengerID as INT) ASC) AS SeqNo, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.TransID, BK_PASSENGERLIST.RecordLocator AS PNR, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, CASE BK_PASSENGERLIST.Title WHEN '' THEN 'Adult' WHEN 'Mr' THEN 'Adult' WHEN 'Ms' THEN 'Adult' WHEN 'Chd' THEN 'Child' END As PaxType, FirstName, LastName, ";
        //        strSQL += "x.[Meal][DepartMeal], x.[Drink][DepartDrink], x.[Baggage][DepartBaggage], x.[Sport Equipment][DepartSportEquipment], x.[Comfort Kit][DepartComfortKit], ";
        //        strSQL += "xx.[Meal][ConDepartMeal], xx.[Drink][ConDepartDrink], xx.[Baggage][ConDepartBaggage], xx.[Sport Equipment][ConDepartSportEquipment], xx.[Comfort Kit][ConDepartComfortKit] ";
        //        strSQL += " FROM BK_PASSENGERLIST LEFT JOIN COUNTRY(NOLOCK) ON BK_PASSENGERLIST.Nationality = COUNTRY.CountryCode INNER JOIN BK_TRANSDTL ON BK_TRANSDTL.TransID = BK_PASSENGERLIST.TransID AND BK_TRANSDTL.TransVoid = '0' ";
        //        strSQL += " OUTER APPLY ";
        //        strSQL += " ( select * from( select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and p.PassengerID = BK_PASSENGERLIST.PassengerID and s.Origin = BK_TRANSDTL.Origin and s.Destination =case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Destination else BK_TRANSDTL.Transit end and BK_TRANSDTL.SeqNo % 2 = 1) a ";
        //        strSQL += " pivot(max(SSRDetail) for CatgDesc in ([Meal],[Drink],[Baggage],[Sport Equipment],[Comfort Kit])) b ) x ";
        //        strSQL += " OUTER APPLY ";
        //        strSQL += " (select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 1) a ";
        //        strSQL += " pivot (max(SSRDetail) for CatgDesc in ([Meal],[Drink],[Baggage],[Sport Equipment],[Comfort Kit])) b) xx ";
        //        strSQL += " WHERE BK_PASSENGERLIST.Title <> 'INFT' AND BK_PASSENGERLIST.TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND LEN(BK_TRANSDTL.RecordLocator) >= 6  and BK_TRANSDTL.SeqNo % 2 = 1 GROUP BY BK_PASSENGERLIST.TransID, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.RecordLocator, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, BK_PASSENGERLIST.Title, FirstName, LastName, ";
        //        strSQL += " x.[Meal], x.[Drink], x.[Baggage], x.[Sport Equipment], x.[Comfort Kit], ";
        //        strSQL += " xx.[Meal], xx.[Drink], xx.[Baggage], xx.[Sport Equipment], xx.[Comfort Kit]) s ";
        //        strSQL += " GROUP BY SeqNo, FlightNo, CarrierCode, Origin, Destination, TransID, PNR, Currency, PassengerID, PaxType, FirstName, LastName";

        //        dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
        //        if (dt != null && dt.Rows.Count > 0)
        //        {

        //            return dt;
        //        }
        //        else
        //        {
        //            return null;
        //            throw new ApplicationException("BK_PASSENGERLIST does not exist.");
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }
        //}

        //public DataTable GetAllBK_PASSENGERLISTSSRDataTableChangereturn(string TransID, string Flight = "")
        //{
        //    List<PassengerData> objListBK_PASSENGERLIST_Info = new List<PassengerData>();
        //    DataTable dt;
        //    String strSQL = string.Empty;
        //    String Filter = string.Empty;
        //    try
        //    {

        //        strSQL = "SELECT SeqNo, TransID, PNR, FlightNo, CarrierCode, Origin, Destination, Currency, PassengerID, PaxType, FirstName, LastName, ";
        //        strSQL += "ISNULL((SUBSTRING(max(ReturnMeal), 0, CHARINDEX('|', max(ReturnMeal)))),'') SSRCodeMeal, ";
        //        strSQL += "ISNULL(SUBSTRING(max(ReturnMeal), CHARINDEX('|', max(ReturnMeal)) + 1, (LEN(max(ReturnMeal)) - CHARINDEX('|', REVERSE(max(ReturnMeal))) - CHARINDEX('|', max(ReturnMeal)))),'') Meal, ";
        //        strSQL += "ISNULL(CAST(SUBSTRING(max(ReturnMeal), LEN(max(ReturnMeal)) - CHARINDEX('|', REVERSE(max(ReturnMeal))) + 2, CHARINDEX('|', REVERSE(max(ReturnMeal)))) as decimal(12,2)),0.00) PriceMeal, ";
        //        strSQL += "ISNULL((SUBSTRING(max(ReturnDrink), 0, CHARINDEX('|', max(ReturnDrink)))),'') SSRCodeDrink, ";
        //        strSQL += "ISNULL(SUBSTRING(max(ReturnDrink), CHARINDEX('|', max(ReturnDrink)) + 1, (LEN(max(ReturnDrink)) - CHARINDEX('|', REVERSE(max(ReturnDrink))) - CHARINDEX('|', max(ReturnDrink)))),'') Drink, ";
        //        strSQL += "ISNULL(CAST(SUBSTRING(max(ReturnDrink), LEN(max(ReturnDrink)) - CHARINDEX('|', REVERSE(max(ReturnDrink))) + 2, CHARINDEX('|', REVERSE(max(ReturnDrink)))) as decimal(12,2)),0.00) PriceDrink, ";
        //        strSQL += "ISNULL(SUBSTRING(max(ReturnBaggage), 0, CHARINDEX('|', max(ReturnBaggage))),'') SSRCodeBaggage, ";
        //        strSQL += "ISNULL(SUBSTRING(max(ReturnBaggage), CHARINDEX('|', max(ReturnBaggage)) + 1, (LEN(max(ReturnBaggage)) - CHARINDEX('|', REVERSE(max(ReturnBaggage))) - CHARINDEX('|', max(ReturnBaggage)))),'') Baggage, ";
        //        strSQL += "ISNULL(CAST(SUBSTRING(max(ReturnBaggage), LEN(max(ReturnBaggage)) - CHARINDEX('|', REVERSE(max(ReturnBaggage))) + 2, CHARINDEX('|', REVERSE(max(ReturnBaggage)))) as decimal(12,2)),0.00) + ISNULL(CAST(SUBSTRING(max(ConReturnBaggage), LEN(max(ConReturnBaggage)) - CHARINDEX('|', REVERSE(max(ConReturnBaggage))) + 2, CHARINDEX('|', REVERSE(max(ConReturnBaggage)))) as decimal(12,2)), 0.00) PriceBaggage, ";
        //        strSQL += "ISNULL((SUBSTRING(max(ReturnSportEquipment), 0, CHARINDEX('|', max(ReturnSportEquipment)))),'') SSRCodeSport, ";
        //        strSQL += "ISNULL(SUBSTRING(max(ReturnSportEquipment), CHARINDEX('|', max(ReturnSportEquipment)) + 1, (LEN(max(ReturnSportEquipment)) - CHARINDEX('|', REVERSE(max(ReturnSportEquipment))) - CHARINDEX('|', max(ReturnSportEquipment)))),'') Sport, ";
        //        strSQL += "ISNULL(CAST(SUBSTRING(max(ReturnSportEquipment), LEN(max(ReturnSportEquipment)) - CHARINDEX('|', REVERSE(max(ReturnSportEquipment))) + 2, CHARINDEX('|', REVERSE(max(ReturnSportEquipment)))) as decimal(12,2)),0.00) + ISNULL(CAST(SUBSTRING(max(ConReturnSportEquipment), LEN(max(ConReturnSportEquipment)) - CHARINDEX('|', REVERSE(max(ConReturnSportEquipment))) + 2, CHARINDEX('|', REVERSE(max(ConReturnSportEquipment)))) as decimal(12,2)),0.00) PriceSport, ";
        //        strSQL += "ISNULL((SUBSTRING(max(ReturnComfortKit), 0, CHARINDEX('|', max(ReturnComfortKit)))),'') SSRCodeComfort, ";
        //        strSQL += "ISNULL(SUBSTRING(max(ReturnComfortKit), CHARINDEX('|', max(ReturnComfortKit)) + 1, (LEN(max(ReturnComfortKit)) - CHARINDEX('|', REVERSE(max(ReturnComfortKit))) - CHARINDEX('|', max(ReturnComfortKit)))),'') Comfort, ";
        //        strSQL += "ISNULL(CAST(SUBSTRING(max(ReturnComfortKit), LEN(max(ReturnComfortKit)) - CHARINDEX('|', REVERSE(max(ReturnComfortKit))) + 2, CHARINDEX('|', REVERSE(max(ReturnComfortKit))))as decimal(12,2)),0.00) + ISNULL(CAST(SUBSTRING(max(ConReturnComfortKit), LEN(max(ConReturnComfortKit)) - CHARINDEX('|', REVERSE(max(ConReturnComfortKit))) + 2, CHARINDEX('|', REVERSE(max(ConReturnComfortKit)))) as decimal(12,2)),0.00) PriceComfort, ";
        //        strSQL += "(SUBSTRING(max(ConReturnMeal), 0, CHARINDEX('|', max(ConReturnMeal)))) SSRCodeMeal1, ";
        //        strSQL += " SUBSTRING(max(ConReturnMeal), CHARINDEX('|', max(ConReturnMeal)) + 1, (LEN(max(ConReturnMeal)) - CHARINDEX('|', REVERSE(max(ConReturnMeal))) - CHARINDEX('|', max(ConReturnMeal)))) Meal1, ";
        //        strSQL += " ISNULL(CAST(SUBSTRING(max(ConReturnMeal), LEN(max(ConReturnMeal)) - CHARINDEX('|', REVERSE(max(ConReturnMeal))) + 2, CHARINDEX('|', REVERSE(max(ConReturnMeal)))) as decimal(12,2)),0.00) PriceMeal1, ";
        //        strSQL += " ISNULL((SUBSTRING(max(ConReturnDrink), 0, CHARINDEX('|', max(ConReturnDrink)))),'') SSRCodeDrink1, ";
        //        strSQL += "ISNULL(SUBSTRING(max(ConReturnDrink), CHARINDEX('|', max(ConReturnDrink)) + 1, (LEN(max(ConReturnDrink)) - CHARINDEX('|', REVERSE(max(ConReturnDrink))) - CHARINDEX('|', max(ConReturnDrink)))),'') Drink1, ";
        //        strSQL += "ISNULL(CAST(SUBSTRING(max(ConReturnDrink), LEN(max(ConReturnDrink)) - CHARINDEX('|', REVERSE(max(ConReturnDrink))) + 2, CHARINDEX('|', REVERSE(max(ConReturnDrink)))) as decimal(12,2)),0.00) PriceDrink1, '' AS SSRCodeDuty, '' As Duty, 0.00 As PriceDuty ";
        //        strSQL += " FROM( SELECT ROW_NUMBER() OVER(ORDER BY BK_PASSENGERLIST.RecordLocator, CAST(BK_PASSENGERLIST.PassengerID as INT) ASC) AS SeqNo, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.TransID, BK_PASSENGERLIST.RecordLocator AS PNR, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, CASE BK_PASSENGERLIST.Title WHEN '' THEN 'Adult' WHEN 'Mr' THEN 'Adult' WHEN 'Ms' THEN 'Adult' WHEN 'Chd' THEN 'Child' END As PaxType, FirstName, LastName, ";
        //        strSQL += " y.[Meal][ReturnMeal], y.[Drink][ReturnDrink], y.[Baggage][ReturnBaggage], y.[Sport Equipment][ReturnSportEquipment], y.[Comfort Kit][ReturnComfortKit], ";
        //        strSQL += " yy.[Meal][ConReturnMeal], y.[Drink][ConReturnDrink], yy.[Baggage][ConReturnBaggage], yy.[Sport Equipment][ConReturnSportEquipment], yy.[Comfort Kit][ConReturnComfortKit] ";
        //        strSQL += " FROM BK_PASSENGERLIST LEFT JOIN COUNTRY(NOLOCK) ON BK_PASSENGERLIST.Nationality = COUNTRY.CountryCode INNER JOIN BK_TRANSDTL ON BK_TRANSDTL.TransID = BK_PASSENGERLIST.TransID AND BK_TRANSDTL.TransVoid = '0' OUTER APPLY( ";
        //        strSQL += " select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and s.Origin =case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Origin else BK_TRANSDTL.Transit end and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 0) a ";
        //        strSQL += " pivot (max(SSRDetail) for CatgDesc in ([Meal],[Drink],[Baggage],[Sport Equipment],[Comfort Kit])) b) y ";
        //        strSQL += " OUTER APPLY( ";
        //        strSQL += " select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 0) a ";
        //        strSQL += " pivot (max(SSRDetail) for CatgDesc in ([Meal],[Drink],[Baggage],[Sport Equipment],[Comfort Kit])) b) yy ";
        //        strSQL += " WHERE BK_PASSENGERLIST.Title <> 'INFT' AND BK_PASSENGERLIST.TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND LEN(BK_TRANSDTL.RecordLocator) >= 6  and BK_TRANSDTL.SeqNo % 2 = 0 GROUP BY BK_PASSENGERLIST.TransID, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.RecordLocator, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, BK_PASSENGERLIST.Title, FirstName, LastName, ";
        //        strSQL += " y.[Meal], y.[Drink], y.[Baggage], y.[Sport Equipment], y.[Comfort Kit], ";
        //        strSQL += " yy.[Meal], yy.[Drink], yy.[Baggage], yy.[Sport Equipment], yy.[Comfort Kit] ) s ";
        //        strSQL += " GROUP BY SeqNo, FlightNo, CarrierCode, Origin, Destination, TransID, PNR, Currency, PassengerID, PaxType, FirstName, LastName";

        //        dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
        //        if (dt != null && dt.Rows.Count > 0)
        //        {

        //            return dt;
        //        }
        //        else
        //        {
        //            return null;
        //            throw new ApplicationException("BK_PASSENGERLIST does not exist.");
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }
        //}

        public DataTable GetAllBK_PASSENGERLISTInitDataTable(string TransID, bool NewRec = false)
        {
            List<PassengerData> objListBK_PASSENGERLIST_Info = new List<PassengerData>();
            DataTable dt;
            String strSQL = string.Empty;
            string recordLocatorFilter = string.Empty;
            if (NewRec == false) recordLocatorFilter = " AND LEN(BK_TRANSDTL.RecordLocator)>=6";
            try
            {
                //edited by ketee
                string strfilter = "";
                strfilter = " WHERE BK_PASSENGERLIST.Title <> 'INFT' AND BK_PASSENGERLIST.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'" + recordLocatorFilter;
                strSQL = "SELECT BK_PASSENGERLIST.TransID, BK_TRANSDTL.RecordLocator AS PNR, PassengerID, PaxNo, Title, Gender, ISNULL(COUNTRY.Name,'') AS countryName,Nationality, DOB,(SELECT TOP 1 C.Name FROM COUNTRY C WHERE IssuingCountry=C.CountryCode) as IssuingCountryName ,IssuingCountry, ";
                strSQL += " ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, ";
                strSQL += " FirstName, ";
                strSQL += " LastName, ";
                strSQL += " PassportNo, ";
                strSQL += " BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy, ";
                strSQL += " BK_PASSENGERLIST.PrevFirstName1, BK_PASSENGERLIST.PrevLastName1, BK_PASSENGERLIST.PrevFirstName2, BK_PASSENGERLIST.PrevLastName2";
                strSQL += " FROM BK_PASSENGERLIST LEFT JOIN COUNTRY (NOLOCK) ON BK_PASSENGERLIST.Nationality = COUNTRY.CountryCode ";
                strSQL += " INNER JOIN BK_TRANSDTL ON BK_TRANSDTL.TransID=BK_PASSENGERLIST.TransID AND BK_TRANSDTL.RecordLocator=BK_PASSENGERLIST.RecordLocator AND BK_TRANSDTL.TransVoid='0' " + strfilter;
                strSQL += " GROUP BY BK_PASSENGERLIST.TransID, BK_TRANSDTL.RecordLocator, PassengerID, PaxNo, Title, Gender, COUNTRY.Name, Nationality, DOB, Name ,";
                strSQL += " IssuingCountry,  ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, ";
                strSQL += " BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {

                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_PASSENGERLIST does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public DataTable GetAllBK_PASSENGERLISTInitDataTablebyRecordLocator(string RecordLocator, bool NewRec = false)
        {
            List<PassengerData> objListBK_PASSENGERLIST_Info = new List<PassengerData>();
            DataTable dt;
            String strSQL = string.Empty;
            string recordLocatorFilter = string.Empty;
            if (NewRec == false) recordLocatorFilter = " AND LEN(BK_TRANSDTL.RecordLocator)>=6";
            try
            {
                //edited by ketee
                string strfilter = "";
                strfilter = " WHERE BK_PASSENGERLIST.Title <> 'INFT' AND BK_PASSENGERLIST.RecordLocator='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, RecordLocator) + "'" + recordLocatorFilter;
                strSQL = "SELECT BK_PASSENGERLIST.TransID, BK_TRANSDTL.RecordLocator AS PNR, PassengerID, PaxNo, Title, Gender, ISNULL(COUNTRY.Name,'') AS countryName,Nationality, DOB,(SELECT TOP 1 C.Name FROM COUNTRY C WHERE IssuingCountry=C.CountryCode) as IssuingCountryName ,IssuingCountry, ";
                strSQL += " ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, ";
                strSQL += " FirstName, ";
                strSQL += " LastName, ";
                strSQL += " PassportNo, ";
                strSQL += " BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy, ";
                strSQL += " BK_PASSENGERLIST.PrevFirstName1, BK_PASSENGERLIST.PrevLastName1, BK_PASSENGERLIST.PrevFirstName2, BK_PASSENGERLIST.PrevLastName2";
                strSQL += " FROM BK_PASSENGERLIST LEFT JOIN COUNTRY (NOLOCK) ON BK_PASSENGERLIST.Nationality = COUNTRY.CountryCode ";
                strSQL += " INNER JOIN BK_TRANSDTL ON BK_TRANSDTL.TransID=BK_PASSENGERLIST.TransID AND BK_TRANSDTL.RecordLocator=BK_PASSENGERLIST.RecordLocator AND BK_TRANSDTL.TransVoid='0' " + strfilter;
                strSQL += " GROUP BY BK_PASSENGERLIST.TransID, BK_TRANSDTL.RecordLocator, PassengerID, PaxNo, Title, Gender, COUNTRY.Name, Nationality, DOB, Name ,";
                strSQL += " IssuingCountry,  ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, ";
                strSQL += " BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {

                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_PASSENGERLIST does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public DataTable GetAllBK_PASSENGERLISTDataTable(string TransID, bool NewRec = false)
        {
            List<PassengerData> objListBK_PASSENGERLIST_Info = new List<PassengerData>();
            DataTable dt;
            String strSQL = string.Empty;
            string recordLocatorFilter = string.Empty;
            if (NewRec == false) recordLocatorFilter = " AND LEN(BK_TRANSDTL.RecordLocator)>=6";
            try
            {
                //edited by ketee
                string strfilter = "";
                strfilter = " WHERE BK_PASSENGERLIST.Title <> 'INFT' AND BK_PASSENGERLIST.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'" + recordLocatorFilter;
                strSQL = "SELECT '' Errormsg, BK_PASSENGERLIST.TransID, BK_TRANSDTL.RecordLocator AS PNR, PassengerID, PaxNo, Title, Gender, ISNULL(COUNTRY.Name,'') AS countryName,Nationality, DOB,(SELECT TOP 1 C.Name FROM COUNTRY C WHERE IssuingCountry=C.CountryCode) as IssuingCountryName ,IssuingCountry, ";
                strSQL += " ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, ";
                strSQL += " CASE WHEN FirstName = 'TBA' THEN '' ELSE FirstName END AS FirstName, ";
                strSQL += " CASE WHEN LastName = 'TBA' THEN '' ELSE LastName END AS LastName, ";
                strSQL += " CASE WHEN PassportNo = 'TBA' THEN '' ELSE PassportNo END AS PassportNo, ";
                strSQL += " CASE WHEN ChangeCount >= 1 THEN (CONVERT(VARCHAR,ChangeCount) + 'x')  ELSE '-' END AS ChangeCnt, ChangeCount AS InitChange, ";
                strSQL += " BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy, ";
                strSQL += " BK_PASSENGERLIST.PrevFirstName1, BK_PASSENGERLIST.PrevLastName1, BK_PASSENGERLIST.PrevFirstName2, BK_PASSENGERLIST.PrevLastName2, MaxChange-ChangeCount as CountChanged, ";
                strSQL += " REVERSE(SUBSTRING(REVERSE(BK_PASSENGERLIST.DepartSeat),0,CHARINDEX('_',REVERSE(BK_PASSENGERLIST.DepartSeat)))) DepartSeat, ";
                strSQL += " REVERSE(SUBSTRING(REVERSE(BK_PASSENGERLIST.ReturnSeat),0,CHARINDEX('_',REVERSE(BK_PASSENGERLIST.ReturnSeat)))) ReturnSeat, ";
                strSQL += " REVERSE(SUBSTRING(REVERSE(BK_PASSENGERLIST.DepartConnectingSeat),0,CHARINDEX('_',REVERSE(BK_PASSENGERLIST.DepartConnectingSeat)))) DepartConnectingSeat, ";
                strSQL += " REVERSE(SUBSTRING(REVERSE(BK_PASSENGERLIST.ReturnConnectingSeat),0,CHARINDEX('_',REVERSE(BK_PASSENGERLIST.ReturnConnectingSeat)))) ReturnConnectingSeat ";
                strSQL += " FROM BK_PASSENGERLIST LEFT JOIN COUNTRY (NOLOCK) ON BK_PASSENGERLIST.Nationality = COUNTRY.CountryCode ";
                strSQL += " INNER JOIN BK_TRANSDTL ON BK_TRANSDTL.TransID=BK_PASSENGERLIST.TransID AND BK_TRANSDTL.RecordLocator=BK_PASSENGERLIST.RecordLocator AND BK_TRANSDTL.TransVoid='0' " + strfilter;
                strSQL += " GROUP BY BK_PASSENGERLIST.TransID, BK_TRANSDTL.RecordLocator, PassengerID, PaxNo, Title, Gender, COUNTRY.Name, Nationality, DOB, Name ,";
                strSQL += " IssuingCountry,  ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, ";
                strSQL += " BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy, BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat ORDER BY BK_TRANSDTL.RecordLocator, CAST(PassengerID AS int) ";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {

                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_PASSENGERLIST does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        //public DataTable GetAllBK_PASSENGERLISTWithSSRDataTable(string TransID, bool NewRec = false)
        //{
        //    List<PassengerData> objListBK_PASSENGERLIST_Info = new List<PassengerData>();
        //    DataTable dt;
        //    String strSQL = string.Empty;
        //    string recordLocatorFilter = string.Empty;
        //    if (NewRec == false) recordLocatorFilter = " AND LEN(BK_TRANSDTL.RecordLocator)>=6";
        //    try
        //    {
        //        //edited by ketee
        //        string strfilter = "";
        //        strfilter = " WHERE BK_PASSENGERLIST.Title <> 'INFT' AND BK_PASSENGERLIST.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'" + recordLocatorFilter;
        //        strSQL = "SELECT TransID, PNR,  SessionID, Currency, PassengerID, PaxNo, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, REVERSE(SUBSTRING(REVERSE(DepartSeat),0,CHARINDEX('_',REVERSE(DepartSeat)))) DepartSeat, SUBSTRING((DepartSeat),0,CHARINDEX('_',(DepartSeat))) BeginingDepartSeat, SUBSTRING((DepartSeat), 3, 1) CompartmentDesignatorDepartSeat, SUBSTRING((DepartSeat), 5, 1) DeckDepartSeat, REVERSE(SUBSTRING(REVERSE(ReturnSeat),0,CHARINDEX('_',REVERSE(ReturnSeat)))) ReturnSeat, SUBSTRING((ReturnSeat),0,CHARINDEX('_',(ReturnSeat))) BeginingReturnSeat, SUBSTRING((ReturnSeat), 3, 1) CompartmentDesignatorReturnSeat, SUBSTRING((ReturnSeat), 5, 1) DeckReturnSeat, REVERSE(SUBSTRING(REVERSE(DepartConnectingSeat),0,CHARINDEX('_',REVERSE(DepartConnectingSeat)))) DepartConnectingSeat, SUBSTRING((DepartConnectingSeat),0,CHARINDEX('_',(DepartConnectingSeat))) BeginingDepartConnectingSeat, SUBSTRING((DepartConnectingSeat), 3, 1) CompartmentDesignatorDepartConnectingSeat, SUBSTRING((DepartConnectingSeat), 5, 1) DeckDepartConnectingSeat, REVERSE(SUBSTRING(REVERSE(ReturnConnectingSeat),0,CHARINDEX('_',REVERSE(ReturnConnectingSeat)))) ReturnConnectingSeat, SUBSTRING((ReturnConnectingSeat),0,CHARINDEX('_',(ReturnConnectingSeat))) BeginingReturnConnectingSeat, SUBSTRING((ReturnConnectingSeat), 3, 1) CompartmentDesignatorReturnConnectingSeat, SUBSTRING((ReturnConnectingSeat), 5, 1) DeckReturnConnectingSeat,  MAX(SyncCreate) AS SyncCreate , MAX(SyncLastUpd) AS SyncLastUpd, MAX(LastSyncBy) AS LastSyncBy, max(DepartMeal) DepartMeal, max(DepartBaggage) DepartBaggage, max(DepartSportEquipment) DepartSportEquipment, max(DepartComfortKit) DepartComfortKit, max(DepartDutyFree) DepartDutyFree, max(ReturnMeal) ReturnMeal, max(ReturnBaggage) ReturnBaggage, max(ReturnSportEquipment) ReturnSportEquipment, max(ReturnComfortKit) ReturnComfortKit, max(ReturnDutyFree) ReturnDutyFree, max(ConDepartMeal) ConDepartMeal, max(ConDepartBaggage) ConDepartBaggage, max(ConDepartSportEquipment) ConDepartSportEquipment, max(ConDepartComfortKit) ConDepartComfortKit, max(ConDepartDutyFree) ConDepartDutyFree, max(ConReturnMeal) ConReturnMeal, max(ConReturnBaggage) ConReturnBaggage, max(ConReturnSportEquipment) ConReturnSportEquipment, max(ConReturnComfortKit) ConReturnComfortKit, max(ConReturnDutyFree) ConReturnDutyFree ";
        //        strSQL += " FROM( ";
        //        strSQL += " SELECT BK_PASSENGERLIST.TransID, BK_TRANSDTL.RecordLocator AS PNR, BK_TRANSDTL.SellKey AS SessionID, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, Title, Gender, ISNULL(COUNTRY.Name, '') AS countryName, Nationality, DOB, (SELECT TOP 1 C.Name FROM COUNTRY C WHERE IssuingCountry = C.CountryCode) as IssuingCountryName ,IssuingCountry,  ChangeCount, MaxChange,  MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2,  CASE WHEN FirstName = 'TBA' THEN '' ELSE FirstName END AS FirstName,  CASE WHEN LastName = 'TBA' THEN '' ELSE LastName END AS LastName,  CASE WHEN PassportNo = 'TBA' THEN '' ELSE PassportNo END AS PassportNo,   CASE WHEN ChangeCount >= 1 THEN(CONVERT(VARCHAR, ChangeCount) + 'x')  ELSE '-' END AS ChangeCnt, ChangeCount AS InitChange,  BK_PASSENGERLIST.rowguid,  BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy,  BK_PASSENGERLIST.PrevFirstName1, BK_PASSENGERLIST.PrevLastName1,  BK_PASSENGERLIST.PrevFirstName2, BK_PASSENGERLIST.PrevLastName2, MaxChange - ChangeCount as CountChanged,  BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat,  x.[Meal][DepartMeal],x.[Baggage][DepartBaggage],x.[Sport Equipment][DepartSportEquipment],x.[Comfort Kit][DepartComfortKit],x.[Duty Free][DepartDutyFree], y.[Meal][ReturnMeal],y.[Baggage][ReturnBaggage],y.[Sport Equipment][ReturnSportEquipment],y.[Comfort Kit][ReturnComfortKit],y.[Duty Free][ReturnDutyFree], xx.[Meal][ConDepartMeal],xx.[Baggage][ConDepartBaggage],xx.[Sport Equipment][ConDepartSportEquipment],xx.[Comfort Kit][ConDepartComfortKit],xx.[Duty Free][ConDepartDutyFree], yy.[Meal][ConReturnMeal],yy.[Baggage][ConReturnBaggage],yy.[Sport Equipment][ConReturnSportEquipment],yy.[Comfort Kit][ConReturnComfortKit],yy.[Duty Free][ConReturnDutyFree] FROM BK_PASSENGERLIST LEFT JOIN COUNTRY(NOLOCK) ON BK_PASSENGERLIST.Nationality = COUNTRY.CountryCode   INNER JOIN BK_TRANSDTL ON BK_TRANSDTL.TransID = BK_PASSENGERLIST.TransID AND BK_TRANSDTL.RecordLocator = BK_PASSENGERLIST.RecordLocator AND BK_TRANSDTL.TransVoid = '0' OUTER APPLY (select * from(select p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency SSRDetail  from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and s.Origin = BK_TRANSDTL.Origin and s.Destination =case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Destination else BK_TRANSDTL.Transit end and BK_TRANSDTL.SeqNo % 2 = 1) a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) x OUTER APPLY(select * from(select p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency SSRDetail  from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and s.Origin =case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Origin else BK_TRANSDTL.Transit end and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 0) a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) y OUTER APPLY(select * from(select p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency SSRDetail  from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 1) a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) xx OUTER APPLY(select * from(select p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency SSRDetail  from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 0) a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) yy " + strfilter + " GROUP BY BK_PASSENGERLIST.TransID, BK_TRANSDTL.RecordLocator,BK_TRANSDTL.SellKey, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, Title, Gender, COUNTRY.Name, Nationality, DOB, Name, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy, BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat, x.[Meal], x.[Baggage], x.[Sport Equipment], x.[Comfort Kit], x.[Duty Free], y.[Meal], y.[Baggage], y.[Sport Equipment], y.[Comfort Kit], y.[Duty Free], xx.[Meal], xx.[Baggage], xx.[Sport Equipment], xx.[Comfort Kit], xx.[Duty Free], yy.[Meal], yy.[Baggage], yy.[Sport Equipment], yy.[Comfort Kit], yy.[Duty Free] ";
        //        strSQL += " ) s ";
        //        strSQL += " GROUP BY TransID, PNR, SessionID, Currency, PassengerID, PaxNo, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat ORDER BY PNR, CAST(PassengerID AS INTEGER)";
        //        dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
        //        if (dt != null && dt.Rows.Count > 0)
        //        {

        //            return dt;
        //        }
        //        else
        //        {
        //            return null;
        //            throw new ApplicationException("BK_PASSENGERLIST does not exist.");
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }
        //}

        public DataTable GetAllBK_PASSENGERLISTDataTableNew(string TransID, bool NewRec = false)
        {
            List<PassengerData> objListBK_PASSENGERLIST_Info = new List<PassengerData>();
            DataTable dt;
            String strSQL = string.Empty;
            string recordLocatorFilter = string.Empty;
            if (NewRec == false) recordLocatorFilter = " AND LEN(BK_TRANSDTL.RecordLocator)>=6";
            try
            {
                //edited by ketee
                string strfilter = "";
                strfilter = " WHERE BK_PASSENGERLIST.Title <> 'INFT' AND BK_PASSENGERLIST.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'" + recordLocatorFilter;
                strSQL = "SELECT TransID, PNR,  SessionID, Currency, PassengerID, PaxNo, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, ";
                strSQL += "MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, InitChange, PrevFirstName1, ";
                strSQL += "PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat As DepartSeatFull,  ";
                strSQL += "DepartConnectingSeat As DepartConnectingSeatFull, ReturnSeat As ReturnSeatFull, ReturnConnectingSeat As ReturnConnectingSeatFull, REVERSE(SUBSTRING(REVERSE(DepartSeat),0,CHARINDEX('_',REVERSE(DepartSeat)))) DepartSeat, ";
                strSQL += "SUBSTRING((DepartSeat),0,CHARINDEX('_',(DepartSeat))) BeginingDepartSeat, SUBSTRING((DepartSeat), 3, 1) CompartmentDesignatorDepartSeat, ";
                strSQL += "SUBSTRING((DepartSeat), 5, 1) DeckDepartSeat, REVERSE(SUBSTRING(REVERSE(ReturnSeat),0,CHARINDEX('_',REVERSE(ReturnSeat)))) ReturnSeat, ";
                strSQL += "SUBSTRING((ReturnSeat),0,CHARINDEX('_',(ReturnSeat))) BeginingReturnSeat, SUBSTRING((ReturnSeat), 3, 1) CompartmentDesignatorReturnSeat, ";
                strSQL += "SUBSTRING((ReturnSeat), 5, 1) DeckReturnSeat, REVERSE(SUBSTRING(REVERSE(DepartConnectingSeat),0,CHARINDEX('_',REVERSE(DepartConnectingSeat)))) ";
                strSQL += "DepartConnectingSeat, SUBSTRING((DepartConnectingSeat),0,CHARINDEX('_',(DepartConnectingSeat))) BeginingDepartConnectingSeat, SUBSTRING((DepartConnectingSeat), 3, 1) ";
                strSQL += "CompartmentDesignatorDepartConnectingSeat, SUBSTRING((DepartConnectingSeat), 5, 1) DeckDepartConnectingSeat, REVERSE(SUBSTRING(REVERSE(ReturnConnectingSeat),0,";
                strSQL += "CHARINDEX('_',REVERSE(ReturnConnectingSeat)))) ReturnConnectingSeat, SUBSTRING((ReturnConnectingSeat),0,CHARINDEX('_',(ReturnConnectingSeat))) BeginingReturnConnectingSeat, ";
                strSQL += "SUBSTRING((ReturnConnectingSeat), 3, 1) CompartmentDesignatorReturnConnectingSeat, SUBSTRING((ReturnConnectingSeat), 5, 1) DeckReturnConnectingSeat,  MAX(SyncCreate) AS SyncCreate , ";
                strSQL += "MAX(SyncLastUpd) AS SyncLastUpd, MAX(LastSyncBy) AS LastSyncBy, Insurance FROM(  SELECT BK_PASSENGERLIST.TransID, BK_TRANSDTL.RecordLocator AS PNR, BK_TRANSDTL.SellKey AS SessionID, ";//edited by romy for Insure
                strSQL += "BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, Title, Gender, ISNULL(COUNTRY.Name, '') AS countryName, Nationality, DOB, (SELECT TOP 1 C.Name FROM COUNTRY C WHERE ";
                strSQL += "IssuingCountry = C.CountryCode) as IssuingCountryName ,IssuingCountry,  ChangeCount, MaxChange,  MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ";
                strSQL += "ChangeDate2,  CASE WHEN FirstName = 'TBA' THEN '' ELSE FirstName END AS FirstName,  CASE WHEN LastName = 'TBA' THEN '' ELSE LastName END AS LastName,  CASE WHEN PassportNo = 'TBA' THEN '' ";
                strSQL += "ELSE PassportNo END AS PassportNo,   CASE WHEN ChangeCount >= 1 THEN(CONVERT(VARCHAR, ChangeCount) + 'x')  ELSE '-' END AS ChangeCnt, ChangeCount AS InitChange, ";
                strSQL += "BK_PASSENGERLIST.rowguid,  BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy,  BK_PASSENGERLIST.PrevFirstName1, BK_PASSENGERLIST.PrevLastName1, ";
                strSQL += "BK_PASSENGERLIST.PrevFirstName2, BK_PASSENGERLIST.PrevLastName2, MaxChange - ChangeCount as CountChanged,  BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, ";
                strSQL += "BK_PASSENGERLIST.ReturnConnectingSeat, CASE WHEN ITEM.ItemDesc != '' or ITEM.ItemDesc != null THEN ITEM.ItemDesc ELSE '-' END Insurance FROM BK_PASSENGERLIST ";//edited by romy for Insure
                strSQL += "LEFT JOIN COUNTRY(NOLOCK) ON BK_PASSENGERLIST.Nationality = COUNTRY.CountryCode  LEFT JOIN ITEM ON BK_PASSENGERLIST.InsureCode = ITEM.ItemCode INNER JOIN BK_TRANSDTL ON BK_TRANSDTL.TransID = BK_PASSENGERLIST.TransID AND ";//edited by romy for Insure
                strSQL += "BK_TRANSDTL.RecordLocator = BK_PASSENGERLIST.RecordLocator " + strfilter;
                strSQL += "GROUP BY BK_PASSENGERLIST.TransID, BK_TRANSDTL.RecordLocator,BK_TRANSDTL.SellKey, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, Title, Gender, COUNTRY.Name, Nationality, DOB, Name, IssuingCountry, ";
                strSQL += "ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, ";
                strSQL += "BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy, BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, ";
                strSQL += "BK_PASSENGERLIST.ReturnConnectingSeat, ITEM.ItemDesc) s  GROUP BY TransID, PNR, SessionID, Currency, PassengerID, PaxNo, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, ";//edited by romy for Insure
                strSQL += "MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, ";
                strSQL += "CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat, Insurance ORDER BY PNR, CAST(PassengerID AS INTEGER)";//edited by romy for Insure
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {

                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_PASSENGERLIST does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }
        public DataTable GetAllBK_PASSENGERLISTWithSSRDataTableManage(string TransID, bool NewRec = false, string optionalFilter = "")
        {
            List<PassengerData> objListBK_PASSENGERLIST_Info = new List<PassengerData>();
            DataTable dt;
            String strSQL = string.Empty;
            string recordLocatorFilter = string.Empty;
            if (NewRec == false) recordLocatorFilter = " AND LEN(BK_TRANSDTL.RecordLocator)>=6";
            if (optionalFilter != "") optionalFilter = " AND " + optionalFilter;
            try
            {
                //edited by ketee
                string strfilter = ""; strfilter = " WHERE BK_PASSENGERLIST.Title <> 'INFT' AND BK_PASSENGERLIST.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'" + recordLocatorFilter + optionalFilter;
                strSQL = "SELECT SeqNo, TransID, PNR, FlightNo, CarrierCode, Origin, Destination, Currency, PassengerID, PaxNo, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat, MAX(SyncCreate) AS SyncCreate , MAX(SyncLastUpd) AS SyncLastUpd, MAX(LastSyncBy) AS LastSyncBy, max(DepartMeal) DepartMeal_desc, (select value from dbo.fn_split(max(DepartMeal),'|') where position=1) SSRCodeDepartMeal, (select value from dbo.fn_split(max(DepartMeal),'|') where position=2) DepartMeal, cast(round((select value from dbo.fn_split(max(DepartMeal),'|') where position=3), 2) as numeric(12, 2)) as PriceDepartMeal, max(DepartDrink) DepartDrink_desc, (select value from dbo.fn_split(max(DepartDrink),'|') where position=1) SSRCodeDepartDrink, (select value from dbo.fn_split(max(DepartDrink),'|') where position=2) DepartDrink, cast(round((select value from dbo.fn_split(max(DepartDrink),'|') where position=3), 2) as numeric(12, 2)) as PriceDepartDrink, max(DepartBaggage) DepartBaggage_desc, (select value from dbo.fn_split(max(DepartBaggage),'|') where position=1) SSRCodeDepartBaggage, (select value from dbo.fn_split(max(DepartBaggage),'|') where position=2) DepartBaggage,  cast(round((select value from dbo.fn_split(max(DepartBaggage),'|') where position=3), 2) as numeric(12, 2)) as PriceDepartBaggage, max(DepartSportEquipment) DepartSport_desc, (select value from dbo.fn_split(max(DepartSportEquipment),'|') where position=1) SSRCodeDepartSport, (select value from dbo.fn_split(max(DepartSportEquipment),'|') where position=2) DepartSport, cast(round((select value from dbo.fn_split(max(DepartSportEquipment),'|') where position=3), 2) as numeric(12, 2)) PriceDepartSport, max(DepartComfortKit) DepartComfort_desc, (select value from dbo.fn_split(max(DepartComfortKit),'|') where position=1) SSRCodeDepartComfort, (select value from dbo.fn_split(max(DepartComfortKit),'|') where position=2) DepartComfort, cast(round((select value from dbo.fn_split(max(DepartComfortKit),'|') where position=3), 2) as numeric(12, 2)) PriceDepartComfort, max(DepartDutyFree) DepartDuty_desc, (select value from dbo.fn_split(max(DepartDutyFree),'|') where position=1) SSRCodeDepartDuty, (select value from dbo.fn_split(max(DepartDutyFree),'|') where position=2) DepartDuty, cast(round((select value from dbo.fn_split(max(DepartDutyFree),'|') where position=3), 2) as numeric(12, 2)) PriceDepartDuty, max(ReturnMeal) ReturnMeal_desc,  (select value from dbo.fn_split(max(ReturnMeal),'|') where position=1) SSRCodeReturnMeal, (select value from dbo.fn_split(max(ReturnMeal),'|') where position=2) ReturnMeal, max(ReturnDrink) ReturnDrink_desc, (select value from dbo.fn_split(max(ReturnDrink),'|') where position=1) SSRCodeReturnDrink, (select value from dbo.fn_split(max(ReturnDrink),'|') where position=2) ReturnDrink, cast(round((select value from dbo.fn_split(max(ReturnDrink),'|') where position=3), 2) as numeric(12, 2)) PriceReturnDrink, cast(round((select value from dbo.fn_split(max(ReturnMeal),'|') where position=3), 2) as numeric(12, 2)) PriceReturnMeal, max(ReturnBaggage) ReturnBaggage_desc,(select value from dbo.fn_split(max(ReturnBaggage),'|') where position=1) SSRCodeReturnBaggage, (select value from dbo.fn_split(max(ReturnBaggage),'|') where position=2) ReturnBaggage, cast(round((select value from dbo.fn_split(max(ReturnBaggage),'|') where position=3), 2) as numeric(12, 2)) PriceReturnBaggage, max(ReturnSportEquipment) ReturnSport_desc,(select value from dbo.fn_split(max(ReturnSportEquipment),'|') where position=1) SSRCodeReturnSport, (select value from dbo.fn_split(max(ReturnSportEquipment),'|') where position=2) ReturnSport, cast(round((select value from dbo.fn_split(max(ReturnSportEquipment),'|') where position=3), 2) as numeric(12, 2)) PriceReturnSport, max(ReturnComfortKit) SSRCodeReturnComfortKit_desc,(select value from dbo.fn_split(max(ReturnComfortKit),'|') where position=1) SSRCodeReturnComfort, (select value from dbo.fn_split(max(ReturnComfortKit),'|') where position=2) ReturnComfort, cast(round((select value from dbo.fn_split(max(ReturnComfortKit),'|') where position=3), 2) as numeric(12, 2)) PriceReturnComfort,  max(ReturnDutyFree) SSRCodeReturnDutyFree_desc,(select value from dbo.fn_split(max(ReturnDutyFree),'|') where position=1) SSRCodeReturnDuty, (select value from dbo.fn_split(max(ReturnDutyFree),'|') where position=2) ReturnDuty, cast(round((select value from dbo.fn_split(max(ReturnDutyFree),'|') where position=3), 2) as numeric(12, 2))  PriceReturnDuty,  max(ConDepartMeal) ConDepartMeal_desc,(select value from dbo.fn_split(max(ConDepartMeal),'|') where position=1) SSRCodeConDepartMeal, (select value from dbo.fn_split(max(ConDepartMeal),'|') where position=2) ConDepartMeal, max(ConDepartDrink) ConDepartDrink_desc, (select value from dbo.fn_split(max(ConDepartDrink),'|') where position=1) SSRCodeConDepartDrink, (select value from dbo.fn_split(max(ConDepartDrink),'|') where position=2) ConDepartDrink, cast(round((select value from dbo.fn_split(max(ConDepartDrink),'|') where position=3), 2) as numeric(12, 2)) PriceConDepartDrink, cast(round((select value from dbo.fn_split(max(ConDepartMeal),'|') where position=3), 2) as numeric(12, 2)) PriceConDepartMeal, max(ConDepartBaggage) ConDepartBaggage_desc,(select value from dbo.fn_split(max(ConDepartBaggage),'|') where position=1) SSRCodeConDepartBaggage, (select value from dbo.fn_split(max(ConDepartBaggage),'|') where position=2) ConDepartBaggage, (select value from dbo.fn_split(max(ConDepartBaggage),'|') where position=3) PriceConDepartBaggage, max(ConDepartSportEquipment) ConDepartSportEquipment_desc,(select value from dbo.fn_split(max(ConDepartSportEquipment),'|') where position=1) SSRCodeConDepartSport, (select value from dbo.fn_split(max(ConDepartSportEquipment),'|') where position=2) ConDepartSport, (select value from dbo.fn_split(max(ConDepartSportEquipment),'|') where position=3) PriceConDepartSport, max(ConDepartComfortKit) ConDepartComfort_desc,(select value from dbo.fn_split(max(ConDepartComfortKit),'|') where position=1) SSRCodeConDepartComfort, (select value from dbo.fn_split(max(ConDepartComfortKit),'|') where position=2) ConDepartComfort, (select value from dbo.fn_split(max(ConDepartComfortKit),'|') where position=3) PriceConDepartComfort, max(ConDepartDutyFree) ConDepartDutyFree_desc,(select value from dbo.fn_split(max(ConDepartDutyFree),'|') where position=1) SSRCodeConDepartDutyFree, (select value from dbo.fn_split(max(ConDepartDutyFree),'|') where position=2) ConDepartDutyFree, (select value from dbo.fn_split(max(ConDepartDutyFree),'|') where position=3) PriceConDepartDutyFree, max(ConReturnMeal) ConReturnMeal_desc,(select value from dbo.fn_split(max(ConReturnMeal),'|') where position=1) SSRCodeConReturnMeal, (select value from dbo.fn_split(max(ConReturnMeal),'|') where position=2) ConReturnMeal, cast(round((select value from dbo.fn_split(max(ConReturnMeal),'|') where position=3), 2) as numeric(12, 2)) PriceConReturnMeal,   max(ConReturnDrink) ConReturnDrink_desc, (select value from dbo.fn_split(max(ConReturnDrink),'|') where position=1) SSRCodeConReturnDrink, (select value from dbo.fn_split(max(ConReturnDrink),'|') where position=2) ConReturnDrink, cast(round((select value from dbo.fn_split(max(ConReturnDrink),'|') where position=3), 2) as numeric(12, 2)) PriceConReturnDrink,  max(ConReturnBaggage) ConReturnBaggage_desc,(select value from dbo.fn_split(max(ConReturnBaggage),'|') where position=1) SSRCodeConReturnBaggage, (select value from dbo.fn_split(max(ConReturnBaggage),'|') where position=2) ConReturnBaggage, (select value from dbo.fn_split(max(ConReturnBaggage),'|') where position=3) PriceConReturnBaggage, max(ConReturnSportEquipment) ConReturnSportEquipment_desc,(select value from dbo.fn_split(max(ConReturnSportEquipment),'|') where position=1) SSRCodeReturnSportEquipment, (select value from dbo.fn_split(max(ConReturnSportEquipment),'|') where position=2) ConReturnSportEquipment, (select value from dbo.fn_split(max(ConReturnSportEquipment),'|') where position=3) PriceConReturnSportEquipment, max(ConReturnComfortKit) ConReturnComfortKit_desc,(select value from dbo.fn_split(max(ConReturnComfortKit),'|') where position=1) SSRCodeConReturnComfortKit, (select value from dbo.fn_split(max(ConReturnComfortKit),'|') where position=2) ConReturnComfortKit, (select value from dbo.fn_split(max(ConReturnComfortKit),'|') where position=3) PriceConReturnComfortKit, max(ConReturnDutyFree) ConReturnDutyFree_desc,(select value from dbo.fn_split(max(ConReturnDutyFree),'|') where position=1) SSRCodeConReturnDutyFree, (select value from dbo.fn_split(max(ConReturnDutyFree),'|') where position=2) ConReturnDutyFree, (select value from dbo.fn_split(max(ConReturnDutyFree),'|') where position=3) PriceConReturnDutyFree ";
                strSQL += "FROM ";
                strSQL += "(SELECT ROW_NUMBER() OVER  (ORDER BY BK_PASSENGERLIST.RecordLocator, CAST(BK_PASSENGERLIST.PassengerID as INT) ASC) AS SeqNo, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.TransID, BK_PASSENGERLIST.RecordLocator AS PNR, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, Title, Gender, ISNULL(COUNTRY.Name, '') AS countryName, Nationality, DOB, (SELECT TOP 1 C.Name FROM COUNTRY C WHERE IssuingCountry = C.CountryCode) as IssuingCountryName ,IssuingCountry,  ChangeCount, MaxChange,  MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2,  CASE WHEN FirstName = 'TBA' THEN '' ELSE FirstName END AS FirstName,  CASE WHEN LastName = 'TBA' THEN '' ELSE LastName END AS LastName,  CASE WHEN PassportNo = 'TBA' THEN '' ELSE PassportNo END AS PassportNo,   CASE WHEN ChangeCount >= 1 THEN(CONVERT(VARCHAR, ChangeCount) + 'x')  ELSE '-' END AS ChangeCnt, ChangeCount AS InitChange,  BK_PASSENGERLIST.rowguid,  BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy,  BK_PASSENGERLIST.PrevFirstName1, BK_PASSENGERLIST.PrevLastName1,  BK_PASSENGERLIST.PrevFirstName2, BK_PASSENGERLIST.PrevLastName2, MaxChange - ChangeCount as CountChanged,  BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat,  x.[Meal][DepartMeal],x.[Drink][DepartDrink],x.[Baggage][DepartBaggage],x.[Sport Equipment][DepartSportEquipment],x.[Comfort Kit][DepartComfortKit],x.[Duty Free][DepartDutyFree], y.[Meal][ReturnMeal],y.[Drink][ReturnDrink],y.[Baggage][ReturnBaggage],y.[Sport Equipment][ReturnSportEquipment],y.[Comfort Kit][ReturnComfortKit],y.[Duty Free][ReturnDutyFree], xx.[Meal][ConDepartMeal],xx.[Drink][ConDepartDrink],xx.[Baggage][ConDepartBaggage],xx.[Sport Equipment][ConDepartSportEquipment],xx.[Comfort Kit][ConDepartComfortKit],xx.[Duty Free][ConDepartDutyFree], yy.[Meal][ConReturnMeal],yy.[Drink][ConReturnDrink],yy.[Baggage][ConReturnBaggage],yy.[Sport Equipment][ConReturnSportEquipment],yy.[Comfort Kit][ConReturnComfortKit],yy.[Duty Free][ConReturnDutyFree] FROM BK_PASSENGERLIST LEFT JOIN COUNTRY(NOLOCK) ON BK_PASSENGERLIST.Nationality = COUNTRY.CountryCode INNER JOIN BK_TRANSDTL ON BK_TRANSDTL.TransID = BK_PASSENGERLIST.TransID AND BK_TRANSDTL.TransVoid = '0'";
                strSQL += "OUTER APPLY ";
                strSQL += "(select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and p.PassengerID = BK_PASSENGERLIST.PassengerID and s.Origin = BK_TRANSDTL.Origin and s.Destination =case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Destination else BK_TRANSDTL.Transit end and BK_TRANSDTL.SeqNo % 2 = 1) a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Drink],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) x ";
                strSQL += "OUTER APPLY ";
                strSQL += "(select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and s.Origin =case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Origin else BK_TRANSDTL.Transit end and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 0) a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Drink],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) y ";
                strSQL += "OUTER APPLY ";
                strSQL += "(select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 1) a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Drink],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) xx ";
                strSQL += "OUTER APPLY ";
                strSQL += "(select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 0 AND LEN(BK_TRANSDTL.RecordLocator)>=6) a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Drink],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) yy ";
                strSQL += strfilter + " GROUP BY BK_PASSENGERLIST.TransID, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.RecordLocator, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, Title, Gender, COUNTRY.Name, Nationality, DOB, Name, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy, BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat, x.[Meal],x.[Drink], x.[Baggage], x.[Sport Equipment], x.[Comfort Kit], x.[Duty Free], y.[Meal], y.[Drink], y.[Baggage], y.[Sport Equipment], y.[Comfort Kit], y.[Duty Free], xx.[Meal], xx.[Drink], xx.[Baggage], xx.[Sport Equipment], xx.[Comfort Kit], xx.[Duty Free], yy.[Meal], yy.[Drink], yy.[Baggage], yy.[Sport Equipment], yy.[Comfort Kit], yy.[Duty Free]  ) s  GROUP BY SeqNo, FlightNo, CarrierCode, Origin, Destination,TransID, PNR, Currency, PassengerID, PaxNo, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat HAVING LEN(PNR) >= 6";

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {

                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_PASSENGERLIST does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        //added for try InsureSeq
        public DataTable GetAllBK_PASSENGERLISTWithInfant(string TransID, bool NewRec = false, string optionalFilter = "")
        {
            List<PassengerData> objListBK_PASSENGERLIST_Info = new List<PassengerData>();
            DataTable dt;
            String strSQL = string.Empty;
            string recordLocatorFilter = string.Empty;
            if (NewRec == false) recordLocatorFilter = " AND LEN(p.RecordLocator)>=6";
            if (optionalFilter != "") optionalFilter = " AND " + optionalFilter;
            try
            {
                //edited by ketee
                string strfilter = ""; strfilter = " WHERE p.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'" + recordLocatorFilter + optionalFilter;
                strSQL = "SELECT PNR, IssuingCountryName, CountryName, Title, Gender, FirstName, LastName, DOB, PassportNo, ExpiryDate, '' ErrorMsg, ROW_NUMBER() OVER  (ORDER BY PNR, CAST(PassengerID as INT) ASC) AS RowNo, ROW_NUMBER() OVER  (ORDER BY PNR, CAST(PassengerID as INT) ASC) AS SeqNo, 0 As IndicatorDepartBaggage, 0 As IndicatorDepartMeal, 0 As IndicatorDepartDrink, 0 As IndicatorConDepartMeal, 0 As IndicatorConDepartDrink, 0 As IndicatorDepartSport, 0 As IndicatorDepartInsure,";//edited by romy, 20170811, insurance//edited by romy, 20170818, Insurance
                strSQL += "0 As IndicatorDepartComfort, 0 As IndicatorDepartInfant, 0 As IndicatorReturnBaggage, 0 As IndicatorReturnMeal, 0 As IndicatorReturnDrink, 0 As IndicatorConReturnMeal, 0 As IndicatorConReturnDrink, 0 As IndicatorReturnSport, 0 As IndicatorReturnInsure, 0 As IndicatorReturnComfort, 0 As IndicatorReturnInfant, TransID, FlightNo, CarrierCode, Origin, Transit, Destination, Currency, PassengerID, PaxNo, ";//edited by romy, 20170811, insurance
                strSQL += " Nationality, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2,  ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, ChangeCnt, ChangeCount, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, PrevIssuingCountry1, PrevNationality1, PrevTitle1, PrevGender1, PrevDOB1, PrevPassportNo1, PrevExpiryDate1, PrevIssuingCountry2, PrevNationality2, PrevTitle2, PrevGender2, PrevDOB2, PrevPassportNo2, PrevExpiryDate2, CountChanged, REVERSE(SUBSTRING(REVERSE(DepartSeat),0,CHARINDEX('_',REVERSE(DepartSeat)))) DepartSeat, ";
                strSQL += "SUBSTRING((DepartSeat),0,CHARINDEX('_',(DepartSeat))) BeginingDepartSeat, SUBSTRING((DepartSeat), 3, 1) CompartmentDesignatorDepartSeat, ";
                strSQL += "SUBSTRING((DepartSeat), 5, 1) DeckDepartSeat, REVERSE(SUBSTRING(REVERSE(ReturnSeat),0,CHARINDEX('_',REVERSE(ReturnSeat)))) ReturnSeat, ";
                strSQL += "SUBSTRING((ReturnSeat),0,CHARINDEX('_',(ReturnSeat))) BeginingReturnSeat, SUBSTRING((ReturnSeat), 3, 1) CompartmentDesignatorReturnSeat, ";
                strSQL += "SUBSTRING((ReturnSeat), 5, 1) DeckReturnSeat, REVERSE(SUBSTRING(REVERSE(DepartConnectingSeat),0,CHARINDEX('_',REVERSE(DepartConnectingSeat)))) ";
                strSQL += "DepartConnectingSeat, SUBSTRING((DepartConnectingSeat),0,CHARINDEX('_',(DepartConnectingSeat))) BeginingDepartConnectingSeat, SUBSTRING((DepartConnectingSeat), 3, 1) ";
                strSQL += "CompartmentDesignatorDepartConnectingSeat, SUBSTRING((DepartConnectingSeat), 5, 1) DeckDepartConnectingSeat, REVERSE(SUBSTRING(REVERSE(ReturnConnectingSeat),0,";
                strSQL += "CHARINDEX('_',REVERSE(ReturnConnectingSeat)))) ReturnConnectingSeat, SUBSTRING((ReturnConnectingSeat),0,CHARINDEX('_',(ReturnConnectingSeat))) BeginingReturnConnectingSeat, ";
                strSQL += "SUBSTRING((ReturnConnectingSeat), 3, 1) CompartmentDesignatorReturnConnectingSeat, SUBSTRING((ReturnConnectingSeat), 5, 1) DeckReturnConnectingSeat, PaxType, MAX(SyncCreate) AS SyncCreate , MAX(SyncLastUpd) AS SyncLastUpd, MAX(LastSyncBy) AS LastSyncBy, ";
                strSQL += "CASE WHEN MAX(DBaggage) <> '' OR MAX(DCBaggage) <> '' THEN (SUBSTRING(MAX(DepartBaggage), 0, 24) + CAST(CAST(ROUND(SUM(DBaggagePrice) + SUM(DCBaggagePrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END  DepartBaggage, (SUM(DBaggagePrice) + SUM(DCBaggagePrice)) PriceDepartBaggage, ";
                strSQL += "CASE WHEN MAX(DSport) <> '' OR MAX(DCSport) <> '' THEN (SUBSTRING(MAX(DepartSport), 0, 25) + CAST(CAST(ROUND(SUM(DSportPrice) + SUM(DCSportPrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END DepartSport, (SUM(DSportPrice) + SUM(DCSportPrice)) PriceDepartSport, ";
                strSQL += "CASE WHEN MAX(DInsure) <> '' OR MAX(DCInsure) <> '' THEN (SUBSTRING(MAX(DepartInsure), 0, 20) + CAST(CAST(ROUND(SUM(InsureFee), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END DepartInsure, SUM(InsureFee) PriceDepartInsure, ";//added by romy, 20170811, insurance
                strSQL += "CASE WHEN MAX(DKit) <> '' OR MAX(DCKit) <> '' THEN (SUBSTRING(MAX(DepartComfort), 0, 15) + CAST(CAST(ROUND(SUM(DKitPrice) + SUM(DCKitPrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END DepartComfort, (SUM(DKitPrice) + SUM(DCKitPrice)) PriceDepartComfort, ";
                strSQL += "CASE WHEN MAX(DDuty) <> '' OR MAX(DCDuty) <> '' THEN (SUBSTRING(MAX(DDuty), 0, 15) + CAST(CAST(ROUND(SUM(DDutyPrice) + SUM(DCDutyPrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END DepartDuty, (SUM(DDutyPrice) + SUM(DCDutyPrice)) PriceDepartDuty, ";
                strSQL += "CASE WHEN MAX(DInfant) <> '' OR MAX(DCInfant) <> '' THEN (SUBSTRING(MAX(DInfant), 0, 9) + CAST(CAST(ROUND(SUM(DInfantPrice) + SUM(DCInfantPrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END  DepartInfant, (SUM(DInfantPrice) + SUM(DCInfantPrice)) PriceDepartInfant, ";
                strSQL += "MAX(DBaggageCode) SSRCodeDepartBaggage, MAX(DBaggage) DBaggage, SUM(DBaggagePrice) PriceDepartBaggage1, ";
                strSQL += "MAX(DMealCode1) SSRCodeDepartMeal, MAX(DMeal1) DepartMeal, SUM(DMealPrice1) PriceDepartMeal, ";
                strSQL += "MAX(DMealCode2) DMealCode2, MAX(DMeal2) DMeal2, SUM(DMealPrice2) DMealPrice2, ";
                strSQL += "MAX(DMealCode3) DMealCode3, MAX(DMeal3) DMeal3, SUM(DMealPrice3) DMealPrice3, ";
                strSQL += "MAX(DMealCode4) DMealCode4, MAX(DMeal4) DMeal4, SUM(DMealPrice4) DMealPrice4, ";
                strSQL += "MAX(DDrinkCode1) SSRCodeDepartDrink, MAX(DDrink1) DepartDrink, SUM(DDrinkPrice1) PriceDepartDrink, ";
                strSQL += "MAX(DDrinkCode2) DDrinkCode2, MAX(DDrink2) DDrink2, SUM(DDrinkPrice2) DDrinkPrice2, ";
                strSQL += "MAX(DDrinkCode3) DDrinkCode3, MAX(DDrink3) DDrink3, SUM(DDrinkPrice3) DDrinkPrice3, ";
                strSQL += "MAX(DDrinkCode4) DDrinkCode4, MAX(DDrink4) DDrink4, SUM(DDrinkPrice4) DDrinkPrice4, ";
                strSQL += "MAX(DSportCode) SSRCodeDepartSport, MAX(DSport) DSport, SUM(DSportPrice) PriceDepartSport1, ";
                strSQL += "MAX(DInsureCode) SSRCodeDepartInsure, MAX(DInsure) DInsure, SUM(DInsurePrice) PriceDepartInsure1, ";//added by romy, 20170811, insurance
                strSQL += "MAX(DKitCode) SSRCodeDepartComfort, MAX(DKit) DKit, SUM(DKitPrice) PriceDepartComfort1, ";
                strSQL += "MAX(DDutyCode) SSRCodeDepartDuty, MAX(DDuty) DDuty, SUM(DDutyPrice) PriceDepartDuty1, ";
                strSQL += "MAX(DInfantCode) SSRCodeDepartInfant, MAX(DInfant) DInfant, SUM(DInfantPrice) PriceDepartInfant1, ";
                strSQL += "MAX(DInfantCode) DInfantCode, MAX(DInfant) DInfant, SUM(DInfantPrice) DInfantPrice, ";
                strSQL += "MAX(DCBaggageCode) DCBaggageCode, MAX(DCBaggage) ConDepartBaggage, SUM(DCBaggagePrice) PriceConDepartBaggage, ";
                strSQL += "MAX(DCMealCode1) SSRCodeConDepartMeal, MAX(DCMeal1) ConDepartMeal, SUM(DCMealPrice1) PriceConDepartMeal, ";
                strSQL += "MAX(DCMealCode2) DCMealCode2, MAX(DCMeal2) DCMeal2, SUM(DCMealPrice2) DCMealPrice2, ";
                strSQL += "MAX(DCMealCode3) DCMealCode3, MAX(DCMeal3) DCMeal3, SUM(DCMealPrice3) DCMealPrice3, ";
                strSQL += "MAX(DCMealCode4) DCMealCode4, MAX(DCMeal4) DCMeal4, SUM(DCMealPrice4) DCMealPrice4, ";
                strSQL += "MAX(DCDrinkCode1) SSRCodeConDepartDrink, MAX(DCDrink1) ConDepartDrink, SUM(DCDrinkPrice1) PriceConDepartDrink, ";
                strSQL += "MAX(DCDrinkCode2) DCDrinkCode2, MAX(DCDrink2) DCDrink2, SUM(DCDrinkPrice2) DCDrinkPrice2, ";
                strSQL += "MAX(DCDrinkCode3) DCDrinkCode3, MAX(DCDrink3) DCDrink3, SUM(DCDrinkPrice3) DCDrinkPrice3, ";
                strSQL += "MAX(DCDrinkCode4) DCDrinkCode4, MAX(DCDrink4) DCDrink4, SUM(DCDrinkPrice4) DCDrinkPrice4, ";
                strSQL += "MAX(DCSportCode) DCSportCode, MAX(DCSport) ConDepartSport, SUM(DCSportPrice) PriceConDepartSport, ";
                strSQL += "MAX(DCInsureCode) DCInsureCode, MAX(DCInsure) ConDepartInsure, SUM(DCInsurePrice) PriceConDepartInsure, ";//added by romy, 20170811, insurance
                strSQL += "MAX(DKitCode) DCKitCode, MAX(DCKit) ConDepartComfort, SUM(DCKitPrice) PriceConDepartComfort, ";
                strSQL += "MAX(DCDutyCode) DCDutyCode, MAX(DCDuty) DCDuty, SUM(DCDutyPrice) PriceConDepartDuty, ";
                strSQL += "MAX(DCInfantCode) DCInfantCode, MAX(DCInfant) DCInfant, SUM(DCInfantPrice) PriceConDepartInfant, ";
                strSQL += "MAX(DCInfantCode) DCInfantCode, MAX(DCInfant) DCInfant, SUM(DCInfantPrice) DCInfantPrice, ";
                strSQL += "CASE WHEN MAX(RBaggage) <> '' OR MAX(RCBaggage) <> '' THEN (SUBSTRING(MAX(ReturnBaggage), 0, 24) + CAST(CAST(ROUND(SUM(RBaggagePrice) + SUM(RCBaggagePrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END ReturnBaggage, ";
                strSQL += "(SUM(RBaggagePrice) + SUM(RCBaggagePrice)) PriceReturnBaggage, ";
                strSQL += "CASE WHEN MAX(RSport) <> '' OR MAX(RCSport) <> '' THEN (SUBSTRING(MAX(ReturnSport), 0, 25) + CAST(CAST(ROUND(SUM(RSportPrice) + SUM(RCSportPrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END ReturnSport,  (SUM(RSportPrice) + SUM(RCSportPrice)) PriceReturnSport, ";
                strSQL += "CASE WHEN MAX(RInsure) <> '' OR MAX(RCInsure) <> '' THEN (SUBSTRING(MAX(ReturnInsure), 0, 25) + CAST(CAST(ROUND(SUM(RInsurePrice) + SUM(RCInsurePrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END ReturnInsure,  (SUM(RInsurePrice) + SUM(RCInsurePrice)) PriceReturnInsure, ";//added by romy, 20170811, insurance
                strSQL += "CASE WHEN MAX(RKit) <> '' OR MAX(RCKit) <> '' THEN (SUBSTRING(MAX(ReturnComfort), 0, 15) + CAST(CAST(ROUND(SUM(RKitPrice) + SUM(RCKitPrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END ReturnComfort, ";
                strSQL += "(SUM(RKitPrice) + SUM(RCKitPrice)) PriceReturnComfort,  ";
                strSQL += "CASE WHEN MAX(RDuty) <> '' OR MAX(RCDuty) <> '' THEN (SUBSTRING(MAX(RDuty), 0, 15) + CAST(CAST(ROUND(SUM(RDutyPrice) + SUM(RCDutyPrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END ReturnDuty, (SUM(RDutyPrice) + SUM(RCDutyPrice)) PriceReturnDuty, ";
                strSQL += "CASE WHEN MAX(RInfant) <> '' OR MAX(RCInfant) <> '' THEN (SUBSTRING(MAX(RInfant), 0, 9) + CAST(CAST(ROUND(SUM(RInfantPrice) + SUM(RCInfantPrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END ReturnInfant, (SUM(RInfantPrice) + SUM(RCInfantPrice)) PriceReturnInfant, ";
                strSQL += "MAX(RBaggageCode) SSRCodeReturnBaggage, MAX(RBaggage) RBaggage, SUM(RBaggagePrice) PriceReturnBaggage1, ";
                strSQL += "MAX(RMealCode1) SSRCodeReturnMeal, MAX(RMeal1) ReturnMeal, SUM(RMealPrice1) PriceReturnMeal, ";
                strSQL += "MAX(RMealCode2) RMealCode2, MAX(RMeal2) RMeal2, SUM(RMealPrice2) RMealPrice2, ";
                strSQL += "MAX(RMealCode3) RMealCode3, MAX(RMeal3) RMeal3, SUM(RMealPrice3) RMealPrice3, ";
                strSQL += "MAX(RMealCode4) RMealCode4, MAX(RMeal4) RMeal4, SUM(RMealPrice4) RMealPrice4, ";
                strSQL += "MAX(RDrinkCode1) SSRCodeReturnDrink, MAX(RDrink1) ReturnDrink, SUM(RDrinkPrice1) PriceReturnDrink, ";
                strSQL += "MAX(RDrinkCode2) RDrinkCode2, MAX(RDrink2) RDrink2, SUM(RDrinkPrice2) RDrinkPrice2, ";
                strSQL += "MAX(RDrinkCode3) RDrinkCode3, MAX(RDrink3) RDrink3, SUM(RDrinkPrice3) RDrinkPrice3, ";
                strSQL += "MAX(RDrinkCode4) RDrinkCode4, MAX(RDrink4) RDrink4, SUM(RDrinkPrice4) RDrinkPrice4, ";
                strSQL += "MAX(RSportCode) SSRCodeReturnSport, MAX(RSport) RSport, SUM(RSportPrice) PriceReturnSport1, ";
                strSQL += "MAX(RInsureCode) SSRCodeReturnInsure, MAX(RInsure) RInsure, SUM(RInsurePrice) PriceReturnInsure1, ";//added by romy, 20170811, insurance
                strSQL += "MAX(RKitCode) SSRCodeReturnComfort, MAX(RKit) RKit, SUM(RKitPrice) PriceReturnComfort1, ";
                strSQL += "MAX(RDutyCode) SSRCodeReturnDuty, MAX(RDuty) RDuty, SUM(RDutyPrice) PriceReturnDuty1, ";
                strSQL += "MAX(RDutyCode) SSRCodeReturnInfant, MAX(RInfant) RInfant, SUM(RInfantPrice) PriceReturnInfant1, ";
                strSQL += "MAX(RInfantCode) RInfantCode, MAX(RInfant) RInfant, SUM(RInfantPrice) RInfantPrice, ";
                strSQL += "MAX(RCBaggageCode) RCBaggageCode, MAX(RCBaggage) ConReturnBaggage, SUM(RBaggagePrice) PriceConReturnBaggage, ";
                strSQL += "MAX(RCMealCode1) SSRCodeConReturnMeal, MAX(RCMeal1) ConReturnMeal, SUM(RCMealPrice1) PriceConReturnMeal, ";
                strSQL += "MAX(RCMealCode2) RCMealCode2, MAX(RCMeal2) RCMeal2, SUM(RCMealPrice2) RCMealPrice2, ";
                strSQL += "MAX(RCMealCode3) RCMealCode3, MAX(RCMeal3) RCMeal3, SUM(RCMealPrice3) RCMealPrice3, ";
                strSQL += "MAX(RCMealCode4) RCMealCode4, MAX(RCMeal4) RCMeal4, SUM(RCMealPrice4) RCMealPrice4, ";
                strSQL += "MAX(RCDrinkCode1) SSRCodeConReturnDrink, MAX(RCDrink1) ConReturnDrink, SUM(RCDrinkPrice1) PriceConReturnDrink, ";
                strSQL += "MAX(RCDrinkCode2) RCDrinkCode2, MAX(RCDrink2) RCDrink2, SUM(RCDrinkPrice2) RCDrinkPrice2, ";
                strSQL += "MAX(RCDrinkCode3) RCDrinkCode3, MAX(RCDrink3) RCDrink3, SUM(RCDrinkPrice3) RCDrinkPrice3, ";
                strSQL += "MAX(RCDrinkCode4) RCDrinkCode4, MAX(RCDrink4) RCDrink4, SUM(RCDrinkPrice4) RCDrinkPrice4, ";
                strSQL += "MAX(RCSportCode) RCSportCode, MAX(RCSport) ConReturnSport, SUM(RCSportPrice) PriceConReturnSport, ";
                strSQL += "MAX(RCInsureCode) RCInsureCode, MAX(RCInsure) ConReturnInsure, SUM(RCInsurePrice) PriceConReturnInsure, ";//added by romy, 20170811, insurance
                strSQL += "MAX(RCKitCode) RCKitCode, MAX(RCKit) ConReturnComfort, SUM(RCKitPrice) PriceConReturnComfort, ";
                strSQL += "MAX(RCDutyCode) RCDutyCode, MAX(RCDuty) RCDuty, SUM(RCDutyPrice) PriceConReturnDuty, ";
                strSQL += "MAX(RCInfantCode) RCInfantCode, MAX(RCInfant) RCInfant, SUM(RCInfantPrice) PriceConReturnInfant, ";
                strSQL += "MAX(RCInfantCode) RCInfantCode, MAX(RCInfant) RCInfant, SUM(RCInfantPrice) RCInfantPrice, SUM(InsureFee) InsureFee  ";//edited by romy, for insure
                strSQL += "FROM ( ";
                strSQL += "SELECT p.TransID, p.SyncCreate, p.SyncLastUpd, p.LastSyncBy, p.RecordLocator PNR, d.FlightNo, d.CarrierCode, d.Origin, d.Transit, d.Destination, h.Currency, p.PassengerID, p.PaxNo, p.Title, p.Gender, ISNULL(c.Name,'') CountryName, p.Nationality, p.DOB, ISNULL(cp.Name,'') IssuingCountryName, p.IssuingCountry, p.ChangeCount, p.MaxChange, p.MaxPax1, p.MaxPax2, p.ExpiryDate, p.ContactNo, p.Email, p.ChangeFee, p.ChangeDate, p.ChangeFee2, p.ChangeDate2, p.FirstName, p.LastName, p.PassportNo, CASE WHEN p.ChangeCount >= 1 THEN(CONVERT(VARCHAR, p.ChangeCount) + 'x')  ELSE '-' END ChangeCnt, p.ChangeCount InitChange, p.PrevFirstName1, p.PrevLastName1, p.PrevFirstName2, p.PrevLastName2, p.PrevIssuingCountry1, p.PrevNationality1, p.PrevTitle1, p.PrevGender1, p.PrevDOB1, p.PrevPassportNo1, p.PrevExpiryDate1, p.PrevIssuingCountry2, p.PrevNationality2, p.PrevTitle2, p.PrevGender2, p.PrevDOB2, p.PrevPassportNo2, p.PrevExpiryDate2, ";
                strSQL += "(p.MaxChange - p.ChangeCount) CountChanged, p.DepartSeat, p.ReturnSeat, p.DepartConnectingSeat, p.ReturnConnectingSeat,  CASE p.Title WHEN '' THEN 'Adult' WHEN 'Mr' THEN 'Adult' WHEN 'Ms' THEN 'Adult' WHEN 'Chd' THEN 'Chd' END As PaxType, ";//added by romy, 20170818, insurance
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.BaggageCode ELSE '' END DBaggageCode, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(ib.ItemDesc + ' : ' + cast(cast(round(s.BaggageAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DBaggage, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(ib.ItemDesc + ' : ' + cast(cast(round((CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.BaggageAmt ELSE 0 END) + (CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.BaggageAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DepartBaggage, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.BaggageAmt ELSE 0 END DBaggagePrice, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.MealCode1 ELSE '' END DMealCode1, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(im1.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal1, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DMeal1, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.MealSubTotal1 ELSE 0 END DMealPrice1, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.MealCode2 ELSE '' END DMealCode2, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(im2.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal2, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DMeal2, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.MealSubTotal2 ELSE 0 END DMealPrice2, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.MealCode3 ELSE '' END DMealCode3, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(im3.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal3, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DMeal3, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.MealSubTotal3 ELSE 0 END DMealPrice3, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.MealCode4 ELSE '' END DMealCode4, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(im4.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal4, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DMeal4, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.MealSubTotal4 ELSE 0 END DMealPrice4, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DrinkCode1 ELSE '' END DDrinkCode1, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(id1.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal1, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DDrink1, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DrinkSubTotal1 ELSE 0 END DDrinkPrice1, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DrinkCode2 ELSE '' END DDrinkCode2, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(id2.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal2, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DDrink2, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DrinkSubTotal2 ELSE 0 END DDrinkPrice2, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DrinkCode3 ELSE '' END DDrinkCode3, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(id3.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal3, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DDrink3, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DrinkSubTotal3 ELSE 0 END DDrinkPrice3, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DrinkCode4 ELSE '' END DDrinkCode4, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(id4.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal4, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DDrink4, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DrinkSubTotal4 ELSE 0 END DDrinkPrice4,  ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.SportCode ELSE '' END DSportCode, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(isp.ItemDesc + ' : ' + cast(cast(round(s.SportAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DSport, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(isp.ItemDesc + ' : ' + cast(cast(round((CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.SportAmt ELSE 0 END) + (CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.SportAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DepartSport, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.SportAmt ELSE 0 END DSportPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN p.InsureCode ELSE '' END DInsureCode, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(isi.ItemDesc + ' : ' + cast(cast(round(s.InsureAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DInsure, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(isi.ItemDesc + ' : ' + cast(cast(round((CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.InsureAmt ELSE 0 END) + (CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.InsureAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DepartInsure, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.InsureAmt ELSE 0 END DInsurePrice,  ";//added by romy, 20170811, insurance
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.KitCode ELSE '' END DKitCode, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(ik.ItemDesc + ' : ' + cast(cast(round(s.KitAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DKit, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(ik.ItemDesc + ' : ' + cast(cast(round((CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.KitAmt ELSE 0 END) + (CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.SportAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DepartComfort, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.KitAmt ELSE 0 END DKitPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DutyCode ELSE '' END DDutyCode, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(id.ItemDesc + ' : ' + cast(cast(round(s.DutyAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DDuty, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DutyAmt ELSE 0 END DDutyPrice, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.InfantCode ELSE '' END DInfantCode, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(ii.ItemDesc + ' : ' + cast(cast(round(s.InfantAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DInfant, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.InfantAmt ELSE 0 END DInfantPrice, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.BaggageCode ELSE '' END DCBaggageCode, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(ib.ItemDesc + ' : ' + cast(cast(round(s.BaggageAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCBaggage, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.BaggageAmt ELSE 0 END DCBaggagePrice, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.MealCode1 ELSE '' END DCMealCode1, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(im1.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal1, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCMeal1, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.MealSubTotal1 ELSE 0 END DCMealPrice1, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.MealCode2 ELSE '' END DCMealCode2, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(im2.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal2, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCMeal2, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.MealSubTotal2 ELSE 0 END DCMealPrice2, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.MealCode3 ELSE '' END DCMealCode3, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(im3.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal3, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCMeal3, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.MealSubTotal3 ELSE 0 END DCMealPrice3, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.MealCode4 ELSE '' END DCMealCode4, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(im4.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal4, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCMeal4, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.MealSubTotal4 ELSE 0 END DCMealPrice4, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DrinkCode1 ELSE '' END DCDrinkCode1, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(id1.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal1, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCDrink1, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DrinkSubTotal1 ELSE 0 END DCDrinkPrice1, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DrinkCode2 ELSE '' END DCDrinkCode2, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(id2.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal2, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCDrink2, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DrinkSubTotal2 ELSE 0 END DCDrinkPrice2, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DrinkCode3 ELSE '' END DCDrinkCode3, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(id3.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal3, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCDrink3, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DrinkSubTotal3 ELSE 0 END DCDrinkPrice3, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DrinkCode4 ELSE '' END DCDrinkCode4, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(id4.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal4, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCDrink4, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DrinkSubTotal4 ELSE 0 END DCDrinkPrice4,  ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.SportCode ELSE '' END DCSportCode, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(isp.ItemDesc + ' : ' + cast(cast(round(s.SportAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCSport, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.SportAmt ELSE 0 END DCSportPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN p.InsureCode ELSE '' END DCInsureCode, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(isi.ItemDesc + ' : ' + cast(cast(round(s.InsureAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCInsure, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.InsureAmt ELSE 0 END DCInsurePrice,  ";//added by romy, 20170811, insurance
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.KitCode ELSE '' END DCKitCode, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(ik.ItemDesc + ' : ' + cast(cast(round(s.KitAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCKit, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.KitAmt ELSE 0 END DCKitPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DutyCode ELSE '' END DCDutyCode, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(id.ItemDesc + ' : ' + cast(cast(round(s.DutyAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCDuty, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DutyAmt ELSE 0 END DCDutyPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.InfantCode ELSE '' END DCInfantCode, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(ii.ItemDesc + ' : ' + cast(cast(round(s.InfantAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCInfant, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.InfantAmt ELSE 0 END DCInfantPrice, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.BaggageCode ELSE '' END RBaggageCode, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(ib.ItemDesc + ' : ' + cast(cast(round(s.BaggageAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RBaggage,  CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(ib.ItemDesc + ' : ' + cast(cast(round((CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.BaggageAmt ELSE 0 END) + (CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.BaggageAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END ReturnBaggage, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.BaggageAmt ELSE 0 END RBaggagePrice, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.MealCode1 ELSE '' END RMealCode1, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(im1.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal1, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RMeal1, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.MealSubTotal1 ELSE 0 END RMealPrice1, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.MealCode2 ELSE '' END RMealCode2, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(im2.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal2, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RMeal2, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.MealSubTotal2 ELSE 0 END RMealPrice2, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.MealCode3 ELSE '' END RMealCode3, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(im3.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal3, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RMeal3, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.MealSubTotal3 ELSE 0 END RMealPrice3, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.MealCode4 ELSE '' END RMealCode4, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(im4.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal4, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RMeal4, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.MealSubTotal4 ELSE 0 END RMealPrice4, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DrinkCode1 ELSE '' END RDrinkCode1, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(id1.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal1, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RDrink1, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DrinkSubTotal1 ELSE 0 END RDrinkPrice1, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DrinkCode2 ELSE '' END RDrinkCode2, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(id2.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal2, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RDrink2, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DrinkSubTotal2 ELSE 0 END RDrinkPrice2, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DrinkCode3 ELSE '' END RDrinkCode3, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(id3.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal3, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RDrink3, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DrinkSubTotal3 ELSE 0 END RDrinkPrice3, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DrinkCode4 ELSE '' END RDrinkCode4, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(id4.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal4, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RDrink4, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DrinkSubTotal4 ELSE 0 END RDrinkPrice4,  ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.SportCode ELSE '' END RSportCode, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(isp.ItemDesc + ' : ' + cast(cast(round(s.SportAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RSport, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(isp.ItemDesc + ' : ' + cast(cast(round((CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.SportAmt ELSE 0 END) + (CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.SportAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END ReturnSport, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.SportAmt ELSE 0 END RSportPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN p.InsureCode ELSE '' END RInsureCode, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(isi.ItemDesc + ' : ' + cast(cast(round(s.InsureAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RInsure, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(isi.ItemDesc + ' : ' + cast(cast(round((CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.InsureAmt ELSE 0 END) + (CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.InsureAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END ReturnInsure, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.InsureAmt ELSE 0 END RInsurePrice,  ";//added by romy, 20170811, insurance
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.KitCode ELSE '' END RKitCode, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(ik.ItemDesc + ' : ' + cast(cast(round(s.KitAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RKit,  CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(ik.ItemDesc + ' : ' + cast(cast(round(( CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.KitAmt ELSE 0 END) + (CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.KitAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END ReturnComfort, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.KitAmt ELSE 0 END RKitPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DutyCode ELSE '' END RDutyCode, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(id.ItemDesc + ' : ' + cast(cast(round(s.DutyAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RDuty, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DutyAmt ELSE 0 END RDutyPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.InfantCode ELSE '' END RInfantCode, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(ii.ItemDesc + ' : ' + cast(cast(round(s.InfantAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RInfant, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.InfantAmt ELSE 0 END RInfantPrice, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.BaggageCode ELSE '' END RCBaggageCode, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(ib.ItemDesc + ' : ' + cast(cast(round(s.BaggageAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCBaggage, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.BaggageAmt ELSE 0 END RCBaggagePrice, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.MealCode1 ELSE '' END RCMealCode1, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(im1.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal1, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCMeal1, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.MealSubTotal1 ELSE 0 END RCMealPrice1, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.MealCode2 ELSE '' END RCMealCode2, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(im2.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal2, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCMeal2, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.MealSubTotal2 ELSE 0 END RCMealPrice2, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.MealCode3 ELSE '' END RCMealCode3, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(im3.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal3, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCMeal3, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.MealSubTotal3 ELSE 0 END RCMealPrice3, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.MealCode4 ELSE '' END RCMealCode4, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(im4.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal4, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCMeal4, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.MealSubTotal4 ELSE 0 END RCMealPrice4, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DrinkCode1 ELSE '' END RCDrinkCode1, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(id1.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal1, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCDrink1, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DrinkSubTotal1 ELSE 0 END RCDrinkPrice1, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DrinkCode2 ELSE '' END RCDrinkCode2, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(id2.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal2, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCDrink2, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DrinkSubTotal2 ELSE 0 END RCDrinkPrice2, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DrinkCode3 ELSE '' END RCDrinkCode3, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(id3.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal3, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCDrink3, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DrinkSubTotal3 ELSE 0 END RCDrinkPrice3, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DrinkCode4 ELSE '' END RCDrinkCode4, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(id4.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal4, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCDrink4, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DrinkSubTotal4 ELSE 0 END RCDrinkPrice4,  ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.SportCode ELSE '' END RCSportCode, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(isp.ItemDesc + ' : ' + cast(cast(round(s.SportAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCSport, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.SportAmt ELSE 0 END RCSportPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN p.InsureCode ELSE '' END RCInsureCode, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(isi.ItemDesc + ' : ' + cast(cast(round(s.InsureAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCInsure, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.InsureAmt ELSE 0 END RCInsurePrice,  ";//added by romy, 20170811, insurance
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.KitCode ELSE '' END RCKitCode, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(ik.ItemDesc + ' : ' + cast(cast(round(s.KitAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCKit, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.KitAmt ELSE 0 END RCKitPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DutyCode ELSE '' END RCDutyCode, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(id.ItemDesc + ' : ' + cast(cast(round(s.DutyAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCDuty, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DutyAmt ELSE 0 END RCDutyPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.InfantCode ELSE '' END RCInfantCode, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(ii.ItemDesc + ' : ' + cast(cast(round(s.InfantAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCInfant, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.InfantAmt ELSE 0 END RCInfantPrice,p.InsureFee ";//edited by romy for insure
                strSQL += "FROM BK_PASSENGERLIST p WITH (NOLOCK) ";
                strSQL += "INNER JOIN BK_TRANSMAIN h WITH (NOLOCK) ON h.TransID = p.TransID ";
                strSQL += "CROSS APPLY (SELECT TOP 1 d.FlightNo, d.CarrierCode, d.Origin, d.Transit, d.Destination FROM BK_TRANSDTL d WITH (NOLOCK) WHERE d.TransID = p.TransID AND d.RecordLocator = p.RecordLocator ORDER BY SeqNo ASC) d ";
                strSQL += "LEFT JOIN COUNTRY c WITH (NOLOCK) ON c.CountryCode = p.Nationality ";
                strSQL += "LEFT JOIN COUNTRY cp WITH (NOLOCK) ON cp.CountryCode = p.IssuingCountry ";
                strSQL += "LEFT JOIN BK_TRANSADDON s WITH (NOLOCK) ON p.TransID = s.TransID AND p.RecordLocator = s.RecordLocator AND p.PassengerID = s.PassengerID ";
                strSQL += "LEFT JOIN ITEM ib WITH (NOLOCK) ON ib.ItemCode = s.BaggageCode ";
                strSQL += "LEFT JOIN ITEM im1 WITH (NOLOCK) ON im1.ItemCode = s.MealCode1 ";
                strSQL += "LEFT JOIN ITEM im2 WITH (NOLOCK) ON im2.ItemCode = s.MealCode2 ";
                strSQL += "LEFT JOIN ITEM im3 WITH (NOLOCK) ON im3.ItemCode = s.MealCode3 ";
                strSQL += "LEFT JOIN ITEM im4 WITH (NOLOCK) ON im4.ItemCode = s.MealCode4 ";
                strSQL += "LEFT JOIN ITEM id1 WITH (NOLOCK) ON id1.ItemCode = s.DrinkCode1 ";
                strSQL += "LEFT JOIN ITEM id2 WITH (NOLOCK) ON id2.ItemCode = s.DrinkCode2 ";
                strSQL += "LEFT JOIN ITEM id3 WITH (NOLOCK) ON id3.ItemCode = s.DrinkCode3 ";
                strSQL += "LEFT JOIN ITEM id4 WITH (NOLOCK) ON id4.ItemCode = s.DrinkCode4 ";
                strSQL += "LEFT JOIN ITEM isp WITH (NOLOCK) ON isp.ItemCode = s.SportCode ";
                strSQL += "LEFT JOIN ITEM isi WITH (NOLOCK) ON isi.ItemCode = p.InsureCode ";//added by romy, 20170811, insurance
                strSQL += "LEFT JOIN ITEM ik WITH (NOLOCK) ON ik.ItemCode = s.KitCode ";
                strSQL += "LEFT JOIN ITEM id WITH (NOLOCK) ON id.ItemCode = s.DutyCode ";
                strSQL += "LEFT JOIN ITEM ii WITH (NOLOCK) ON ii.ItemCode = s.InfantCode ";
                strSQL += "LEFT JOIN COUNTRYCODE cd WITH (NOLOCK) ON cd.provincestatecode = d.Origin ";//added by romy, 20170818, insurance
                strSQL += "LEFT JOIN COUNTRYCODE ca WITH (NOLOCK) ON ca.provincestatecode = d.Destination";//added by romy, 20170818, insurance
                //strSQL += strfilter + " GROUP BY p.SyncCreate, p.SyncLastUpd, p.LastSyncBy, p.TransID, p.RecordLocator, d.FlightNo, d.CarrierCode, d.Origin, d.Transit, d.Destination, h.Currency, p.PassengerID, p.PaxNo, p.Title, p.Gender, ISNULL(c.Name,''), p.Nationality, p.DOB, ISNULL(cp.Name,''), p.IssuingCountry, p.ChangeCount, p.MaxChange, p.MaxPax1, p.MaxPax2, p.ExpiryDate, p.ContactNo, p.Email, p.ChangeFee, p.ChangeDate, p.ChangeFee2, p.ChangeDate2, p.FirstName, p.LastName, p.PassportNo, CASE WHEN p.ChangeCount >= 1 THEN(CONVERT(VARCHAR, p.ChangeCount) + 'x')  ELSE '-' END, p.ChangeCount, p.PrevFirstName1, p.PrevLastName1, p.PrevFirstName2, p.PrevLastName2, (p.MaxChange - p.ChangeCount), p.DepartSeat, p.ReturnSeat, p.DepartConnectingSeat, p.ReturnConnectingSeat, s.TripMode, s.Segment, s.BaggageCode, ib.ItemDesc, s.BaggageAmt, s.MealCode1, im1.ItemDesc, s.MealSubTotal1, s.MealCode2, im2.ItemDesc, s.MealSubTotal2, s.MealCode3, im3.ItemDesc, s.MealSubTotal3, s.MealCode4, im4.ItemDesc, s.MealSubTotal4, s.DrinkCode1, id1.ItemDesc, s.DrinkSubTotal1, s.DrinkCode2, id2.ItemDesc, s.DrinkSubTotal2, s.DrinkCode3, id3.ItemDesc, s.DrinkSubTotal3, s.DrinkCode4, id4.ItemDesc, s.DrinkSubTotal4, s.SportCode, isp.ItemDesc, s.SportAmt, s.KitCode, ik.ItemDesc, s.KitAmt, s.DutyCode, id.ItemDesc, s.DutyAmt, s.InfantCode, ii.ItemDesc, s.InfantAmt ";//edited by romy, 20170811, insurance
                strSQL += strfilter + " GROUP BY p.SyncCreate, p.SyncLastUpd, p.LastSyncBy, p.TransID, p.RecordLocator, d.FlightNo, d.CarrierCode, d.Origin, d.Transit, d.Destination, h.Currency, p.PassengerID, p.PaxNo, p.Title, p.Gender, ISNULL(c.Name,''), p.Nationality, p.DOB, ISNULL(cp.Name,''), p.IssuingCountry, p.ChangeCount, p.MaxChange, p.MaxPax1, p.MaxPax2, p.ExpiryDate, p.ContactNo, p.Email, p.ChangeFee, p.ChangeDate, p.ChangeFee2, p.ChangeDate2, p.FirstName, p.LastName, p.PassportNo, CASE WHEN p.ChangeCount >= 1 THEN(CONVERT(VARCHAR, p.ChangeCount) + 'x')  ELSE '-' END, p.ChangeCount, p.PrevFirstName1, p.PrevLastName1, p.PrevFirstName2, p.PrevLastName2, p.PrevIssuingCountry1, p.PrevNationality1, p.PrevTitle1, p.PrevGender1, p.PrevDOB1, p.PrevPassportNo1, p.PrevExpiryDate1, p.PrevIssuingCountry2, p.PrevNationality2, p.PrevTitle2, p.PrevGender2, p.PrevDOB2, p.PrevPassportNo2, p.PrevExpiryDate2, (p.MaxChange - p.ChangeCount), p.DepartSeat, p.ReturnSeat, p.DepartConnectingSeat, p.ReturnConnectingSeat, s.TripMode, s.Segment, s.BaggageCode, ib.ItemDesc, s.BaggageAmt, s.MealCode1, im1.ItemDesc, s.MealSubTotal1, s.MealCode2, im2.ItemDesc, s.MealSubTotal2, s.MealCode3, im3.ItemDesc, s.MealSubTotal3, s.MealCode4, im4.ItemDesc, s.MealSubTotal4, s.DrinkCode1, id1.ItemDesc, s.DrinkSubTotal1, s.DrinkCode2, id2.ItemDesc, s.DrinkSubTotal2, s.DrinkCode3, id3.ItemDesc, s.DrinkSubTotal3, s.DrinkCode4, id4.ItemDesc, s.DrinkSubTotal4, s.SportCode, p.InsureCode, isp.ItemDesc, isi.ItemDesc, s.SportAmt, s.InsureAmt, s.KitCode, ik.ItemDesc, s.KitAmt, s.DutyCode, id.ItemDesc, s.DutyAmt, s.InfantCode, ii.ItemDesc, s.InfantAmt,p.InsureFee ";//edited by romy, 20170811, insurance//added by romy, 20170818, insurance
                strSQL += ") A ";
                strSQL += "GROUP BY TransID, PNR, FlightNo, CarrierCode, Origin, Transit, Destination, Currency, PassengerID, PaxNo, Title, Gender, CountryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, ChangeCount, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, PrevIssuingCountry1, PrevNationality1, PrevTitle1, PrevGender1, PrevDOB1, PrevPassportNo1, PrevExpiryDate1, PrevIssuingCountry2, PrevNationality2, PrevTitle2, PrevGender2, PrevDOB2, PrevPassportNo2, PrevExpiryDate2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat, PaxType, InsureFee";//edited by romy, 20170818, Insurance

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {

                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_PASSENGERLIST does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }
        public DataTable GetAllBK_PASSENGERLISTWithSSRDataTableNewManage(string TransID, bool NewRec = false, string optionalFilter = "")
        {
            List<PassengerData> objListBK_PASSENGERLIST_Info = new List<PassengerData>();
            DataTable dt;
            String strSQL = string.Empty;
            string recordLocatorFilter = string.Empty;
            if (NewRec == false) recordLocatorFilter = " AND LEN(p.RecordLocator)>=6";
            if (optionalFilter != "") optionalFilter = " AND " + optionalFilter;
            try
            {
                //edited by ketee
                string strfilter = ""; strfilter = " WHERE p.Title <> 'INFT' AND p.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'" + recordLocatorFilter + optionalFilter;
                strSQL = "SELECT PNR, IssuingCountryName, CountryName, Title, Gender, FirstName, LastName, DOB, PassportNo, ExpiryDate, '' ErrorMsg, ROW_NUMBER() OVER  (ORDER BY PNR, CAST(PassengerID as INT) ASC) AS RowNo, ROW_NUMBER() OVER  (ORDER BY PNR, CAST(PassengerID as INT) ASC) AS SeqNo, 0 As IndicatorDepartBaggage, 0 As IndicatorDepartMeal, 0 As IndicatorDepartDrink, 0 As IndicatorConDepartMeal, 0 As IndicatorConDepartDrink, 0 As IndicatorDepartSport, 0 As IndicatorDepartInsure,";//edited by romy, 20170811, insurance//edited by romy, 20170818, Insurance
                strSQL += "0 As IndicatorDepartComfort, 0 As IndicatorDepartInfant, 0 As IndicatorReturnBaggage, 0 As IndicatorReturnMeal, 0 As IndicatorReturnDrink, 0 As IndicatorConReturnMeal, 0 As IndicatorConReturnDrink, 0 As IndicatorReturnSport, 0 As IndicatorReturnInsure, 0 As IndicatorReturnComfort, 0 As IndicatorReturnInfant, TransID, FlightNo, CarrierCode, Origin, Transit, Destination, Currency, PassengerID, PaxNo, ";//edited by romy, 20170811, insurance
                strSQL += " Nationality, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2,  ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, ChangeCnt, ChangeCount, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, PrevIssuingCountry1, PrevNationality1, PrevTitle1, PrevGender1, PrevDOB1, PrevPassportNo1, PrevExpiryDate1, PrevIssuingCountry2, PrevNationality2, PrevTitle2, PrevGender2, PrevDOB2, PrevPassportNo2, PrevExpiryDate2, CountChanged, REVERSE(SUBSTRING(REVERSE(DepartSeat),0,CHARINDEX('_',REVERSE(DepartSeat)))) DepartSeat, ";
                strSQL += "SUBSTRING((DepartSeat),0,CHARINDEX('_',(DepartSeat))) BeginingDepartSeat, SUBSTRING((DepartSeat), 3, 1) CompartmentDesignatorDepartSeat, ";
                strSQL += "SUBSTRING((DepartSeat), 5, 1) DeckDepartSeat, REVERSE(SUBSTRING(REVERSE(ReturnSeat),0,CHARINDEX('_',REVERSE(ReturnSeat)))) ReturnSeat, ";
                strSQL += "SUBSTRING((ReturnSeat),0,CHARINDEX('_',(ReturnSeat))) BeginingReturnSeat, SUBSTRING((ReturnSeat), 3, 1) CompartmentDesignatorReturnSeat, ";
                strSQL += "SUBSTRING((ReturnSeat), 5, 1) DeckReturnSeat, REVERSE(SUBSTRING(REVERSE(DepartConnectingSeat),0,CHARINDEX('_',REVERSE(DepartConnectingSeat)))) ";
                strSQL += "DepartConnectingSeat, SUBSTRING((DepartConnectingSeat),0,CHARINDEX('_',(DepartConnectingSeat))) BeginingDepartConnectingSeat, SUBSTRING((DepartConnectingSeat), 3, 1) ";
                strSQL += "CompartmentDesignatorDepartConnectingSeat, SUBSTRING((DepartConnectingSeat), 5, 1) DeckDepartConnectingSeat, REVERSE(SUBSTRING(REVERSE(ReturnConnectingSeat),0,";
                strSQL += "CHARINDEX('_',REVERSE(ReturnConnectingSeat)))) ReturnConnectingSeat, SUBSTRING((ReturnConnectingSeat),0,CHARINDEX('_',(ReturnConnectingSeat))) BeginingReturnConnectingSeat, ";
                strSQL += "SUBSTRING((ReturnConnectingSeat), 3, 1) CompartmentDesignatorReturnConnectingSeat, SUBSTRING((ReturnConnectingSeat), 5, 1) DeckReturnConnectingSeat, PaxType, MAX(SyncCreate) AS SyncCreate , MAX(SyncLastUpd) AS SyncLastUpd, MAX(LastSyncBy) AS LastSyncBy, ";
                strSQL += "CASE WHEN MAX(DBaggage) <> '' OR MAX(DCBaggage) <> '' THEN (SUBSTRING(MAX(DepartBaggage), 0, 24) + CAST(CAST(ROUND(SUM(DBaggagePrice) + SUM(DCBaggagePrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END  DepartBaggage, (SUM(DBaggagePrice) + SUM(DCBaggagePrice)) PriceDepartBaggage, ";
                strSQL += "CASE WHEN MAX(DSport) <> '' OR MAX(DCSport) <> '' THEN (SUBSTRING(MAX(DepartSport), 0, 25) + CAST(CAST(ROUND(SUM(DSportPrice) + SUM(DCSportPrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END DepartSport, (SUM(DSportPrice) + SUM(DCSportPrice)) PriceDepartSport, ";
                strSQL += "CASE WHEN MAX(DInsure) <> '' OR MAX(DCInsure) <> '' THEN (SUBSTRING(MAX(DepartInsure), 0, 20) + CAST(CAST(ROUND(SUM(InsureFee), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END DepartInsure, SUM(InsureFee) PriceDepartInsure, ";//added by romy, 20170811, insurance
                strSQL += "CASE WHEN MAX(DKit) <> '' OR MAX(DCKit) <> '' THEN (SUBSTRING(MAX(DepartComfort), 0, 15) + CAST(CAST(ROUND(SUM(DKitPrice) + SUM(DCKitPrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END DepartComfort, (SUM(DKitPrice) + SUM(DCKitPrice)) PriceDepartComfort, ";
                strSQL += "CASE WHEN MAX(DDuty) <> '' OR MAX(DCDuty) <> '' THEN (SUBSTRING(MAX(DDuty), 0, 15) + CAST(CAST(ROUND(SUM(DDutyPrice) + SUM(DCDutyPrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END DepartDuty, (SUM(DDutyPrice) + SUM(DCDutyPrice)) PriceDepartDuty, ";
                strSQL += "CASE WHEN MAX(DInfant) <> '' OR MAX(DCInfant) <> '' THEN (SUBSTRING(MAX(DInfant), 0, 9) + CAST(CAST(ROUND(SUM(DInfantPrice) + SUM(DCInfantPrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END  DepartInfant, (SUM(DInfantPrice) + SUM(DCInfantPrice)) PriceDepartInfant, ";
                strSQL += "MAX(DBaggageCode) SSRCodeDepartBaggage, MAX(DBaggage) DBaggage, SUM(DBaggagePrice) PriceDepartBaggage1, ";
                strSQL += "MAX(DMealCode1) SSRCodeDepartMeal, MAX(DMeal1) DepartMeal, SUM(DMealPrice1) PriceDepartMeal, ";
                strSQL += "MAX(DMealCode2) DMealCode2, MAX(DMeal2) DMeal2, SUM(DMealPrice2) DMealPrice2, ";
                strSQL += "MAX(DMealCode3) DMealCode3, MAX(DMeal3) DMeal3, SUM(DMealPrice3) DMealPrice3, ";
                strSQL += "MAX(DMealCode4) DMealCode4, MAX(DMeal4) DMeal4, SUM(DMealPrice4) DMealPrice4, ";
                strSQL += "MAX(DDrinkCode1) SSRCodeDepartDrink, MAX(DDrink1) DepartDrink, SUM(DDrinkPrice1) PriceDepartDrink, ";
                strSQL += "MAX(DDrinkCode2) DDrinkCode2, MAX(DDrink2) DDrink2, SUM(DDrinkPrice2) DDrinkPrice2, ";
                strSQL += "MAX(DDrinkCode3) DDrinkCode3, MAX(DDrink3) DDrink3, SUM(DDrinkPrice3) DDrinkPrice3, ";
                strSQL += "MAX(DDrinkCode4) DDrinkCode4, MAX(DDrink4) DDrink4, SUM(DDrinkPrice4) DDrinkPrice4, ";
                strSQL += "MAX(DSportCode) SSRCodeDepartSport, MAX(DSport) DSport, SUM(DSportPrice) PriceDepartSport1, ";
                strSQL += "MAX(DInsureCode) SSRCodeDepartInsure, MAX(DInsure) DInsure, SUM(DInsurePrice) PriceDepartInsure1, ";//added by romy, 20170811, insurance
                strSQL += "MAX(DKitCode) SSRCodeDepartComfort, MAX(DKit) DKit, SUM(DKitPrice) PriceDepartComfort1, ";
                strSQL += "MAX(DDutyCode) SSRCodeDepartDuty, MAX(DDuty) DDuty, SUM(DDutyPrice) PriceDepartDuty1, ";
                strSQL += "MAX(DInfantCode) SSRCodeDepartInfant, MAX(DInfant) DInfant, SUM(DInfantPrice) PriceDepartInfant1, ";
                strSQL += "MAX(DInfantCode) DInfantCode, MAX(DInfant) DInfant, SUM(DInfantPrice) DInfantPrice, ";
                strSQL += "MAX(DCBaggageCode) DCBaggageCode, MAX(DCBaggage) ConDepartBaggage, SUM(DCBaggagePrice) PriceConDepartBaggage, ";
                strSQL += "MAX(DCMealCode1) SSRCodeConDepartMeal, MAX(DCMeal1) ConDepartMeal, SUM(DCMealPrice1) PriceConDepartMeal, ";
                strSQL += "MAX(DCMealCode2) DCMealCode2, MAX(DCMeal2) DCMeal2, SUM(DCMealPrice2) DCMealPrice2, ";
                strSQL += "MAX(DCMealCode3) DCMealCode3, MAX(DCMeal3) DCMeal3, SUM(DCMealPrice3) DCMealPrice3, ";
                strSQL += "MAX(DCMealCode4) DCMealCode4, MAX(DCMeal4) DCMeal4, SUM(DCMealPrice4) DCMealPrice4, ";
                strSQL += "MAX(DCDrinkCode1) SSRCodeConDepartDrink, MAX(DCDrink1) ConDepartDrink, SUM(DCDrinkPrice1) PriceConDepartDrink, ";
                strSQL += "MAX(DCDrinkCode2) DCDrinkCode2, MAX(DCDrink2) DCDrink2, SUM(DCDrinkPrice2) DCDrinkPrice2, ";
                strSQL += "MAX(DCDrinkCode3) DCDrinkCode3, MAX(DCDrink3) DCDrink3, SUM(DCDrinkPrice3) DCDrinkPrice3, ";
                strSQL += "MAX(DCDrinkCode4) DCDrinkCode4, MAX(DCDrink4) DCDrink4, SUM(DCDrinkPrice4) DCDrinkPrice4, ";
                strSQL += "MAX(DCSportCode) DCSportCode, MAX(DCSport) ConDepartSport, SUM(DCSportPrice) PriceConDepartSport, ";
                strSQL += "MAX(DCInsureCode) DCInsureCode, MAX(DCInsure) ConDepartInsure, SUM(DCInsurePrice) PriceConDepartInsure, ";//added by romy, 20170811, insurance
                strSQL += "MAX(DKitCode) DCKitCode, MAX(DCKit) ConDepartComfort, SUM(DCKitPrice) PriceConDepartComfort, ";
                strSQL += "MAX(DCDutyCode) DCDutyCode, MAX(DCDuty) DCDuty, SUM(DCDutyPrice) PriceConDepartDuty, ";
                strSQL += "MAX(DCInfantCode) DCInfantCode, MAX(DCInfant) DCInfant, SUM(DCInfantPrice) PriceConDepartInfant, ";
                strSQL += "MAX(DCInfantCode) DCInfantCode, MAX(DCInfant) DCInfant, SUM(DCInfantPrice) DCInfantPrice, ";
                strSQL += "CASE WHEN MAX(RBaggage) <> '' OR MAX(RCBaggage) <> '' THEN (SUBSTRING(MAX(ReturnBaggage), 0, 24) + CAST(CAST(ROUND(SUM(RBaggagePrice) + SUM(RCBaggagePrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END ReturnBaggage, ";
                strSQL += "(SUM(RBaggagePrice) + SUM(RCBaggagePrice)) PriceReturnBaggage, ";
                strSQL += "CASE WHEN MAX(RSport) <> '' OR MAX(RCSport) <> '' THEN (SUBSTRING(MAX(ReturnSport), 0, 25) + CAST(CAST(ROUND(SUM(RSportPrice) + SUM(RCSportPrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END ReturnSport,  (SUM(RSportPrice) + SUM(RCSportPrice)) PriceReturnSport, ";
                strSQL += "CASE WHEN MAX(RInsure) <> '' OR MAX(RCInsure) <> '' THEN (SUBSTRING(MAX(ReturnInsure), 0, 25) + CAST(CAST(ROUND(SUM(RInsurePrice) + SUM(RCInsurePrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END ReturnInsure,  (SUM(RInsurePrice) + SUM(RCInsurePrice)) PriceReturnInsure, ";//added by romy, 20170811, insurance
                strSQL += "CASE WHEN MAX(RKit) <> '' OR MAX(RCKit) <> '' THEN (SUBSTRING(MAX(ReturnComfort), 0, 15) + CAST(CAST(ROUND(SUM(RKitPrice) + SUM(RCKitPrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END ReturnComfort, ";
                strSQL += "(SUM(RKitPrice) + SUM(RCKitPrice)) PriceReturnComfort,  ";
                strSQL += "CASE WHEN MAX(RDuty) <> '' OR MAX(RCDuty) <> '' THEN (SUBSTRING(MAX(RDuty), 0, 15) + CAST(CAST(ROUND(SUM(RDutyPrice) + SUM(RCDutyPrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END ReturnDuty, (SUM(RDutyPrice) + SUM(RCDutyPrice)) PriceReturnDuty, ";
                strSQL += "CASE WHEN MAX(RInfant) <> '' OR MAX(RCInfant) <> '' THEN (SUBSTRING(MAX(RInfant), 0, 9) + CAST(CAST(ROUND(SUM(RInfantPrice) + SUM(RCInfantPrice), 2)as numeric(12, 2)) AS varchar(max)) + ' ' + Currency) ELSE '' END ReturnInfant, (SUM(RInfantPrice) + SUM(RCInfantPrice)) PriceReturnInfant, ";
                strSQL += "MAX(RBaggageCode) SSRCodeReturnBaggage, MAX(RBaggage) RBaggage, SUM(RBaggagePrice) PriceReturnBaggage1, ";
                strSQL += "MAX(RMealCode1) SSRCodeReturnMeal, MAX(RMeal1) ReturnMeal, SUM(RMealPrice1) PriceReturnMeal, ";
                strSQL += "MAX(RMealCode2) RMealCode2, MAX(RMeal2) RMeal2, SUM(RMealPrice2) RMealPrice2, ";
                strSQL += "MAX(RMealCode3) RMealCode3, MAX(RMeal3) RMeal3, SUM(RMealPrice3) RMealPrice3, ";
                strSQL += "MAX(RMealCode4) RMealCode4, MAX(RMeal4) RMeal4, SUM(RMealPrice4) RMealPrice4, ";
                strSQL += "MAX(RDrinkCode1) SSRCodeReturnDrink, MAX(RDrink1) ReturnDrink, SUM(RDrinkPrice1) PriceReturnDrink, ";
                strSQL += "MAX(RDrinkCode2) RDrinkCode2, MAX(RDrink2) RDrink2, SUM(RDrinkPrice2) RDrinkPrice2, ";
                strSQL += "MAX(RDrinkCode3) RDrinkCode3, MAX(RDrink3) RDrink3, SUM(RDrinkPrice3) RDrinkPrice3, ";
                strSQL += "MAX(RDrinkCode4) RDrinkCode4, MAX(RDrink4) RDrink4, SUM(RDrinkPrice4) RDrinkPrice4, ";
                strSQL += "MAX(RSportCode) SSRCodeReturnSport, MAX(RSport) RSport, SUM(RSportPrice) PriceReturnSport1, ";
                strSQL += "MAX(RInsureCode) SSRCodeReturnInsure, MAX(RInsure) RInsure, SUM(RInsurePrice) PriceReturnInsure1, ";//added by romy, 20170811, insurance
                strSQL += "MAX(RKitCode) SSRCodeReturnComfort, MAX(RKit) RKit, SUM(RKitPrice) PriceReturnComfort1, ";
                strSQL += "MAX(RDutyCode) SSRCodeReturnDuty, MAX(RDuty) RDuty, SUM(RDutyPrice) PriceReturnDuty1, ";
                strSQL += "MAX(RInfantCode) SSRCodeReturnInfant, MAX(RInfant) RInfant, SUM(RInfantPrice) PriceReturnInfant1, ";
                strSQL += "MAX(RInfantCode) RInfantCode, MAX(RInfant) RInfant, SUM(RInfantPrice) RInfantPrice, ";
                strSQL += "MAX(RCBaggageCode) RCBaggageCode, MAX(RCBaggage) ConReturnBaggage, SUM(RBaggagePrice) PriceConReturnBaggage, ";
                strSQL += "MAX(RCMealCode1) SSRCodeConReturnMeal, MAX(RCMeal1) ConReturnMeal, SUM(RCMealPrice1) PriceConReturnMeal, ";
                strSQL += "MAX(RCMealCode2) RCMealCode2, MAX(RCMeal2) RCMeal2, SUM(RCMealPrice2) RCMealPrice2, ";
                strSQL += "MAX(RCMealCode3) RCMealCode3, MAX(RCMeal3) RCMeal3, SUM(RCMealPrice3) RCMealPrice3, ";
                strSQL += "MAX(RCMealCode4) RCMealCode4, MAX(RCMeal4) RCMeal4, SUM(RCMealPrice4) RCMealPrice4, ";
                strSQL += "MAX(RCDrinkCode1) SSRCodeConReturnDrink, MAX(RCDrink1) ConReturnDrink, SUM(RCDrinkPrice1) PriceConReturnDrink, ";
                strSQL += "MAX(RCDrinkCode2) RCDrinkCode2, MAX(RCDrink2) RCDrink2, SUM(RCDrinkPrice2) RCDrinkPrice2, ";
                strSQL += "MAX(RCDrinkCode3) RCDrinkCode3, MAX(RCDrink3) RCDrink3, SUM(RCDrinkPrice3) RCDrinkPrice3, ";
                strSQL += "MAX(RCDrinkCode4) RCDrinkCode4, MAX(RCDrink4) RCDrink4, SUM(RCDrinkPrice4) RCDrinkPrice4, ";
                strSQL += "MAX(RCSportCode) RCSportCode, MAX(RCSport) ConReturnSport, SUM(RCSportPrice) PriceConReturnSport, ";
                strSQL += "MAX(RCInsureCode) RCInsureCode, MAX(RCInsure) ConReturnInsure, SUM(RCInsurePrice) PriceConReturnInsure, ";//added by romy, 20170811, insurance
                strSQL += "MAX(RCKitCode) RCKitCode, MAX(RCKit) ConReturnComfort, SUM(RCKitPrice) PriceConReturnComfort, ";
                strSQL += "MAX(RCDutyCode) RCDutyCode, MAX(RCDuty) RCDuty, SUM(RCDutyPrice) PriceConReturnDuty, ";
                strSQL += "MAX(RCInfantCode) RCInfantCode, MAX(RCInfant) RCInfant, SUM(RCInfantPrice) PriceConReturnInfant, ";
                strSQL += "MAX(RCInfantCode) RCInfantCode, MAX(RCInfant) RCInfant, SUM(RCInfantPrice) RCInfantPrice, SUM(InsureFee) InsureFee  ";//edited by romy, for insure
                strSQL += "FROM ( ";
                strSQL += "SELECT p.TransID, p.SyncCreate, p.SyncLastUpd, p.LastSyncBy, p.RecordLocator PNR, d.FlightNo, d.CarrierCode, d.Origin, d.Transit, d.Destination, h.Currency, p.PassengerID, p.PaxNo, p.Title, p.Gender, ISNULL(c.Name,'') CountryName, p.Nationality, p.DOB, ISNULL(cp.Name,'') IssuingCountryName, p.IssuingCountry, p.ChangeCount, p.MaxChange, p.MaxPax1, p.MaxPax2, p.ExpiryDate, p.ContactNo, p.Email, p.ChangeFee, p.ChangeDate, p.ChangeFee2, p.ChangeDate2, p.FirstName, p.LastName, p.PassportNo, CASE WHEN p.ChangeCount >= 1 THEN(CONVERT(VARCHAR, p.ChangeCount) + 'x')  ELSE '-' END ChangeCnt, p.ChangeCount InitChange, p.PrevFirstName1, p.PrevLastName1, p.PrevFirstName2, p.PrevLastName2, p.PrevIssuingCountry1, p.PrevNationality1, p.PrevTitle1, p.PrevGender1, p.PrevDOB1, p.PrevPassportNo1, p.PrevExpiryDate1, p.PrevIssuingCountry2, p.PrevNationality2, p.PrevTitle2, p.PrevGender2, p.PrevDOB2, p.PrevPassportNo2, p.PrevExpiryDate2, ";
                strSQL += "(p.MaxChange - p.ChangeCount) CountChanged, p.DepartSeat, p.ReturnSeat, p.DepartConnectingSeat, p.ReturnConnectingSeat,  CASE p.Title WHEN '' THEN 'Adult' WHEN 'Mr' THEN 'Adult' WHEN 'Ms' THEN 'Adult' WHEN 'Chd' THEN 'Chd' END As PaxType, ";//added by romy, 20170818, insurance
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.BaggageCode ELSE '' END DBaggageCode, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(ib.ItemDesc + ' : ' + cast(cast(round(s.BaggageAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DBaggage, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(ib.ItemDesc + ' : ' + cast(cast(round((CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.BaggageAmt ELSE 0 END) + (CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.BaggageAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DepartBaggage, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.BaggageAmt ELSE 0 END DBaggagePrice, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.MealCode1 ELSE '' END DMealCode1, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(im1.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal1, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DMeal1, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.MealSubTotal1 ELSE 0 END DMealPrice1, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.MealCode2 ELSE '' END DMealCode2, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(im2.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal2, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DMeal2, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.MealSubTotal2 ELSE 0 END DMealPrice2, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.MealCode3 ELSE '' END DMealCode3, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(im3.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal3, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DMeal3, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.MealSubTotal3 ELSE 0 END DMealPrice3, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.MealCode4 ELSE '' END DMealCode4, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(im4.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal4, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DMeal4, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.MealSubTotal4 ELSE 0 END DMealPrice4, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DrinkCode1 ELSE '' END DDrinkCode1, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(id1.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal1, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DDrink1, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DrinkSubTotal1 ELSE 0 END DDrinkPrice1, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DrinkCode2 ELSE '' END DDrinkCode2, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(id2.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal2, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DDrink2, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DrinkSubTotal2 ELSE 0 END DDrinkPrice2, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DrinkCode3 ELSE '' END DDrinkCode3, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(id3.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal3, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DDrink3, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DrinkSubTotal3 ELSE 0 END DDrinkPrice3, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DrinkCode4 ELSE '' END DDrinkCode4, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(id4.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal4, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DDrink4, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DrinkSubTotal4 ELSE 0 END DDrinkPrice4,  ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.SportCode ELSE '' END DSportCode, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(isp.ItemDesc + ' : ' + cast(cast(round(s.SportAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DSport, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(isp.ItemDesc + ' : ' + cast(cast(round((CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.SportAmt ELSE 0 END) + (CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.SportAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DepartSport, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.SportAmt ELSE 0 END DSportPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN p.InsureCode ELSE '' END DInsureCode, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(isi.ItemDesc + ' : ' + cast(cast(round(s.InsureAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DInsure, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(isi.ItemDesc + ' : ' + cast(cast(round((CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.InsureAmt ELSE 0 END) + (CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.InsureAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DepartInsure, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.InsureAmt ELSE 0 END DInsurePrice,  ";//added by romy, 20170811, insurance
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.KitCode ELSE '' END DKitCode, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(ik.ItemDesc + ' : ' + cast(cast(round(s.KitAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DKit, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(ik.ItemDesc + ' : ' + cast(cast(round((CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.KitAmt ELSE 0 END) + (CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.SportAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DepartComfort, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.KitAmt ELSE 0 END DKitPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DutyCode ELSE '' END DDutyCode, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(id.ItemDesc + ' : ' + cast(cast(round(s.DutyAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DDuty, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DutyAmt ELSE 0 END DDutyPrice, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.InfantCode ELSE '' END DInfantCode, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(ii.ItemDesc + ' : ' + cast(cast(round(s.InfantAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DInfant, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.InfantAmt ELSE 0 END DInfantPrice, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.BaggageCode ELSE '' END DCBaggageCode, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(ib.ItemDesc + ' : ' + cast(cast(round(s.BaggageAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCBaggage, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.BaggageAmt ELSE 0 END DCBaggagePrice, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.MealCode1 ELSE '' END DCMealCode1, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(im1.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal1, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCMeal1, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.MealSubTotal1 ELSE 0 END DCMealPrice1, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.MealCode2 ELSE '' END DCMealCode2, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(im2.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal2, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCMeal2, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.MealSubTotal2 ELSE 0 END DCMealPrice2, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.MealCode3 ELSE '' END DCMealCode3, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(im3.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal3, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCMeal3, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.MealSubTotal3 ELSE 0 END DCMealPrice3, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.MealCode4 ELSE '' END DCMealCode4, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(im4.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal4, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCMeal4, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.MealSubTotal4 ELSE 0 END DCMealPrice4, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DrinkCode1 ELSE '' END DCDrinkCode1, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(id1.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal1, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCDrink1, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DrinkSubTotal1 ELSE 0 END DCDrinkPrice1, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DrinkCode2 ELSE '' END DCDrinkCode2, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(id2.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal2, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCDrink2, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DrinkSubTotal2 ELSE 0 END DCDrinkPrice2, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DrinkCode3 ELSE '' END DCDrinkCode3, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(id3.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal3, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCDrink3, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DrinkSubTotal3 ELSE 0 END DCDrinkPrice3, ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DrinkCode4 ELSE '' END DCDrinkCode4, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(id4.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal4, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCDrink4, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DrinkSubTotal4 ELSE 0 END DCDrinkPrice4,  ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.SportCode ELSE '' END DCSportCode, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(isp.ItemDesc + ' : ' + cast(cast(round(s.SportAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCSport, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.SportAmt ELSE 0 END DCSportPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN p.InsureCode ELSE '' END DCInsureCode, CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN ISNULL(isi.ItemDesc + ' : ' + cast(cast(round(s.InsureAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCInsure, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.InsureAmt ELSE 0 END DCInsurePrice,  ";//added by romy, 20170811, insurance
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.KitCode ELSE '' END DCKitCode, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(ik.ItemDesc + ' : ' + cast(cast(round(s.KitAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCKit, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.KitAmt ELSE 0 END DCKitPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DutyCode ELSE '' END DCDutyCode, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(id.ItemDesc + ' : ' + cast(cast(round(s.DutyAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCDuty, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DutyAmt ELSE 0 END DCDutyPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.InfantCode ELSE '' END DCInfantCode, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(ii.ItemDesc + ' : ' + cast(cast(round(s.InfantAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END DCInfant, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.InfantAmt ELSE 0 END DCInfantPrice, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.BaggageCode ELSE '' END RBaggageCode, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(ib.ItemDesc + ' : ' + cast(cast(round(s.BaggageAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RBaggage,  CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(ib.ItemDesc + ' : ' + cast(cast(round((CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.BaggageAmt ELSE 0 END) + (CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.BaggageAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END ReturnBaggage, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.BaggageAmt ELSE 0 END RBaggagePrice, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.MealCode1 ELSE '' END RMealCode1, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(im1.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal1, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RMeal1, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.MealSubTotal1 ELSE 0 END RMealPrice1, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.MealCode2 ELSE '' END RMealCode2, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(im2.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal2, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RMeal2, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.MealSubTotal2 ELSE 0 END RMealPrice2, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.MealCode3 ELSE '' END RMealCode3, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(im3.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal3, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RMeal3, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.MealSubTotal3 ELSE 0 END RMealPrice3, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.MealCode4 ELSE '' END RMealCode4, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(im4.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal4, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RMeal4, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.MealSubTotal4 ELSE 0 END RMealPrice4, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DrinkCode1 ELSE '' END RDrinkCode1, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(id1.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal1, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RDrink1, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DrinkSubTotal1 ELSE 0 END RDrinkPrice1, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DrinkCode2 ELSE '' END RDrinkCode2, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(id2.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal2, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RDrink2, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DrinkSubTotal2 ELSE 0 END RDrinkPrice2, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DrinkCode3 ELSE '' END RDrinkCode3, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(id3.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal3, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RDrink3, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DrinkSubTotal3 ELSE 0 END RDrinkPrice3, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DrinkCode4 ELSE '' END RDrinkCode4, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(id4.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal4, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RDrink4, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DrinkSubTotal4 ELSE 0 END RDrinkPrice4,  ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.SportCode ELSE '' END RSportCode, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(isp.ItemDesc + ' : ' + cast(cast(round(s.SportAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RSport, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(isp.ItemDesc + ' : ' + cast(cast(round((CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.SportAmt ELSE 0 END) + (CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.SportAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END ReturnSport, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.SportAmt ELSE 0 END RSportPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN p.InsureCode ELSE '' END RInsureCode, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(isi.ItemDesc + ' : ' + cast(cast(round(s.InsureAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RInsure, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(isi.ItemDesc + ' : ' + cast(cast(round((CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.InsureAmt ELSE 0 END) + (CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.InsureAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END ReturnInsure, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.InsureAmt ELSE 0 END RInsurePrice,  ";//added by romy, 20170811, insurance
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.KitCode ELSE '' END RKitCode, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(ik.ItemDesc + ' : ' + cast(cast(round(s.KitAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RKit,  CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(ik.ItemDesc + ' : ' + cast(cast(round(( CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.KitAmt ELSE 0 END) + (CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.KitAmt ELSE 0 END), 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END ReturnComfort, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.KitAmt ELSE 0 END RKitPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DutyCode ELSE '' END RDutyCode, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(id.ItemDesc + ' : ' + cast(cast(round(s.DutyAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RDuty, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DutyAmt ELSE 0 END RDutyPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.InfantCode ELSE '' END RInfantCode, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(ii.ItemDesc + ' : ' + cast(cast(round(s.InfantAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RInfant, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.InfantAmt ELSE 0 END RInfantPrice, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.BaggageCode ELSE '' END RCBaggageCode, CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN ISNULL(ib.ItemDesc + ' : ' + cast(cast(round(s.BaggageAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCBaggage, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.BaggageAmt ELSE 0 END RCBaggagePrice, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.MealCode1 ELSE '' END RCMealCode1, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(im1.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal1, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCMeal1, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.MealSubTotal1 ELSE 0 END RCMealPrice1, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.MealCode2 ELSE '' END RCMealCode2, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(im2.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal2, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCMeal2, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.MealSubTotal2 ELSE 0 END RCMealPrice2, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.MealCode3 ELSE '' END RCMealCode3, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(im3.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal3, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCMeal3, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.MealSubTotal3 ELSE 0 END RCMealPrice3, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.MealCode4 ELSE '' END RCMealCode4, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(im4.ItemDesc + ' : ' + cast(cast(round(s.MealSubTotal4, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCMeal4, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.MealSubTotal4 ELSE 0 END RCMealPrice4, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DrinkCode1 ELSE '' END RCDrinkCode1, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(id1.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal1, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCDrink1, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DrinkSubTotal1 ELSE 0 END RCDrinkPrice1, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DrinkCode2 ELSE '' END RCDrinkCode2, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(id2.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal2, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCDrink2, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DrinkSubTotal2 ELSE 0 END RCDrinkPrice2, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DrinkCode3 ELSE '' END RCDrinkCode3, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(id3.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal3, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCDrink3, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DrinkSubTotal3 ELSE 0 END RCDrinkPrice3, ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DrinkCode4 ELSE '' END RCDrinkCode4, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(id4.ItemDesc + ' : ' + cast(cast(round(s.DrinkSubTotal4, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCDrink4, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DrinkSubTotal4 ELSE 0 END RCDrinkPrice4,  ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.SportCode ELSE '' END RCSportCode, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(isp.ItemDesc + ' : ' + cast(cast(round(s.SportAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCSport, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.SportAmt ELSE 0 END RCSportPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN p.InsureCode ELSE '' END RCInsureCode, CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN ISNULL(isi.ItemDesc + ' : ' + cast(cast(round(s.InsureAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCInsure, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.InsureAmt ELSE 0 END RCInsurePrice,  ";//added by romy, 20170811, insurance
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.KitCode ELSE '' END RCKitCode, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(ik.ItemDesc + ' : ' + cast(cast(round(s.KitAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCKit, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.KitAmt ELSE 0 END RCKitPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DutyCode ELSE '' END RCDutyCode, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(id.ItemDesc + ' : ' + cast(cast(round(s.DutyAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCDuty, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DutyAmt ELSE 0 END RCDutyPrice,  ";
                strSQL += "CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.InfantCode ELSE '' END RCInfantCode, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN ISNULL(ii.ItemDesc + ' : ' + cast(cast(round(s.InfantAmt, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency,'') ELSE '' END RCInfant, CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.InfantAmt ELSE 0 END RCInfantPrice,p.InsureFee ";//edited by romy for insure
                strSQL += "FROM BK_PASSENGERLIST p WITH (NOLOCK) ";
                strSQL += "INNER JOIN BK_TRANSMAIN h WITH (NOLOCK) ON h.TransID = p.TransID ";
                strSQL += "CROSS APPLY (SELECT TOP 1 d.FlightNo, d.CarrierCode, d.Origin, d.Transit, d.Destination FROM BK_TRANSDTL d WITH (NOLOCK) WHERE d.TransID = p.TransID AND d.RecordLocator = p.RecordLocator ORDER BY SeqNo ASC) d ";
                strSQL += "LEFT JOIN COUNTRY c WITH (NOLOCK) ON c.CountryCode = p.Nationality ";
                strSQL += "LEFT JOIN COUNTRY cp WITH (NOLOCK) ON cp.CountryCode = p.IssuingCountry ";
                strSQL += "LEFT JOIN BK_TRANSADDON s WITH (NOLOCK) ON p.TransID = s.TransID AND p.RecordLocator = s.RecordLocator AND p.PassengerID = s.PassengerID ";
                strSQL += "LEFT JOIN ITEM ib WITH (NOLOCK) ON ib.ItemCode = s.BaggageCode ";
                strSQL += "LEFT JOIN ITEM im1 WITH (NOLOCK) ON im1.ItemCode = s.MealCode1 ";
                strSQL += "LEFT JOIN ITEM im2 WITH (NOLOCK) ON im2.ItemCode = s.MealCode2 ";
                strSQL += "LEFT JOIN ITEM im3 WITH (NOLOCK) ON im3.ItemCode = s.MealCode3 ";
                strSQL += "LEFT JOIN ITEM im4 WITH (NOLOCK) ON im4.ItemCode = s.MealCode4 ";
                strSQL += "LEFT JOIN ITEM id1 WITH (NOLOCK) ON id1.ItemCode = s.DrinkCode1 ";
                strSQL += "LEFT JOIN ITEM id2 WITH (NOLOCK) ON id2.ItemCode = s.DrinkCode2 ";
                strSQL += "LEFT JOIN ITEM id3 WITH (NOLOCK) ON id3.ItemCode = s.DrinkCode3 ";
                strSQL += "LEFT JOIN ITEM id4 WITH (NOLOCK) ON id4.ItemCode = s.DrinkCode4 ";
                strSQL += "LEFT JOIN ITEM isp WITH (NOLOCK) ON isp.ItemCode = s.SportCode ";
                strSQL += "LEFT JOIN ITEM isi WITH (NOLOCK) ON isi.ItemCode = p.InsureCode ";//added by romy, 20170811, insurance
                strSQL += "LEFT JOIN ITEM ik WITH (NOLOCK) ON ik.ItemCode = s.KitCode ";
                strSQL += "LEFT JOIN ITEM id WITH (NOLOCK) ON id.ItemCode = s.DutyCode ";
                strSQL += "LEFT JOIN ITEM ii WITH (NOLOCK) ON ii.ItemCode = s.InfantCode ";
                strSQL += "LEFT JOIN COUNTRYCODE cd WITH (NOLOCK) ON cd.provincestatecode = d.Origin ";//added by romy, 20170818, insurance
                strSQL += "LEFT JOIN COUNTRYCODE ca WITH (NOLOCK) ON ca.provincestatecode = d.Destination";//added by romy, 20170818, insurance
                //strSQL += strfilter + " GROUP BY p.SyncCreate, p.SyncLastUpd, p.LastSyncBy, p.TransID, p.RecordLocator, d.FlightNo, d.CarrierCode, d.Origin, d.Transit, d.Destination, h.Currency, p.PassengerID, p.PaxNo, p.Title, p.Gender, ISNULL(c.Name,''), p.Nationality, p.DOB, ISNULL(cp.Name,''), p.IssuingCountry, p.ChangeCount, p.MaxChange, p.MaxPax1, p.MaxPax2, p.ExpiryDate, p.ContactNo, p.Email, p.ChangeFee, p.ChangeDate, p.ChangeFee2, p.ChangeDate2, p.FirstName, p.LastName, p.PassportNo, CASE WHEN p.ChangeCount >= 1 THEN(CONVERT(VARCHAR, p.ChangeCount) + 'x')  ELSE '-' END, p.ChangeCount, p.PrevFirstName1, p.PrevLastName1, p.PrevFirstName2, p.PrevLastName2, (p.MaxChange - p.ChangeCount), p.DepartSeat, p.ReturnSeat, p.DepartConnectingSeat, p.ReturnConnectingSeat, s.TripMode, s.Segment, s.BaggageCode, ib.ItemDesc, s.BaggageAmt, s.MealCode1, im1.ItemDesc, s.MealSubTotal1, s.MealCode2, im2.ItemDesc, s.MealSubTotal2, s.MealCode3, im3.ItemDesc, s.MealSubTotal3, s.MealCode4, im4.ItemDesc, s.MealSubTotal4, s.DrinkCode1, id1.ItemDesc, s.DrinkSubTotal1, s.DrinkCode2, id2.ItemDesc, s.DrinkSubTotal2, s.DrinkCode3, id3.ItemDesc, s.DrinkSubTotal3, s.DrinkCode4, id4.ItemDesc, s.DrinkSubTotal4, s.SportCode, isp.ItemDesc, s.SportAmt, s.KitCode, ik.ItemDesc, s.KitAmt, s.DutyCode, id.ItemDesc, s.DutyAmt, s.InfantCode, ii.ItemDesc, s.InfantAmt ";//edited by romy, 20170811, insurance
                strSQL += strfilter + " GROUP BY p.SyncCreate, p.SyncLastUpd, p.LastSyncBy, p.TransID, p.RecordLocator, d.FlightNo, d.CarrierCode, d.Origin, d.Transit, d.Destination, h.Currency, p.PassengerID, p.PaxNo, p.Title, p.Gender, ISNULL(c.Name,''), p.Nationality, p.DOB, ISNULL(cp.Name,''), p.IssuingCountry, p.ChangeCount, p.MaxChange, p.MaxPax1, p.MaxPax2, p.ExpiryDate, p.ContactNo, p.Email, p.ChangeFee, p.ChangeDate, p.ChangeFee2, p.ChangeDate2, p.FirstName, p.LastName, p.PassportNo, CASE WHEN p.ChangeCount >= 1 THEN(CONVERT(VARCHAR, p.ChangeCount) + 'x')  ELSE '-' END, p.ChangeCount, p.PrevFirstName1, p.PrevLastName1, p.PrevFirstName2, p.PrevLastName2, p.PrevIssuingCountry1, p.PrevNationality1, p.PrevTitle1, p.PrevGender1, p.PrevDOB1, p.PrevPassportNo1, p.PrevExpiryDate1, p.PrevIssuingCountry2, p.PrevNationality2, p.PrevTitle2, p.PrevGender2, p.PrevDOB2, p.PrevPassportNo2, p.PrevExpiryDate2, (p.MaxChange - p.ChangeCount), p.DepartSeat, p.ReturnSeat, p.DepartConnectingSeat, p.ReturnConnectingSeat, s.TripMode, s.Segment, s.BaggageCode, ib.ItemDesc, s.BaggageAmt, s.MealCode1, im1.ItemDesc, s.MealSubTotal1, s.MealCode2, im2.ItemDesc, s.MealSubTotal2, s.MealCode3, im3.ItemDesc, s.MealSubTotal3, s.MealCode4, im4.ItemDesc, s.MealSubTotal4, s.DrinkCode1, id1.ItemDesc, s.DrinkSubTotal1, s.DrinkCode2, id2.ItemDesc, s.DrinkSubTotal2, s.DrinkCode3, id3.ItemDesc, s.DrinkSubTotal3, s.DrinkCode4, id4.ItemDesc, s.DrinkSubTotal4, s.SportCode, p.InsureCode, isp.ItemDesc, isi.ItemDesc, s.SportAmt, s.InsureAmt, s.KitCode, ik.ItemDesc, s.KitAmt, s.DutyCode, id.ItemDesc, s.DutyAmt, s.InfantCode, ii.ItemDesc, s.InfantAmt,p.InsureFee ";//edited by romy, 20170811, insurance//added by romy, 20170818, insurance
                strSQL += ") A ";
                strSQL += "GROUP BY TransID, PNR, FlightNo, CarrierCode, Origin, Transit, Destination, Currency, PassengerID, PaxNo, Title, Gender, CountryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, ChangeCount, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, PrevIssuingCountry1, PrevNationality1, PrevTitle1, PrevGender1, PrevDOB1, PrevPassportNo1, PrevExpiryDate1, PrevIssuingCountry2, PrevNationality2, PrevTitle2, PrevGender2, PrevDOB2, PrevPassportNo2, PrevExpiryDate2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat, PaxType, InsureFee";//edited by romy, 20170818, Insurance

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {

                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_PASSENGERLIST does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        //public DataTable GetAllBK_PASSENGERLISTWithSSRDataTableManage2(string TransID, bool NewRec = false, string optionalFilter = "", bool IsReturnFlight = true)
        //{
        //    List<PassengerData> objListBK_PASSENGERLIST_Info = new List<PassengerData>();
        //    DataTable dt;
        //    String strSQL = string.Empty;
        //    string recordLocatorFilter = string.Empty;
        //    if (NewRec == false) recordLocatorFilter = " AND LEN(BK_TRANSDTL.RecordLocator)>=6";
        //    if (optionalFilter != "") optionalFilter = " AND " + optionalFilter;
        //    try
        //    {
        //        //edited by ketee
        //        string strfilter = ""; strfilter = " WHERE BK_PASSENGERLIST.Title <> 'INFT' AND BK_PASSENGERLIST.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'" + recordLocatorFilter;

        //        //to differentiate one-way and return flight
        //        string strDepart = "";
        //        string strReturn = " and BK_TRANSDTL.SeqNo % 2 = -1";
        //        if (IsReturnFlight == true)
        //        {
        //            strDepart = " and BK_TRANSDTL.SeqNo % 2 = 1"; //if return, then need to filter odd record
        //            strReturn = " and BK_TRANSDTL.SeqNo % 2 = 0"; //if return, return row should be even row
        //        }

        //        //strSQL = "SELECT * FROM (SELECT SeqNo, TransID, PNR, FlightNo, CarrierCode, Origin, Destination, Currency, PassengerID, PaxNo, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat, MAX(SyncCreate) AS SyncCreate , MAX(SyncLastUpd) AS SyncLastUpd, MAX(LastSyncBy) AS LastSyncBy, max(DepartMeal) DepartMeal_desc, (select value from dbo.fn_split(max(DepartMeal),'|') where position=1) SSRCodeDepartMeal, (select value from dbo.fn_split(max(DepartMeal),'|') where position=2) DepartMeal, (select value from dbo.fn_split(max(DepartMeal),'|') where position=3) PriceDepartMeal, max(DepartBaggage) DepartBaggage_desc, (select value from dbo.fn_split(max(DepartBaggage),'|') where position=1) SSRCodeDepartBaggage, (select value from dbo.fn_split(max(DepartBaggage),'|') where position=2) DepartBaggage, (select value from dbo.fn_split(max(DepartBaggage),'|') where position=3) PriceDepartBaggage, max(DepartSportEquipment) DepartSport_desc, (select value from dbo.fn_split(max(DepartSportEquipment),'|') where position=1) SSRCodeDepartSport, (select value from dbo.fn_split(max(DepartSportEquipment),'|') where position=2) DepartSport, (select value from dbo.fn_split(max(DepartSportEquipment),'|') where position=3) PriceDepartSport, max(DepartComfortKit) DepartComfort_desc, (select value from dbo.fn_split(max(DepartComfortKit),'|') where position=1) SSRCodeDepartComfort, (select value from dbo.fn_split(max(DepartComfortKit),'|') where position=2) DepartComfort, (select value from dbo.fn_split(max(DepartComfortKit),'|') where position=3) PriceDepartComfort, max(DepartDutyFree) DepartDuty_desc, (select value from dbo.fn_split(max(DepartDutyFree),'|') where position=1) SSRCodeDepartDuty, (select value from dbo.fn_split(max(DepartDutyFree),'|') where position=2) DepartDuty, (select value from dbo.fn_split(max(DepartDutyFree),'|') where position=3) PriceDepartDuty,  max(ConDepartMeal) ConDepartMeal_desc,(select value from dbo.fn_split(max(ConDepartMeal),'|') where position=1) SSRCodeConDepartMeal, (select value from dbo.fn_split(max(ConDepartMeal),'|') where position=2) ConDepartMeal, (select value from dbo.fn_split(max(ConDepartMeal),'|') where position=3) PriceConDepartMeal, max(ConDepartBaggage) ConDepartBaggage_desc,(select value from dbo.fn_split(max(ConDepartBaggage),'|') where position=1) SSRCodeConDepartBaggage, (select value from dbo.fn_split(max(ConDepartBaggage),'|') where position=2) ConDepartBaggage, (select value from dbo.fn_split(max(ConDepartBaggage),'|') where position=3) PriceConDepartBaggage, max(ConDepartSportEquipment) ConDepartSportEquipment_desc,(select value from dbo.fn_split(max(ConDepartSportEquipment),'|') where position=1) SSRCodeConDepartSport, (select value from dbo.fn_split(max(ConDepartSportEquipment),'|') where position=2) ConDepartSport, (select value from dbo.fn_split(max(ConDepartSportEquipment),'|') where position=3) PriceConDepartSport, max(ConDepartComfortKit) ConDepartComfort_desc,(select value from dbo.fn_split(max(ConDepartComfortKit),'|') where position=1) SSRCodeConDepartComfort, (select value from dbo.fn_split(max(ConDepartComfortKit),'|') where position=2) ConDepartComfort, (select value from dbo.fn_split(max(ConDepartComfortKit),'|') where position=3) PriceConDepartComfort, max(ConDepartDutyFree) ConDepartDutyFree_desc,(select value from dbo.fn_split(max(ConDepartDutyFree),'|') where position=1) SSRCodeConDepartDutyFree, (select value from dbo.fn_split(max(ConDepartDutyFree),'|') where position=2) ConDepartDutyFree, (select value from dbo.fn_split(max(ConDepartDutyFree),'|') where position=3) PriceConDepartDutyFree FROM (SELECT ROW_NUMBER() OVER (ORDER BY BK_PASSENGERLIST.PassengerID ASC) AS SeqNo, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.TransID, BK_PASSENGERLIST.RecordLocator AS PNR, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, Title, Gender, ISNULL(COUNTRY.Name, '') AS countryName, Nationality, DOB, (SELECT TOP 1 C.Name FROM COUNTRY C WHERE IssuingCountry = C.CountryCode) as IssuingCountryName ,IssuingCountry,  ChangeCount, MaxChange,  MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2,  CASE WHEN FirstName = 'TBA' THEN '' ELSE FirstName END AS FirstName,  CASE WHEN LastName = 'TBA' THEN '' ELSE LastName END AS LastName,  CASE WHEN PassportNo = 'TBA' THEN '' ELSE PassportNo END AS PassportNo,   CASE WHEN ChangeCount >= 1 THEN(CONVERT(VARCHAR, ChangeCount) + 'x')  ELSE '-' END AS ChangeCnt, ChangeCount AS InitChange,  BK_PASSENGERLIST.rowguid,  BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy,  BK_PASSENGERLIST.PrevFirstName1, BK_PASSENGERLIST.PrevLastName1,  BK_PASSENGERLIST.PrevFirstName2, BK_PASSENGERLIST.PrevLastName2, MaxChange - ChangeCount as CountChanged,  BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat,  x.[Meal][DepartMeal],x.[Baggage][DepartBaggage],x.[Sport Equipment][DepartSportEquipment],x.[Comfort Kit][DepartComfortKit],x.[Duty Free][DepartDutyFree], xx.[Meal][ConDepartMeal],xx.[Baggage][ConDepartBaggage],xx.[Sport Equipment][ConDepartSportEquipment],xx.[Comfort Kit][ConDepartComfortKit],xx.[Duty Free][ConDepartDutyFree] FROM BK_PASSENGERLIST LEFT JOIN COUNTRY(NOLOCK) ON BK_PASSENGERLIST.Nationality = COUNTRY.CountryCode INNER JOIN BK_TRANSDTL ON BK_TRANSDTL.TransID = BK_PASSENGERLIST.TransID AND BK_TRANSDTL.TransVoid = '0' ";
        //        //strSQL += "OUTER APPLY (select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and p.PassengerID = BK_PASSENGERLIST.PassengerID and s.Origin = BK_TRANSDTL.Origin and s.Destination =case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Destination else BK_TRANSDTL.Transit end and BK_TRANSDTL.SeqNo % 2 = 1) a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) x ";
        //        //strSQL += "OUTER APPLY (select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 1) a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) xx ";
        //        //strSQL += strfilter + " AND BK_TRANSDTL.SeqNo % 2 = 1 GROUP BY BK_PASSENGERLIST.TransID, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.RecordLocator,BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, Title, Gender, COUNTRY.Name, Nationality, DOB, Name, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy, BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat, x.[Meal], x.[Baggage], x.[Sport Equipment], x.[Comfort Kit], x.[Duty Free], xx.[Meal], xx.[Baggage], xx.[Sport Equipment], xx.[Comfort Kit], xx.[Duty Free]) s  GROUP BY SeqNo, FlightNo, CarrierCode, Origin, Destination,TransID, PNR, Currency, PassengerID, PaxNo, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat) T1 ";
        //        //strSQL += " LEFT JOIN ";
        //        //strSQL += "(SELECT SeqNo, TransID, PNR, FlightNo, CarrierCode, Origin, Destination, Currency, PassengerID, PaxNo, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat, MAX(SyncCreate) AS SyncCreate , max(ReturnMeal) ReturnMeal_desc,  (select value from dbo.fn_split(max(ReturnMeal),'|') where position=1) SSRCodeReturnMeal, (select value from dbo.fn_split(max(ReturnMeal),'|') where position=2) ReturnMeal, (select value from dbo.fn_split(max(ReturnMeal),'|') where position=3) PriceReturnMeal, max(ReturnBaggage) ReturnBaggage_desc,(select value from dbo.fn_split(max(ReturnBaggage),'|') where position=1) SSRCodeReturnBaggage, (select value from dbo.fn_split(max(ReturnBaggage),'|') where position=2) ReturnBaggage, (select value from dbo.fn_split(max(ReturnBaggage),'|') where position=3) PriceReturnBaggage, max(ReturnSportEquipment) ReturnSport_desc,(select value from dbo.fn_split(max(ReturnSportEquipment),'|') where position=1) SSRCodeReturnSport, (select value from dbo.fn_split(max(ReturnSportEquipment),'|') where position=2) ReturnSport, (select value from dbo.fn_split(max(ReturnSportEquipment),'|') where position=3) PriceReturnSport, max(ReturnComfortKit) SSRCodeReturnComfortKit_desc,(select value from dbo.fn_split(max(ReturnComfortKit),'|') where position=1) SSRCodeReturnComfort, (select value from dbo.fn_split(max(ReturnComfortKit),'|') where position=2) ReturnComfort, (select value from dbo.fn_split(max(ReturnComfortKit),'|') where position=3) PriceReturnComfort,  max(ReturnDutyFree) SSRCodeReturnDutyFree_desc,(select value from dbo.fn_split(max(ReturnDutyFree),'|') where position=1) SSRCodeReturnDuty, (select value from dbo.fn_split(max(ReturnDutyFree),'|') where position=2) ReturnDuty, (select value from dbo.fn_split(max(ReturnDutyFree),'|') where position=3) PriceReturnDuty,  max(ConReturnMeal) ConReturnMeal_desc,(select value from dbo.fn_split(max(ConReturnMeal),'|') where position=1) SSRCodeConReturnMeal, (select value from dbo.fn_split(max(ConReturnMeal),'|') where position=2) ConReturnMeal, (select value from dbo.fn_split(max(ConReturnMeal),'|') where position=3) PriceConReturnMeal,  max(ConReturnBaggage) ConReturnBaggage_desc,(select value from dbo.fn_split(max(ConReturnBaggage),'|') where position=1) SSRCodeConReturnBaggage, (select value from dbo.fn_split(max(ConReturnBaggage),'|') where position=2) ConReturnBaggage, (select value from dbo.fn_split(max(ConReturnBaggage),'|') where position=3) PriceConReturnBaggage, max(ConReturnSportEquipment) ConReturnSportEquipment_desc,(select value from dbo.fn_split(max(ConReturnSportEquipment),'|') where position=1) SSRCodeReturnSportEquipment, (select value from dbo.fn_split(max(ConReturnSportEquipment),'|') where position=2) ConReturnSportEquipment, (select value from dbo.fn_split(max(ConReturnSportEquipment),'|') where position=3) PriceConReturnSportEquipment, max(ConReturnComfortKit) ConReturnComfortKit_desc,(select value from dbo.fn_split(max(ConReturnComfortKit),'|') where position=1) SSRCodeConReturnComfortKit, (select value from dbo.fn_split(max(ConReturnComfortKit),'|') where position=2) ConReturnComfortKit, (select value from dbo.fn_split(max(ConReturnComfortKit),'|') where position=3) PriceConReturnComfortKit, max(ConReturnDutyFree) ConReturnDutyFree_desc,(select value from dbo.fn_split(max(ConReturnDutyFree),'|') where position=1) SSRCodeConReturnDutyFree, (select value from dbo.fn_split(max(ConReturnDutyFree),'|') where position=2) ConReturnDutyFree, (select value from dbo.fn_split(max(ConReturnDutyFree),'|') where position=3) PriceConReturnDutyFree FROM (SELECT ROW_NUMBER() OVER (ORDER BY BK_PASSENGERLIST.PassengerID ASC) AS SeqNo, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.TransID, BK_PASSENGERLIST.RecordLocator AS PNR, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, Title, Gender, ISNULL(COUNTRY.Name, '') AS countryName, Nationality, DOB, (SELECT TOP 1 C.Name FROM COUNTRY C WHERE IssuingCountry = C.CountryCode) as IssuingCountryName ,IssuingCountry,  ChangeCount, MaxChange,  MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2,  CASE WHEN FirstName = 'TBA' THEN '' ELSE FirstName END AS FirstName,  CASE WHEN LastName = 'TBA' THEN '' ELSE LastName END AS LastName,  CASE WHEN PassportNo = 'TBA' THEN '' ELSE PassportNo END AS PassportNo,   CASE WHEN ChangeCount >= 1 THEN(CONVERT(VARCHAR, ChangeCount) + 'x')  ELSE '-' END AS ChangeCnt, ChangeCount AS InitChange,  BK_PASSENGERLIST.rowguid,  BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy,  BK_PASSENGERLIST.PrevFirstName1, BK_PASSENGERLIST.PrevLastName1,  BK_PASSENGERLIST.PrevFirstName2, BK_PASSENGERLIST.PrevLastName2, MaxChange - ChangeCount as CountChanged,  BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat, y.[Meal][ReturnMeal],y.[Baggage][ReturnBaggage],y.[Sport Equipment][ReturnSportEquipment],y.[Comfort Kit][ReturnComfortKit],y.[Duty Free][ReturnDutyFree], yy.[Meal][ConReturnMeal],yy.[Baggage][ConReturnBaggage],yy.[Sport Equipment][ConReturnSportEquipment],yy.[Comfort Kit][ConReturnComfortKit],yy.[Duty Free][ConReturnDutyFree] FROM BK_PASSENGERLIST LEFT JOIN COUNTRY(NOLOCK) ON BK_PASSENGERLIST.Nationality = COUNTRY.CountryCode INNER JOIN BK_TRANSDTL ON BK_TRANSDTL.TransID = BK_PASSENGERLIST.TransID AND BK_TRANSDTL.TransVoid = '0' ";
        //        //strSQL += "OUTER APPLY (select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and s.Origin =case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Origin else BK_TRANSDTL.Transit end and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 0) a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) y ";
        //        //strSQL += "OUTER APPLY (select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 0) a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) yy ";
        //        //strSQL += strfilter + " AND BK_TRANSDTL.SeqNo % 2 = 0 GROUP BY BK_PASSENGERLIST.TransID, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.RecordLocator, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, Title, Gender, COUNTRY.Name, Nationality, DOB, Name, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy, BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat, y.[Meal], y.[Baggage], y.[Sport Equipment], y.[Comfort Kit], y.[Duty Free], yy.[Meal], yy.[Baggage], yy.[Sport Equipment], yy.[Comfort Kit], yy.[Duty Free]  ) s  GROUP BY SeqNo, FlightNo, CarrierCode, Origin, Destination,TransID, PNR, Currency, PassengerID, PaxNo, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat) T2 ";
        //        //strSQL += " ON T1.PassengerID = T2.PassengerID AND T1.TransID = T2.TransID AND T1.PNR = T2.PNR";

        //        //remark by ketee, replace with fine tuned query

        //        strSQL = "SELECT* FROM ( ";
        //        strSQL += "SELECT SeqNo, TransID, PNR, FlightNo, CarrierCode, Origin, Destination, Currency, PassengerID, PaxNo, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat, MAX(SyncCreate)AS SyncCreate, MAX(SyncLastUpd) AS SyncLastUpd, MAX(LastSyncBy) AS LastSyncBy, max(DepartMeal) DepartMeal_desc, (SUBSTRING(max(DepartMeal), 0, CHARINDEX('|', max(DepartMeal)))) SSRCodeDepartMeal, SUBSTRING(max(DepartMeal), CHARINDEX('|', max(DepartMeal)) + 1, (LEN(max(DepartMeal)) - CHARINDEX('|', REVERSE(max(DepartMeal))) - CHARINDEX('|', max(DepartMeal)))) DepartMeal, SUBSTRING(max(DepartMeal), LEN(max(DepartMeal)) - CHARINDEX('|', REVERSE(max(DepartMeal))) + 2, CHARINDEX('|', REVERSE(max(DepartMeal)))) PriceDepartMeal, max(DepartBaggage) DepartBaggage_desc, (SUBSTRING(max(DepartBaggage), 0, CHARINDEX('|', max(DepartBaggage)))) SSRCodeDepartBaggage, SUBSTRING(max(DepartBaggage), CHARINDEX('|', max(DepartBaggage)) + 1, (LEN(max(DepartBaggage)) - CHARINDEX('|', REVERSE(max(DepartBaggage))) - CHARINDEX('|', max(DepartBaggage)))) DepartBaggage, SUBSTRING(max(DepartBaggage), LEN(max(DepartBaggage)) - CHARINDEX('|', REVERSE(max(DepartBaggage))) + 2, CHARINDEX('|', REVERSE(max(DepartBaggage)))) PriceDepartBaggage, max(DepartSportEquipment) DepartSport_desc, (SUBSTRING(max(DepartSportEquipment), 0, CHARINDEX('|', max(DepartSportEquipment)))) SSRCodeDepartSport, SUBSTRING(max(DepartSportEquipment), CHARINDEX('|', max(DepartSportEquipment)) + 1, (LEN(max(DepartSportEquipment)) - CHARINDEX('|', REVERSE(max(DepartSportEquipment))) - CHARINDEX('|', max(DepartSportEquipment)))) DepartSport, SUBSTRING(max(DepartSportEquipment), LEN(max(DepartSportEquipment)) - CHARINDEX('|', REVERSE(max(DepartSportEquipment))) + 2, CHARINDEX('|', REVERSE(max(DepartSportEquipment)))) PriceDepartSport, max(DepartComfortKit) DepartComfort_desc, (SUBSTRING(max(DepartComfortKit), 0, CHARINDEX('|', max(DepartComfortKit)))) SSRCodeDepartComfort, SUBSTRING(max(DepartComfortKit), CHARINDEX('|', max(DepartComfortKit)) + 1, (LEN(max(DepartComfortKit)) - CHARINDEX('|', REVERSE(max(DepartComfortKit))) - CHARINDEX('|', max(DepartComfortKit)))) DepartComfort, SUBSTRING(max(DepartComfortKit), LEN(max(DepartComfortKit)) - CHARINDEX('|', REVERSE(max(DepartComfortKit))) + 2, CHARINDEX('|', REVERSE(max(DepartComfortKit)))) PriceDepartComfort, max(DepartDutyFree) DepartDuty_desc, (SUBSTRING(max(DepartDutyFree), 0, CHARINDEX('|', max(DepartDutyFree)))) SSRCodeDepartDuty, SUBSTRING(max(DepartDutyFree), CHARINDEX('|', max(DepartDutyFree)) + 1, (LEN(max(DepartDutyFree)) - CHARINDEX('|', REVERSE(max(DepartDutyFree))) - CHARINDEX('|', max(DepartDutyFree)))) DepartDuty, SUBSTRING(max(DepartDutyFree), LEN(max(DepartDutyFree)) - CHARINDEX('|', REVERSE(max(DepartDutyFree))) + 2, CHARINDEX('|', REVERSE(max(DepartDutyFree)))) PriceDepartDuty, max(ConDepartMeal) ConDepartMeal_desc, (SUBSTRING(max(ConDepartMeal), 0, CHARINDEX('|', max(ConDepartMeal)))) SSRCodeConDepartMeal, SUBSTRING(max(ConDepartMeal), CHARINDEX('|', max(ConDepartMeal)) + 1, (LEN(max(ConDepartMeal)) - CHARINDEX('|', REVERSE(max(ConDepartMeal))) - CHARINDEX('|', max(ConDepartMeal)))) ConDepartMeal, SUBSTRING(max(ConDepartMeal), LEN(max(ConDepartMeal)) - CHARINDEX('|', REVERSE(max(ConDepartMeal))) + 2, CHARINDEX('|', REVERSE(max(ConDepartMeal)))) PriceConDepartMeal, max(ConDepartBaggage) ConDepartBaggage_desc, (SUBSTRING(max(ConDepartBaggage), 0, CHARINDEX('|', max(ConDepartBaggage)))) SSRCodeConDepartBaggage, SUBSTRING(max(ConDepartBaggage), CHARINDEX('|', max(ConDepartBaggage)) + 1, (LEN(max(ConDepartBaggage)) - CHARINDEX('|', REVERSE(max(ConDepartBaggage))) - CHARINDEX('|', max(ConDepartBaggage)))) ConDepartBaggage, SUBSTRING(max(ConDepartBaggage), LEN(max(ConDepartBaggage)) - CHARINDEX('|', REVERSE(max(ConDepartBaggage))) + 2, CHARINDEX('|', REVERSE(max(ConDepartBaggage)))) PriceConDepartBaggage, max(ConDepartSportEquipment) ConDepartSportEquipment_desc, (SUBSTRING(max(ConDepartSportEquipment), 0, CHARINDEX('|', max(ConDepartSportEquipment)))) SSRCodeConDepartSport, SUBSTRING(max(ConDepartSportEquipment), CHARINDEX('|', max(ConDepartSportEquipment)) + 1, (LEN(max(ConDepartSportEquipment)) - CHARINDEX('|', REVERSE(max(ConDepartSportEquipment))) - CHARINDEX('|', max(ConDepartSportEquipment)))) ConDepartSport, SUBSTRING(max(ConDepartSportEquipment), LEN(max(ConDepartSportEquipment)) - CHARINDEX('|', REVERSE(max(ConDepartSportEquipment))) + 2, CHARINDEX('|', REVERSE(max(ConDepartSportEquipment)))) PriceConDepartSport, max(ConDepartComfortKit) ConDepartComfort_desc, (SUBSTRING(max(ConDepartComfortKit), 0, CHARINDEX('|', max(ConDepartComfortKit)))) SSRCodeConDepartComfort, SUBSTRING(max(ConDepartComfortKit), CHARINDEX('|', max(ConDepartComfortKit)) + 1, (LEN(max(ConDepartComfortKit)) - CHARINDEX('|', REVERSE(max(ConDepartComfortKit))) - CHARINDEX('|', max(ConDepartComfortKit)))) ConDepartComfort, SUBSTRING(max(ConDepartComfortKit), LEN(max(ConDepartComfortKit)) - CHARINDEX('|', REVERSE(max(ConDepartComfortKit))) + 2, CHARINDEX('|', REVERSE(max(ConDepartComfortKit)))) PriceConDepartComfort, max(ConDepartDutyFree) ConDepartDutyFree_desc, (SUBSTRING(max(ConDepartDutyFree), 0, CHARINDEX('|', max(ConDepartDutyFree)))) SSRCodeConDepartDutyFree, SUBSTRING(max(ConDepartDutyFree), CHARINDEX('|', max(ConDepartDutyFree)) + 1, (LEN(max(ConDepartDutyFree)) - CHARINDEX('|', REVERSE(max(ConDepartDutyFree))) - CHARINDEX('|', max(ConDepartDutyFree)))) ConDepartDutyFree, SUBSTRING(max(ConDepartDutyFree), LEN(max(ConDepartDutyFree)) - CHARINDEX('|', REVERSE(max(ConDepartDutyFree))) + 2, CHARINDEX('|', REVERSE(max(ConDepartDutyFree)))) PriceConDepartDutyFree ";
        //        strSQL += "FROM( ";
        //        strSQL += "SELECT ROW_NUMBER() OVER(ORDER BY BK_PASSENGERLIST.RecordLocator, CAST(BK_PASSENGERLIST.PassengerID as INT) ASC) AS SeqNo, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.TransID, BK_PASSENGERLIST.RecordLocator AS PNR, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, Title, Gender, ISNULL(COUNTRY.Name, '') AS countryName, Nationality, DOB, (SELECT TOP 1 C.Name FROM COUNTRY C WHERE IssuingCountry = C.CountryCode) as IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, CASE WHEN FirstName = 'TBA' THEN '' ELSE FirstName END AS FirstName, CASE WHEN LastName = 'TBA' THEN '' ELSE LastName END AS LastName, CASE WHEN PassportNo = 'TBA' THEN '' ELSE PassportNo END AS PassportNo, CASE WHEN ChangeCount >= 1 THEN(CONVERT(VARCHAR, ChangeCount) + 'x')  ELSE '-' END AS ChangeCnt, ChangeCount AS InitChange, BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy, BK_PASSENGERLIST.PrevFirstName1, BK_PASSENGERLIST.PrevLastName1, BK_PASSENGERLIST.PrevFirstName2, BK_PASSENGERLIST.PrevLastName2, MaxChange - ChangeCount as CountChanged, BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat, x.[Meal][DepartMeal], x.[Baggage][DepartBaggage], x.[Sport Equipment][DepartSportEquipment], x.[Comfort Kit][DepartComfortKit], x.[Duty Free][DepartDutyFree], xx.[Meal][ConDepartMeal], xx.[Baggage][ConDepartBaggage], xx.[Sport Equipment][ConDepartSportEquipment], xx.[Comfort Kit][ConDepartComfortKit], xx.[Duty Free][ConDepartDutyFree] ";
        //        strSQL += "FROM BK_PASSENGERLIST ";
        //        strSQL += "LEFT JOIN COUNTRY(NOLOCK) ON BK_PASSENGERLIST.Nationality = COUNTRY.CountryCode ";
        //        strSQL += "INNER JOIN BK_TRANSDTL ON BK_TRANSDTL.TransID = BK_PASSENGERLIST.TransID AND BK_TRANSDTL.TransVoid = '0' ";
        //        strSQL += "OUTER APPLY( ";
        //        strSQL += "select * from( ";
        //        strSQL += "select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail ";
        //        strSQL += "from BK_PASSENGERLIST p with(nolock) ";
        //        strSQL += "inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID ";
        //        strSQL += "left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID ";
        //        strSQL += "inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode ";
        //        strSQL += "inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and p.PassengerID = BK_PASSENGERLIST.PassengerID and s.Origin = BK_TRANSDTL.Origin and s.Destination =case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Destination else BK_TRANSDTL.Transit end" + strDepart + ") a ";
        //        strSQL += "pivot(max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b ";
        //        strSQL += ") x ";
        //        strSQL += "OUTER APPLY(select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination" + strDepart + ") a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) xx ";
        //        strSQL += "WHERE BK_PASSENGERLIST.Title <> 'INFT' AND BK_PASSENGERLIST.TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND LEN(BK_TRANSDTL.RecordLocator) >= 6 " + strDepart + " ";
        //        strSQL += "GROUP BY BK_PASSENGERLIST.TransID, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.RecordLocator, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, Title, Gender, COUNTRY.Name, Nationality, DOB, Name, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy, BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat, x.[Meal], x.[Baggage], x.[Sport Equipment], x.[Comfort Kit], x.[Duty Free], xx.[Meal], xx.[Baggage], xx.[Sport Equipment], xx.[Comfort Kit], xx.[Duty Free]) s ";
        //        strSQL += "GROUP BY SeqNo, FlightNo, CarrierCode, Origin, Destination, TransID, PNR, Currency, PassengerID, PaxNo, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat ";
        //        strSQL += ") T1 ";
        //        strSQL += "LEFT JOIN( ";
        //        strSQL += "SELECT SeqNo, TransID, PNR, FlightNo, CarrierCode, Origin, Destination, Currency, PassengerID, PaxNo, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat, MAX(SyncCreate) AS SyncCreate, max(ReturnMeal) ReturnMeal_desc, (SUBSTRING(max(ReturnMeal), 0, CHARINDEX('|', max(ReturnMeal)))) SSRCodeReturnMeal, SUBSTRING(max(ReturnMeal), CHARINDEX('|', max(ReturnMeal)) + 1, (LEN(max(ReturnMeal)) - CHARINDEX('|', REVERSE(max(ReturnMeal))) - CHARINDEX('|', max(ReturnMeal)))) ReturnMeal, SUBSTRING(max(ReturnMeal), LEN(max(ReturnMeal)) - CHARINDEX('|', REVERSE(max(ReturnMeal))) + 2, CHARINDEX('|', REVERSE(max(ReturnMeal)))) PriceReturnMeal, max(ReturnBaggage) ReturnBaggage_desc, (SUBSTRING(max(ReturnBaggage), 0, CHARINDEX('|', max(ReturnBaggage)))) SSRCodeReturnBaggage, SUBSTRING(max(ReturnBaggage), CHARINDEX('|', max(ReturnBaggage)) + 1, (LEN(max(ReturnBaggage)) - CHARINDEX('|', REVERSE(max(ReturnBaggage))) - CHARINDEX('|', max(ReturnBaggage)))) ReturnBaggage, SUBSTRING(max(ReturnBaggage), LEN(max(ReturnBaggage)) - CHARINDEX('|', REVERSE(max(ReturnBaggage))) + 2, CHARINDEX('|', REVERSE(max(ReturnBaggage)))) PriceReturnBaggage, max(ReturnSportEquipment) ReturnSport_desc, (SUBSTRING(max(ReturnSportEquipment), 0, CHARINDEX('|', max(ReturnSportEquipment)))) SSRCodeReturnSport, SUBSTRING(max(ReturnSportEquipment), CHARINDEX('|', max(ReturnSportEquipment)) + 1, (LEN(max(ReturnSportEquipment)) - CHARINDEX('|', REVERSE(max(ReturnSportEquipment))) - CHARINDEX('|', max(ReturnSportEquipment)))) ReturnSport, SUBSTRING(max(ReturnSportEquipment), LEN(max(ReturnSportEquipment)) - CHARINDEX('|', REVERSE(max(ReturnSportEquipment))) + 2, CHARINDEX('|', REVERSE(max(ReturnSportEquipment)))) PriceReturnSport, max(ReturnComfortKit) SSRCodeReturnComfortKit_desc, (SUBSTRING(max(ReturnComfortKit), 0, CHARINDEX('|', max(ReturnComfortKit)))) SSRCodeReturnComfort, SUBSTRING(max(ReturnComfortKit), CHARINDEX('|', max(ReturnComfortKit)) + 1, (LEN(max(ReturnComfortKit)) - CHARINDEX('|', REVERSE(max(ReturnComfortKit))) - CHARINDEX('|', max(ReturnComfortKit)))) ReturnComfort, SUBSTRING(max(ReturnComfortKit), LEN(max(ReturnComfortKit)) - CHARINDEX('|', REVERSE(max(ReturnComfortKit))) + 2, CHARINDEX('|', REVERSE(max(ReturnComfortKit)))) PriceReturnComfort, max(ReturnDutyFree) SSRCodeReturnDutyFree_desc, (SUBSTRING(max(ReturnDutyFree), 0, CHARINDEX('|', max(ReturnDutyFree)))) SSRCodeReturnDuty, SUBSTRING(max(ReturnDutyFree), CHARINDEX('|', max(ReturnDutyFree)) + 1, (LEN(max(ReturnDutyFree)) - CHARINDEX('|', REVERSE(max(ReturnDutyFree))) - CHARINDEX('|', max(ReturnDutyFree)))) ReturnDuty, SUBSTRING(max(ReturnDutyFree), LEN(max(ReturnDutyFree)) - CHARINDEX('|', REVERSE(max(ReturnDutyFree))) + 2, CHARINDEX('|', REVERSE(max(ReturnDutyFree)))) PriceReturnDuty, max(ConReturnMeal) ConReturnMeal_desc, (SUBSTRING(max(ConReturnMeal), 0, CHARINDEX('|', max(ConReturnMeal)))) SSRCodeConReturnMeal, SUBSTRING(max(ConReturnMeal), CHARINDEX('|', max(ConReturnMeal)) + 1, (LEN(max(ConReturnMeal)) - CHARINDEX('|', REVERSE(max(ConReturnMeal))) - CHARINDEX('|', max(ConReturnMeal)))) ConReturnMeal, SUBSTRING(max(ConReturnMeal), LEN(max(ConReturnMeal)) - CHARINDEX('|', REVERSE(max(ConReturnMeal))) + 2, CHARINDEX('|', REVERSE(max(ConReturnMeal)))) PriceConReturnMeal, max(ConReturnBaggage) ConReturnBaggage_desc, (SUBSTRING(max(ConReturnBaggage), 0, CHARINDEX('|', max(ConReturnBaggage)))) SSRCodeConReturnBaggage, SUBSTRING(max(ConReturnBaggage), CHARINDEX('|', max(ConReturnBaggage)) + 1, (LEN(max(ConReturnBaggage)) - CHARINDEX('|', REVERSE(max(ConReturnBaggage))) - CHARINDEX('|', max(ConReturnBaggage)))) ConReturnBaggage, SUBSTRING(max(ConReturnBaggage), LEN(max(ConReturnBaggage)) - CHARINDEX('|', REVERSE(max(ConReturnBaggage))) + 2, CHARINDEX('|', REVERSE(max(ConReturnBaggage)))) PriceConReturnBaggage, max(ConReturnSportEquipment) ConReturnSportEquipment_desc, (SUBSTRING(max(ConReturnSportEquipment), 0, CHARINDEX('|', max(ConReturnSportEquipment)))) SSRCodeReturnSportEquipment, SUBSTRING(max(ConReturnSportEquipment), CHARINDEX('|', max(ConReturnSportEquipment)) + 1, (LEN(max(ConReturnSportEquipment)) - CHARINDEX('|', REVERSE(max(ConReturnSportEquipment))) - CHARINDEX('|', max(ConReturnSportEquipment)))) ConReturnSportEquipment, SUBSTRING(max(ConReturnSportEquipment), LEN(max(ConReturnSportEquipment)) - CHARINDEX('|', REVERSE(max(ConReturnSportEquipment))) + 2, CHARINDEX('|', REVERSE(max(ConReturnSportEquipment)))) PriceConReturnSportEquipment, max(ConReturnComfortKit) ConReturnComfortKit_desc, (SUBSTRING(max(ConReturnComfortKit), 0, CHARINDEX('|', max(ConReturnComfortKit)))) SSRCodeConReturnComfortKit, SUBSTRING(max(ConReturnComfortKit), CHARINDEX('|', max(ConReturnComfortKit)) + 1, (LEN(max(ConReturnComfortKit)) - CHARINDEX('|', REVERSE(max(ConReturnComfortKit))) - CHARINDEX('|', max(ConReturnComfortKit)))) ConReturnComfortKit, SUBSTRING(max(ConReturnComfortKit), LEN(max(ConReturnComfortKit)) - CHARINDEX('|', REVERSE(max(ConReturnComfortKit))) + 2, CHARINDEX('|', REVERSE(max(ConReturnComfortKit)))) PriceConReturnComfortKit, max(ConReturnDutyFree) ConReturnDutyFree_desc, (SUBSTRING(max(ConReturnDutyFree), 0, CHARINDEX('|', max(ConReturnDutyFree)))) SSRCodeConReturnDutyFree, SUBSTRING(max(ConReturnDutyFree), CHARINDEX('|', max(ConReturnDutyFree)) + 1, (LEN(max(ConReturnDutyFree)) - CHARINDEX('|', REVERSE(max(ConReturnDutyFree))) - CHARINDEX('|', max(ConReturnDutyFree)))) ConReturnDutyFree, SUBSTRING(max(ConReturnDutyFree), LEN(max(ConReturnDutyFree)) - CHARINDEX('|', REVERSE(max(ConReturnDutyFree))) + 2, CHARINDEX('|', REVERSE(max(ConReturnDutyFree)))) PriceConReturnDutyFree ";
        //        strSQL += "FROM( ";
        //        strSQL += "SELECT ROW_NUMBER() OVER(ORDER BY BK_PASSENGERLIST.RecordLocator, CAST(BK_PASSENGERLIST.PassengerID as INT) ASC) AS SeqNo, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.TransID, BK_PASSENGERLIST.RecordLocator AS PNR, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, Title, Gender, ISNULL(COUNTRY.Name, '') AS countryName, Nationality, DOB, (SELECT TOP 1 C.Name FROM COUNTRY C WHERE IssuingCountry = C.CountryCode) as IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, CASE WHEN FirstName = 'TBA' THEN '' ELSE FirstName END AS FirstName, CASE WHEN LastName = 'TBA' THEN '' ELSE LastName END AS LastName, CASE WHEN PassportNo = 'TBA' THEN '' ELSE PassportNo END AS PassportNo, CASE WHEN ChangeCount >= 1 THEN(CONVERT(VARCHAR, ChangeCount) + 'x')  ELSE '-' END AS ChangeCnt, ChangeCount AS InitChange, BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy, BK_PASSENGERLIST.PrevFirstName1, BK_PASSENGERLIST.PrevLastName1, BK_PASSENGERLIST.PrevFirstName2, BK_PASSENGERLIST.PrevLastName2, MaxChange - ChangeCount as CountChanged, BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat, y.[Meal][ReturnMeal], y.[Baggage][ReturnBaggage], y.[Sport Equipment][ReturnSportEquipment], y.[Comfort Kit][ReturnComfortKit], y.[Duty Free][ReturnDutyFree], yy.[Meal][ConReturnMeal], yy.[Baggage][ConReturnBaggage], yy.[Sport Equipment][ConReturnSportEquipment], yy.[Comfort Kit][ConReturnComfortKit], yy.[Duty Free][ConReturnDutyFree] ";
        //        strSQL += "FROM BK_PASSENGERLIST ";
        //        strSQL += "LEFT JOIN COUNTRY(NOLOCK) ON BK_PASSENGERLIST.Nationality = COUNTRY.CountryCode ";
        //        strSQL += "INNER JOIN BK_TRANSDTL ON BK_TRANSDTL.TransID = BK_PASSENGERLIST.TransID AND BK_TRANSDTL.TransVoid = '0' ";
        //        strSQL += "OUTER APPLY(select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and s.Origin =case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Origin else BK_TRANSDTL.Transit end and s.Destination = BK_TRANSDTL.Destination" + strReturn + ") a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) y ";
        //        strSQL += "OUTER APPLY(select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination" + strReturn + ") a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) yy ";
        //        strSQL += "WHERE BK_PASSENGERLIST.Title <> 'INFT' AND BK_PASSENGERLIST.TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND LEN(BK_TRANSDTL.RecordLocator) >= 6 " + strReturn + " ";
        //        strSQL += "GROUP BY BK_PASSENGERLIST.TransID, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.RecordLocator, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, Title, Gender, COUNTRY.Name, Nationality, DOB, Name, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy, BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat, y.[Meal], y.[Baggage], y.[Sport Equipment], y.[Comfort Kit], y.[Duty Free], yy.[Meal], yy.[Baggage], yy.[Sport Equipment], yy.[Comfort Kit], yy.[Duty Free]  ) s ";
        //        strSQL += "GROUP BY SeqNo, FlightNo, CarrierCode, Origin, Destination, TransID, PNR, Currency, PassengerID, PaxNo, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat ";
        //        strSQL += ") T2 ON T1.PassengerID = T2.PassengerID AND T1.TransID = T2.TransID AND T1.PNR = T2.PNR WHERE LEN(T1.PNR) >= 6";


        //        dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
        //        if (dt != null && dt.Rows.Count > 0)
        //        {

        //            return dt;
        //        }
        //        else
        //        {
        //            return null;
        //            throw new ApplicationException("BK_PASSENGERLIST does not exist.");
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }
        //}
        public DataTable GetAllBK_PASSENGERLISTWithSSRDataTableInfant(string TransID, bool NewRec = false)
        {
            List<PassengerData> objListBK_PASSENGERLIST_Info = new List<PassengerData>();
            DataTable dt;
            String strSQL = string.Empty;
            string recordLocatorFilter = string.Empty;
            //if (NewRec == false) recordLocatorFilter = " AND LEN(BK_TRANSDTL.RecordLocator)>=6";
            try
            {
                //edited by ketee
                string strfilter = "";
                //strfilter = " WHERE BK_PASSENGERLIST.Title = 'INFT' AND BK_PASSENGERLIST.TransID='" + TransID + "'" + recordLocatorFilter;                
                strSQL = "SELECT 0 As PaxNo, prn.firstname As ParentFirstName, prn.lastname As ParentLastName, ISNULL(c.Name, (SELECT TOP 1 C.Name FROM COUNTRY C WHERE prn.Nationality = C.CountryCode)) CountryName, ISNULL(cp.Name, (SELECT TOP 1 C.Name FROM COUNTRY C WHERE prn.IssuingCountry = C.CountryCode)) IssuingCountryName, inf.* FROM BK_PASSENGERLIST inf LEFT JOIN COUNTRY cp WITH(NOLOCK) ON cp.CountryCode = inf.IssuingCountry LEFT JOIN COUNTRY c WITH(NOLOCK) ON c.CountryCode = inf.Nationality Inner JOIN BK_PASSENGERLIST prn on prn.Recordlocator = inf.Recordlocator and prn.passengerid = inf.passengerid WHERE inf.TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND inf.Title = 'INFT' and prn.Title <> 'INFT'";
                //strSQL = "SELECT 0 As PaxNo, prn.firstname As ParentFirstName, prn.lastname As ParentLastName, ISNULL(c.Name, '') CountryName, ISNULL(cp.Name, '') IssuingCountryName, inf.* FROM BK_PASSENGERLIST inf LEFT JOIN COUNTRY cp WITH(NOLOCK) ON cp.CountryCode = inf.IssuingCountry LEFT JOIN COUNTRY c WITH(NOLOCK) ON c.CountryCode = inf.Nationality Inner JOIN BK_PASSENGERLIST prn on prn.Recordlocator = inf.Recordlocator and prn.passengerid = inf.passengerid WHERE inf.TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND inf.Title = 'INFT' and prn.Title <> 'INFT'";
                //strSQL = "SELECT 0 As PaxNo, '' As ParentFirstName, '' As ParentLastName, ISNULL(c.Name,'') CountryName, ISNULL(cp.Name,'') IssuingCountryName, BK_PASSENGERLIST.* FROM BK_PASSENGERLIST LEFT JOIN COUNTRY cp WITH (NOLOCK) ON cp.CountryCode = BK_PASSENGERLIST.IssuingCountry LEFT JOIN COUNTRY c WITH (NOLOCK) ON c.CountryCode = BK_PASSENGERLIST.Nationality WHERE BK_PASSENGERLIST.TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND BK_PASSENGERLIST.Title = 'INFT'";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {

                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_PASSENGERLIST does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        //20170425 - Sienny (add-on breakdown on review booking like add-on booking detail but without filter len(recordlocator)>=6)
        //public DataTable GetAllBK_PASSENGERLISTWithSSRDataTableReviewBooking(string TransID, bool NewRec = false, string optionalFilter = "", bool IsReturnFlight = true)
        //{
        //    List<PassengerData> objListBK_PASSENGERLIST_Info = new List<PassengerData>();
        //    DataTable dt;
        //    String strSQL = string.Empty;
        //    string recordLocatorFilter = string.Empty;
        //    if (NewRec == false) recordLocatorFilter = " ";
        //    if (optionalFilter != "") optionalFilter = " AND " + optionalFilter;
        //    try
        //    {
        //        //edited by ketee
        //        string strfilter = ""; strfilter = " WHERE BK_PASSENGERLIST.Title <> 'INFT' AND BK_PASSENGERLIST.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'" + recordLocatorFilter;

        //        //to differentiate one-way and return flight
        //        string strDepart = "";
        //        string strReturn = " and BK_TRANSDTL.SeqNo % 2 = -1";
        //        if (IsReturnFlight == true)
        //        {
        //            strDepart = " and BK_TRANSDTL.SeqNo % 2 = 1"; //if return, then need to filter odd record
        //            strReturn = " and BK_TRANSDTL.SeqNo % 2 = 0"; //if return, return row should be even row
        //        }

        //        //strSQL = "SELECT * FROM (SELECT SeqNo, TransID, PNR, FlightNo, CarrierCode, Origin, Destination, Currency, PassengerID, PaxNo, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat, MAX(SyncCreate) AS SyncCreate , MAX(SyncLastUpd) AS SyncLastUpd, MAX(LastSyncBy) AS LastSyncBy, max(DepartMeal) DepartMeal_desc, (select value from dbo.fn_split(max(DepartMeal),'|') where position=1) SSRCodeDepartMeal, (select value from dbo.fn_split(max(DepartMeal),'|') where position=2) DepartMeal, (select value from dbo.fn_split(max(DepartMeal),'|') where position=3) PriceDepartMeal, max(DepartBaggage) DepartBaggage_desc, (select value from dbo.fn_split(max(DepartBaggage),'|') where position=1) SSRCodeDepartBaggage, (select value from dbo.fn_split(max(DepartBaggage),'|') where position=2) DepartBaggage, (select value from dbo.fn_split(max(DepartBaggage),'|') where position=3) PriceDepartBaggage, max(DepartSportEquipment) DepartSport_desc, (select value from dbo.fn_split(max(DepartSportEquipment),'|') where position=1) SSRCodeDepartSport, (select value from dbo.fn_split(max(DepartSportEquipment),'|') where position=2) DepartSport, (select value from dbo.fn_split(max(DepartSportEquipment),'|') where position=3) PriceDepartSport, max(DepartComfortKit) DepartComfort_desc, (select value from dbo.fn_split(max(DepartComfortKit),'|') where position=1) SSRCodeDepartComfort, (select value from dbo.fn_split(max(DepartComfortKit),'|') where position=2) DepartComfort, (select value from dbo.fn_split(max(DepartComfortKit),'|') where position=3) PriceDepartComfort, max(DepartDutyFree) DepartDuty_desc, (select value from dbo.fn_split(max(DepartDutyFree),'|') where position=1) SSRCodeDepartDuty, (select value from dbo.fn_split(max(DepartDutyFree),'|') where position=2) DepartDuty, (select value from dbo.fn_split(max(DepartDutyFree),'|') where position=3) PriceDepartDuty,  max(ConDepartMeal) ConDepartMeal_desc,(select value from dbo.fn_split(max(ConDepartMeal),'|') where position=1) SSRCodeConDepartMeal, (select value from dbo.fn_split(max(ConDepartMeal),'|') where position=2) ConDepartMeal, (select value from dbo.fn_split(max(ConDepartMeal),'|') where position=3) PriceConDepartMeal, max(ConDepartBaggage) ConDepartBaggage_desc,(select value from dbo.fn_split(max(ConDepartBaggage),'|') where position=1) SSRCodeConDepartBaggage, (select value from dbo.fn_split(max(ConDepartBaggage),'|') where position=2) ConDepartBaggage, (select value from dbo.fn_split(max(ConDepartBaggage),'|') where position=3) PriceConDepartBaggage, max(ConDepartSportEquipment) ConDepartSportEquipment_desc,(select value from dbo.fn_split(max(ConDepartSportEquipment),'|') where position=1) SSRCodeConDepartSport, (select value from dbo.fn_split(max(ConDepartSportEquipment),'|') where position=2) ConDepartSport, (select value from dbo.fn_split(max(ConDepartSportEquipment),'|') where position=3) PriceConDepartSport, max(ConDepartComfortKit) ConDepartComfort_desc,(select value from dbo.fn_split(max(ConDepartComfortKit),'|') where position=1) SSRCodeConDepartComfort, (select value from dbo.fn_split(max(ConDepartComfortKit),'|') where position=2) ConDepartComfort, (select value from dbo.fn_split(max(ConDepartComfortKit),'|') where position=3) PriceConDepartComfort, max(ConDepartDutyFree) ConDepartDutyFree_desc,(select value from dbo.fn_split(max(ConDepartDutyFree),'|') where position=1) SSRCodeConDepartDutyFree, (select value from dbo.fn_split(max(ConDepartDutyFree),'|') where position=2) ConDepartDutyFree, (select value from dbo.fn_split(max(ConDepartDutyFree),'|') where position=3) PriceConDepartDutyFree FROM (SELECT ROW_NUMBER() OVER (ORDER BY BK_PASSENGERLIST.PassengerID ASC) AS SeqNo, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.TransID, BK_PASSENGERLIST.RecordLocator AS PNR, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, Title, Gender, ISNULL(COUNTRY.Name, '') AS countryName, Nationality, DOB, (SELECT TOP 1 C.Name FROM COUNTRY C WHERE IssuingCountry = C.CountryCode) as IssuingCountryName ,IssuingCountry,  ChangeCount, MaxChange,  MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2,  CASE WHEN FirstName = 'TBA' THEN '' ELSE FirstName END AS FirstName,  CASE WHEN LastName = 'TBA' THEN '' ELSE LastName END AS LastName,  CASE WHEN PassportNo = 'TBA' THEN '' ELSE PassportNo END AS PassportNo,   CASE WHEN ChangeCount >= 1 THEN(CONVERT(VARCHAR, ChangeCount) + 'x')  ELSE '-' END AS ChangeCnt, ChangeCount AS InitChange,  BK_PASSENGERLIST.rowguid,  BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy,  BK_PASSENGERLIST.PrevFirstName1, BK_PASSENGERLIST.PrevLastName1,  BK_PASSENGERLIST.PrevFirstName2, BK_PASSENGERLIST.PrevLastName2, MaxChange - ChangeCount as CountChanged,  BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat,  x.[Meal][DepartMeal],x.[Baggage][DepartBaggage],x.[Sport Equipment][DepartSportEquipment],x.[Comfort Kit][DepartComfortKit],x.[Duty Free][DepartDutyFree], xx.[Meal][ConDepartMeal],xx.[Baggage][ConDepartBaggage],xx.[Sport Equipment][ConDepartSportEquipment],xx.[Comfort Kit][ConDepartComfortKit],xx.[Duty Free][ConDepartDutyFree] FROM BK_PASSENGERLIST LEFT JOIN COUNTRY(NOLOCK) ON BK_PASSENGERLIST.Nationality = COUNTRY.CountryCode INNER JOIN BK_TRANSDTL ON BK_TRANSDTL.TransID = BK_PASSENGERLIST.TransID AND BK_TRANSDTL.TransVoid = '0' ";
        //        //strSQL += "OUTER APPLY (select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and p.PassengerID = BK_PASSENGERLIST.PassengerID and s.Origin = BK_TRANSDTL.Origin and s.Destination =case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Destination else BK_TRANSDTL.Transit end and BK_TRANSDTL.SeqNo % 2 = 1) a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) x ";
        //        //strSQL += "OUTER APPLY (select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 1) a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) xx ";
        //        //strSQL += strfilter + " AND BK_TRANSDTL.SeqNo % 2 = 1 GROUP BY BK_PASSENGERLIST.TransID, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.RecordLocator,BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, Title, Gender, COUNTRY.Name, Nationality, DOB, Name, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy, BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat, x.[Meal], x.[Baggage], x.[Sport Equipment], x.[Comfort Kit], x.[Duty Free], xx.[Meal], xx.[Baggage], xx.[Sport Equipment], xx.[Comfort Kit], xx.[Duty Free]) s  GROUP BY SeqNo, FlightNo, CarrierCode, Origin, Destination,TransID, PNR, Currency, PassengerID, PaxNo, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat) T1 ";
        //        //strSQL += " LEFT JOIN ";
        //        //strSQL += "(SELECT SeqNo, TransID, PNR, FlightNo, CarrierCode, Origin, Destination, Currency, PassengerID, PaxNo, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat, MAX(SyncCreate) AS SyncCreate , max(ReturnMeal) ReturnMeal_desc,  (select value from dbo.fn_split(max(ReturnMeal),'|') where position=1) SSRCodeReturnMeal, (select value from dbo.fn_split(max(ReturnMeal),'|') where position=2) ReturnMeal, (select value from dbo.fn_split(max(ReturnMeal),'|') where position=3) PriceReturnMeal, max(ReturnBaggage) ReturnBaggage_desc,(select value from dbo.fn_split(max(ReturnBaggage),'|') where position=1) SSRCodeReturnBaggage, (select value from dbo.fn_split(max(ReturnBaggage),'|') where position=2) ReturnBaggage, (select value from dbo.fn_split(max(ReturnBaggage),'|') where position=3) PriceReturnBaggage, max(ReturnSportEquipment) ReturnSport_desc,(select value from dbo.fn_split(max(ReturnSportEquipment),'|') where position=1) SSRCodeReturnSport, (select value from dbo.fn_split(max(ReturnSportEquipment),'|') where position=2) ReturnSport, (select value from dbo.fn_split(max(ReturnSportEquipment),'|') where position=3) PriceReturnSport, max(ReturnComfortKit) SSRCodeReturnComfortKit_desc,(select value from dbo.fn_split(max(ReturnComfortKit),'|') where position=1) SSRCodeReturnComfort, (select value from dbo.fn_split(max(ReturnComfortKit),'|') where position=2) ReturnComfort, (select value from dbo.fn_split(max(ReturnComfortKit),'|') where position=3) PriceReturnComfort,  max(ReturnDutyFree) SSRCodeReturnDutyFree_desc,(select value from dbo.fn_split(max(ReturnDutyFree),'|') where position=1) SSRCodeReturnDuty, (select value from dbo.fn_split(max(ReturnDutyFree),'|') where position=2) ReturnDuty, (select value from dbo.fn_split(max(ReturnDutyFree),'|') where position=3) PriceReturnDuty,  max(ConReturnMeal) ConReturnMeal_desc,(select value from dbo.fn_split(max(ConReturnMeal),'|') where position=1) SSRCodeConReturnMeal, (select value from dbo.fn_split(max(ConReturnMeal),'|') where position=2) ConReturnMeal, (select value from dbo.fn_split(max(ConReturnMeal),'|') where position=3) PriceConReturnMeal,  max(ConReturnBaggage) ConReturnBaggage_desc,(select value from dbo.fn_split(max(ConReturnBaggage),'|') where position=1) SSRCodeConReturnBaggage, (select value from dbo.fn_split(max(ConReturnBaggage),'|') where position=2) ConReturnBaggage, (select value from dbo.fn_split(max(ConReturnBaggage),'|') where position=3) PriceConReturnBaggage, max(ConReturnSportEquipment) ConReturnSportEquipment_desc,(select value from dbo.fn_split(max(ConReturnSportEquipment),'|') where position=1) SSRCodeReturnSportEquipment, (select value from dbo.fn_split(max(ConReturnSportEquipment),'|') where position=2) ConReturnSportEquipment, (select value from dbo.fn_split(max(ConReturnSportEquipment),'|') where position=3) PriceConReturnSportEquipment, max(ConReturnComfortKit) ConReturnComfortKit_desc,(select value from dbo.fn_split(max(ConReturnComfortKit),'|') where position=1) SSRCodeConReturnComfortKit, (select value from dbo.fn_split(max(ConReturnComfortKit),'|') where position=2) ConReturnComfortKit, (select value from dbo.fn_split(max(ConReturnComfortKit),'|') where position=3) PriceConReturnComfortKit, max(ConReturnDutyFree) ConReturnDutyFree_desc,(select value from dbo.fn_split(max(ConReturnDutyFree),'|') where position=1) SSRCodeConReturnDutyFree, (select value from dbo.fn_split(max(ConReturnDutyFree),'|') where position=2) ConReturnDutyFree, (select value from dbo.fn_split(max(ConReturnDutyFree),'|') where position=3) PriceConReturnDutyFree FROM (SELECT ROW_NUMBER() OVER (ORDER BY BK_PASSENGERLIST.PassengerID ASC) AS SeqNo, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.TransID, BK_PASSENGERLIST.RecordLocator AS PNR, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, Title, Gender, ISNULL(COUNTRY.Name, '') AS countryName, Nationality, DOB, (SELECT TOP 1 C.Name FROM COUNTRY C WHERE IssuingCountry = C.CountryCode) as IssuingCountryName ,IssuingCountry,  ChangeCount, MaxChange,  MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2,  CASE WHEN FirstName = 'TBA' THEN '' ELSE FirstName END AS FirstName,  CASE WHEN LastName = 'TBA' THEN '' ELSE LastName END AS LastName,  CASE WHEN PassportNo = 'TBA' THEN '' ELSE PassportNo END AS PassportNo,   CASE WHEN ChangeCount >= 1 THEN(CONVERT(VARCHAR, ChangeCount) + 'x')  ELSE '-' END AS ChangeCnt, ChangeCount AS InitChange,  BK_PASSENGERLIST.rowguid,  BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy,  BK_PASSENGERLIST.PrevFirstName1, BK_PASSENGERLIST.PrevLastName1,  BK_PASSENGERLIST.PrevFirstName2, BK_PASSENGERLIST.PrevLastName2, MaxChange - ChangeCount as CountChanged,  BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat, y.[Meal][ReturnMeal],y.[Baggage][ReturnBaggage],y.[Sport Equipment][ReturnSportEquipment],y.[Comfort Kit][ReturnComfortKit],y.[Duty Free][ReturnDutyFree], yy.[Meal][ConReturnMeal],yy.[Baggage][ConReturnBaggage],yy.[Sport Equipment][ConReturnSportEquipment],yy.[Comfort Kit][ConReturnComfortKit],yy.[Duty Free][ConReturnDutyFree] FROM BK_PASSENGERLIST LEFT JOIN COUNTRY(NOLOCK) ON BK_PASSENGERLIST.Nationality = COUNTRY.CountryCode INNER JOIN BK_TRANSDTL ON BK_TRANSDTL.TransID = BK_PASSENGERLIST.TransID AND BK_TRANSDTL.TransVoid = '0' ";
        //        //strSQL += "OUTER APPLY (select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and s.Origin =case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Origin else BK_TRANSDTL.Transit end and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 0) a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) y ";
        //        //strSQL += "OUTER APPLY (select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 0) a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) yy ";
        //        //strSQL += strfilter + " AND BK_TRANSDTL.SeqNo % 2 = 0 GROUP BY BK_PASSENGERLIST.TransID, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.RecordLocator, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, Title, Gender, COUNTRY.Name, Nationality, DOB, Name, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy, BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat, y.[Meal], y.[Baggage], y.[Sport Equipment], y.[Comfort Kit], y.[Duty Free], yy.[Meal], yy.[Baggage], yy.[Sport Equipment], yy.[Comfort Kit], yy.[Duty Free]  ) s  GROUP BY SeqNo, FlightNo, CarrierCode, Origin, Destination,TransID, PNR, Currency, PassengerID, PaxNo, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat) T2 ";
        //        //strSQL += " ON T1.PassengerID = T2.PassengerID AND T1.TransID = T2.TransID AND T1.PNR = T2.PNR";

        //        //remark by ketee, replace with fine tuned query

        //        strSQL = "SELECT* FROM ( ";
        //        strSQL += "SELECT SeqNo, TransID, PNR, FlightNo, CarrierCode, Origin, Destination, Currency, PassengerID, PaxNo, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PaxType, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat, MAX(SyncCreate)AS SyncCreate, MAX(SyncLastUpd) AS SyncLastUpd, MAX(LastSyncBy) AS LastSyncBy, max(DepartMeal) DepartMeal_desc, (SUBSTRING(max(DepartMeal), 0, CHARINDEX('|', max(DepartMeal)))) SSRCodeDepartMeal, SUBSTRING(max(DepartMeal), CHARINDEX('|', max(DepartMeal)) + 1, (LEN(max(DepartMeal)) - CHARINDEX('|', REVERSE(max(DepartMeal))) - CHARINDEX('|', max(DepartMeal)))) DepartMeal, SUBSTRING(max(DepartMeal), LEN(max(DepartMeal)) - CHARINDEX('|', REVERSE(max(DepartMeal))) + 2, CHARINDEX('|', REVERSE(max(DepartMeal)))) PriceDepartMeal, max(DepartBaggage) DepartBaggage_desc, (SUBSTRING(max(DepartBaggage), 0, CHARINDEX('|', max(DepartBaggage)))) SSRCodeDepartBaggage, SUBSTRING(max(DepartBaggage), CHARINDEX('|', max(DepartBaggage)) + 1, (LEN(max(DepartBaggage)) - CHARINDEX('|', REVERSE(max(DepartBaggage))) - CHARINDEX('|', max(DepartBaggage)))) DepartBaggage, SUBSTRING(max(DepartBaggage), LEN(max(DepartBaggage)) - CHARINDEX('|', REVERSE(max(DepartBaggage))) + 2, CHARINDEX('|', REVERSE(max(DepartBaggage)))) PriceDepartBaggage, max(DepartSportEquipment) DepartSport_desc, (SUBSTRING(max(DepartSportEquipment), 0, CHARINDEX('|', max(DepartSportEquipment)))) SSRCodeDepartSport, SUBSTRING(max(DepartSportEquipment), CHARINDEX('|', max(DepartSportEquipment)) + 1, (LEN(max(DepartSportEquipment)) - CHARINDEX('|', REVERSE(max(DepartSportEquipment))) - CHARINDEX('|', max(DepartSportEquipment)))) DepartSport, SUBSTRING(max(DepartSportEquipment), LEN(max(DepartSportEquipment)) - CHARINDEX('|', REVERSE(max(DepartSportEquipment))) + 2, CHARINDEX('|', REVERSE(max(DepartSportEquipment)))) PriceDepartSport, max(DepartComfortKit) DepartComfort_desc, (SUBSTRING(max(DepartComfortKit), 0, CHARINDEX('|', max(DepartComfortKit)))) SSRCodeDepartComfort, SUBSTRING(max(DepartComfortKit), CHARINDEX('|', max(DepartComfortKit)) + 1, (LEN(max(DepartComfortKit)) - CHARINDEX('|', REVERSE(max(DepartComfortKit))) - CHARINDEX('|', max(DepartComfortKit)))) DepartComfort, SUBSTRING(max(DepartComfortKit), LEN(max(DepartComfortKit)) - CHARINDEX('|', REVERSE(max(DepartComfortKit))) + 2, CHARINDEX('|', REVERSE(max(DepartComfortKit)))) PriceDepartComfort, max(DepartDutyFree) DepartDuty_desc, (SUBSTRING(max(DepartDutyFree), 0, CHARINDEX('|', max(DepartDutyFree)))) SSRCodeDepartDuty, SUBSTRING(max(DepartDutyFree), CHARINDEX('|', max(DepartDutyFree)) + 1, (LEN(max(DepartDutyFree)) - CHARINDEX('|', REVERSE(max(DepartDutyFree))) - CHARINDEX('|', max(DepartDutyFree)))) DepartDuty, SUBSTRING(max(DepartDutyFree), LEN(max(DepartDutyFree)) - CHARINDEX('|', REVERSE(max(DepartDutyFree))) + 2, CHARINDEX('|', REVERSE(max(DepartDutyFree)))) PriceDepartDuty, max(ConDepartMeal) ConDepartMeal_desc, (SUBSTRING(max(ConDepartMeal), 0, CHARINDEX('|', max(ConDepartMeal)))) SSRCodeConDepartMeal, SUBSTRING(max(ConDepartMeal), CHARINDEX('|', max(ConDepartMeal)) + 1, (LEN(max(ConDepartMeal)) - CHARINDEX('|', REVERSE(max(ConDepartMeal))) - CHARINDEX('|', max(ConDepartMeal)))) ConDepartMeal, SUBSTRING(max(ConDepartMeal), LEN(max(ConDepartMeal)) - CHARINDEX('|', REVERSE(max(ConDepartMeal))) + 2, CHARINDEX('|', REVERSE(max(ConDepartMeal)))) PriceConDepartMeal, max(ConDepartBaggage) ConDepartBaggage_desc, (SUBSTRING(max(ConDepartBaggage), 0, CHARINDEX('|', max(ConDepartBaggage)))) SSRCodeConDepartBaggage, SUBSTRING(max(ConDepartBaggage), CHARINDEX('|', max(ConDepartBaggage)) + 1, (LEN(max(ConDepartBaggage)) - CHARINDEX('|', REVERSE(max(ConDepartBaggage))) - CHARINDEX('|', max(ConDepartBaggage)))) ConDepartBaggage, SUBSTRING(max(ConDepartBaggage), LEN(max(ConDepartBaggage)) - CHARINDEX('|', REVERSE(max(ConDepartBaggage))) + 2, CHARINDEX('|', REVERSE(max(ConDepartBaggage)))) PriceConDepartBaggage, max(ConDepartSportEquipment) ConDepartSportEquipment_desc, (SUBSTRING(max(ConDepartSportEquipment), 0, CHARINDEX('|', max(ConDepartSportEquipment)))) SSRCodeConDepartSport, SUBSTRING(max(ConDepartSportEquipment), CHARINDEX('|', max(ConDepartSportEquipment)) + 1, (LEN(max(ConDepartSportEquipment)) - CHARINDEX('|', REVERSE(max(ConDepartSportEquipment))) - CHARINDEX('|', max(ConDepartSportEquipment)))) ConDepartSport, SUBSTRING(max(ConDepartSportEquipment), LEN(max(ConDepartSportEquipment)) - CHARINDEX('|', REVERSE(max(ConDepartSportEquipment))) + 2, CHARINDEX('|', REVERSE(max(ConDepartSportEquipment)))) PriceConDepartSport, max(ConDepartComfortKit) ConDepartComfort_desc, (SUBSTRING(max(ConDepartComfortKit), 0, CHARINDEX('|', max(ConDepartComfortKit)))) SSRCodeConDepartComfort, SUBSTRING(max(ConDepartComfortKit), CHARINDEX('|', max(ConDepartComfortKit)) + 1, (LEN(max(ConDepartComfortKit)) - CHARINDEX('|', REVERSE(max(ConDepartComfortKit))) - CHARINDEX('|', max(ConDepartComfortKit)))) ConDepartComfort, SUBSTRING(max(ConDepartComfortKit), LEN(max(ConDepartComfortKit)) - CHARINDEX('|', REVERSE(max(ConDepartComfortKit))) + 2, CHARINDEX('|', REVERSE(max(ConDepartComfortKit)))) PriceConDepartComfort, max(ConDepartDutyFree) ConDepartDutyFree_desc, (SUBSTRING(max(ConDepartDutyFree), 0, CHARINDEX('|', max(ConDepartDutyFree)))) SSRCodeConDepartDutyFree, SUBSTRING(max(ConDepartDutyFree), CHARINDEX('|', max(ConDepartDutyFree)) + 1, (LEN(max(ConDepartDutyFree)) - CHARINDEX('|', REVERSE(max(ConDepartDutyFree))) - CHARINDEX('|', max(ConDepartDutyFree)))) ConDepartDutyFree, SUBSTRING(max(ConDepartDutyFree), LEN(max(ConDepartDutyFree)) - CHARINDEX('|', REVERSE(max(ConDepartDutyFree))) + 2, CHARINDEX('|', REVERSE(max(ConDepartDutyFree)))) PriceConDepartDutyFree ";
        //        strSQL += "FROM( ";
        //        strSQL += "SELECT ROW_NUMBER() OVER(ORDER BY BK_PASSENGERLIST.RecordLocator, CAST(BK_PASSENGERLIST.PassengerID as INT) ASC) AS SeqNo, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.TransID, BK_PASSENGERLIST.RecordLocator AS PNR, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, CASE WHEN (Title='Mr' OR Title='Ms' OR Title='' OR Title IS NULL) THEN 'ADT' WHEN (Title='Chd') THEN 'CHD' END AS PaxType, Title, Gender, ISNULL(COUNTRY.Name, '') AS countryName, Nationality, DOB, (SELECT TOP 1 C.Name FROM COUNTRY C WHERE IssuingCountry = C.CountryCode) as IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, CASE WHEN PassportNo = 'TBA' THEN '' ELSE PassportNo END AS PassportNo, CASE WHEN ChangeCount >= 1 THEN(CONVERT(VARCHAR, ChangeCount) + 'x')  ELSE '-' END AS ChangeCnt, ChangeCount AS InitChange, BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy, BK_PASSENGERLIST.PrevFirstName1, BK_PASSENGERLIST.PrevLastName1, BK_PASSENGERLIST.PrevFirstName2, BK_PASSENGERLIST.PrevLastName2, MaxChange - ChangeCount as CountChanged, BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat, x.[Meal][DepartMeal], x.[Baggage][DepartBaggage], x.[Sport Equipment][DepartSportEquipment], x.[Comfort Kit][DepartComfortKit], x.[Duty Free][DepartDutyFree], xx.[Meal][ConDepartMeal], xx.[Baggage][ConDepartBaggage], xx.[Sport Equipment][ConDepartSportEquipment], xx.[Comfort Kit][ConDepartComfortKit], xx.[Duty Free][ConDepartDutyFree] ";
        //        strSQL += "FROM BK_PASSENGERLIST ";
        //        strSQL += "LEFT JOIN COUNTRY(NOLOCK) ON BK_PASSENGERLIST.Nationality = COUNTRY.CountryCode ";
        //        strSQL += "INNER JOIN BK_TRANSDTL ON BK_TRANSDTL.TransID = BK_PASSENGERLIST.TransID AND BK_TRANSDTL.TransVoid = '0' ";
        //        strSQL += "OUTER APPLY( ";
        //        strSQL += "select * from( ";
        //        strSQL += "select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail ";
        //        strSQL += "from BK_PASSENGERLIST p with(nolock) ";
        //        strSQL += "inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID ";
        //        strSQL += "left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID ";
        //        strSQL += "inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode ";
        //        strSQL += "inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and p.PassengerID = BK_PASSENGERLIST.PassengerID and s.Origin = BK_TRANSDTL.Origin and s.Destination =case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Destination else BK_TRANSDTL.Transit end" + strDepart + ") a ";
        //        strSQL += "pivot(max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b ";
        //        strSQL += ") x ";
        //        strSQL += "OUTER APPLY(select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination" + strDepart + ") a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) xx ";
        //        strSQL += "WHERE BK_PASSENGERLIST.Title <> 'INFT' AND BK_PASSENGERLIST.TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' " + strDepart + " ";
        //        strSQL += "GROUP BY BK_PASSENGERLIST.TransID, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.RecordLocator, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, Title, Gender, COUNTRY.Name, Nationality, DOB, Name, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy, BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat, x.[Meal], x.[Baggage], x.[Sport Equipment], x.[Comfort Kit], x.[Duty Free], xx.[Meal], xx.[Baggage], xx.[Sport Equipment], xx.[Comfort Kit], xx.[Duty Free]) s ";
        //        strSQL += "GROUP BY SeqNo, FlightNo, CarrierCode, Origin, Destination, TransID, PNR, Currency, PassengerID, PaxNo, PaxType, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat ";
        //        strSQL += ") T1 ";
        //        strSQL += "LEFT JOIN( ";
        //        strSQL += "SELECT SeqNo, TransID, PNR, FlightNo, CarrierCode, Origin, Destination, Currency, PassengerID, PaxNo, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PaxType, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat, MAX(SyncCreate) AS SyncCreate, max(ReturnMeal) ReturnMeal_desc, (SUBSTRING(max(ReturnMeal), 0, CHARINDEX('|', max(ReturnMeal)))) SSRCodeReturnMeal, SUBSTRING(max(ReturnMeal), CHARINDEX('|', max(ReturnMeal)) + 1, (LEN(max(ReturnMeal)) - CHARINDEX('|', REVERSE(max(ReturnMeal))) - CHARINDEX('|', max(ReturnMeal)))) ReturnMeal, SUBSTRING(max(ReturnMeal), LEN(max(ReturnMeal)) - CHARINDEX('|', REVERSE(max(ReturnMeal))) + 2, CHARINDEX('|', REVERSE(max(ReturnMeal)))) PriceReturnMeal, max(ReturnBaggage) ReturnBaggage_desc, (SUBSTRING(max(ReturnBaggage), 0, CHARINDEX('|', max(ReturnBaggage)))) SSRCodeReturnBaggage, SUBSTRING(max(ReturnBaggage), CHARINDEX('|', max(ReturnBaggage)) + 1, (LEN(max(ReturnBaggage)) - CHARINDEX('|', REVERSE(max(ReturnBaggage))) - CHARINDEX('|', max(ReturnBaggage)))) ReturnBaggage, SUBSTRING(max(ReturnBaggage), LEN(max(ReturnBaggage)) - CHARINDEX('|', REVERSE(max(ReturnBaggage))) + 2, CHARINDEX('|', REVERSE(max(ReturnBaggage)))) PriceReturnBaggage, max(ReturnSportEquipment) ReturnSport_desc, (SUBSTRING(max(ReturnSportEquipment), 0, CHARINDEX('|', max(ReturnSportEquipment)))) SSRCodeReturnSport, SUBSTRING(max(ReturnSportEquipment), CHARINDEX('|', max(ReturnSportEquipment)) + 1, (LEN(max(ReturnSportEquipment)) - CHARINDEX('|', REVERSE(max(ReturnSportEquipment))) - CHARINDEX('|', max(ReturnSportEquipment)))) ReturnSport, SUBSTRING(max(ReturnSportEquipment), LEN(max(ReturnSportEquipment)) - CHARINDEX('|', REVERSE(max(ReturnSportEquipment))) + 2, CHARINDEX('|', REVERSE(max(ReturnSportEquipment)))) PriceReturnSport, max(ReturnComfortKit) SSRCodeReturnComfortKit_desc, (SUBSTRING(max(ReturnComfortKit), 0, CHARINDEX('|', max(ReturnComfortKit)))) SSRCodeReturnComfort, SUBSTRING(max(ReturnComfortKit), CHARINDEX('|', max(ReturnComfortKit)) + 1, (LEN(max(ReturnComfortKit)) - CHARINDEX('|', REVERSE(max(ReturnComfortKit))) - CHARINDEX('|', max(ReturnComfortKit)))) ReturnComfort, SUBSTRING(max(ReturnComfortKit), LEN(max(ReturnComfortKit)) - CHARINDEX('|', REVERSE(max(ReturnComfortKit))) + 2, CHARINDEX('|', REVERSE(max(ReturnComfortKit)))) PriceReturnComfort, max(ReturnDutyFree) SSRCodeReturnDutyFree_desc, (SUBSTRING(max(ReturnDutyFree), 0, CHARINDEX('|', max(ReturnDutyFree)))) SSRCodeReturnDuty, SUBSTRING(max(ReturnDutyFree), CHARINDEX('|', max(ReturnDutyFree)) + 1, (LEN(max(ReturnDutyFree)) - CHARINDEX('|', REVERSE(max(ReturnDutyFree))) - CHARINDEX('|', max(ReturnDutyFree)))) ReturnDuty, SUBSTRING(max(ReturnDutyFree), LEN(max(ReturnDutyFree)) - CHARINDEX('|', REVERSE(max(ReturnDutyFree))) + 2, CHARINDEX('|', REVERSE(max(ReturnDutyFree)))) PriceReturnDuty, max(ConReturnMeal) ConReturnMeal_desc, (SUBSTRING(max(ConReturnMeal), 0, CHARINDEX('|', max(ConReturnMeal)))) SSRCodeConReturnMeal, SUBSTRING(max(ConReturnMeal), CHARINDEX('|', max(ConReturnMeal)) + 1, (LEN(max(ConReturnMeal)) - CHARINDEX('|', REVERSE(max(ConReturnMeal))) - CHARINDEX('|', max(ConReturnMeal)))) ConReturnMeal, SUBSTRING(max(ConReturnMeal), LEN(max(ConReturnMeal)) - CHARINDEX('|', REVERSE(max(ConReturnMeal))) + 2, CHARINDEX('|', REVERSE(max(ConReturnMeal)))) PriceConReturnMeal, max(ConReturnBaggage) ConReturnBaggage_desc, (SUBSTRING(max(ConReturnBaggage), 0, CHARINDEX('|', max(ConReturnBaggage)))) SSRCodeConReturnBaggage, SUBSTRING(max(ConReturnBaggage), CHARINDEX('|', max(ConReturnBaggage)) + 1, (LEN(max(ConReturnBaggage)) - CHARINDEX('|', REVERSE(max(ConReturnBaggage))) - CHARINDEX('|', max(ConReturnBaggage)))) ConReturnBaggage, SUBSTRING(max(ConReturnBaggage), LEN(max(ConReturnBaggage)) - CHARINDEX('|', REVERSE(max(ConReturnBaggage))) + 2, CHARINDEX('|', REVERSE(max(ConReturnBaggage)))) PriceConReturnBaggage, max(ConReturnSportEquipment) ConReturnSportEquipment_desc, (SUBSTRING(max(ConReturnSportEquipment), 0, CHARINDEX('|', max(ConReturnSportEquipment)))) SSRCodeReturnSportEquipment, SUBSTRING(max(ConReturnSportEquipment), CHARINDEX('|', max(ConReturnSportEquipment)) + 1, (LEN(max(ConReturnSportEquipment)) - CHARINDEX('|', REVERSE(max(ConReturnSportEquipment))) - CHARINDEX('|', max(ConReturnSportEquipment)))) ConReturnSportEquipment, SUBSTRING(max(ConReturnSportEquipment), LEN(max(ConReturnSportEquipment)) - CHARINDEX('|', REVERSE(max(ConReturnSportEquipment))) + 2, CHARINDEX('|', REVERSE(max(ConReturnSportEquipment)))) PriceConReturnSportEquipment, max(ConReturnComfortKit) ConReturnComfortKit_desc, (SUBSTRING(max(ConReturnComfortKit), 0, CHARINDEX('|', max(ConReturnComfortKit)))) SSRCodeConReturnComfortKit, SUBSTRING(max(ConReturnComfortKit), CHARINDEX('|', max(ConReturnComfortKit)) + 1, (LEN(max(ConReturnComfortKit)) - CHARINDEX('|', REVERSE(max(ConReturnComfortKit))) - CHARINDEX('|', max(ConReturnComfortKit)))) ConReturnComfortKit, SUBSTRING(max(ConReturnComfortKit), LEN(max(ConReturnComfortKit)) - CHARINDEX('|', REVERSE(max(ConReturnComfortKit))) + 2, CHARINDEX('|', REVERSE(max(ConReturnComfortKit)))) PriceConReturnComfortKit, max(ConReturnDutyFree) ConReturnDutyFree_desc, (SUBSTRING(max(ConReturnDutyFree), 0, CHARINDEX('|', max(ConReturnDutyFree)))) SSRCodeConReturnDutyFree, SUBSTRING(max(ConReturnDutyFree), CHARINDEX('|', max(ConReturnDutyFree)) + 1, (LEN(max(ConReturnDutyFree)) - CHARINDEX('|', REVERSE(max(ConReturnDutyFree))) - CHARINDEX('|', max(ConReturnDutyFree)))) ConReturnDutyFree, SUBSTRING(max(ConReturnDutyFree), LEN(max(ConReturnDutyFree)) - CHARINDEX('|', REVERSE(max(ConReturnDutyFree))) + 2, CHARINDEX('|', REVERSE(max(ConReturnDutyFree)))) PriceConReturnDutyFree ";
        //        strSQL += "FROM( ";
        //        strSQL += "SELECT ROW_NUMBER() OVER(ORDER BY BK_PASSENGERLIST.RecordLocator, CAST(BK_PASSENGERLIST.PassengerID as INT) ASC) AS SeqNo, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.TransID, BK_PASSENGERLIST.RecordLocator AS PNR, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, CASE WHEN (Title='Mr' OR Title='Ms' OR Title='' OR Title IS NULL) THEN 'ADT' WHEN (Title='Chd') THEN 'CHD' END AS PaxType, Title, Gender, ISNULL(COUNTRY.Name, '') AS countryName, Nationality, DOB, (SELECT TOP 1 C.Name FROM COUNTRY C WHERE IssuingCountry = C.CountryCode) as IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, CASE WHEN PassportNo = 'TBA' THEN '' ELSE PassportNo END AS PassportNo, CASE WHEN ChangeCount >= 1 THEN(CONVERT(VARCHAR, ChangeCount) + 'x')  ELSE '-' END AS ChangeCnt, ChangeCount AS InitChange, BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy, BK_PASSENGERLIST.PrevFirstName1, BK_PASSENGERLIST.PrevLastName1, BK_PASSENGERLIST.PrevFirstName2, BK_PASSENGERLIST.PrevLastName2, MaxChange - ChangeCount as CountChanged, BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat, y.[Meal][ReturnMeal], y.[Baggage][ReturnBaggage], y.[Sport Equipment][ReturnSportEquipment], y.[Comfort Kit][ReturnComfortKit], y.[Duty Free][ReturnDutyFree], yy.[Meal][ConReturnMeal], yy.[Baggage][ConReturnBaggage], yy.[Sport Equipment][ConReturnSportEquipment], yy.[Comfort Kit][ConReturnComfortKit], yy.[Duty Free][ConReturnDutyFree] ";
        //        strSQL += "FROM BK_PASSENGERLIST ";
        //        strSQL += "LEFT JOIN COUNTRY(NOLOCK) ON BK_PASSENGERLIST.Nationality = COUNTRY.CountryCode ";
        //        strSQL += "INNER JOIN BK_TRANSDTL ON BK_TRANSDTL.TransID = BK_PASSENGERLIST.TransID AND BK_TRANSDTL.TransVoid = '0' ";
        //        strSQL += "OUTER APPLY(select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and s.Origin =case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Origin else BK_TRANSDTL.Transit end and s.Destination = BK_TRANSDTL.Destination" + strReturn + ") a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) y ";
        //        strSQL += "OUTER APPLY(select * from(select p.RecordLocator, p.PassengerID, s.Origin, s.Destination, c.CatgDesc, i.ItemCode + '|' + i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) + ' ' + h.Currency + '|' + cast(cast(round(s.SSRRate, 2) as numeric(12, 2)) as varchar(max)) SSRDetail from BK_PASSENGERLIST p with(nolock) inner join BK_TRANSMAIN h with(nolock) on h.TransID = p.TransID left join BK_TRANSSSR s with(nolock) on p.TransID = s.TransID and p.RecordLocator = s.RecordLocator and p.PassengerID = s.PassengerID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where p.transid = BK_TRANSDTL.TransID and p.PassengerID = BK_PASSENGERLIST.PassengerID and p.RecordLocator = BK_PASSENGERLIST.RecordLocator and s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination" + strReturn + ") a pivot (max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) yy ";
        //        strSQL += "WHERE BK_PASSENGERLIST.Title <> 'INFT' AND BK_PASSENGERLIST.TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' " + strReturn + " ";
        //        strSQL += "GROUP BY BK_PASSENGERLIST.TransID, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_PASSENGERLIST.RecordLocator, BK_TRANSDTL.Currency, BK_PASSENGERLIST.PassengerID, PaxNo, Title, Gender, COUNTRY.Name, Nationality, DOB, Name, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy, BK_PASSENGERLIST.DepartSeat, BK_PASSENGERLIST.ReturnSeat, BK_PASSENGERLIST.DepartConnectingSeat, BK_PASSENGERLIST.ReturnConnectingSeat, y.[Meal], y.[Baggage], y.[Sport Equipment], y.[Comfort Kit], y.[Duty Free], yy.[Meal], yy.[Baggage], yy.[Sport Equipment], yy.[Comfort Kit], yy.[Duty Free]  ) s ";
        //        strSQL += "GROUP BY SeqNo, FlightNo, CarrierCode, Origin, Destination, TransID, PNR, Currency, PassengerID, PaxNo, PaxType, Title, Gender, countryName, Nationality, DOB, IssuingCountryName, IssuingCountry, ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, ChangeCnt, InitChange, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, CountChanged, DepartSeat, ReturnSeat, DepartConnectingSeat, ReturnConnectingSeat ";
        //        strSQL += ") T2 ON T1.PassengerID = T2.PassengerID AND T1.TransID = T2.TransID AND T1.PNR = T2.PNR";


        //        dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
        //        if (dt != null && dt.Rows.Count > 0)
        //        {

        //            return dt;
        //        }
        //        else
        //        {
        //            return null;
        //            throw new ApplicationException("BK_PASSENGERLIST does not exist.");
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }
        //}


        public DataTable GetAllBK_PASSENGERLISTWithName(string TransID, bool NewRec = false)
        {
            List<PassengerData> objListBK_PASSENGERLIST_Info = new List<PassengerData>();
            DataTable dt;
            String strSQL = string.Empty;
            string recordLocatorFilter = string.Empty;
            if (NewRec == false) recordLocatorFilter = " AND LEN(BK_TRANSDTL.RecordLocator)>=6";
            try
            {
                //edited by ketee
                string strfilter = "";
                strfilter = " WHERE BK_PASSENGERLIST.Title <> 'INFT' AND BK_PASSENGERLIST.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'" + recordLocatorFilter;
                strSQL = "SELECT BK_PASSENGERLIST.TransID, BK_TRANSDTL.RecordLocator AS PNR, PassengerID, PaxNo, Title, Gender, ISNULL(COUNTRY.Name,'') AS countryName,Nationality, DOB,(SELECT TOP 1 C.Name FROM COUNTRY C WHERE IssuingCountry=C.CountryCode) as IssuingCountryName ,IssuingCountry, ";
                strSQL += " ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, ";
                strSQL += " FirstName, LastName, PassportNo, ";
                strSQL += " CASE WHEN ChangeCount >= 1 THEN (CONVERT(VARCHAR,ChangeCount) + 'x')  ELSE '-' END AS ChangeCnt, ChangeCount AS InitChange, ";
                strSQL += " BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy, ";
                strSQL += " BK_PASSENGERLIST.PrevFirstName1, BK_PASSENGERLIST.PrevLastName1, BK_PASSENGERLIST.PrevFirstName2, BK_PASSENGERLIST.PrevLastName2";
                strSQL += " FROM BK_PASSENGERLIST LEFT JOIN COUNTRY (NOLOCK) ON BK_PASSENGERLIST.Nationality = COUNTRY.CountryCode ";
                strSQL += " INNER JOIN BK_TRANSDTL ON BK_TRANSDTL.TransID=BK_PASSENGERLIST.TransID AND BK_TRANSDTL.RecordLocator=BK_PASSENGERLIST.RecordLocator AND BK_TRANSDTL.TransVoid='0' " + strfilter;
                strSQL += " GROUP BY BK_PASSENGERLIST.TransID, BK_TRANSDTL.RecordLocator, PassengerID, PaxNo, Title, Gender, COUNTRY.Name, Nationality, DOB, Name ,";
                strSQL += " IssuingCountry,  ChangeCount, MaxChange, MaxPax1, MaxPax2, ExpiryDate, ContactNo, Email, ChangeFee, ChangeDate, ChangeFee2, ChangeDate2, FirstName, LastName, PassportNo, PrevFirstName1, PrevLastName1, PrevFirstName2, PrevLastName2, ";
                strSQL += " BK_PASSENGERLIST.rowguid, BK_PASSENGERLIST.SyncCreate, BK_PASSENGERLIST.SyncLastUpd, BK_PASSENGERLIST.LastSyncBy";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {

                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_PASSENGERLIST does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objSQL.Dispose();
                //objDCom.CloseConnection();
            }
        }

        public DataTable GetAllBK_ADDONDataTable(string TransID, bool NewRec = false)
        {
            DataTable dt;
            String strSQL = string.Empty;
            try
            {
                //edited by ketee
                //string strfilter = "";
                //strfilter = " WHERE BK_PASSENGERLIST.TransID='" + TransID + "'" + recordLocatorFilter;
                strSQL = "select * from (";
                strSQL += " select s.TransID, s.RecordLocator, p.PassengerID, p.FirstName, p.LastName, s.CarrierCode, s.FlightNo, s.Origin, s.Destination, c.CatgDesc, i.ItemDesc + ' : ' + cast(cast(round(s.SSRRate,2) as numeric(12,2)) as varchar(max)) + ' ' + h.Currency SSRDetail";
                strSQL += " from BK_PASSENGERLIST p with (nolock)";
                strSQL += " inner join BK_TRANSMAIN h with (nolock) on h.TransID=p.TransID";
                strSQL += " left join BK_TRANSSSR s with (nolock) on p.TransID=s.TransID and p.PassengerID=s.PassengerID";
                strSQL += " inner join ITEM i with (nolock) on i.ItemCode=s.SSRCode";
                strSQL += " inner join ITEMCATEGORY c with (nolock) on c.CatgCode=i.ItmCatgCode";
                strSQL += " where p.transid='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'";
                strSQL += " ) a pivot(max(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b";
                dt = objDCom.Execute(strSQL, CommandType.Text, true);
                if (dt != null && dt.Rows.Count > 0)
                {
                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("ADDON does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public PassengerData GetSingleBK_PASSENGERLIST(string pPassengerID)
        {

            PassengerData objBK_PASSENGERLIST_Info;
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("BK_PASSENGERLIST.TransID");
                lstFields.Add("BK_PASSENGERLIST.RecordLocator");
                lstFields.Add("BK_PASSENGERLIST.PassengerID");
                lstFields.Add("BK_PASSENGERLIST.Title");
                lstFields.Add("BK_PASSENGERLIST.Gender");
                lstFields.Add("BK_PASSENGERLIST.FirstName");
                lstFields.Add("BK_PASSENGERLIST.LastName");
                lstFields.Add("BK_PASSENGERLIST.PrevFirstName1");
                lstFields.Add("BK_PASSENGERLIST.PrevLastName1");
                lstFields.Add("BK_PASSENGERLIST.PrevFirstName2");
                lstFields.Add("BK_PASSENGERLIST.PrevLastName2");
                lstFields.Add("BK_PASSENGERLIST.Nationality");
                lstFields.Add("BK_PASSENGERLIST.DOB");
                lstFields.Add("BK_PASSENGERLIST.PassportNo");
                lstFields.Add("BK_PASSENGERLIST.IssuingCountry");
                lstFields.Add("BK_PASSENGERLIST.ExpiryDate");
                lstFields.Add("BK_PASSENGERLIST.ChangeFee");
                lstFields.Add("BK_PASSENGERLIST.ChangeDate");
                lstFields.Add("BK_PASSENGERLIST.ChangeFee2");
                lstFields.Add("BK_PASSENGERLIST.ChangeDate2");
                lstFields.Add("BK_PASSENGERLIST.ChangeCount");
                lstFields.Add("BK_PASSENGERLIST.MaxChange");
                lstFields.Add("BK_PASSENGERLIST.MaxPax1");
                lstFields.Add("BK_PASSENGERLIST.MaxPax2");
                lstFields.Add("BK_PASSENGERLIST.rowguid");
                lstFields.Add("BK_PASSENGERLIST.SyncCreate");
                lstFields.Add("BK_PASSENGERLIST.SyncLastUpd");
                lstFields.Add("BK_PASSENGERLIST.LastSyncBy");

                strFields = GetSqlFields(lstFields);
                strFilter = "WHERE BK_PASSENGERLIST.PassengerID='" + pPassengerID + "'";
                strSQL = "SELECT " + strFields + " FROM BK_PASSENGERLIST " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];

                    objBK_PASSENGERLIST_Info = new PassengerData();
                    objBK_PASSENGERLIST_Info.TransID = (string)drRow["TransID"];
                    objBK_PASSENGERLIST_Info.RecordLocator = (string)drRow["RecordLocator"];
                    objBK_PASSENGERLIST_Info.PassengerID = (string)drRow["PassengerID"];
                    objBK_PASSENGERLIST_Info.Title = (string)drRow["Title"];
                    objBK_PASSENGERLIST_Info.Gender = (string)drRow["Gender"];
                    objBK_PASSENGERLIST_Info.FirstName = (string)drRow["FirstName"];
                    objBK_PASSENGERLIST_Info.LastName = (string)drRow["LastName"];
                    objBK_PASSENGERLIST_Info.PrevFirstName1 = (string)drRow["PrevFirstName1"];
                    objBK_PASSENGERLIST_Info.PrevLastName1 = (string)drRow["PrevLastName1"];
                    objBK_PASSENGERLIST_Info.PrevFirstName2 = (string)drRow["PrevFirstName2"];
                    objBK_PASSENGERLIST_Info.PrevLastName2 = (string)drRow["PrevLastName2"];
                    objBK_PASSENGERLIST_Info.Nationality = (string)drRow["Nationality"];
                    if (DateTime.TryParse(drRow["DOB"].ToString(), out dateValue)) objBK_PASSENGERLIST_Info.DOB = (DateTime)drRow["DOB"];
                    objBK_PASSENGERLIST_Info.PassportNo = (string)drRow["PassportNo"];
                    objBK_PASSENGERLIST_Info.IssuingCountry = (string)drRow["IssuingCountry"];
                    if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBK_PASSENGERLIST_Info.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                    objBK_PASSENGERLIST_Info.ChangeFee = (decimal)drRow["ChangeFee"];
                    if (DateTime.TryParse(drRow["ChangeDate"].ToString(), out dateValue)) objBK_PASSENGERLIST_Info.ChangeDate = (DateTime)drRow["ChangeDate"];
                    objBK_PASSENGERLIST_Info.ChangeFee2 = (decimal)drRow["ChangeFee2"];
                    if (DateTime.TryParse(drRow["ChangeDate2"].ToString(), out dateValue)) objBK_PASSENGERLIST_Info.ChangeDate2 = (DateTime)drRow["ChangeDate2"];
                    objBK_PASSENGERLIST_Info.ChangeCount = (int)drRow["ChangeCount"];
                    objBK_PASSENGERLIST_Info.MaxChange = (int)drRow["MaxChange"];
                    objBK_PASSENGERLIST_Info.MaxPax1 = (int)drRow["MaxPax1"];
                    objBK_PASSENGERLIST_Info.MaxPax2 = (int)drRow["MaxPax2"];
                    objBK_PASSENGERLIST_Info.rowguid = (Guid)drRow["rowguid"];
                    if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_PASSENGERLIST_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                    if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBK_PASSENGERLIST_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                    objBK_PASSENGERLIST_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                    return objBK_PASSENGERLIST_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_PASSENGERLIST does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        //added by ketee
        public List<PassengerData> SaveBK_PASSENGERLIST(List<PassengerData> lstPassenger, EnumSaveType saveType)
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                string TransID = string.Empty;
                foreach (PassengerData pBK_PASSENGERLIST_Info in lstPassenger)
                {
                    TransID = pBK_PASSENGERLIST_Info.TransID;
                    if (saveType == EnumSaveType.Insert)
                    {
                        objSQL.AddField("TransID", pBK_PASSENGERLIST_Info.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    }
                    objSQL.AddField("RecordLocator", pBK_PASSENGERLIST_Info.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PassengerID", pBK_PASSENGERLIST_Info.PassengerID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Title", pBK_PASSENGERLIST_Info.Title, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Gender", pBK_PASSENGERLIST_Info.Gender, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FirstName", pBK_PASSENGERLIST_Info.FirstName, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LastName", pBK_PASSENGERLIST_Info.LastName, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevFirstName1", pBK_PASSENGERLIST_Info.PrevFirstName1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevLastName1", pBK_PASSENGERLIST_Info.PrevLastName1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevFirstName2", pBK_PASSENGERLIST_Info.PrevFirstName2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevLastName2", pBK_PASSENGERLIST_Info.PrevLastName2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                    objSQL.AddField("PrevTitle1", pBK_PASSENGERLIST_Info.PrevTitle1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevGender1", pBK_PASSENGERLIST_Info.PrevGender1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevNationality1", pBK_PASSENGERLIST_Info.PrevNationality1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevDOB1", pBK_PASSENGERLIST_Info.PrevDOB1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevPassportNo1", pBK_PASSENGERLIST_Info.PrevPassportNo1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevIssuingCountry1", pBK_PASSENGERLIST_Info.PrevIssuingCountry1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevExpiryDate1", pBK_PASSENGERLIST_Info.PrevExpiryDate1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevTitle2", pBK_PASSENGERLIST_Info.PrevTitle2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevGender2", pBK_PASSENGERLIST_Info.PrevGender2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevNationality2", pBK_PASSENGERLIST_Info.PrevNationality2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevDOB2", pBK_PASSENGERLIST_Info.PrevDOB2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevPassportNo2", pBK_PASSENGERLIST_Info.PrevPassportNo2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevIssuingCountry2", pBK_PASSENGERLIST_Info.PrevIssuingCountry2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevExpiryDate2", pBK_PASSENGERLIST_Info.PrevExpiryDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);


                    objSQL.AddField("Nationality", pBK_PASSENGERLIST_Info.Nationality, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DOB", pBK_PASSENGERLIST_Info.DOB, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PassportNo", pBK_PASSENGERLIST_Info.PassportNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("IssuingCountry", pBK_PASSENGERLIST_Info.IssuingCountry, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ExpiryDate", pBK_PASSENGERLIST_Info.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ChangeFee", pBK_PASSENGERLIST_Info.ChangeFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ChangeDate", pBK_PASSENGERLIST_Info.ChangeDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ChangeFee2", pBK_PASSENGERLIST_Info.ChangeFee2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ChangeDate2", pBK_PASSENGERLIST_Info.ChangeDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ChangeCount", pBK_PASSENGERLIST_Info.ChangeCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("MaxChange", pBK_PASSENGERLIST_Info.MaxChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("MaxPax1", pBK_PASSENGERLIST_Info.MaxPax1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("MaxPax2", pBK_PASSENGERLIST_Info.MaxPax2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncCreate", pBK_PASSENGERLIST_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncLastUpd", pBK_PASSENGERLIST_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LastSyncBy", pBK_PASSENGERLIST_Info.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    //added by romy
                    objSQL.AddField("InsureCode", pBK_PASSENGERLIST_Info.InsureCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("InsureFee", pBK_PASSENGERLIST_Info.InsureFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("InsureDate", pBK_PASSENGERLIST_Info.InsureDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    switch (saveType)
                    {
                        case EnumSaveType.Insert:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_PASSENGERLIST", string.Empty);
                            break;
                        case EnumSaveType.Update:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_PASSENGERLIST", "TransID='" + pBK_PASSENGERLIST_Info.TransID + "' AND BK_PASSENGERLIST.PassengerID='" + pBK_PASSENGERLIST_Info.PassengerID + "' AND BK_PASSENGERLIST.RecordLocator='" + pBK_PASSENGERLIST_Info.RecordLocator + "' AND Title <> 'INFT'");
                            break;
                    }
                    lstSQL.Add(strSQL);
                }
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return null;
                }

                return GetAllBK_PASSENGERLIST(TransID);
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return null;
            }
        }

        public List<PassengerData> SaveBK_PASSENGERLISTINFT(List<PassengerData> lstPassenger, EnumSaveType saveType)
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                string TransID = string.Empty;
                foreach (PassengerData pBK_PASSENGERLIST_Info in lstPassenger)
                {
                    TransID = pBK_PASSENGERLIST_Info.TransID;
                    //objSQL.AddField("TransID", pBK_PASSENGERLIST_Info.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("RecordLocator", pBK_PASSENGERLIST_Info.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PassengerID", pBK_PASSENGERLIST_Info.PassengerID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Title", pBK_PASSENGERLIST_Info.Title, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Gender", pBK_PASSENGERLIST_Info.Gender, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FirstName", pBK_PASSENGERLIST_Info.FirstName, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LastName", pBK_PASSENGERLIST_Info.LastName, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevFirstName1", pBK_PASSENGERLIST_Info.PrevFirstName1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevLastName1", pBK_PASSENGERLIST_Info.PrevLastName1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevFirstName2", pBK_PASSENGERLIST_Info.PrevFirstName2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevLastName2", pBK_PASSENGERLIST_Info.PrevLastName2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                    objSQL.AddField("PrevTitle1", pBK_PASSENGERLIST_Info.PrevTitle1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevGender1", pBK_PASSENGERLIST_Info.PrevGender1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevNationality1", pBK_PASSENGERLIST_Info.PrevNationality1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevDOB1", pBK_PASSENGERLIST_Info.PrevDOB1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevPassportNo1", pBK_PASSENGERLIST_Info.PrevPassportNo1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevIssuingCountry1", pBK_PASSENGERLIST_Info.PrevIssuingCountry1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevExpiryDate1", pBK_PASSENGERLIST_Info.PrevExpiryDate1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevTitle2", pBK_PASSENGERLIST_Info.PrevTitle2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevGender2", pBK_PASSENGERLIST_Info.PrevGender2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevNationality2", pBK_PASSENGERLIST_Info.PrevNationality2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevDOB2", pBK_PASSENGERLIST_Info.PrevDOB2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevPassportNo2", pBK_PASSENGERLIST_Info.PrevPassportNo2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevIssuingCountry2", pBK_PASSENGERLIST_Info.PrevIssuingCountry2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PrevExpiryDate2", pBK_PASSENGERLIST_Info.PrevExpiryDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);


                    objSQL.AddField("Nationality", pBK_PASSENGERLIST_Info.Nationality, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DOB", pBK_PASSENGERLIST_Info.DOB, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PassportNo", pBK_PASSENGERLIST_Info.PassportNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("IssuingCountry", pBK_PASSENGERLIST_Info.IssuingCountry, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ExpiryDate", pBK_PASSENGERLIST_Info.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ChangeFee", pBK_PASSENGERLIST_Info.ChangeFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ChangeDate", pBK_PASSENGERLIST_Info.ChangeDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ChangeFee2", pBK_PASSENGERLIST_Info.ChangeFee2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ChangeDate2", pBK_PASSENGERLIST_Info.ChangeDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ChangeCount", pBK_PASSENGERLIST_Info.ChangeCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("MaxChange", pBK_PASSENGERLIST_Info.MaxChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("MaxPax1", pBK_PASSENGERLIST_Info.MaxPax1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("MaxPax2", pBK_PASSENGERLIST_Info.MaxPax2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncCreate", pBK_PASSENGERLIST_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncLastUpd", pBK_PASSENGERLIST_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LastSyncBy", pBK_PASSENGERLIST_Info.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    switch (saveType)
                    {
                        case EnumSaveType.Insert:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_PASSENGERLIST", string.Empty);
                            break;
                        case EnumSaveType.Update:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_PASSENGERLIST", "TransID='" + pBK_PASSENGERLIST_Info.TransID + "' AND BK_PASSENGERLIST.PassengerID='" + pBK_PASSENGERLIST_Info.PassengerID + "' AND BK_PASSENGERLIST.RecordLocator='" + pBK_PASSENGERLIST_Info.RecordLocator + "' AND Title = 'INFT'");
                            break;
                    }
                    lstSQL.Add(strSQL);
                }
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return null;
                }

                return GetAllBK_PASSENGERLIST(TransID);
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return null;
            }
        }

        public PassengerData SaveBK_PASSENGERLISTAll(List<PassengerData> lstPassenger, EnumSaveType saveType)
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                foreach (PassengerData pBK_PASSENGERLIST_Info in lstPassenger)
                {
                    objSQL.AddField("TransID", pBK_PASSENGERLIST_Info.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("RecordLocator", pBK_PASSENGERLIST_Info.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PassengerID", pBK_PASSENGERLIST_Info.PassengerID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Title", pBK_PASSENGERLIST_Info.Title, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Gender", pBK_PASSENGERLIST_Info.Gender, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FirstName", pBK_PASSENGERLIST_Info.FirstName, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LastName", pBK_PASSENGERLIST_Info.LastName, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Nationality", pBK_PASSENGERLIST_Info.Nationality, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DOB", pBK_PASSENGERLIST_Info.DOB, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PassportNo", pBK_PASSENGERLIST_Info.PassportNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("IssuingCountry", pBK_PASSENGERLIST_Info.IssuingCountry, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ExpiryDate", pBK_PASSENGERLIST_Info.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ChangeDate", pBK_PASSENGERLIST_Info.ChangeDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ChangeCount", pBK_PASSENGERLIST_Info.ChangeCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncCreate", pBK_PASSENGERLIST_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncLastUpd", pBK_PASSENGERLIST_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LastSyncBy", pBK_PASSENGERLIST_Info.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    switch (saveType)
                    {
                        case EnumSaveType.Insert:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_PASSENGERLIST", string.Empty);
                            break;
                        case EnumSaveType.Update:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_PASSENGERLIST", "BK_PASSENGERLIST.PassengerID='" + pBK_PASSENGERLIST_Info.PassengerID + "'");
                            break;
                    }
                    lstSQL.Add(strSQL);
                }
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return null;
                }
                return GetSingleBK_PASSENGERLIST(lstPassenger[0].TransID);
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public PassengerData SaveBK_PASSENGERLISTTransMain(List<PassengerData> lstPassenger, BookingTransactionMain pBK_TRANSMAIN_Info, EnumSaveType saveType)
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                foreach (PassengerData pBK_PASSENGERLIST_Info in lstPassenger)
                {
                    objSQL.AddField("TransID", pBK_PASSENGERLIST_Info.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("RecordLocator", pBK_PASSENGERLIST_Info.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PassengerID", pBK_PASSENGERLIST_Info.PassengerID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Title", pBK_PASSENGERLIST_Info.Title, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Gender", pBK_PASSENGERLIST_Info.Gender, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FirstName", pBK_PASSENGERLIST_Info.FirstName, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LastName", pBK_PASSENGERLIST_Info.LastName, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Nationality", pBK_PASSENGERLIST_Info.Nationality, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DOB", pBK_PASSENGERLIST_Info.DOB, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PassportNo", pBK_PASSENGERLIST_Info.PassportNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("IssuingCountry", pBK_PASSENGERLIST_Info.IssuingCountry, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ExpiryDate", pBK_PASSENGERLIST_Info.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ChangeDate", pBK_PASSENGERLIST_Info.ChangeDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ChangeCount", pBK_PASSENGERLIST_Info.ChangeCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncCreate", pBK_PASSENGERLIST_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncLastUpd", pBK_PASSENGERLIST_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LastSyncBy", pBK_PASSENGERLIST_Info.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    switch (saveType)
                    {
                        case EnumSaveType.Insert:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_PASSENGERLIST", string.Empty);
                            break;
                        case EnumSaveType.Update:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_PASSENGERLIST", "BK_PASSENGERLIST.PassengerID='" + pBK_PASSENGERLIST_Info.PassengerID + "'");
                            break;
                    }
                    lstSQL.Add(strSQL);
                }
                objSQL.AddField("TransID", pBK_TRANSMAIN_Info.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransType", pBK_TRANSMAIN_Info.TransType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AgentID", pBK_TRANSMAIN_Info.AgentID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AgentCatgID", pBK_TRANSMAIN_Info.AgentCatgID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("BookingDate", pBK_TRANSMAIN_Info.BookingDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx1", pBK_TRANSMAIN_Info.PaymentDateEx1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx1", pBK_TRANSMAIN_Info.PaymentAmtEx1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx2", pBK_TRANSMAIN_Info.PaymentDateEx2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx2", pBK_TRANSMAIN_Info.PaymentAmtEx2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx3", pBK_TRANSMAIN_Info.PaymentDateEx3, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx3", pBK_TRANSMAIN_Info.PaymentAmtEx3, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDate", pBK_TRANSMAIN_Info.PaymentDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CancelDate", pBK_TRANSMAIN_Info.CancelDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ExpiryDate", pBK_TRANSMAIN_Info.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("STDDate", pBK_TRANSMAIN_Info.STDDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Currency", pBK_TRANSMAIN_Info.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CurrencyPaid", pBK_TRANSMAIN_Info.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CollectedAmt", pBK_TRANSMAIN_Info.CollectedAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtAVG", pBK_TRANSMAIN_Info.TotalAmtAVG, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtGoing", pBK_TRANSMAIN_Info.TotalAmtGoing, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtReturn", pBK_TRANSMAIN_Info.TotalAmtReturn, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransSubTotal", pBK_TRANSMAIN_Info.TransSubTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalAmt", pBK_TRANSMAIN_Info.TransTotalAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalFee", pBK_TRANSMAIN_Info.TransTotalFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalTax", pBK_TRANSMAIN_Info.TransTotalTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPaxFee", pBK_TRANSMAIN_Info.TransTotalPaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalOth", pBK_TRANSMAIN_Info.TransTotalOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalSSR", pBK_TRANSMAIN_Info.TransTotalSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalDisc", pBK_TRANSMAIN_Info.TransTotalDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPromoDisc", pBK_TRANSMAIN_Info.TransTotalPromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPAX", pBK_TRANSMAIN_Info.TransTotalPAX, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalSeat", pBK_TRANSMAIN_Info.TransTotalSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalNameChange", pBK_TRANSMAIN_Info.TransTotalNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalProcess", pBK_TRANSMAIN_Info.TransTotalProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalInfant", pBK_TRANSMAIN_Info.TransTotalInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransRemark1", pBK_TRANSMAIN_Info.TransRemark1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                objSQL.AddField("TransRemark2", pBK_TRANSMAIN_Info.TransRemark2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                objSQL.AddField("TransStatus", pBK_TRANSMAIN_Info.TransStatus, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Posted", pBK_TRANSMAIN_Info.Posted, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CreateBy", pBK_TRANSMAIN_Info.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", pBK_TRANSMAIN_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncLastUpd", pBK_TRANSMAIN_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LastSyncBy", pBK_TRANSMAIN_Info.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PromoCode", pBK_TRANSMAIN_Info.PromoCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                switch (saveType)
                {
                    case EnumSaveType.Insert:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSMAIN", string.Empty);
                        break;
                    case EnumSaveType.Update:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSMAIN", "BK_TRANSMAIN.TransID='" + pBK_TRANSMAIN_Info.TransID + "'" + " AND BK_TRANSMAIN.TransType='" + pBK_TRANSMAIN_Info.TransType + "' AND BK_TRANSMAIN.AgentID='" + pBK_TRANSMAIN_Info.AgentID + "'" + " AND BK_TRANSMAIN.AgentCatgID='" + pBK_TRANSMAIN_Info.AgentCatgID + "' AND BK_TRANSMAIN.BookingDate='" + pBK_TRANSMAIN_Info.BookingDate + "'");
                        break;
                }
                lstSQL.Add(strSQL);

                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return null;
                }
                return GetSingleBK_PASSENGERLIST(lstPassenger[0].TransID);
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        #endregion

        #region BookingTransactionTax
        public List<BookingTransactionTax> GetAllBK_TRANSTAX()
        {
            BookingTransactionTax objBK_TRANSTAX_Info;
            List<BookingTransactionTax> objListBK_TRANSTAX_Info = new List<BookingTransactionTax>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                strSQL = "SELECT * FROM BK_TRANSTAX ";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSTAX_Info = new BookingTransactionTax();
                        objBK_TRANSTAX_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSTAX_Info.TaxCode = (int)drRow["TaxCode"];
                        objBK_TRANSTAX_Info.TaxRate = (decimal)drRow["TaxRate"];
                        objBK_TRANSTAX_Info.TaxAmt = (decimal)drRow["TaxAmt"];
                        objBK_TRANSTAX_Info.TransVoid = (byte)drRow["TransVoid"];
                        objBK_TRANSTAX_Info.rowguid = (Guid)drRow["rowguid"];
                        objBK_TRANSTAX_Info.CreateBy = (string)drRow["CreateBy"];
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSTAX_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        objListBK_TRANSTAX_Info.Add(objBK_TRANSTAX_Info);
                    }
                    return objListBK_TRANSTAX_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSTAX does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public BookingTransactionTax GetSingleBK_TRANSTAX(
                string pTransID,
        int pTaxCode)
        {

            BookingTransactionTax objBK_TRANSTAX_Info;
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("BK_TRANSTAX.TransID");
                lstFields.Add("BK_TRANSTAX.TaxCode");
                lstFields.Add("BK_TRANSTAX.TaxRate");
                lstFields.Add("BK_TRANSTAX.TaxAmt");
                lstFields.Add("BK_TRANSTAX.TransVoid");
                lstFields.Add("BK_TRANSTAX.rowguid");
                lstFields.Add("BK_TRANSTAX.CreateBy");
                lstFields.Add("BK_TRANSTAX.SyncCreate");

                strFields = GetSqlFields(lstFields);
                strFilter = "AND BK_TRANSTAX.TaxCode='" + pTaxCode + "'";
                strSQL = "SELECT " + strFields + " FROM BK_TRANSTAX " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];

                    objBK_TRANSTAX_Info = new BookingTransactionTax();
                    objBK_TRANSTAX_Info.TransID = (string)drRow["TransID"];
                    objBK_TRANSTAX_Info.TaxCode = (int)drRow["TaxCode"];
                    objBK_TRANSTAX_Info.TaxRate = (decimal)drRow["TaxRate"];
                    objBK_TRANSTAX_Info.TaxAmt = (decimal)drRow["TaxAmt"];
                    objBK_TRANSTAX_Info.TransVoid = (byte)drRow["TransVoid"];
                    objBK_TRANSTAX_Info.rowguid = (Guid)drRow["rowguid"];
                    objBK_TRANSTAX_Info.CreateBy = (string)drRow["CreateBy"];
                    if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSTAX_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                    return objBK_TRANSTAX_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSTAX does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public BookingTransactionTax SaveBK_TRANSTAX(BookingTransactionTax pBK_TRANSTAX_Info, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                objSQL.AddField("TransID", pBK_TRANSTAX_Info.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TaxCode", pBK_TRANSTAX_Info.TaxCode, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TaxRate", pBK_TRANSTAX_Info.TaxRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TaxAmt", pBK_TRANSTAX_Info.TaxAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransVoid", pBK_TRANSTAX_Info.TransVoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CreateBy", pBK_TRANSTAX_Info.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", pBK_TRANSTAX_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                switch (saveType)
                {
                    case EnumSaveType.Insert:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSTAX", string.Empty);
                        break;
                    case EnumSaveType.Update:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSTAX", "BK_TRANSTAX.TransID='" + pBK_TRANSTAX_Info.TransID + "' AND BK_TRANSTAX.TaxCode='" + pBK_TRANSTAX_Info.TaxCode + "'");
                        break;
                }
                lstSQL.Add(strSQL);
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return null;
                }
                return GetSingleBK_TRANSTAX(pBK_TRANSTAX_Info.TransID, pBK_TRANSTAX_Info.TaxCode);
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        #endregion

        #region Report

        public SysReport GetSingleSYS_REPORT(string pRPTCode)
        {
            SysReport objSYS_REPORT_Info;
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("SYS_REPORT.APPID");
                lstFields.Add("SYS_REPORT.RPTCode");
                lstFields.Add("SYS_REPORT.RPTName");
                lstFields.Add("SYS_REPORT.RPTDesc");
                lstFields.Add("SYS_REPORT.RPTQuery");
                lstFields.Add("SYS_REPORT.RPTType");
                lstFields.Add("SYS_REPORT.RPTSection");
                lstFields.Add("SYS_RPTTYPE.TypeDesc");
                lstFields.Add("SYS_REPORT.rowguid");
                lstFields.Add("SYS_REPORT.SyncCreate");
                lstFields.Add("SYS_REPORT.SyncLastUpd");
                lstFields.Add("SYS_REPORT.IsHost");
                lstFields.Add("SYS_REPORT.LastSyncBy");

                strFields = GetSqlFields(lstFields);
                strFilter = "WHERE SYS_REPORT.RPTCode='" + pRPTCode + "'";
                strSQL = "SELECT " + strFields + " FROM SYS_REPORT " +
                "JOIN SYS_RPTTYPE (NOLOCK) ON SYS_REPORT.RPTType = SYS_RPTTYPE.RPTType " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];

                    objSYS_REPORT_Info = new SysReport();
                    objSYS_REPORT_Info.APPID = (int)drRow["APPID"];
                    objSYS_REPORT_Info.RPTCode = (string)drRow["RPTCode"];
                    objSYS_REPORT_Info.RPTName = (string)drRow["RPTName"];
                    objSYS_REPORT_Info.RPTDesc = (string)drRow["RPTDesc"];
                    objSYS_REPORT_Info.RPTQuery = (string)drRow["RPTQuery"];
                    objSYS_REPORT_Info.RPTTypeName = (string)drRow["TypeDesc"];
                    objSYS_REPORT_Info.RPTType = (byte)drRow["RPTType"];
                    objSYS_REPORT_Info.RPTSection = (byte)drRow["RPTSection"];
                    objSYS_REPORT_Info.rowguid = (Guid)drRow["rowguid"];
                    if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objSYS_REPORT_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                    if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objSYS_REPORT_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                    objSYS_REPORT_Info.IsHost = (byte)drRow["IsHost"];
                    objSYS_REPORT_Info.LastSyncBy = (byte)drRow["LastSyncBy"];
                    return objSYS_REPORT_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("SYS_REPORT does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<SysReportField> GetAllSYS_RPTFIELD(string RptCode)
        {
            SysReportField objSYS_RPTFIELD_Info;
            List<SysReportField> objListSYS_RPTFIELD_Info = new List<SysReportField>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                strSQL = "SELECT * FROM SYS_RPTFIELD WHERE RPTCode='" + RptCode + "'";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objSYS_RPTFIELD_Info = new SysReportField();
                        objSYS_RPTFIELD_Info.APPID = (int)drRow["APPID"];
                        objSYS_RPTFIELD_Info.RPTCode = (string)drRow["RPTCode"];
                        objSYS_RPTFIELD_Info.RptDBField = (string)drRow["RptDBField"];
                        objSYS_RPTFIELD_Info.RPTField = (string)drRow["RPTField"];
                        objSYS_RPTFIELD_Info.FieldType = (byte)drRow["FieldType"];
                        objSYS_RPTFIELD_Info.FieldDef = (string)drRow["FieldDef"];
                        objSYS_RPTFIELD_Info.FieldAttb = (string)drRow["FieldAttb"];
                        objSYS_RPTFIELD_Info.rowguid = (Guid)drRow["rowguid"];
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objSYS_RPTFIELD_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objSYS_RPTFIELD_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objSYS_RPTFIELD_Info.IsHost = (byte)drRow["IsHost"];
                        objSYS_RPTFIELD_Info.LastSyncBy = (byte)drRow["LastSyncBy"];
                        objListSYS_RPTFIELD_Info.Add(objSYS_RPTFIELD_Info);
                    }
                    return objListSYS_RPTFIELD_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("SYS_RPTFIELD does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllSYS_REPORT()
        {
            SysReport objSYS_REPORT_Info;
            List<SysReport> objListSYS_REPORT_Info = new List<SysReport>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                strSQL = "SELECT RptCode,RptName FROM SYS_REPORT";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("SYS_REPORT does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        //20170522 - Sienny (get reportlist by userrole)
        public DataTable GetSYS_REPORTByRole(string UserRole_Name)
        {
            SysReport objSYS_REPORT_Info;
            List<SysReport> objListSYS_REPORT_Info = new List<SysReport>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                strSQL = "SELECT RptCode, RptName FROM SYS_REPORT " +
                    "WHERE RPTCode IN (SELECT value FROM UserRole r CROSS APPLY dbo.fn_split(UserRole_ReportAuthorize,',') WHERE UserRole_Name='" + UserRole_Name + "')";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("SYS_REPORT does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllPerformanceSummary()
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                strSQL = "SELECT RecordLocator, AgentID, AgentName, TransTotalPax, CarrierCode, FirstSector, BookingDate, STDDate, DateDiff, TransTotalFee, " +
                    "TransTotalAmt,Currency FROM GBS_PerformanceSummary";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllCancellationSummary()
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                strSQL = "SELECT TOP (200) RecordLocator, AgentID, AgentName, TransTotalPax, CarrierCode, FirstSector," +
                          "BookingDate, STDDate, CancelDate, DateDiff, TransTotalAmt, CollectedAmt, " +
                           "TotalWOForfeited, Currency FROM GBS_CancellationSummary";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllBalanceOverdueSummary()
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                strSQL = "SELECT RecordLocator, AgentID, AgentName, TransTotalPax, CarrierCode, FirstSector, BookingDate, STDDate, " +
                "DateDiff, TransTotalAmt, CollectedAmt, BalanceDue, Currency FROM GBS_BalanceOverdueSummary";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetReportData(string ReportCode, DataTable Filter)
        {
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            SysReport SqlSystem = new SysReport();
            String strSQL = string.Empty;
            String strfilter = string.Empty;
            String strFields = string.Empty;
            List<string> lstFields = new List<string>();
            SqlSystem = GetSingleSYS_REPORT(ReportCode);

            try
            {
                if (Filter != null && Filter.Rows.Count > 0)
                {
                    foreach (DataRow drtemp in Filter.Rows)
                    {
                        if (drtemp["Value"].ToString() != "" && drtemp["Value"].ToString() != "0")
                        {
                            if (drtemp["FieldType"].ToString() == "0")
                            {
                                lstFields.Add(drtemp["Key"].ToString() + "='" + drtemp["Value"].ToString() + "'");
                            }

                            else if (drtemp["FieldType"].ToString() == "1")
                            {
                                String[] arr = drtemp["Value"].ToString().Split('-');
                                //lstFields.Add("('" + arr[0] + "'<= " + drtemp["Key"].ToString() + " AND DATEADD(d,1,'" + arr[1] + "') >= " + drtemp["Key"].ToString() + ")");
                                lstFields.Add("(CONVERT(datetime,'" + arr[0] + "',103)<= " + drtemp["Key"].ToString() + " AND DATEADD(d,1,CONVERT(datetime,'" + arr[1] + "',103)) >= " + drtemp["Key"].ToString() + ")");   //20170526 - Change format date to dd/mm/yyyy
                            }

                            else if (drtemp["FieldType"].ToString() == "2")
                            {
                                lstFields.Add("DATEADD(d,1,'" + drtemp["Value"].ToString() + "')");
                            }

                            else if (drtemp["FieldType"].ToString() == "3")
                            {
                                if (drtemp["Value"].ToString() != "ALL")
                                {
                                    String[] arr = drtemp["Value"].ToString().Split(',');
                                    lstFields.Add("(" + drtemp["Key"].ToString() + " in ('" + String.Join("','", arr) + "'))");
                                }

                            }

                            else if (drtemp["FieldType"].ToString() == "4")
                            {
                                String[] arr = drtemp["Value"].ToString().Split('-');
                                lstFields.Add("('" + arr[0] + "'<= " + drtemp["Key"].ToString() + " AND '" + arr[1] + "' >= " + drtemp["Key"].ToString() + ")");
                            }


                        }
                    }
                }
                //foreach (DictionaryEntry Item in Filter)
                //{
                //    if (Item.Value != "" && Item.Value != "0")
                //    {
                //        if (Item.Value.ToString().IndexOf(' ') > -1)
                //        {
                //            String[] arr = Item.Value.ToString().Split(' ');
                //            lstFields.Add("(" + Item.Key.ToString() + " in ('" + String.Join("','", arr) + "'))");
                //        }
                //        else if (Item.Value.ToString().IndexOf('-') > -1)
                //        {
                //            String[] arr = Item.Value.ToString().Split('-');
                //            lstFields.Add("('" + arr[0] + "'<= " + Item.Key.ToString() + " AND DATEADD(d,1,'" + arr[1] + "') >= " + Item.Key.ToString() + ")");
                //        }
                //        else if (Item.Value.ToString().IndexOf('+') > -1)
                //        {
                //            String[] arr = Item.Value.ToString().Split('+');
                //            lstFields.Add("('" + arr[0] + "'<= " + Item.Key.ToString() + " AND '" + arr[1] + "' >= " + Item.Key.ToString() + ")");
                //        }
                //        else
                //        {
                //            if (Item.Value != "ALL")
                //                lstFields.Add(Item.Key.ToString() + "='" + Item.Value + "'");
                //        }
                //    }
                //}

                strFields = GetFilterFields(lstFields);
                //strSQL = SqlSystem.RPTQuery + strfilter + strFields;
                //edited by diana 20130820

                if (SqlSystem.RPTQuery.Contains("RecordLocator"))
                {
                    strSQL = SqlSystem.RPTQuery.Replace("RecordLocator", "Replace(RecordLocator,',',', ') as [Record Locator]");
                }
                else if (SqlSystem.RPTQuery.Contains("[Record Locator]"))
                {
                    //strSQL = strSQL.Replace("[Record Locator]", "Replace([Record Locator],',',', ') as [Record Locator]");
                    strSQL = SqlSystem.RPTQuery.Replace("[Record Locator]", "Replace([Record Locator],',',', ') as [Record Locator]");
                }
                else
                {
                    strSQL = SqlSystem.RPTQuery;
                }

                if (strSQL.Contains("ORDER BY"))
                {
                    string[] comb = strSQL.Split(new string[] { "ORDER BY" }, StringSplitOptions.None);
                    strSQL = comb[0] + " " + strfilter + strFields + " ORDER BY " + comb[1];
                }
                else
                {
                    strSQL = strSQL + strfilter + strFields;
                }


                //if (strSQL.Contains("ORDER BY"))
                //{
                //    string front = 
                //}
                objDCom.TimeOutCommand = 600;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("Report Data does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        #endregion

        #region BookingTransTender

        public List<BookingTransTender> GetAllBK_TRANSTENDERFilter(string TransID, string filterTransVoid = "")
        {
            BookingTransTender objBK_TRANSTENDER_Info;
            List<BookingTransTender> objListBK_TRANSTENDER_Info = new List<BookingTransTender>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                //ongoing, checking for TransVoid=0 is needed or not
                strSQL = "SELECT BK_TRANSTENDER.TransID, BK_TRANSTENDER.SeqNo, BK_TRANSTENDER.TransDate, BK_TRANSTENDER.Currency,TenderDesc, CurrencyPaid, BK_TRANSTENDER.TenderID, BK_TRANSTENDER.FeeType, ISNULL(CODEMASTER.CodeDesc,'') AS FeeTypeDesc, BK_TRANSTENDER.TenderAmt, BK_TRANSTENDER.ExchgRate, BK_TRANSTENDER.TenderDue, BK_TRANSTENDER.FeeAmt, BK_TRANSTENDER.PayAmt, BK_TRANSTENDER.RefNo, BK_TRANSTENDER.AuthorizationCode, BK_TRANSTENDER.MerchantID, BK_TRANSTENDER.TransVoid, BK_TRANSTENDER.CreateBy, BK_TRANSTENDER.SyncCreate, BK_TRANSTENDER.RecordLocator FROM BK_TRANSTENDER " +
                " JOIN BK_TENDER (NOLOCK) on BK_TENDER.TenderID=BK_TRANSTENDER.TenderID LEFT OUTER JOIN CODEMASTER ON BK_TRANSTENDER.FeeType=CODEMASTER.Code AND CODEMASTER.CodeType='CCD' WHERE " + filterTransVoid + " TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND LEN(RecordLocator)>=6 ORDER BY BK_TRANSTENDER.RecordLocator, SeqNo";

                //strSQL = "SELECT TransID, SeqNo, TransDate, Currency,TenderDesc, CurrencyPaid, BK_TRANSTENDER.TenderID, TenderAmt, ExchgRate, TenderDue, RefNo, AuthorizationCode, MerchantID, BK_TRANSTENDER.TransVoid, BK_TRANSTENDER.CreateBy, BK_TRANSTENDER.SyncCreate, BK_TRANSTENDER.RecordLocator FROM BK_TRANSTENDER " +
                //" JOIN BK_TENDER (NOLOCK) on BK_TENDER.TenderID=BK_TRANSTENDER.TenderID WHERE BK_TRANSTENDER.TransVoid=0 AND TransID='" + TransID + "' ORDER BY BK_TRANSTENDER.RecordLocator, SeqNo";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSTENDER_Info = new BookingTransTender();
                        objBK_TRANSTENDER_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSTENDER_Info.SeqNo = (int)drRow["SeqNo"];
                        if (DateTime.TryParse(drRow["TransDate"].ToString(), out dateValue)) objBK_TRANSTENDER_Info.TransDate = (DateTime)drRow["TransDate"];
                        objBK_TRANSTENDER_Info.Currency = (string)drRow["Currency"];
                        objBK_TRANSTENDER_Info.CurrencyPaid = (string)drRow["CurrencyPaid"];
                        objBK_TRANSTENDER_Info.TenderID = (string)drRow["TenderID"];
                        objBK_TRANSTENDER_Info.FeeType = (string)drRow["FeeType"];
                        objBK_TRANSTENDER_Info.FeeTypeDesc = (string)drRow["FeeTypeDesc"];
                        objBK_TRANSTENDER_Info.TenderDesc = (string)drRow["TenderDesc"];
                        objBK_TRANSTENDER_Info.TenderAmt = (decimal)drRow["TenderAmt"];
                        objBK_TRANSTENDER_Info.ExchgRate = (decimal)drRow["ExchgRate"];
                        objBK_TRANSTENDER_Info.TenderDue = (decimal)drRow["TenderDue"];
                        objBK_TRANSTENDER_Info.FeeAmt = (decimal)drRow["FeeAmt"];
                        objBK_TRANSTENDER_Info.PayAmt = (decimal)drRow["PayAmt"];
                        objBK_TRANSTENDER_Info.RefNo = (string)drRow["RefNo"];
                        objBK_TRANSTENDER_Info.AuthorizationCode = (string)drRow["AuthorizationCode"];
                        objBK_TRANSTENDER_Info.MerchantID = (string)drRow["MerchantID"];
                        objBK_TRANSTENDER_Info.Transvoid = (byte)drRow["TransVoid"];
                        objBK_TRANSTENDER_Info.CreateBy = (string)drRow["CreateBy"];
                        //added by ketee, 20121028
                        objBK_TRANSTENDER_Info.RecordLocator = (string)drRow["RecordLocator"];
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSTENDER_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        objListBK_TRANSTENDER_Info.Add(objBK_TRANSTENDER_Info);
                    }
                    return objListBK_TRANSTENDER_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSTENDER does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<BookingTransTender> GetAllBK_TRANSTENDER()
        {
            BookingTransTender objBookingTransTender;
            List<BookingTransTender> objListBookingTransTender = new List<BookingTransTender>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                strSQL = "SELECT * FROM BK_TRANSTENDER ";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransTender = new BookingTransTender();
                        objBookingTransTender.TransID = (string)drRow["TransID"];
                        objBookingTransTender.SeqNo = (int)drRow["SeqNo"];
                        if (DateTime.TryParse(drRow["TransDate"].ToString(), out dateValue)) objBookingTransTender.TransDate = (DateTime)drRow["TransDate"];
                        objBookingTransTender.Currency = (string)drRow["Currency"];
                        objBookingTransTender.CurrencyPaid = (string)drRow["CurrencyPaid"];
                        objBookingTransTender.TenderID = (string)drRow["TenderID"];
                        objBookingTransTender.FeeType = (string)drRow["FeeType"];
                        objBookingTransTender.TenderAmt = (decimal)drRow["TenderAmt"];
                        objBookingTransTender.ExchgRate = (decimal)drRow["ExchgRate"];
                        objBookingTransTender.TenderDue = (decimal)drRow["TenderDue"];
                        objBookingTransTender.FeeAmt = (decimal)drRow["FeeAmt"];
                        objBookingTransTender.PayAmt = (decimal)drRow["PayAmt"];
                        objBookingTransTender.RefNo = (string)drRow["RefNo"];
                        objBookingTransTender.AuthorizationCode = (string)drRow["AuthorizationCode"];
                        objBookingTransTender.MerchantID = (string)drRow["MerchantID"];
                        objBookingTransTender.Transvoid = (byte)drRow["Transvoid"];
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTransTender.SyncCreate = (DateTime)drRow["SyncCreate"];
                        objBookingTransTender.CreateBy = (string)drRow["CreateBy"];

                        objListBookingTransTender.Add(objBookingTransTender);

                    }
                    return objListBookingTransTender;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSTENDER does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public BookingTransTender GetSingleBK_TRANSTENDER(string TransID, int SeqNo)
        {
            BookingTransTender objBookingTransTender;
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("BK_TRANSTENDER.TransID");
                lstFields.Add("BK_TRANSTENDER.SeqNo");
                lstFields.Add("BK_TRANSTENDER.TransDate");
                lstFields.Add("BK_TRANSTENDER.Currency");
                lstFields.Add("BK_TRANSTENDER.TenderID");
                lstFields.Add("BK_TRANSTENDER.FeeType");
                lstFields.Add("BK_TRANSTENDER.TenderAmt");
                lstFields.Add("BK_TRANSTENDER.ExchgRate");
                lstFields.Add("BK_TRANSTENDER.TenderDue");
                lstFields.Add("BK_TRANSTENDER.FeeAmt");
                lstFields.Add("BK_TRANSTENDER.PayAmt");
                lstFields.Add("BK_TRANSTENDER.Transvoid");
                lstFields.Add("BK_TRANSTENDER.SyncCreate");
                lstFields.Add("BK_TRANSTENDER.RefNo");
                lstFields.Add("BK_TRANSTENDER.AuthorizationCode");
                lstFields.Add("BK_TRANSTENDER.MerchantID");
                lstFields.Add("BK_TRANSTENDER.CurrencyPaid");
                lstFields.Add("BK_TRANSTENDER.CreateBy");
                //added by ketee, 
                lstFields.Add("BK_TRANSTENDER.RecordLocator");

                strFields = GetSqlFields(lstFields);
                strFilter = " WHERE BK_TRANSTENDER.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND BK_TRANSTENDER.SeqNo='" + SeqNo + "'";
                strSQL = "SELECT " + strFields + " FROM BK_TRANSTENDER " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];

                    objBookingTransTender = new BookingTransTender();
                    objBookingTransTender.TransID = (string)drRow["TransID"];
                    objBookingTransTender.SeqNo = (int)drRow["SeqNo"];
                    if (DateTime.TryParse(drRow["TransDate"].ToString(), out dateValue)) objBookingTransTender.TransDate = (DateTime)drRow["TransDate"];
                    objBookingTransTender.Currency = (string)drRow["Currency"];
                    objBookingTransTender.CurrencyPaid = (string)drRow["CurrencyPaid"];
                    objBookingTransTender.TenderID = (string)drRow["TenderID"];
                    objBookingTransTender.FeeType = (string)drRow["FeeType"];
                    objBookingTransTender.TenderAmt = (decimal)drRow["TenderAmt"];
                    objBookingTransTender.ExchgRate = (decimal)drRow["ExchgRate"];
                    objBookingTransTender.TenderDue = (decimal)drRow["TenderDue"];
                    objBookingTransTender.FeeAmt = (decimal)drRow["FeeAmt"];
                    objBookingTransTender.PayAmt = (decimal)drRow["PayAmt"];
                    objBookingTransTender.Transvoid = (byte)drRow["Transvoid"];
                    objBookingTransTender.RefNo = (string)drRow["RefNo"];
                    objBookingTransTender.AuthorizationCode = (string)drRow["AuthorizationCode"];
                    objBookingTransTender.MerchantID = (string)drRow["MerchantID"];
                    if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTransTender.SyncCreate = (DateTime)drRow["SyncCreate"];
                    objBookingTransTender.CreateBy = (string)drRow["CreateBy"];
                    //added by ketee, 20121028
                    objBookingTransTender.RecordLocator = (string)drRow["RecordLocator"];

                    return objBookingTransTender;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSTENDER does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public BookingTransTender SaveBK_TRANSTENDER(BookingTransTender pBookingTransTender, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                objSQL.AddField("TransID", pBookingTransTender.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SeqNo", pBookingTransTender.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransDate", pBookingTransTender.TransDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Currency", pBookingTransTender.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CurrencyPaid", pBookingTransTender.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TenderID", pBookingTransTender.TenderID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("FeeType", pBookingTransTender.FeeType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TenderAmt", pBookingTransTender.TenderAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ExchgRate", pBookingTransTender.ExchgRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TenderDue", pBookingTransTender.TenderDue, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("FeeAmt", pBookingTransTender.FeeAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PayAmt", pBookingTransTender.PayAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Transvoid", pBookingTransTender.Transvoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", pBookingTransTender.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("RefNo", pBookingTransTender.RefNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AuthorizationCode", pBookingTransTender.AuthorizationCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("MerchantID", pBookingTransTender.MerchantID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CreateBy", pBookingTransTender.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                //added by ketee, 20121028
                objSQL.AddField("RecordLocator", pBookingTransTender.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                switch (saveType)
                {
                    case EnumSaveType.Insert:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSTENDER", string.Empty);
                        break;
                    case EnumSaveType.Update:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSTENDER", "BK_TRANSTENDER.TransID='" + pBookingTransTender.TransID + "' and BK_TRANSTENDER.SeqNo='" + pBookingTransTender.SeqNo + "'");
                        break;
                }
                lstSQL.Add(strSQL);
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return null;
                }
                return GetSingleBK_TRANSTENDER(pBookingTransTender.TransID, pBookingTransTender.SeqNo);
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public string getTenderIDbyDesc(string Description)
        {
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            try
            {
                //if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                //{
                //StartSQLControl();

                strSQL = "SELECT TenderID FROM BK_TENDER WHERE TenderDesc = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, Description) + "'";
                dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                if (dt.Rows.Count > 0)
                {
                    return dt.Rows[0]["TenderID"].ToString();
                }
                else
                {
                    //added by ketee, if tender id not found insert new
                    int iTenderID;
                    BookingTender bkTender = new BookingTender();
                    strSQL = "SELECT TenderID FROM BK_TENDER ORDER BY CAST(TenderID AS int) DESC";
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        iTenderID = Convert.ToInt16(dt.Rows[0]["TenderID"].ToString()) + 1;
                        bkTender.TenderID = iTenderID.ToString();
                        bkTender.TenderType = 1;
                        bkTender.TenderDesc = Description;
                        bkTender.Active = 1;
                        bkTender.Flag = 1;
                        bkTender.LastSyncBy = "System";

                        bkTender = SaveBK_TENDER(bkTender, EnumSaveType.Insert);

                        if (bkTender != null)
                        {
                            return bkTender.TenderID.ToString();
                        }
                    }

                    log.Warning(this, "Tender ID [" + Description + "]");
                    return " ";
                }
                //}
                //return "";
            }
            catch (Exception ex)
            {
                return "";
            }

        }

        public int getSeqByTransID(string TransID, string PNR)
        {
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    strSQL = "SELECT COUNT(TenderID) AS Total FROM BK_TRANSTENDER WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "' ";
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        return Convert.ToInt16(dt.Rows[0]["Total"]) + 1;
                    }
                    else
                    {
                        return 1;
                    }
                }
                return 1;
            }
            catch (Exception ex)
            {
                return 1;
            }

        }

        #endregion

        public Boolean IsReturn(string TransID, int TransVoid = 0)
        {
            DataTable dt;
            String strSQL = string.Empty;

            string str = "";

            if (TransVoid <= 1)
            {
                str = " AND TransVoid=" + TransVoid;
            }

            try
            {
                string strfilter = "";
                strfilter = " WHERE BK_TRANSDTL.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'" + str;

                strSQL = "SELECT TOP 2 * FROM BK_TRANSDTL" + strfilter + " ORDER BY SEQNO";
                dt = objDCom.Execute(strSQL, CommandType.Text, true);
                if (dt != null && dt.Rows.Count > 0)
                {
                    if (dt.Rows.Count > 1)
                    {
                        //Same RecordLocator => RETURN
                        //Different RecordLocator => ONE WAY
                        //1 Record => ONE WAY
                        if (dt.Rows[0]["RecordLocator"].ToString() == dt.Rows[1]["RecordLocator"].ToString())
                        {
                            return true;
                        }
                        else return false;
                    }
                    else return false;

                }
                else
                {
                    return false;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public List<BookingTransactionDetail> GetAllBK_TRANSDTLFareBreakdown(string TransID, int TransVoid = 0)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            String strSQL = string.Empty;

            string str = "";

            if (TransVoid <= 1)
            {
                str = " AND TransVoid=" + TransVoid;
            }

            try
            {
                string strfilter = "";
                strfilter = " WHERE BK_TRANSDTL.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'" + str;

                /*
                Fuel Tax = LineCharge
                Service Charge = LineFee
                VAT Tax = LineVAT
                Seat Charge = LineSeat
                Processing Fee = LineProcess
                Other Charge = LineOth + LineGST + LineKlia2
                FarePerPax = (LnTotal - semua field lain) / (PaxAdult + PaxChild)
                 */
                //strSQL = "SELECT MAX(TransID) AS TransID, count(recordlocator) as RecordLocator, count(seqno) as SeqNo, max(currency) as Currency, sum(fareperpax) as FarePerPax, sum(paxadult) as PaxAdult, sum(paxchild) as PaxChild, (sum(fareperpax) * sum(PaxAdult + PaxChild)) as FareAmount, sum(lineinfant) as LineInfant, sum(linetax) as LineTax, sum(linecharge) as LineCharge, sum(linefee) as LineFee, sum(linevat) as LineVat, sum(lineprocess) as LineProcess, sum(linessr) as LineSSR, sum (lineseat) as LineSeat, (sum(lineoth) + sum(linegst) + sum(lineklia2)) as LineOth, sum(linedisc) as LineDisc, sum(linepromodisc) as LinePromoDisc, sum(linetotal) as LineTotal FROM BK_TRANSDTL " + strfilter + "GROUP BY TransID, Origin ORDER BY TransID ";

                //DEPART
                //strSQL = "SELECT TransID, Currency, PNR, sum(FarePerPaxDepart) FarePerPax, sum(PaxAdultDepart) PaxAdult, sum(PaxChildDepart) PaxChild, sum(FareAmountDepart) FareAmount, sum(LineInfantDepart) LineInfant, sum(AptDepart) Apt, sum(LineTaxDepart) LineTax, SUM(LinePaxFeeDepart) LinePaxFee, sum(LineChargeDepart) LineCharge, sum(LineFeeDepart) LineFee, sum(LineVatDepart) LineVat, sum(LineProcessDepart) LineProcess, sum(LineSSRDepart) LineSSR, sum(LineSeatDepart) LineSeat, sum(LineNameChangeDepart) LineNameChange, sum(lnOthDepart) lnOth, sum(lnGSTDepart) lnGST, sum(lnKlia2Depart) lnKlia2, sum(LineOthDepart) LineOth, sum(LineDiscDepart) LineDisc, sum(LinePromoDiscDepart) LinePromoDisc, sum(LineTotalDepart) LineTotal, sum(DepartMeal) PriceMeal, sum(DepartBaggage) PriceBaggage, sum(DepartSportEquipment) PriceSport, sum(DepartComfortKit) PriceComfort, sum(DepartDutyFree) PriceDuty, sum(ConDepartMeal) PriceConMeal, sum(ConDepartBaggage) PriceConBaggage, sum(ConDepartSportEquipment) PriceConSport, sum(ConDepartInsureEquipment) PriceConInsure, sum(ConDepartComfortKit) PriceConComfort, sum(ConDepartDutyFree) PriceConDutyFree ";
                strSQL = "SELECT TransID, Currency, PNR, sum(FarePerPaxDepart) FarePerPax, sum(PaxAdultDepart) PaxAdult, sum(PaxChildDepart) PaxChild, sum(FareAmountDepart) FareAmount, sum(LineInfantDepart) LineInfant, sum(AptDepart) Apt, sum(LineTaxDepart) LineTax, SUM(LinePaxFeeDepart) LinePaxFee, sum(LineChargeDepart) LineCharge, sum(LineFeeDepart) LineFee, sum(LineVatDepart) LineVat, sum(LineProcessDepart) LineProcess, sum(LineSSRDepart) LineSSR, sum(LineSeatDepart) LineSeat, sum(LineNameChangeDepart) LineNameChange, sum(lnOthDepart) lnOth, sum(lnGSTDepart) lnGST, sum(lnKlia2Depart) lnKlia2, sum(LineOthDepart) LineOth, sum(LineDiscDepart) LineDisc, sum(LinePromoDiscDepart) LinePromoDisc, sum(LineTotalDepart) LineTotal, sum(DepartMeal) PriceMeal, sum(DepartBaggage) PriceBaggage, sum(DepartSportEquipment) PriceSport, sum(DepartInsureEquipment) PriceInsure, sum(DepartComfortKit) PriceComfort, sum(DepartDutyFree) PriceDuty, sum(ConDepartMeal) PriceConMeal, sum(ConDepartBaggage) PriceConBaggage, sum(ConDepartSportEquipment) PriceConSport, sum(ConDepartInsureEquipment) PriceConInsure, sum(ConDepartComfortKit) PriceConComfort, sum(ConDepartDutyFree) PriceConDutyFree ";//edited by romy, 20170814, insurance
                strSQL += "FROM ( ";
                //strSQL += "  SELECT sum(BK_TRANSDTL.fareperpax) as FarePerPaxDepart, sum(BK_TRANSDTL.paxadult) as PaxAdultDepart, sum(BK_TRANSDTL.paxchild) as PaxChildDepart, (sum(BK_TRANSDTL.fareperpax) * sum(BK_TRANSDTL.PaxAdult + BK_TRANSDTL.PaxChild)) as FareAmountDepart, sum(BK_TRANSDTL.lineinfant) as LineInfantDepart, (sum(BK_TRANSDTL.linetax)/(sum(BK_TRANSDTL.paxadult + BK_TRANSDTL.paxchild))) as AptDepart, sum(BK_TRANSDTL.linetax) as LineTaxDepart, SUM(BK_TRANSDTL.LinePaxFee) as LinePaxFeeDepart, sum(BK_TRANSDTL.linecharge) as LineChargeDepart, sum(BK_TRANSDTL.linefee) as LineFeeDepart, sum(BK_TRANSDTL.linevat) as LineVatDepart, sum(BK_TRANSDTL.lineprocess) as LineProcessDepart, sum(BK_TRANSDTL.linessr) as LineSSRDepart, sum(BK_TRANSDTL.lineseat) as LineSeatDepart, sum(BK_TRANSDTL.LineNameChange) as LineNameChangeDepart, sum(BK_TRANSDTL.lineoth) as lnOthDepart, sum(BK_TRANSDTL.linegst) as lnGSTDepart, sum(BK_TRANSDTL.lineklia2) as lnKlia2Depart, (sum(BK_TRANSDTL.lineoth) + sum(BK_TRANSDTL.linegst) + sum(BK_TRANSDTL.lineklia2)) as LineOthDepart, sum(BK_TRANSDTL.linedisc) as LineDiscDepart, sum(BK_TRANSDTL.linepromodisc) as LinePromoDiscDepart, (sum(BK_TRANSDTL.linetotal)) as LineTotalDepart, BK_TRANSDTL.TransID, BK_TRANSDTL.RecordLocator AS PNR, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_TRANSDTL.SellKey AS SessionID, BK_TRANSDTL.Currency, x.[Meal][DepartMeal],x.[Baggage][DepartBaggage],x.[Sport Equipment][DepartSportEquipment],x.[Comfort Kit][DepartComfortKit],x.[Duty Free][DepartDutyFree], xx.[Meal][ConDepartMeal],xx.[Baggage][ConDepartBaggage],xx.[Sport Equipment][ConDepartSportEquipment],xx.[Comfort Kit][ConDepartComfortKit],xx.[Duty Free][ConDepartDutyFree] ";
                strSQL += "  SELECT sum(BK_TRANSDTL.fareperpax) as FarePerPaxDepart, sum(BK_TRANSDTL.paxadult) as PaxAdultDepart, sum(BK_TRANSDTL.paxchild) as PaxChildDepart, (sum(BK_TRANSDTL.fareperpax) * sum(BK_TRANSDTL.PaxAdult + BK_TRANSDTL.PaxChild)) as FareAmountDepart, sum(BK_TRANSDTL.lineinfant) as LineInfantDepart, (sum(BK_TRANSDTL.linetax)/(sum(BK_TRANSDTL.paxadult + BK_TRANSDTL.paxchild))) as AptDepart, sum(BK_TRANSDTL.linetax) as LineTaxDepart, SUM(BK_TRANSDTL.LinePaxFee) as LinePaxFeeDepart, sum(BK_TRANSDTL.linecharge) as LineChargeDepart, sum(BK_TRANSDTL.linefee) as LineFeeDepart, sum(BK_TRANSDTL.linevat) as LineVatDepart, sum(BK_TRANSDTL.lineprocess) as LineProcessDepart, sum(BK_TRANSDTL.linessr) as LineSSRDepart, sum(BK_TRANSDTL.lineseat) as LineSeatDepart, sum(BK_TRANSDTL.LineNameChange) as LineNameChangeDepart, sum(BK_TRANSDTL.lineoth) as lnOthDepart, sum(BK_TRANSDTL.linegst) as lnGSTDepart, sum(BK_TRANSDTL.lineklia2) as lnKlia2Depart, (sum(BK_TRANSDTL.lineoth) + sum(BK_TRANSDTL.linegst) + sum(BK_TRANSDTL.lineklia2)) as LineOthDepart, sum(BK_TRANSDTL.linedisc) as LineDiscDepart, sum(BK_TRANSDTL.linepromodisc) as LinePromoDiscDepart, (sum(BK_TRANSDTL.linetotal)) as LineTotalDepart, BK_TRANSDTL.TransID, BK_TRANSDTL.RecordLocator AS PNR, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_TRANSDTL.SellKey AS SessionID, BK_TRANSDTL.Currency, x.[Meal][DepartMeal],x.[Baggage][DepartBaggage],x.[Sport Equipment][DepartSportEquipment],x.[Insure Equipment][DepartInsureEquipment],x.[Comfort Kit][DepartComfortKit],x.[Duty Free][DepartDutyFree], xx.[Meal][ConDepartMeal],xx.[Baggage][ConDepartBaggage],xx.[Sport Equipment][ConDepartSportEquipment],xx.[Comfort Kit][ConDepartComfortKit],xx.[Duty Free][ConDepartDutyFree] ";//edited by romy, 20170814, insurance
                strSQL += "  FROM BK_TRANSDTL ";
                strSQL += "  OUTER APPLY ( ";
                strSQL += "    select * from ( ";
                strSQL += "      select c.CatgDesc, (s.SSRRate) SSRDetail ";
                strSQL += "      from BK_TRANSMAIN h with(nolock) ";
                strSQL += "      left join BK_TRANSSSR s with(nolock) on h.TransID = s.TransID ";
                strSQL += "      inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode ";
                strSQL += "      inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode ";
                strSQL += "      where h.transid = BK_TRANSDTL.TransID and s.Origin = BK_TRANSDTL.Origin and s.Destination = case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Destination else BK_TRANSDTL.Transit end and BK_TRANSDTL.SeqNo % 2 = 1 ";
                //strSQL += "    ) a pivot (sum(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b ";
                strSQL += "    ) a pivot (sum(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Insure Equipment],[Comfort Kit],[Duty Free])) b ";//edited by romy, 20170814, insurance
                strSQL += "  ) x ";
                strSQL += "  OUTER APPLY ( ";
                strSQL += "    select * from ( ";
                strSQL += "      select c.CatgDesc, (s.SSRRate) SSRDetail from  BK_TRANSMAIN h with(nolock) ";
                strSQL += "      left join BK_TRANSSSR s with(nolock) on h.TransID = s.TransID ";
                strSQL += "      inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode ";
                strSQL += "      inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode ";
                strSQL += "      where h.transid = BK_TRANSDTL.TransID and s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 1 ";
                //strSQL += "    ) a pivot (sum(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b ";
                strSQL += "    ) a pivot (sum(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Insure Equipment],[Comfort Kit],[Duty Free])) b ";//edited by romy, 20170814, insurance
                strSQL += "  ) xx ";
                strSQL += strfilter + " AND LEN(BK_TRANSDTL.RecordLocator)>=6 AND BK_TRANSDTL.SeqNo % 2 = 1 ";
                //strSQL += "  GROUP BY BK_TRANSDTL.TransID, BK_TRANSDTL.RecordLocator, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_TRANSDTL.SellKey, BK_TRANSDTL.Currency, x.[Meal], x.[Baggage], x.[Sport Equipment], x.[Comfort Kit], x.[Duty Free], xx.[Meal], xx.[Baggage], xx.[Sport Equipment], xx.[Comfort Kit], xx.[Duty Free] ";
                strSQL += "  GROUP BY BK_TRANSDTL.TransID, BK_TRANSDTL.RecordLocator, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_TRANSDTL.SellKey, BK_TRANSDTL.Currency, x.[Meal], x.[Baggage], x.[Sport Equipment], x.[Insure Equipment],x.[Comfort Kit], x.[Duty Free], xx.[Meal], xx.[Baggage], xx.[Sport Equipment],xx.[Insure Equipment], xx.[Comfort Kit], xx.[Duty Free] ";//edited by romy, 20170814, insurance
                strSQL += ") s ";
                strSQL += "GROUP BY FlightNo, CarrierCode, Origin, Destination, TransID, PNR, SessionID, Currency ";
                strSQL += "UNION ";
                //RETURN
                //strSQL += "SELECT TransID, Currency, PNR, sum(FarePerPaxReturn) FarePerPax, sum(PaxAdultReturn) PaxAdult, sum(PaxChildReturn) PaxChild, sum(FareAmountReturn) FareAmount, sum(LineInfantReturn) LineInfant, sum(AptReturn) Apt, sum(LineTaxReturn) LineTax, SUM(LinePaxFeeReturn) LinePaxFee, sum(LineChargeReturn) LineCharge, sum(LineFeeReturn) LineFee, sum(LineVatReturn) LineVat, sum(LineProcessReturn) LineProcess, sum(LineSSRReturn) LineSSR, sum(LineSeatReturn) LineSeat, sum(LineNameChangeReturn) LineNameChange, sum(lnOthReturn) lnOth, sum(lnGSTReturn) lnGST, sum(lnKlia2Return) lnKlia2, sum(LineOthReturn) LineOth, sum(LineDiscReturn) LineDisc, sum(LinePromoDiscReturn) LinePromoDisc, sum(LineTotalReturn) LineTotal, sum(ReturnMeal) PriceMeal, sum(ReturnBaggage) PriceBaggage, sum(ReturnSportEquipment) PriceSport,sum(ReturnComfortKit) PriceComfort, sum(ReturnDutyFree) PriceDuty, sum(ConReturnMeal) PriceConMeal, sum(ConReturnBaggage) PriceConBaggage, sum(ConReturnSportEquipment) PriceConSport, sum(ConReturnComfortKit) PriceConComfort, sum(ConReturnDutyFree) PriceConDutyFree ";
                strSQL += "SELECT TransID, Currency, PNR, sum(FarePerPaxReturn) FarePerPax, sum(PaxAdultReturn) PaxAdult, sum(PaxChildReturn) PaxChild, sum(FareAmountReturn) FareAmount, sum(LineInfantReturn) LineInfant, sum(AptReturn) Apt, sum(LineTaxReturn) LineTax, SUM(LinePaxFeeReturn) LinePaxFee, sum(LineChargeReturn) LineCharge, sum(LineFeeReturn) LineFee, sum(LineVatReturn) LineVat, sum(LineProcessReturn) LineProcess, sum(LineSSRReturn) LineSSR, sum(LineSeatReturn) LineSeat, sum(LineNameChangeReturn) LineNameChange, sum(lnOthReturn) lnOth, sum(lnGSTReturn) lnGST, sum(lnKlia2Return) lnKlia2, sum(LineOthReturn) LineOth, sum(LineDiscReturn) LineDisc, sum(LinePromoDiscReturn) LinePromoDisc, sum(LineTotalReturn) LineTotal, sum(ReturnMeal) PriceMeal, sum(ReturnBaggage) PriceBaggage, sum(ReturnSportEquipment) PriceSport,sum(ReturnInsureEquipment) PriceInsure,sum(ReturnComfortKit) PriceComfort, sum(ReturnDutyFree) PriceDuty, sum(ConReturnMeal) PriceConMeal, sum(ConReturnBaggage) PriceConBaggage, sum(ConReturnSportEquipment) PriceConSport, sum(ConReturnInsureEquipment) PriceConInsure, sum(ConReturnComfortKit) PriceConComfort, sum(ConReturnDutyFree) PriceConDutyFree ";//edited by romy, 20170814, insurance
                strSQL += "FROM ( ";
                //strSQL += "  SELECT sum(BK_TRANSDTL.fareperpax) as FarePerPaxReturn, sum(BK_TRANSDTL.paxadult) as PaxAdultReturn, sum(BK_TRANSDTL.paxchild) as PaxChildReturn, (sum(BK_TRANSDTL.fareperpax) * sum(BK_TRANSDTL.PaxAdult + BK_TRANSDTL.PaxChild)) as FareAmountReturn, sum(BK_TRANSDTL.lineinfant) as LineInfantReturn, (sum(BK_TRANSDTL.linetax)/(sum(BK_TRANSDTL.paxadult + BK_TRANSDTL.paxchild))) as AptReturn, sum(BK_TRANSDTL.linetax) as LineTaxReturn, SUM(BK_TRANSDTL.LinePaxFee) as LinePaxFeeReturn, sum(BK_TRANSDTL.linecharge) as LineChargeReturn, sum(BK_TRANSDTL.linefee) as LineFeeReturn, sum(BK_TRANSDTL.linevat) as LineVatReturn, sum(BK_TRANSDTL.lineprocess) as LineProcessReturn, sum(BK_TRANSDTL.linessr) as LineSSRReturn, sum(BK_TRANSDTL.lineseat) as LineSeatReturn, sum(BK_TRANSDTL.LineNameChange) as LineNameChangeReturn, sum(BK_TRANSDTL.lineoth) as lnOthReturn, sum(BK_TRANSDTL.linegst) as lnGSTReturn, sum(BK_TRANSDTL.lineklia2) as lnKlia2Return, (sum(BK_TRANSDTL.lineoth) + sum(BK_TRANSDTL.linegst) + sum(BK_TRANSDTL.lineklia2)) as LineOthReturn, sum(BK_TRANSDTL.linedisc) as LineDiscReturn, sum(BK_TRANSDTL.linepromodisc) as LinePromoDiscReturn, (sum(BK_TRANSDTL.linetotal)) as LineTotalReturn, BK_TRANSDTL.TransID, BK_TRANSDTL.RecordLocator AS PNR, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_TRANSDTL.SellKey AS SessionID, BK_TRANSDTL.Currency, x.[Meal][ReturnMeal],x.[Baggage][ReturnBaggage],x.[Sport Equipment][ReturnSportEquipment],x.[Comfort Kit][ReturnComfortKit],x.[Duty Free][ReturnDutyFree], xx.[Meal][ConReturnMeal],xx.[Baggage][ConReturnBaggage],xx.[Sport Equipment][ConReturnSportEquipment],xx.[Comfort Kit][ConReturnComfortKit],xx.[Duty Free][ConReturnDutyFree] ";
                strSQL += "  SELECT sum(BK_TRANSDTL.fareperpax) as FarePerPaxReturn, sum(BK_TRANSDTL.paxadult) as PaxAdultReturn, sum(BK_TRANSDTL.paxchild) as PaxChildReturn, (sum(BK_TRANSDTL.fareperpax) * sum(BK_TRANSDTL.PaxAdult + BK_TRANSDTL.PaxChild)) as FareAmountReturn, sum(BK_TRANSDTL.lineinfant) as LineInfantReturn, (sum(BK_TRANSDTL.linetax)/(sum(BK_TRANSDTL.paxadult + BK_TRANSDTL.paxchild))) as AptReturn, sum(BK_TRANSDTL.linetax) as LineTaxReturn, SUM(BK_TRANSDTL.LinePaxFee) as LinePaxFeeReturn, sum(BK_TRANSDTL.linecharge) as LineChargeReturn, sum(BK_TRANSDTL.linefee) as LineFeeReturn, sum(BK_TRANSDTL.linevat) as LineVatReturn, sum(BK_TRANSDTL.lineprocess) as LineProcessReturn, sum(BK_TRANSDTL.linessr) as LineSSRReturn, sum(BK_TRANSDTL.lineseat) as LineSeatReturn, sum(BK_TRANSDTL.LineNameChange) as LineNameChangeReturn, sum(BK_TRANSDTL.lineoth) as lnOthReturn, sum(BK_TRANSDTL.linegst) as lnGSTReturn, sum(BK_TRANSDTL.lineklia2) as lnKlia2Return, (sum(BK_TRANSDTL.lineoth) + sum(BK_TRANSDTL.linegst) + sum(BK_TRANSDTL.lineklia2)) as LineOthReturn, sum(BK_TRANSDTL.linedisc) as LineDiscReturn, sum(BK_TRANSDTL.linepromodisc) as LinePromoDiscReturn, (sum(BK_TRANSDTL.linetotal)) as LineTotalReturn, BK_TRANSDTL.TransID, BK_TRANSDTL.RecordLocator AS PNR, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_TRANSDTL.SellKey AS SessionID, BK_TRANSDTL.Currency, x.[Meal][ReturnMeal],x.[Baggage][ReturnBaggage],x.[Sport Equipment][ReturnSportEquipment],x.[Insure Equipment][ReturnInsureEquipment],x.[Comfort Kit][ReturnComfortKit],x.[Duty Free][ReturnDutyFree], xx.[Meal][ConReturnMeal],xx.[Baggage][ConReturnBaggage],xx.[Sport Equipment][ConReturnSportEquipment],xx.[Insure Equipment][ReturnInsureEquipment],xx.[Comfort Kit][ConReturnComfortKit],xx.[Duty Free][ConReturnDutyFree] ";//edited by romy, 20170814, insurance
                strSQL += "  FROM BK_TRANSDTL ";
                strSQL += "  OUTER APPLY ( ";
                strSQL += "    select * from ( ";
                strSQL += "      select c.CatgDesc, (s.SSRRate) SSRDetail ";
                strSQL += "      from BK_TRANSMAIN h with(nolock) ";
                strSQL += "      left join BK_TRANSSSR s with(nolock) on h.TransID = s.TransID ";
                strSQL += "      inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode ";
                strSQL += "      inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode ";
                strSQL += "      where h.transid = BK_TRANSDTL.TransID and s.Origin = BK_TRANSDTL.Origin and s.Destination = case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Destination else BK_TRANSDTL.Transit end and BK_TRANSDTL.SeqNo % 2 = 0 ";
                //strSQL += "    ) a pivot (sum(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b ";
                strSQL += "    ) a pivot (sum(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Insure Equipment],[Comfort Kit],[Duty Free])) b ";//edited by romy, 20170814, insurance
                strSQL += "  ) x ";
                strSQL += "  OUTER APPLY ( ";
                strSQL += "    select * from ( ";
                strSQL += "      select c.CatgDesc, (s.SSRRate) SSRDetail from  BK_TRANSMAIN h with(nolock) ";
                strSQL += "      left join BK_TRANSSSR s with(nolock) on h.TransID = s.TransID ";
                strSQL += "      inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode ";
                strSQL += "      inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode ";
                strSQL += "      where h.transid = BK_TRANSDTL.TransID and s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 0 ";
                //strSQL += "    ) a pivot (sum(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b ";
                strSQL += "    ) a pivot (sum(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Insure Equipment],[Comfort Kit],[Duty Free])) b ";//edited by romy, 20170814, insurance
                strSQL += "  ) xx ";
                strSQL += strfilter + " AND LEN(BK_TRANSDTL.RecordLocator)>=6 AND BK_TRANSDTL.SeqNo % 2 = 0 ";
                //strSQL += "  GROUP BY BK_TRANSDTL.TransID, BK_TRANSDTL.RecordLocator, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_TRANSDTL.SellKey, BK_TRANSDTL.Currency, x.[Meal], x.[Baggage], x.[Sport Equipment], x.[Comfort Kit], x.[Duty Free], xx.[Meal], xx.[Baggage], xx.[Sport Equipment], xx.[Comfort Kit], xx.[Duty Free] ";
                strSQL += "  GROUP BY BK_TRANSDTL.TransID, BK_TRANSDTL.RecordLocator, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_TRANSDTL.SellKey, BK_TRANSDTL.Currency, x.[Meal], x.[Baggage], x.[Sport Equipment], x.[Insure Equipment], x.[Comfort Kit], x.[Duty Free], xx.[Meal], xx.[Baggage], xx.[Sport Equipment], xx.[Insure Equipment],xx.[Comfort Kit], xx.[Duty Free] ";//edited by romy, 20170814, insurance
                strSQL += ") s ";
                strSQL += "GROUP BY FlightNo, CarrierCode, Origin, Destination, TransID, PNR, SessionID, Currency ";

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.FarePerPax = (decimal)drRow["FarePerPax"];
                        objBK_TRANSDTL_Info.LineInfant = (decimal)drRow["LineInfant"];
                        objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["LinePaxFee"];
                        objBK_TRANSDTL_Info.LineCharge = (decimal)drRow["LineCharge"];
                        objBK_TRANSDTL_Info.LineFee = (decimal)drRow["LineFee"];
                        objBK_TRANSDTL_Info.LineVAT = (decimal)drRow["LineVat"];
                        objBK_TRANSDTL_Info.LineProcess = (decimal)drRow["LineProcess"];
                        objBK_TRANSDTL_Info.LineSSR = (decimal)drRow["LineSSR"];
                        objBK_TRANSDTL_Info.LineSeat = (decimal)drRow["LineSeat"];
                        objBK_TRANSDTL_Info.LineNameChange = (decimal)drRow["LineNameChange"];
                        objBK_TRANSDTL_Info.LineOth = (decimal)drRow["LineOth"];
                        objBK_TRANSDTL_Info.LineDisc = (decimal)drRow["LineDisc"];
                        objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["LinePromoDisc"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllBK_TRANSDTLFareBreakdown2(string TransID, int TransVoid = 0)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            String strSQL = string.Empty;

            string str = "";

            if (TransVoid <= 1)
            {
                str = " AND TransVoid=" + TransVoid;
            }

            try
            {
                //edited by ketee
                string strfilter = "";
                strfilter = " WHERE BK_TRANSDTL.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'" + str;

                /*
                Fuel Tax = LineCharge
                Service Charge = LineFee
                VAT Tax = LineVAT
                Seat Charge = LineSeat
                Processing Fee = LineProcess
                Other Charge = LineOth + LineGST + LineKlia2
                FarePerPax = (LnTotal - semua field lain) / (PaxAdult + PaxChild)
                 */
                //strSQL = "SELECT MAX(TransID) AS TransID, count(recordlocator) as RecordLocator, count(seqno) as SeqNo, max(currency) as Currency, sum(fareperpax) as FarePerPax, sum(paxadult) as PaxAdult, sum(paxchild) as PaxChild, (sum(fareperpax) * sum(PaxAdult + PaxChild)) as FareAmount, sum(lineinfant) as LineInfant, sum(linetax) as LineTax, sum(linecharge) as LineCharge, sum(linefee) as LineFee, sum(linevat) as LineVat, sum(lineprocess) as LineProcess, sum(linessr) as LineSSR, sum (lineseat) as LineSeat, (sum(lineoth) + sum(linegst) + sum(lineklia2)) as LineOth, sum(linedisc) as LineDisc, sum(linepromodisc) as LinePromoDisc, sum(linetotal) as LineTotal FROM BK_TRANSDTL " + strfilter + "GROUP BY TransID, Origin ORDER BY TransID ";

                //DEPART
                strSQL = "SELECT TransID, Currency, PNR, sum(FarePerPaxDepart) FarePerPax, sum(PaxAdultDepart) PaxAdult, sum(PaxChildDepart) PaxChild, sum(FareAmountDepart) FareAmount, sum(LineInfantDepart) LineInfant, sum(AptDepart) Apt, sum(LineTaxDepart) LineTax, SUM(LinePaxFeeDepart) LinePaxFee, sum(LineChargeDepart) LineCharge, sum(LineFeeDepart) LineFee, sum(LineVatDepart) LineVat, sum(LineProcessDepart) LineProcess, sum(LineSSRDepart) LineSSR, sum(LineSeatDepart) LineSeat, sum(LineNameChangeDepart) LineNameChange, sum(lnOthDepart) lnOth, sum(lnGSTDepart) lnGST, sum(lnKlia2Depart) lnKlia2, sum(LineOthDepart) LineOth, sum(LineDiscDepart) LineDisc, sum(LinePromoDiscDepart) LinePromoDisc, sum(LineTotalDepart) LineTotal, sum(DepartMeal) PriceMeal, sum(DepartBaggage) PriceBaggage, sum(DepartSportEquipment) PriceSport,sum(DepartComfortKit) PriceComfort, sum(DepartDutyFree) PriceDuty, sum(ConDepartMeal) PriceConMeal, sum(ConDepartBaggage) PriceConBaggage, sum(ConDepartSportEquipment) PriceConSport, sum(ConDepartComfortKit) PriceConComfort, sum(ConDepartDutyFree) PriceConDutyFree ";
                strSQL += "FROM ( ";
                strSQL += "  SELECT sum(BK_TRANSDTL.fareperpax) as FarePerPaxDepart, sum(BK_TRANSDTL.paxadult) as PaxAdultDepart, sum(BK_TRANSDTL.paxchild) as PaxChildDepart, (sum(BK_TRANSDTL.fareperpax) * sum(BK_TRANSDTL.PaxAdult + BK_TRANSDTL.PaxChild)) as FareAmountDepart, sum(BK_TRANSDTL.lineinfant) as LineInfantDepart, (sum(BK_TRANSDTL.linetax)/(sum(BK_TRANSDTL.paxadult + BK_TRANSDTL.paxchild))) as AptDepart, sum(BK_TRANSDTL.linetax) as LineTaxDepart, SUM(BK_TRANSDTL.LinePaxFee) as LinePaxFeeDepart, sum(BK_TRANSDTL.linecharge) as LineChargeDepart, sum(BK_TRANSDTL.linefee) as LineFeeDepart, sum(BK_TRANSDTL.linevat) as LineVatDepart, sum(BK_TRANSDTL.lineprocess) as LineProcessDepart, sum(BK_TRANSDTL.linessr) as LineSSRDepart, sum(BK_TRANSDTL.lineseat) as LineSeatDepart, sum(BK_TRANSDTL.LineNameChange) as LineNameChangeDepart, sum(BK_TRANSDTL.lineoth) as lnOthDepart, sum(BK_TRANSDTL.linegst) as lnGSTDepart, sum(BK_TRANSDTL.lineklia2) as lnKlia2Depart, (sum(BK_TRANSDTL.lineoth) + sum(BK_TRANSDTL.linegst) + sum(BK_TRANSDTL.lineklia2)) as LineOthDepart, sum(BK_TRANSDTL.linedisc) as LineDiscDepart, sum(BK_TRANSDTL.linepromodisc) as LinePromoDiscDepart, (sum(BK_TRANSDTL.linetotal)) as LineTotalDepart, BK_TRANSDTL.TransID, BK_TRANSDTL.RecordLocator AS PNR, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_TRANSDTL.SellKey AS SessionID, BK_TRANSDTL.Currency, x.[Meal][DepartMeal],x.[Baggage][DepartBaggage],x.[Sport Equipment][DepartSportEquipment],x.[Comfort Kit][DepartComfortKit],x.[Duty Free][DepartDutyFree], xx.[Meal][ConDepartMeal],xx.[Baggage][ConDepartBaggage],xx.[Sport Equipment][ConDepartSportEquipment],xx.[Comfort Kit][ConDepartComfortKit],xx.[Duty Free][ConDepartDutyFree] ";
                strSQL += "  FROM BK_TRANSDTL ";
                strSQL += "  OUTER APPLY ( ";
                strSQL += "    select * from ( ";
                strSQL += "      select c.CatgDesc, (s.SSRRate) SSRDetail ";
                strSQL += "      from BK_TRANSMAIN h with(nolock) ";
                strSQL += "      left join BK_TRANSSSR s with(nolock) on h.TransID = s.TransID ";
                strSQL += "      inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode ";
                strSQL += "      inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode ";
                strSQL += "      where h.transid = BK_TRANSDTL.TransID and s.Origin = BK_TRANSDTL.Origin and s.Destination = case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Destination else BK_TRANSDTL.Transit end and BK_TRANSDTL.SeqNo % 2 = 1 ";
                strSQL += "    ) a pivot (sum(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b ";
                strSQL += "  ) x ";
                strSQL += "  OUTER APPLY ( ";
                strSQL += "    select * from ( ";
                strSQL += "      select c.CatgDesc, (s.SSRRate) SSRDetail from  BK_TRANSMAIN h with(nolock) ";
                strSQL += "      left join BK_TRANSSSR s with(nolock) on h.TransID = s.TransID ";
                strSQL += "      inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode ";
                strSQL += "      inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode ";
                strSQL += "      where h.transid = BK_TRANSDTL.TransID and s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 1 ";
                strSQL += "    ) a pivot (sum(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b ";
                strSQL += "  ) xx ";
                strSQL += strfilter + "AND LEN(BK_TRANSDTL.RecordLocator)>=6 AND BK_TRANSDTL.SeqNo % 2 = 1 ";
                strSQL += "  GROUP BY BK_TRANSDTL.TransID, BK_TRANSDTL.RecordLocator, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_TRANSDTL.SellKey, BK_TRANSDTL.Currency, x.[Meal], x.[Baggage], x.[Sport Equipment], x.[Comfort Kit], x.[Duty Free], xx.[Meal], xx.[Baggage], xx.[Sport Equipment], xx.[Comfort Kit], xx.[Duty Free] ";
                strSQL += ") s ";
                strSQL += "GROUP BY FlightNo, CarrierCode, Origin, Destination, TransID, PNR, SessionID, Currency ";
                strSQL += "UNION ";
                //RETURN
                strSQL += "SELECT TransID, Currency, PNR, sum(FarePerPaxReturn) FarePerPax, sum(PaxAdultReturn) PaxAdult, sum(PaxChildReturn) PaxChild, sum(FareAmountReturn) FareAmount, sum(LineInfantReturn) LineInfant, sum(AptReturn) Apt, sum(LineTaxReturn) LineTax, SUM(LinePaxFeeReturn) LinePaxFee, sum(LineChargeReturn) LineCharge, sum(LineFeeReturn) LineFee, sum(LineVatReturn) LineVat, sum(LineProcessReturn) LineProcess, sum(LineSSRReturn) LineSSR, sum(LineSeatReturn) LineSeat, sum(LineNameChangeReturn) LineNameChange, sum(lnOthReturn) lnOth, sum(lnGSTReturn) lnGST, sum(lnKlia2Return) lnKlia2, sum(LineOthReturn) LineOth, sum(LineDiscReturn) LineDisc, sum(LinePromoDiscReturn) LinePromoDisc, sum(LineTotalReturn) LineTotal, sum(ReturnMeal) PriceMeal, sum(ReturnBaggage) PriceBaggage, sum(ReturnSportEquipment) PriceSport,sum(ReturnComfortKit) PriceComfort, sum(ReturnDutyFree) PriceDuty, sum(ConReturnMeal) PriceConMeal, sum(ConReturnBaggage) PriceConBaggage, sum(ConReturnSportEquipment) PriceConSport, sum(ConReturnComfortKit) PriceConComfort, sum(ConReturnDutyFree) PriceConDutyFree ";
                strSQL += "FROM ( ";
                strSQL += "  SELECT sum(BK_TRANSDTL.fareperpax) as FarePerPaxReturn, sum(BK_TRANSDTL.paxadult) as PaxAdultReturn, sum(BK_TRANSDTL.paxchild) as PaxChildReturn, (sum(BK_TRANSDTL.fareperpax) * sum(BK_TRANSDTL.PaxAdult + BK_TRANSDTL.PaxChild)) as FareAmountReturn, sum(BK_TRANSDTL.lineinfant) as LineInfantReturn, (sum(BK_TRANSDTL.linetax)/(sum(BK_TRANSDTL.paxadult + BK_TRANSDTL.paxchild))) as AptReturn, sum(BK_TRANSDTL.linetax) as LineTaxReturn, SUM(BK_TRANSDTL.LinePaxFee) as LinePaxFeeReturn, sum(BK_TRANSDTL.linecharge) as LineChargeReturn, sum(BK_TRANSDTL.linefee) as LineFeeReturn, sum(BK_TRANSDTL.linevat) as LineVatReturn, sum(BK_TRANSDTL.lineprocess) as LineProcessReturn, sum(BK_TRANSDTL.linessr) as LineSSRReturn, sum(BK_TRANSDTL.lineseat) as LineSeatReturn, sum(BK_TRANSDTL.LineNameChange) as LineNameChangeReturn, sum(BK_TRANSDTL.lineoth) as lnOthReturn, sum(BK_TRANSDTL.linegst) as lnGSTReturn, sum(BK_TRANSDTL.lineklia2) as lnKlia2Return, (sum(BK_TRANSDTL.lineoth) + sum(BK_TRANSDTL.linegst) + sum(BK_TRANSDTL.lineklia2)) as LineOthReturn, sum(BK_TRANSDTL.linedisc) as LineDiscReturn, sum(BK_TRANSDTL.linepromodisc) as LinePromoDiscReturn, (sum(BK_TRANSDTL.linetotal)) as LineTotalReturn, BK_TRANSDTL.TransID, BK_TRANSDTL.RecordLocator AS PNR, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_TRANSDTL.SellKey AS SessionID, BK_TRANSDTL.Currency, x.[Meal][ReturnMeal],x.[Baggage][ReturnBaggage],x.[Sport Equipment][ReturnSportEquipment],x.[Comfort Kit][ReturnComfortKit],x.[Duty Free][ReturnDutyFree], xx.[Meal][ConReturnMeal],xx.[Baggage][ConReturnBaggage],xx.[Sport Equipment][ConReturnSportEquipment],xx.[Comfort Kit][ConReturnComfortKit],xx.[Duty Free][ConReturnDutyFree] ";
                strSQL += "  FROM BK_TRANSDTL ";
                strSQL += "  OUTER APPLY ( ";
                strSQL += "    select * from ( ";
                strSQL += "      select c.CatgDesc, (s.SSRRate) SSRDetail ";
                strSQL += "      from BK_TRANSMAIN h with(nolock) ";
                strSQL += "      left join BK_TRANSSSR s with(nolock) on h.TransID = s.TransID ";
                strSQL += "      inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode ";
                strSQL += "      inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode ";
                strSQL += "      where h.transid = BK_TRANSDTL.TransID and s.Origin = BK_TRANSDTL.Origin and s.Destination = case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Destination else BK_TRANSDTL.Transit end and BK_TRANSDTL.SeqNo % 2 = 0 ";
                strSQL += "    ) a pivot (sum(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b ";
                strSQL += "  ) x ";
                strSQL += "  OUTER APPLY ( ";
                strSQL += "    select * from ( ";
                strSQL += "      select c.CatgDesc, (s.SSRRate) SSRDetail from  BK_TRANSMAIN h with(nolock) ";
                strSQL += "      left join BK_TRANSSSR s with(nolock) on h.TransID = s.TransID ";
                strSQL += "      inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode ";
                strSQL += "      inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode ";
                strSQL += "      where h.transid = BK_TRANSDTL.TransID and s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 0 ";
                strSQL += "    ) a pivot (sum(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b ";
                strSQL += "  ) xx ";
                strSQL += strfilter + "AND LEN(BK_TRANSDTL.RecordLocator)>=6 AND BK_TRANSDTL.SeqNo % 2 = 0 ";
                strSQL += "  GROUP BY BK_TRANSDTL.TransID, BK_TRANSDTL.RecordLocator, BK_TRANSDTL.FlightNo, BK_TRANSDTL.CarrierCode, BK_TRANSDTL.Origin, BK_TRANSDTL.Destination, BK_TRANSDTL.SellKey, BK_TRANSDTL.Currency, x.[Meal], x.[Baggage], x.[Sport Equipment], x.[Comfort Kit], x.[Duty Free], xx.[Meal], xx.[Baggage], xx.[Sport Equipment], xx.[Comfort Kit], xx.[Duty Free] ";
                strSQL += ") s ";
                strSQL += "GROUP BY FlightNo, CarrierCode, Origin, Destination, TransID, PNR, SessionID, Currency ";

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {

                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllBK_TRANSDTLFareBreakdown3(string TransID, int TransVoid = 0, string PNR = "", Boolean ReturnFlight = true)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            String strSQL = string.Empty;

            string str = "";

            if (TransVoid <= 1)
            {
                str = " AND TransVoid=" + TransVoid;
            }

            try
            {
                //edited by ketee
                string strfilter = "";
                strfilter = " WHERE LEN(BK_TRANSDTL.RecordLocator)>=6  AND BK_TRANSDTL.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'" + str;
                if (PNR != "")
                {
                    strfilter = " WHERE LEN(BK_TRANSDTL.RecordLocator)>=6  AND BK_TRANSDTL.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'" + str + " AND BK_TRANSDTL.RecordLocator='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "' ";
                }
                /*
                Fuel Tax = LineCharge
                Service Charge = LineFee
                VAT Tax = LineVAT
                Seat Charge = LineSeat
                Processing Fee = LineProcess
                Other Charge = LineOth + LineGST + LineKlia2
                FarePerPax = (LnTotal - semua field lain) / (PaxAdult + PaxChild)
                 */
                //strSQL = "SELECT MAX(TransID) AS TransID, count(recordlocator) as RecordLocator, count(seqno) as SeqNo, max(currency) as Currency, sum(fareperpax) as FarePerPax, sum(paxadult) as PaxAdult, sum(paxchild) as PaxChild, (sum(fareperpax) * sum(PaxAdult + PaxChild)) as FareAmount, sum(lineinfant) as LineInfant, sum(linetax) as LineTax, sum(linecharge) as LineCharge, sum(linefee) as LineFee, sum(linevat) as LineVat, sum(lineprocess) as LineProcess, sum(linessr) as LineSSR, sum (lineseat) as LineSeat, (sum(lineoth) + sum(linegst) + sum(lineklia2)) as LineOth, sum(linedisc) as LineDisc, sum(linepromodisc) as LinePromoDisc, sum(linetotal) as LineTotal FROM BK_TRANSDTL " + strfilter + "GROUP BY TransID, Origin ORDER BY TransID ";
                if (ReturnFlight == false)
                {
                    //Depart
                    strSQL = "SELECT * FROM (SELECT TransID, Currency, sum(FarePerPaxDepart) FarePerPaxDepart, sum(PaxAdultDepart) PaxAdultDepart, sum(PaxChildDepart) PaxChildDepart, sum(FareAmountDepart) FareAmountDepart, sum(LineInfantDepart) LineInfantDepart, sum(AptDepart) AptDepart, sum(LineTaxDepart) LineTaxDepart, SUM(LinePaxFeeDepart) LinePaxFeeDepart, sum(LineChargeDepart) LineChargeDepart, sum(LineFeeDepart) LineFeeDepart, sum(LineVatDepart) LineVatDepart, sum(LineProcessDepart) LineProcessDepart, sum(LineSSRDepart) LineSSRDepart, sum(LineSeatDepart) LineSeatDepart, sum(LineNameChangeDepart) LineNameChangeDepart, sum(lnOthDepart) lnOthDepart, sum(lnGSTDepart) lnGSTDepart, sum(lnKlia2Depart) lnKlia2Depart, sum(LineOthDepart) LineOthDepart, sum(LineDiscDepart) LineDiscDepart, sum(LinePromoDiscDepart) LinePromoDiscDepart, sum(LineTotalDepart) LineTotalDepart, (sum(DepartMeal) + sum(ISNULL(DepartConMeal,0)))  PriceDepartMeal, sum(DepartBaggage) PriceDepartBaggage, sum(DepartSportEquipment) PriceDepartSport,sum(DepartComfortKit) PriceDepartComfort, sum(DepartDutyFree) PriceDepartDuty FROM (SELECT sum(BK_TRANSDTL.fareperpax) as FarePerPaxDepart, sum(BK_TRANSDTL.paxadult) as PaxAdultDepart, sum(BK_TRANSDTL.paxchild) as PaxChildDepart, sum((BK_TRANSDTL.fareperpax) * (BK_TRANSDTL.PaxAdult + BK_TRANSDTL.PaxChild)) as FareAmountDepart, sum(BK_TRANSDTL.lineinfant) as LineInfantDepart, (sum(BK_TRANSDTL.linetax)/(sum(BK_TRANSDTL.paxadult + BK_TRANSDTL.paxchild))) as AptDepart, sum(BK_TRANSDTL.linetax) as LineTaxDepart, SUM(BK_TRANSDTL.LinePaxFee) as LinePaxFeeDepart, sum(BK_TRANSDTL.linecharge) as LineChargeDepart, sum(BK_TRANSDTL.linefee) as LineFeeDepart, sum(BK_TRANSDTL.linevat) as LineVatDepart, sum(BK_TRANSDTL.lineprocess) as LineProcessDepart, sum(BK_TRANSDTL.linessr) as LineSSRDepart, sum(BK_TRANSDTL.lineseat) as LineSeatDepart, sum(BK_TRANSDTL.LineNameChange) as LineNameChangeDepart, sum(BK_TRANSDTL.lineoth) as lnOthDepart, sum(BK_TRANSDTL.linegst) as lnGSTDepart, sum(BK_TRANSDTL.lineklia2) as lnKlia2Depart, (sum(BK_TRANSDTL.lineoth) + sum(BK_TRANSDTL.linegst) + sum(BK_TRANSDTL.lineklia2)) as LineOthDepart, sum(BK_TRANSDTL.linedisc) as LineDiscDepart, sum(BK_TRANSDTL.linepromodisc) as LinePromoDiscDepart, (sum(BK_TRANSDTL.linetotal)) as LineTotalDepart, BK_TRANSDTL.TransID, BK_TRANSDTL.Currency, x.[Meal][DepartMeal], xx.[Meal][DepartConMeal], x.[Baggage][DepartBaggage],x.[Sport Equipment][DepartSportEquipment],x.[Comfort Kit][DepartComfortKit],x.[Duty Free][DepartDutyFree] FROM BK_TRANSDTL ";
                    strSQL += "OUTER APPLY ";
                    strSQL += "(select * from(select c.CatgDesc, (s.SSRRate) SSRDetail from BK_TRANSMAIN h with(nolock) left join BK_TRANSSSR s with(nolock) on h.TransID = s.TransID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where h.transid = BK_TRANSDTL.TransID  AND s.Origin = BK_TRANSDTL.Origin and s.Destination =case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Destination else BK_TRANSDTL.Transit end) a pivot (sum(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) x ";
                    strSQL += "OUTER APPLY ";
                    strSQL += "(select * from(select c.CatgDesc, (s.SSRRate) SSRDetail from BK_TRANSMAIN h with(nolock) left join BK_TRANSSSR s with(nolock) on h.TransID = s.TransID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where h.transid = BK_TRANSDTL.TransID and s.TransID = BK_TRANSDTL.TransID AND  s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination) a pivot (sum(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) xx ";
                    strSQL += strfilter + " GROUP BY BK_TRANSDTL.TransID, BK_TRANSDTL.Currency, x.[Meal], xx.[Meal], x.[Baggage], x.[Sport Equipment], x.[Comfort Kit], x.[Duty Free]) s GROUP BY  TransID, Currency) T1 ";
                    strSQL += " LEFT JOIN ";
                    strSQL += "(SELECT (sum(BK_PASSENGERLIST.ChangeFee) + sum(BK_PASSENGERLIST.ChangeFee2)) As NameChangeFee, TransID FROM BK_PASSENGERLIST WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' GROUP BY TransID) T3 ON T1.TransID = T3.TransID ";
                }
                else
                {
                    //All
                    strSQL = "SELECT * FROM ";
                    strSQL += "(SELECT TransID, Currency, sum(FarePerPaxDepart) FarePerPaxDepart, sum(PaxAdultDepart) PaxAdultDepart, sum(PaxChildDepart) PaxChildDepart, sum(FareAmountDepart) FareAmountDepart, sum(LineInfantDepart) LineInfantDepart, sum(AptDepart) AptDepart, sum(LineTaxDepart) LineTaxDepart, sum(LinePaxFeeDepart) LinePaxFeeDepart, sum(LineChargeDepart) LineChargeDepart, sum(LineFeeDepart) LineFeeDepart, sum(LineVatDepart) LineVatDepart, sum(LineProcessDepart) LineProcessDepart, sum(LineSSRDepart) LineSSRDepart, sum(LineSeatDepart) LineSeatDepart, sum(LineNameChangeDepart) LineNameChangeDepart, sum(lnOthDepart) lnOthDepart, sum(lnGSTDepart) lnGSTDepart, sum(lnKlia2Depart) lnKlia2Depart, sum(LineOthDepart) LineOthDepart, sum(LineDiscDepart) LineDiscDepart, sum(LinePromoDiscDepart) LinePromoDiscDepart, sum(LineTotalDepart) LineTotalDepart, (sum(DepartMeal) + sum(ISNULL(DepartConMeal,0)))  PriceDepartMeal, sum(DepartBaggage) PriceDepartBaggage, sum(DepartSportEquipment) PriceDepartSport,sum(DepartComfortKit) PriceDepartComfort, sum(DepartDutyFree) PriceDepartDuty FROM (SELECT sum(BK_TRANSDTL.fareperpax) as FarePerPaxDepart, sum(BK_TRANSDTL.paxadult) as PaxAdultDepart, sum(BK_TRANSDTL.paxchild) as PaxChildDepart, sum((BK_TRANSDTL.fareperpax) * (BK_TRANSDTL.PaxAdult + BK_TRANSDTL.PaxChild)) as FareAmountDepart, sum(BK_TRANSDTL.lineinfant) as LineInfantDepart, (sum(BK_TRANSDTL.linetax)/(sum(BK_TRANSDTL.paxadult + BK_TRANSDTL.paxchild))) as AptDepart, sum(BK_TRANSDTL.linetax) as LineTaxDepart, SUM(BK_TRANSDTL.LinePaxFee) as LinePaxFeeDepart, sum(BK_TRANSDTL.linecharge) as LineChargeDepart, sum(BK_TRANSDTL.linefee) as LineFeeDepart, sum(BK_TRANSDTL.linevat) as LineVatDepart, sum(BK_TRANSDTL.lineprocess) as LineProcessDepart, sum(BK_TRANSDTL.linessr) as LineSSRDepart, sum(BK_TRANSDTL.lineseat) as LineSeatDepart, sum(BK_TRANSDTL.LineNameChange) as LineNameChangeDepart, sum(BK_TRANSDTL.lineoth) as lnOthDepart, sum(BK_TRANSDTL.linegst) as lnGSTDepart, sum(BK_TRANSDTL.lineklia2) as lnKlia2Depart, (sum(BK_TRANSDTL.lineoth) + sum(BK_TRANSDTL.linegst) + sum(BK_TRANSDTL.lineklia2)) as LineOthDepart, sum(BK_TRANSDTL.linedisc) as LineDiscDepart, sum(BK_TRANSDTL.linepromodisc) as LinePromoDiscDepart, (sum(BK_TRANSDTL.linetotal)) as LineTotalDepart, BK_TRANSDTL.TransID, BK_TRANSDTL.Currency, x.[Meal][DepartMeal], xx.[Meal][DepartConMeal], x.[Baggage][DepartBaggage],x.[Sport Equipment][DepartSportEquipment],x.[Comfort Kit][DepartComfortKit],x.[Duty Free][DepartDutyFree] FROM BK_TRANSDTL  ";
                    strSQL += "OUTER APPLY ";
                    strSQL += "(select * from(select c.CatgDesc, (s.SSRRate) SSRDetail from BK_TRANSMAIN h with(nolock) left join BK_TRANSSSR s with(nolock) on h.TransID = s.TransID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where h.transid = BK_TRANSDTL.TransID  AND s.Origin = BK_TRANSDTL.Origin and s.Destination =case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Destination else BK_TRANSDTL.Transit end AND BK_TRANSDTL.SeqNo % 2 = 1) a pivot (sum(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) x ";
                    strSQL += " OUTER APPLY ";
                    strSQL += "(select * from(select c.CatgDesc, (s.SSRRate) SSRDetail from BK_TRANSMAIN h with(nolock) left join BK_TRANSSSR s with(nolock) on h.TransID = s.TransID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where h.transid = BK_TRANSDTL.TransID and s.TransID = BK_TRANSDTL.TransID AND  s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 1) a pivot (sum(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) xx ";
                    strSQL += strfilter + " AND BK_TRANSDTL.SeqNo % 2 = 1 ";
                    strSQL += "GROUP BY BK_TRANSDTL.TransID, BK_TRANSDTL.Currency, x.[Meal], xx.[Meal], x.[Baggage], x.[Sport Equipment], x.[Comfort Kit], x.[Duty Free]) s GROUP BY  TransID, Currency) T1 ";
                    strSQL += "LEFT JOIN ";
                    strSQL += "(SELECT TransID, sum(FarePerPaxReturn) FarePerPaxReturn, sum(PaxAdultReturn) PaxAdultReturn, sum(PaxChildReturn) PaxChildReturn, sum(FareAmountReturn) FareAmountReturn, sum(LineInfantReturn) LineInfantReturn, sum(AptReturn) AptReturn, sum(LineTaxReturn) LineTaxReturn, sum(LinePaxFeeReturn) LinePaxFeeReturn, sum(LineChargeReturn) LineChargeReturn, sum(LineFeeReturn) LineFeeReturn, sum(LineVatReturn) LineVatReturn, sum(LineProcessReturn) LineProcessReturn, sum(LineSSRReturn) LineSSRReturn, sum(LineSeatReturn) LineSeatReturn, sum(LineNameChangeReturn) LineNameChangeReturn, sum(lnOthReturn) lnOthReturn, sum(lnGSTReturn) lnGSTReturn, sum(lnKlia2Return) lnKlia2Return, sum(LineOthReturn) LineOthReturn, sum(LineDiscReturn) LineDiscReturn, sum(LinePromoDiscReturn) LinePromoDiscReturn, sum(LineTotalReturn) LineTotalReturn, (sum(ReturnMeal) + sum(ISNULL(ReturnConMeal,0)))  PriceReturnMeal, sum(ReturnBaggage) PriceReturnBaggage, sum(ReturnSportEquipment) PriceReturnSport,sum(ReturnComfortKit) PriceReturnComfort, sum(ReturnDutyFree) PriceReturnDuty FROM (SELECT sum(BK_TRANSDTL.fareperpax) as FarePerPaxReturn, sum(BK_TRANSDTL.paxadult) as PaxAdultReturn, sum(BK_TRANSDTL.paxchild) as PaxChildReturn, sum((BK_TRANSDTL.fareperpax) * (BK_TRANSDTL.PaxAdult + BK_TRANSDTL.PaxChild)) as FareAmountReturn, sum(BK_TRANSDTL.lineinfant) as LineInfantReturn, (sum(BK_TRANSDTL.linetax)/(sum(BK_TRANSDTL.paxadult + BK_TRANSDTL.paxchild))) as AptReturn, sum(BK_TRANSDTL.linetax) as LineTaxReturn, SUM(BK_TRANSDTL.LinePaxFee) as LinePaxFeeReturn, sum(BK_TRANSDTL.linecharge) as LineChargeReturn, sum(BK_TRANSDTL.linefee) as LineFeeReturn, sum(BK_TRANSDTL.linevat) as LineVatReturn, sum(BK_TRANSDTL.lineprocess) as LineProcessReturn, sum(BK_TRANSDTL.linessr) as LineSSRReturn, sum(BK_TRANSDTL.lineseat) as LineSeatReturn, sum(BK_TRANSDTL.LineNameChange) as LineNameChangeReturn, sum(BK_TRANSDTL.lineoth) as lnOthReturn, sum(BK_TRANSDTL.linegst) as lnGSTReturn, sum(BK_TRANSDTL.lineklia2) as lnKlia2Return, (sum(BK_TRANSDTL.lineoth) + sum(BK_TRANSDTL.linegst) + sum(BK_TRANSDTL.lineklia2)) as LineOthReturn, sum(BK_TRANSDTL.linedisc) as LineDiscReturn, sum(BK_TRANSDTL.linepromodisc) as LinePromoDiscReturn, (sum(BK_TRANSDTL.linetotal)) as LineTotalReturn, BK_TRANSDTL.TransID, BK_TRANSDTL.Currency, x.[Meal][ReturnMeal],xx.[Meal][ReturnConMeal], x.[Baggage][ReturnBaggage],x.[Sport Equipment][ReturnSportEquipment],x.[Comfort Kit][ReturnComfortKit],x.[Duty Free][ReturnDutyFree] FROM BK_TRANSDTL ";
                    strSQL += "OUTER APPLY ";
                    strSQL += "(select * from(select c.CatgDesc, (s.SSRRate) SSRDetail from BK_TRANSMAIN h with(nolock) left join BK_TRANSSSR s with(nolock) on h.TransID = s.TransID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where h.transid = BK_TRANSDTL.TransID  AND s.Origin = BK_TRANSDTL.Origin and s.Destination =case BK_TRANSDTL.Transit when '' then BK_TRANSDTL.Destination else BK_TRANSDTL.Transit end and BK_TRANSDTL.SeqNo % 2 = 0) a pivot (sum(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) x ";
                    strSQL += " OUTER APPLY ";
                    strSQL += "(select * from(select c.CatgDesc, (s.SSRRate) SSRDetail from BK_TRANSMAIN h with(nolock) left join BK_TRANSSSR s with(nolock) on h.TransID = s.TransID inner join ITEM i with(nolock) on i.ItemCode = s.SSRCode inner join ITEMCATEGORY c with(nolock) on c.CatgCode = i.ItmCatgCode where h.transid = BK_TRANSDTL.TransID and s.TransID = BK_TRANSDTL.TransID AND  s.Origin = BK_TRANSDTL.Transit and s.Destination = BK_TRANSDTL.Destination and BK_TRANSDTL.SeqNo % 2 = 0) a pivot (sum(SSRDetail) for CatgDesc in ([Meal],[Baggage],[Sport Equipment],[Comfort Kit],[Duty Free])) b) xx ";
                    strSQL += strfilter + " AND BK_TRANSDTL.SeqNo % 2 = 0 ";
                    strSQL += "GROUP BY BK_TRANSDTL.TransID, BK_TRANSDTL.Currency, x.[Meal],  xx.[Meal], x.[Baggage], x.[Sport Equipment], x.[Comfort Kit], x.[Duty Free]) s GROUP BY TransID, Currency) T2 ON T1.TransID = T2.TransID ";
                    strSQL += " LEFT JOIN ";
                    strSQL += "(SELECT (sum(BK_PASSENGERLIST.ChangeFee) + sum(BK_PASSENGERLIST.ChangeFee2)) As NameChangeFee, TransID FROM BK_PASSENGERLIST WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' GROUP BY TransID) T3 ";
                    strSQL += "ON T1.TransID = T3.TransID ";
                }
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {

                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetAllBK_TRANSDTLFareBreakdownNew(string TransID, int TransVoid = 0, string PNR = "", Boolean ReturnFlight = true)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            String strSQL = string.Empty;

            string str = "";



            try
            {
                //edited by ketee
                string strfilter = "";
                strfilter = " WHERE p.Title <> 'INFT' AND p.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND LEN(p.RecordLocator)>=6";
                if (PNR != "")
                {
                    strfilter = " WHERE p.Title <> 'INFT' AND p.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND LEN(p.RecordLocator)>=6 AND p.RecordLocator='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "' ";
                }

                strSQL = "SELECT TransID, Currency, ";
                strSQL += "FarePerPaxDepart, LineTaxDepart, PaxAdultDepart, PaxChildDepart, FareAmountDepart, LineInfantDepart, AptDepart, LinePaxFeeDepart, LineChargeDepart, LineFeeDepart, LineVatDepart, LineProcessDepart, LineSSRDepart, LineSeatDepart, LineNameChangeDepart, LineGSTDepart, LineKlia2Depart,  LineOthDepart, LineDiscDepart, LinePromoDiscDepart, LineTotalDepart, ";
                strSQL += "(SUM(DBaggagePrice) + SUM(DCBaggagePrice)) PriceDepartBaggage, (SUM(DSportPrice) + SUM(DCSportPrice)) PriceDepartSport, LineInsureFee, ";//edited by romy for insure
                strSQL += "(SUM(DKitPrice) + SUM(DCKitPrice)) PriceDepartComfort, (SUM(DMealPrice1) + SUM(DCMealPrice1) + SUM(DMealPrice2) + SUM(DCMealPrice2) + SUM(DMealPrice3) + SUM(DCMealPrice3) + SUM(DMealPrice4) + SUM(DCMealPrice4)) PriceDepartMeal, (SUM(DDutyPrice) + SUM(DCDutyPrice)) PriceDepartDuty, (SUM(DInfantPrice) + SUM(DCInfantPrice)) PriceDepartInfant, ";
                strSQL += "FarePerPaxReturn, LineTaxReturn, PaxAdultReturn, PaxChildReturn, FareAmountReturn, LineInfantReturn, AptReturn, LinePaxFeeReturn, LineChargeReturn, LineFeeReturn, LineVatReturn, LineProcessReturn, LineSSRReturn, LineSeatReturn, LineNameChangeReturn, LineGSTReturn, LineKlia2Return, LineOthReturn, LineDiscReturn, LinePromoDiscReturn, LineTotalReturn, ";
                strSQL += "(SUM(RBaggagePrice) + SUM(RCBaggagePrice)) PriceReturnBaggage, (SUM(RSportPrice) + SUM(RCSportPrice)) PriceReturnSport, ";
                strSQL += "(SUM(RKitPrice) + SUM(RCKitPrice)) PriceReturnComfort, (SUM(RMealPrice1) + SUM(RCMealPrice1) + SUM(RMealPrice2) + SUM(RCMealPrice2) + SUM(RMealPrice3) + SUM(RCMealPrice3) + SUM(RMealPrice4) + SUM(RCMealPrice4)) PriceReturnMeal, (SUM(RDutyPrice) + SUM(RCDutyPrice)) PriceReturnDuty, (SUM(RInfantPrice) + SUM(RCInfantPrice)) PriceReturnInfant ";
                strSQL += "FROM ( ";
                strSQL += "SELECT p.TransID, h.Currency, ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.BaggageAmt ELSE 0 END DBaggagePrice, ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.MealSubTotal1 ELSE 0 END DMealPrice1, ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.MealSubTotal2 ELSE 0 END DMealPrice2, ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.MealSubTotal3 ELSE 0 END DMealPrice3, ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.MealSubTotal4 ELSE 0 END DMealPrice4, ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DrinkSubTotal1 ELSE 0 END DDrinkPrice1, ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DrinkSubTotal2 ELSE 0 END DDrinkPrice2, ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DrinkSubTotal3 ELSE 0 END DDrinkPrice3, ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DrinkSubTotal4 ELSE 0 END DDrinkPrice4,  ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.SportAmt ELSE 0 END DSportPrice,  ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.KitAmt ELSE 0 END DKitPrice,  ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.DutyAmt ELSE 0 END DDutyPrice,  ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 0 THEN s.InfantAmt ELSE 0 END DInfantPrice, ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.BaggageAmt ELSE 0 END DCBaggagePrice,  ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.MealSubTotal1 ELSE 0 END DCMealPrice1, ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.MealSubTotal2 ELSE 0 END DCMealPrice2, ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.MealSubTotal3 ELSE 0 END DCMealPrice3, ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.MealSubTotal4 ELSE 0 END DCMealPrice4,  ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DrinkSubTotal1 ELSE 0 END DCDrinkPrice1,  ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DrinkSubTotal2 ELSE 0 END DCDrinkPrice2,  ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DrinkSubTotal3 ELSE 0 END DCDrinkPrice3,  ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DrinkSubTotal4 ELSE 0 END DCDrinkPrice4,  ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.SportAmt ELSE 0 END DCSportPrice,   ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.KitAmt ELSE 0 END DCKitPrice,   ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.DutyAmt ELSE 0 END DCDutyPrice,   ";
                strSQL += " CASE WHEN s.TripMode = 0 AND s.Segment = 1 THEN s.InfantAmt ELSE 0 END DCInfantPrice, ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.BaggageAmt ELSE 0 END RBaggagePrice, ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.MealSubTotal1 ELSE 0 END RMealPrice1, ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.MealSubTotal2 ELSE 0 END RMealPrice2, ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.MealSubTotal3 ELSE 0 END RMealPrice3, ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.MealSubTotal4 ELSE 0 END RMealPrice4, ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DrinkSubTotal1 ELSE 0 END RDrinkPrice1, ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DrinkSubTotal2 ELSE 0 END RDrinkPrice2, ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DrinkSubTotal3 ELSE 0 END RDrinkPrice3, ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DrinkSubTotal4 ELSE 0 END RDrinkPrice4,  ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.SportAmt ELSE 0 END RSportPrice,  ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.KitAmt ELSE 0 END RKitPrice,  ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.DutyAmt ELSE 0 END RDutyPrice,  ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 0 THEN s.InfantAmt ELSE 0 END RInfantPrice, ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.BaggageAmt ELSE 0 END RCBaggagePrice,  ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.MealSubTotal1 ELSE 0 END RCMealPrice1, ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.MealSubTotal2 ELSE 0 END RCMealPrice2, ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.MealSubTotal3 ELSE 0 END RCMealPrice3, ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.MealSubTotal4 ELSE 0 END RCMealPrice4,  ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DrinkSubTotal1 ELSE 0 END RCDrinkPrice1,  ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DrinkSubTotal2 ELSE 0 END RCDrinkPrice2,  ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DrinkSubTotal3 ELSE 0 END RCDrinkPrice3,  ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DrinkSubTotal4 ELSE 0 END RCDrinkPrice4,   ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.SportAmt ELSE 0 END RCSportPrice,   ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.KitAmt ELSE 0 END RCKitPrice,   ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.DutyAmt ELSE 0 END RCDutyPrice,   ";
                strSQL += " CASE WHEN s.TripMode = 1 AND s.Segment = 1 THEN s.InfantAmt ELSE 0 END RCInfantPrice ";
                strSQL += "FROM BK_PASSENGERLIST p WITH (NOLOCK) ";
                strSQL += "INNER JOIN BK_TRANSMAIN h WITH (NOLOCK) ON h.TransID = p.TransID ";
                strSQL += "LEFT JOIN BK_TRANSADDON s WITH (NOLOCK) ON p.TransID = s.TransID AND p.RecordLocator = s.RecordLocator AND p.PassengerID = s.PassengerID ";
                strSQL += "LEFT JOIN ITEM ib WITH (NOLOCK) ON ib.ItemCode = s.BaggageCode ";
                strSQL += "LEFT JOIN ITEM im1 WITH (NOLOCK) ON im1.ItemCode = s.MealCode1 ";
                strSQL += "LEFT JOIN ITEM im2 WITH (NOLOCK) ON im2.ItemCode = s.MealCode2 ";
                strSQL += "LEFT JOIN ITEM im3 WITH (NOLOCK) ON im3.ItemCode = s.MealCode3 ";
                strSQL += "LEFT JOIN ITEM im4 WITH (NOLOCK) ON im4.ItemCode = s.MealCode4 ";
                strSQL += "LEFT JOIN ITEM id1 WITH (NOLOCK) ON id1.ItemCode = s.DrinkCode1 ";
                strSQL += "LEFT JOIN ITEM id2 WITH (NOLOCK) ON id2.ItemCode = s.DrinkCode2 ";
                strSQL += "LEFT JOIN ITEM id3 WITH (NOLOCK) ON id3.ItemCode = s.DrinkCode3 ";
                strSQL += "LEFT JOIN ITEM id4 WITH (NOLOCK) ON id4.ItemCode = s.DrinkCode4 ";
                strSQL += "LEFT JOIN ITEM isp WITH (NOLOCK) ON isp.ItemCode = s.SportCode ";
                strSQL += "LEFT JOIN ITEM ik WITH (NOLOCK) ON ik.ItemCode = s.KitCode ";
                strSQL += "LEFT JOIN ITEM id WITH (NOLOCK) ON id.ItemCode = s.DutyCode ";
                strSQL += "LEFT JOIN ITEM ii WITH (NOLOCK) ON ii.ItemCode = s.InfantCode ";
                strSQL += strfilter;
                strSQL += "GROUP BY p.TransID, h.Currency, s.TripMode, s.Segment, s.BaggageCode, ib.ItemDesc, s.BaggageAmt, s.MealCode1, im1.ItemDesc, s.MealSubTotal1, s.MealCode2, im2.ItemDesc, s.MealSubTotal2, s.MealCode3, im3.ItemDesc, s.MealSubTotal3, s.MealCode4, im4.ItemDesc, s.MealSubTotal4, s.DrinkCode1, id1.ItemDesc, s.DrinkSubTotal1, s.DrinkCode2, id2.ItemDesc, s.DrinkSubTotal2, s.DrinkCode3, id3.ItemDesc, s.DrinkSubTotal3, s.DrinkCode4, id4.ItemDesc, s.DrinkSubTotal4, s.SportCode, isp.ItemDesc, s.SportAmt, s.KitCode, ik.ItemDesc, s.KitAmt, s.DutyCode, id.ItemDesc, s.DutyAmt, s.InfantCode, ii.ItemDesc, s.InfantAmt ";
                strSQL += ") A ";
                strSQL += "CROSS APPLY (SELECT COUNT(DISTINCT d.ORIGIN) cnt FROM BK_TRANSDTL d WITH (NOLOCK) WHERE d.TransID = A.TransID GROUP BY d.TransID) cntd ";
                strSQL += "CROSS APPLY (SELECT TOP 1 d.Origin, d.Destination FROM BK_TRANSDTL d WITH (NOLOCK) WHERE d.TransID = A.TransID ORDER BY d.SeqNo) do ";
                strSQL += "CROSS APPLY (SELECT SUM(InsureFee) LineInsureFee FROM BK_PASSENGERLIST p WITH (NOLOCK) WHERE p.TransID = A.TransID) i  ";//added by romy for Insure
                strSQL += "CROSS APPLY (SELECT SUM(FarePerPax) FarePerPaxDepart, SUM(LineTax) LineTaxDepart, SUM(PaxAdult) PaxAdultDepart, SUM(PaxChild) PaxChildDepart, SUM((Fareperpax) * (PaxAdult + PaxChild)) FareAmountDepart, SUM(LineInfant) LineInfantDepart, (SUM(LineTax)/(SUM(PaxAdult + PaxChild))) AptDepart, SUM(LinePaxFee) LinePaxFeeDepart, SUM(LineCharge) LineChargeDepart, SUM(LineFee) LineFeeDepart, SUM(LineVat) LineVatDepart, SUM(LineProcess) LineProcessDepart, SUM(LineSSR) LineSSRDepart, SUM(LineSeat) LineSeatDepart, SUM(LineNameChange) LineNameChangeDepart, SUM(linegst)  LineGSTDepart, SUM(lineklia2) LineKlia2Depart, (SUM(Lineoth) + SUM(linegst) + SUM(Lineklia2)) LineOthDepart, SUM(LineDisc) LineDiscDepart, SUM(LinePromoDisc) LinePromoDiscDepart, (SUM(LineTotal)) LineTotalDepart FROM BK_TRANSDTL d WITH (NOLOCK) WHERE d.TransID = A.TransID AND d.Origin = do.Origin AND d.Destination = do.Destination) d  ";
                strSQL += "OUTER APPLY (SELECT SUM(FarePerPax) FarePerPaxReturn, SUM(LineTax) LineTaxReturn, SUM(PaxAdult) PaxAdultReturn, SUM(PaxChild) PaxChildReturn, SUM((Fareperpax) * (PaxAdult + PaxChild)) FareAmountReturn, SUM(LineInfant) LineInfantReturn, (SUM(LineTax)/(SUM(PaxAdult + PaxChild))) AptReturn, SUM(LinePaxFee) LinePaxFeeReturn, SUM(LineCharge) LineChargeReturn, SUM(LineFee) LineFeeReturn, SUM(LineVat) LineVatReturn, SUM(LineProcess) LineProcessReturn, SUM(LineSSR) LineSSRReturn, SUM(LineSeat) LineSeatReturn, SUM(LineNameChange) LineNameChangeReturn, SUM(linegst)  LineGSTReturn, SUM(lineklia2) LineKlia2Return, (SUM(Lineoth) + SUM(linegst) + SUM(Lineklia2)) LineOthReturn, SUM(LineDisc) LineDiscReturn, SUM(LinePromoDisc) LinePromoDiscReturn, (SUM(LineTotal)) LineTotalReturn FROM BK_TRANSDTL d WITH (NOLOCK) WHERE d.TransID = A.TransID AND d.Origin = do.Destination AND d.Destination = do.Origin AND cntd.cnt>1) r  ";
                strSQL += "GROUP BY TransID, Currency, LineTaxDepart, FarePerPaxDepart, PaxAdultDepart, PaxChildDepart, FareAmountDepart, LineInfantDepart, AptDepart, LinePaxFeeDepart, LineChargeDepart, LineFeeDepart, LineVatDepart, LineProcessDepart, LineSSRDepart, LineSeatDepart, LineNameChangeDepart, LineGSTDepart, LineKlia2Depart, LineOthDepart, LineDiscDepart, LinePromoDiscDepart, LineTotalDepart, FarePerPaxReturn, PaxAdultReturn, PaxChildReturn, FareAmountReturn, LineInfantReturn, LineTaxReturn, AptReturn, LinePaxFeeReturn, LineChargeReturn, LineFeeReturn, LineVatReturn, LineProcessReturn, LineSSRReturn, LineSeatReturn, LineNameChangeReturn, LineGSTReturn, LineKlia2Return, LineOthReturn, LineDiscReturn, LinePromoDiscReturn, LineTotalReturn, LineInsureFee";//edited by romy for Insure

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {

                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        #region Bookingflight

        public Boolean InternationalFlight(string Departure, string Arrival)
        {
            DataTable dt;
            String strSQL = string.Empty;
            try
            {
                strSQL = "SELECT LD.CurrencyCode CurrencyDeparture, LA.CurrencyCode CurrencyArrival FROM LOCATION LD INNER JOIN LOCATION LA ";
                strSQL += "ON LD.InActive = LA.InActive WHERE LD.LOCATIONCODE = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, Departure) + "' AND LA.LocationCode = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, Arrival) + "'";
                dt = objDCom.Execute(strSQL, CommandType.Text, true);
                if (dt != null && dt.Rows.Count > 0)
                {
                    if (dt.Rows[0]["CurrencyDeparture"].ToString() != dt.Rows[0]["CurrencyArrival"].ToString())
                    {
                        return true;
                    }
                    else return false;

                }
                else
                {
                    return false;
                    throw new ApplicationException("LOCATION table does not exist.");
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public DataTable GetArrayCategory(string Key)
        {
            DataTable dt;
            String strSQL = string.Empty;
            try
            {
                strSQL = "SELECT SYSValueEx FROM SYS_PREFT WHERE SYSKey = '" + Key + "' AND SYSValue = 1";
                dt = objDCom.Execute(strSQL, CommandType.Text, true);
                if (dt != null && dt.Rows.Count > 0)
                {
                    return dt;

                }
                else
                {
                    return null;
                    throw new ApplicationException("SYS_PREFT table does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetTransFees(string TransID)
        {
            DataTable dt;
            String strSQL = string.Empty;
            try
            {
                strSQL = "SELECT * FROM BK_TRANSFEES WHERE TransID = '" + TransID + "'";
                dt = objDCom.Execute(strSQL, CommandType.Text, true);
                if (dt != null && dt.Rows.Count > 0)
                {
                    return dt;

                }
                else
                {
                    return null;
                    throw new ApplicationException("SYS_PREFT table does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetDefaultBundle(string Flight, string carriercode = "")
        {
            DataTable dt;
            String strSQL = string.Empty;
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();
                }
                strSQL = "SELECT SYSValue FROM SYS_PREFT WHERE SYSKey = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, Flight) + "' AND SysValueEx LIKE '%" + carriercode + "%'";
                dt = objDCom.Execute(strSQL, CommandType.Text, true);
                if (dt != null && dt.Rows.Count > 0)
                {
                    //log.Warning(this, "Return dt");
                    return dt;

                }
                else
                {
                    return null;
                    throw new ApplicationException("SYS_PREFT table does not exist.");
                }

                return null;
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                log.Error(this, ex);
                return null;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        public DataTable GetSysPreftbyGrpID(string GrpID, String SysKey = "")
        {
            DataTable dt;
            string condition = "";
            String strSQL = string.Empty;
            try
            {
                if (SysKey != "")
                {
                    condition = " AND SYSKey LIKE '%" + SysKey + "%'";
                }
                strSQL = "SELECT * FROM SYS_PREFT WHERE GrpID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, GrpID) + "'" + condition;
                dt = objDCom.Execute(strSQL, CommandType.Text, true);
                if (dt != null && dt.Rows.Count > 0)
                {
                    return dt;

                }
                else
                {
                    return null;
                    throw new ApplicationException("SYS_PREFT table does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetFeeSettingbyGrpID(string GrpID, String SysKey = "")
        {
            DataTable dt;
            string condition = "";
            String strSQL = string.Empty;
            try
            {
                if (SysKey != "")
                {
                    condition = " AND SYSKey LIKE '%" + SysKey + "%'";
                }
                strSQL = "SELECT * FROM FEESETTING WHERE GroupCode = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, GrpID) + "'" + condition;
                dt = objDCom.Execute(strSQL, CommandType.Text, true);
                if (dt != null && dt.Rows.Count > 0)
                {
                    return dt;

                }
                else
                {
                    return null;
                    throw new ApplicationException("SYS_PREFT table does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable GetSysPreftByPromoCode(string syskey, string haul = "")
        {
            DataTable dt;
            String strSQL = string.Empty;
            try
            {
                strSQL = "SELECT GrpID, SYSKey, SYSValue, SYSValueEx, SYSSet FROM SYS_PREFT WHERE SYSKey = '" + syskey + "' ";
                if (haul != "")
                {
                    strSQL += "and grpID = '" + haul + "'";
                }
                dt = objDCom.Execute(strSQL, CommandType.Text, true);
                if (dt != null && dt.Rows.Count > 0)
                {
                    return dt;

                }
                else
                {
                    return null;
                    throw new ApplicationException("SYS_PREFT table does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable getTemFlight(string sessionID, string departure, string arrival, string loginname, bool ifreturn)
        {
            DataTable dt = new DataTable();
            String strSQL = string.Empty;
            string strFields = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                strFields = GetSqlFields(lstFields);
                strSQL = "SELECT temFlight_ID as TemFlightId,temFlight_CarrierCode AS temFlightCarrierCode,temFlight_FlightNumber AS temFlightFlightNumber, ";
                strSQL += " temFlight_Departure AS temFlightDeparture,temFlight_STD AS temFlightSTD,temFlight_Arrival AS TemFlightArrival, ";
                strSQL += " temFlight_STA AS temFlightSTA FROM temFlight WHERE temFlight_Departure ='" + departure + "'";
                strSQL += " AND temFlight_Arrival ='" + arrival + "' AND temFlight_AgentName ='" + loginname + "' AND temFlight_ifReturn = '" + ifreturn + "'";
                strSQL += " AND temFlight_Signature ='" + sessionID + "'";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    return dt;
                }
                else { return null; }
            }
            catch
            {
                return null;
            }
        }


        public DataTable IsAllow(string sessionID, string departure, string arrival, string loginname, bool ifreturn)
        {
            DataTable dt = new DataTable();
            String strSQL = string.Empty;
            string strFields = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {

                strSQL = "''";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    return dt;
                }
                else { return null; }
            }
            catch
            {
                return null;
            }
        }

        public static string Serialize(object dataToSerialize)
        {
            if (dataToSerialize == null) return null;

            using (System.IO.StringWriter stringwriter = new System.IO.StringWriter())
            {
                var serializer = new XmlSerializer(dataToSerialize.GetType());
                serializer.Serialize(stringwriter, dataToSerialize);
                return stringwriter.ToString();
            }
        }

        public static T Deserialize<T>(string xmlText)
        {
            if (String.IsNullOrWhiteSpace(xmlText)) return default(T);

            using (System.IO.StringReader stringReader = new System.IO.StringReader(xmlText))
            {
                var serializer = new XmlSerializer(typeof(T));
                return (T)serializer.Deserialize(stringReader);
            }
        }

        public void tempInsure(searchcondition model, string LoginName, string SessionID, bool change = false, decimal totalPrevious = 0, decimal totalReturnPrevious = 0, bool ReturnOnly = false)
        {
            ABS.Navitaire.APIBooking APIBooking = new ABS.Navitaire.APIBooking(SessionID);
            ABS.Navitaire.BookingManager.GetAvailabilityResponse response = APIBooking.GetAvailability(model.Arrival, model.DepartDate, model.Currency, model.Departure, model.PaxNum, ref SessionID, model.PromoCode);
        }
        public void tempFlight(searchcondition model, string LoginName, string SessionID, bool change = false, decimal totalPrevious = 0, decimal totalReturnPrevious = 0, bool ReturnOnly = false)
        {
            var profiler = MiniProfiler.Current;
            ABS.Navitaire.APIBooking APIBooking = new ABS.Navitaire.APIBooking(SessionID);
            ABS.Navitaire.BookingManager.GetAvailabilityResponse response = new GetAvailabilityResponse();// APIBooking.GetAvailability(model.Arrival, model.DepartDate, model.Currency, model.Departure, model.PaxNum, ref SessionID, model.PromoCode);
            using (profiler.Step("Navitaire:GetAvailability"))
            {
                response = APIBooking.GetAvailability(model.Arrival, model.DepartDate, model.Currency, model.Departure, model.PaxNum, ref SessionID, model.PromoCode);
            }
            //GetAvailabilityResponse response = bookingAPI.GetAvailability(model, SessionID); 
            //string responsexml = GetXMLString(response);

            //string responsexml = "";

            //for (int a = 0; a < response.GetTripAvailabilityResponse.Schedules.Length; a++)
            //{
            //    responsexml += Serialize(response.GetTripAvailabilityResponse.Schedules[a]);
            //}

            DataTable dtTempFlight = new DataTable();
            int count = 0;
            int segmtCount = 0;

            DateTime OriginSTA = new DateTime();
            int len = 0;
            int reqPaxNum = model.PaxNum; //added by diana 20140127, store PaxNum
            int reqInftNum = model.InfantNum;

            if (ReturnOnly == false)
            {
                #region oneway
                len = 0;

                reqPaxNum = model.PaxNum; //added by diana 20140127, store PaxNum

                if (response.GetTripAvailabilityResponse.Schedules[0].Length > 0)
                {
                    len = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys.Length;
                }
                else
                {
                    len = 0;
                }
                /*
                try
                {             
                    len = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys.Length;
                }
                catch { len = 0; }*/

                //added by ketee, store the last arrival datetime 
                OriginSTA = new DateTime();

                if (len > 0)
                {
                    //create Datatable                
                    dtTempFlight = dtFlight();

                    for (int i = 0; i < len; i++)
                    {
                        int FareLen = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].Fares.Length;

                        // added by diana 20140420, check for price
                        if (change == true)
                        {
                            bool higherPrice = false;
                            for (int y = 0; y < FareLen; y++)
                            {
                                decimal farePrice = 0, airTax = 0, fuelChrg = 0, othChrg = 0, servCharge = 0, discCharge = 0, promoDiscCharge = 0, totChrg = 0;
                                decimal chdFarePrice = 0, chdAirTax = 0, chdFuelChrg = 0, chdOthChrg = 0, chdServCharge = 0, chdDiscCharge = 0, chdPromoDiscCharge = 0, chdTotChrg = 0;

                                Fare fare = (response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].Fares[y]);
                                PaxFare paxfare = fare.PaxFares[0];
                                PaxFare chdpaxfare = fare.PaxFares[1];
                                int AvailableCount = ((AvailableFare)fare).AvailableCount;

                                foreach (BookingServiceCharge charges in paxfare.ServiceCharges)
                                {
                                    switch (charges.ChargeType.ToString().ToUpper())
                                    {
                                        case "FAREPRICE":
                                            farePrice += charges.Amount;
                                            break;
                                        case "DISCOUNT":
                                            discCharge -= charges.Amount;
                                            break;
                                        case "PROMOTIONDISCOUNT":
                                            promoDiscCharge -= charges.Amount;
                                            break;
                                        case "TRAVELFEE":
                                            switch (charges.ChargeCode.ToString().ToUpper())
                                            {
                                                case "APT":
                                                case "ATF":
                                                case "APTF":
                                                    airTax += charges.Amount;
                                                    break;
                                                case "FUEL":
                                                    fuelChrg += charges.Amount;
                                                    break;
                                                default:
                                                    fuelChrg += charges.Amount;
                                                    break;
                                            }
                                            break;
                                        default:
                                            fuelChrg += charges.Amount;
                                            break;
                                    }
                                }

                                foreach (BookingServiceCharge charges in chdpaxfare.ServiceCharges)
                                {
                                    switch (charges.ChargeType.ToString().ToUpper())
                                    {
                                        case "FAREPRICE":
                                            chdFarePrice += charges.Amount;
                                            break;
                                        case "DISCOUNT":
                                            chdDiscCharge -= charges.Amount;
                                            break;
                                        case "PROMOTIONDISCOUNT":
                                            chdPromoDiscCharge -= charges.Amount;
                                            break;
                                        case "TRAVELFEE":
                                            switch (charges.ChargeCode.ToString().ToUpper())
                                            {
                                                case "APT":
                                                case "ATF":
                                                case "APTF":
                                                    chdAirTax += charges.Amount;
                                                    break;
                                                case "FUEL":
                                                    chdFuelChrg += charges.Amount;
                                                    break;
                                                default:
                                                    chdFuelChrg += charges.Amount;
                                                    break;
                                            }
                                            break;
                                        default:
                                            chdFuelChrg += charges.Amount;
                                            break;
                                    }
                                }
                                totChrg = (farePrice + discCharge + promoDiscCharge + airTax + fuelChrg) * model.GuestNum;
                                chdTotChrg = (chdFarePrice + chdDiscCharge + chdPromoDiscCharge + chdAirTax + chdFuelChrg) * model.ChildNum;

                                if ((totChrg + chdTotChrg) >= totalPrevious)
                                {
                                    //if (model.PaxNum <= AvailableCount)
                                    //{
                                    higherPrice = true;
                                    break;
                                    //}
                                }
                            }

                            if (higherPrice == false)
                            {
                                FareLen = 0;
                            }

                        }
                        // end added by diana 20140420, check for price

                        //added by diana 20140127 - check for available seat
                        int eachFareLen = 0;
                        int AvailablePaxCount = 0;
                        int AvailableTransitCount = 0;
                        int availableINFTCount = 0;
                        int availableINFTTransitCount = 0;

                        if (FareLen > 0) //if there is fare
                        {
                            //if (response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments.Count() > 1) //only if flight is connecting flight
                            //{
                            string FlightNumber = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.FlightNumber;
                            //SessionID = ""; //remarked by diana 20170412

                            //temp remarked by diana 20160517, class service is sold out
                            //GetAvailabilityResponse eachFlightResponse = APIBooking.GetOneAvailability(model.PaxNum, model.GuestNum, model.DepartDate, model.Departure, model.Arrival, FlightNumber, model.Currency, ref SessionID); //get single availability
                            //eachFareLen = eachFlightResponse.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments[0].Fares.Length;

                            //Fare avaiFare = new Fare();
                            //if (FareLen > 0) //if there is fare
                            //{
                            foreach (Fare avaiFare in response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].Fares) //load all fares
                            {
                                if (avaiFare.ClassOfService.ToString() != "N" && avaiFare.ClassOfService.ToString() != "D")
                                {
                                    if (AvailablePaxCount < ((AvailableFare)avaiFare).AvailableCount)
                                        AvailablePaxCount = ((AvailableFare)avaiFare).AvailableCount;
                                }
                            }

                            if (response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments.Length > 1)
                            {
                                foreach (Fare avaiFare in response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].Fares) //load all fares
                                {
                                    if (avaiFare.ClassOfService.ToString() != "N" && avaiFare.ClassOfService.ToString() != "D")
                                    {
                                        if (AvailableTransitCount < ((AvailableFare)avaiFare).AvailableCount)
                                            AvailableTransitCount = ((AvailableFare)avaiFare).AvailableCount;
                                    }
                                }
                                if (AvailablePaxCount > AvailableTransitCount)
                                    AvailablePaxCount = AvailableTransitCount;
                            }
                            //    //avaiFare = eachFlightResponse.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments[0].Fares[eachFareLen - 1]; //get last fare
                            //}

                            //add by ketee, validate if INFT insufficient
                            if (reqInftNum > 0)
                            {
                                Navitaire.BookingManager.Booking book = new Navitaire.BookingManager.Booking();

                                //GetAvailabilityResponse eachFlightResponse = APIBooking.GetOneAvailability(model.PaxNum, model.GuestNum, model.DepartDate, model.Departure, model.Arrival, FlightNumber, model.Currency, ref SessionID); //get single availability

                                string Origin = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].DepartureStation;
                                string Arival = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].ArrivalStation;
                                DateTime DepartureDate = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].STD;
                                string carrierCode = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.CarrierCode;


                                GetSSRAvailabilityResponse getSSRAvailabilityResponsese = APIBooking.GetSSRAvailability(SessionID, carrierCode, FlightNumber, DepartureDate, Origin, Arival);

                                if (getSSRAvailabilityResponsese != null)
                                {
                                    if (getSSRAvailabilityResponsese.SSRAvailabilityResponse.SegmentSSRs.Length > 0)
                                    {
                                        foreach (InventorySegmentSSRNest ssr in getSSRAvailabilityResponsese.SSRAvailabilityResponse.SegmentSSRs)
                                        {
                                            if (ssr.SSRNestCode == "INFT")
                                            {
                                                availableINFTCount = ssr.MinLegAvailable;
                                                break;
                                            }
                                        }
                                    }
                                }

                                if (response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments.Length > 1)
                                {
                                    string Origin2 = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].DepartureStation;
                                    string Arival2 = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].ArrivalStation;
                                    DateTime DepartureDate2 = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].STD;
                                    string carrierCode2 = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].FlightDesignator.CarrierCode;
                                    string FlightNumber2 = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].FlightDesignator.FlightNumber;

                                    GetSSRAvailabilityResponse getSSRAvailabilityResponses2 = APIBooking.GetSSRAvailability(SessionID, carrierCode2, FlightNumber2, DepartureDate2, Origin2, Arival2);

                                    if (getSSRAvailabilityResponses2 != null)
                                    {
                                        if (getSSRAvailabilityResponses2.SSRAvailabilityResponse.SegmentSSRs.Length > 0)
                                        {
                                            foreach (InventorySegmentSSRNest ssr in getSSRAvailabilityResponses2.SSRAvailabilityResponse.SegmentSSRs)
                                            {
                                                if (ssr.SSRNestCode == "INFT")
                                                {
                                                    availableINFTTransitCount = ssr.MinLegAvailable;
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    if (availableINFTCount > availableINFTTransitCount)
                                        availableINFTCount = availableINFTTransitCount;
                                }
                            }
                            //}
                            //else
                            //{
                            //    AvailablePaxCount = reqPaxNum;
                            //}
                        }
                        //end added by diana 20140127 - check for available seat


                        //remark by ketee, add condition to show insufficient seats
                        //if (FareLen > 0 && AvailablePaxCount >= reqPaxNum)
                        //{
                        //    DataRow row;
                        //    row = dtTempFlight.NewRow();

                        //    string groupNameTransit = "";
                        //    bool isVisibleTransit = true;
                        //    segmtCount = (response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments.Count());
                        //    if (segmtCount > 1)
                        //    {
                        //        row["TemFlightTransit"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].DepartureStation;
                        //        row["TemFlightSta2"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].STA;
                        //        row["TemFlightStd2"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].STD;
                        //        row["TemFlightCarrierCode2"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].FlightDesignator.CarrierCode;
                        //        row["TemFlightFlightNumber2"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].FlightDesignator.FlightNumber;
                        //        //groupNameTransit = objGeneral.getOPTGroupByCarrierCode(row["TemFlightCarrierCode2"].ToString());
                        //        isVisibleTransit = objGeneral.getVisibilityByCarrierCode(row["TemFlightCarrierCode2"].ToString());
                        //    }

                        //    row["TemFlightId"] = count + 1;
                        //    row["TemFlightArrival"] = model.Arrival;
                        //    row["TemFlightCurrencyCode"] = model.Currency;
                        //    row["TemFlightDate"] = model.DepartDate;
                        //    row["TemFlightDeparture"] = model.Departure;
                        //    row["TemFlightSignature"] = SessionID;
                        //    row["TemFlightCarrierCode"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.CarrierCode;//model.Carrier; 
                        //    row["TemFlightFlightNumber"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.FlightNumber;
                        //    row["TemFlightStd"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].STD;
                        //    row["TemFlightSta"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].STA;
                        //    row["TemFlightJourneySellKey"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].JourneySellKey;
                        //    row["TemFlightAgentName"] = LoginName;// SessionManager._LoginName;
                        //    row["TemFlightIfReturn"] = false;
                        //    row["TemFlightPaxNum"] = model.PaxNum;
                        //    row["TemFlightADTNum"] = model.GuestNum;
                        //    row["TemFlightCHDNum"] = model.ChildNum;
                        //    OriginSTA = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].STA;

                        //    //string groupName = objGeneral.getOPTGroupByCarrierCode(row["TemFlightCarrierCode"].ToString());
                        //    //if (groupName != "AAX" && groupNameTransit != "AAX") //unremark by diana 20140120 - allow AAX flight

                        //    //added by diana 20140121 - to set either flight could be chosen or not
                        //    bool isVisible = objGeneral.getVisibilityByCarrierCode(row["TemFlightCarrierCode"].ToString());

                        //    //added by diana 20161228, add only if flight time more than 2 hours
                        //    if (isVisible == true && isVisibleTransit == true) //(Convert.ToDateTime(row["TemFlightDate"].ToString()) - DateTime.Now).TotalHours >= 2 && isVisible == true && isVisibleTransit == true)
                        //    {
                        //        dtTempFlight.Rows.Add(row);
                        //        count += 1;
                        //    }
                        //    //remark by ketee
                        //    //count = i;
                        //}


                        //added by ketee, if available pax was insufficient 

                        DataRow row;
                        row = dtTempFlight.NewRow();

                        string groupNameTransit = "";
                        bool isVisibleTransit = true;
                        segmtCount = (response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments.Count());
                        if (segmtCount > 1)
                        {
                            row["TemFlightTransit"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].DepartureStation;
                            row["TemFlightSta2"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].STA;
                            row["TemFlightStd2"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].STD;
                            row["TemFlightCarrierCode2"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].FlightDesignator.CarrierCode;
                            row["TemFlightFlightNumber2"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].FlightDesignator.FlightNumber;
                            //groupNameTransit = objGeneral.getOPTGroupByCarrierCode(row["TemFlightCarrierCode2"].ToString());
                            isVisibleTransit = objGeneral.getVisibilityByCarrierCode(row["TemFlightCarrierCode2"].ToString());
                        }

                        row["TemFlightId"] = count + 1;
                        row["TemFlightArrival"] = model.Arrival;
                        row["TemFlightCurrencyCode"] = model.Currency;
                        row["TemFlightDate"] = model.DepartDate;
                        row["TemFlightDeparture"] = model.Departure;
                        row["TemFlightSignature"] = SessionID;
                        row["TemFlightCarrierCode"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.CarrierCode;//model.Carrier; 
                        row["TemFlightFlightNumber"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.FlightNumber;
                        row["TemFlightStd"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].STD;
                        row["TemFlightSta"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].STA;
                        row["TemFlightInternational"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].International;
                        row["TemFlightJourneySellKey"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].JourneySellKey;
                        row["TemFlightAgentName"] = LoginName;// SessionManager._LoginName;
                        row["TemFlightIfReturn"] = false;
                        row["TemFlightPaxNum"] = model.PaxNum;
                        row["TemFlightADTNum"] = model.GuestNum;
                        row["TemFlightCHDNum"] = model.ChildNum;
                        row["TemFlightPromoCode"] = model.PromoCode;
                        OriginSTA = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].STA;

                        //string groupName = objGeneral.getOPTGroupByCarrierCode(row["TemFlightCarrierCode"].ToString());
                        //if (groupName != "AAX" && groupNameTransit != "AAX") //unremark by diana 20140120 - allow AAX flight

                        //added by diana 20140121 - to set either flight could be chosen or not
                        bool isVisible = objGeneral.getVisibilityByCarrierCode(row["TemFlightCarrierCode"].ToString());

                        if (AvailablePaxCount < reqPaxNum)
                        {
                            row["Insufficient"] = "Insufficient Seat";
                        }

                        if (reqInftNum > 0 && availableINFTCount < reqInftNum)
                        {
                            row["Insufficient"] = "Insufficient Seat";
                        }

                        if (FareLen <= 0 && row["Insufficient"].ToString() == "")
                            row["Insufficient"] = "No Fare";

                        if (response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].STD > DateTime.Now.AddHours(4) == false)
                        {
                            isVisible = false; //oneway
                        }

                        if (isVisible == true && isVisibleTransit == true) //(Convert.ToDateTime(row["TemFlightDate"].ToString()) - DateTime.Now).TotalHours >= 2 && isVisible == true && isVisibleTransit == true)
                        {
                            dtTempFlight.Rows.Add(row);
                            count += 1;
                        }

                        //HttpContext.Current.Session.Add("tempFlightDepart", dtTempFlight);
                    }
                }
                #endregion
            }
            else //if return only =true, then add 1 temflight to prevent error
            {
                //create Datatable                
                dtTempFlight = dtFlight();

                DataRow row;
                row = dtTempFlight.NewRow();

                row["TemFlightId"] = 0;
                row["TemFlightArrival"] = model.Arrival;
                row["TemFlightCurrencyCode"] = model.Currency;
                row["TemFlightDate"] = model.DepartDate;
                row["TemFlightDeparture"] = model.Departure;
                row["TemFlightSignature"] = SessionID;
                row["TemFlightCarrierCode"] = "";//model.Carrier; 
                row["TemFlightFlightNumber"] = "";
                row["TemFlightStd"] = DateTime.Now;
                row["TemFlightSta"] = DateTime.Now;
                row["TemFlightInternational"] = "false";
                row["TemFlightJourneySellKey"] = "";
                row["TemFlightAgentName"] = LoginName;// SessionManager._LoginName;
                row["TemFlightIfReturn"] = false;
                row["TemFlightPaxNum"] = model.PaxNum;
                row["TemFlightADTNum"] = model.GuestNum;
                row["TemFlightCHDNum"] = model.ChildNum;
                row["TemFlightPromoCode"] = model.PromoCode;
                dtTempFlight.Rows.Add(row);
            }
            #region    return fly

            //verify if return date time is valid

            bool contNext = false;
            if (model.ifOneWay == false && dtTempFlight.Rows.Count > 0) //if oneway tempFlight is ok, then may continue
            {
                contNext = true;
            }
            else if (model.ifOneWay == false && ReturnOnly == true) //if return only, then may continue
            {
                contNext = true;
                //create Datatable                
                dtTempFlight = dtFlight();
            }
            if (contNext == true) //amended by ketee
            {
                searchcondition model2 = new searchcondition();
                model2 = GetReturnModel(model);
                //added by ketee, validate valid departure date for return
                //amended by diana 20170417, condition to check return date
                if (OriginSTA.Date <= model2.DepartDate.Date)
                {
                    GetAvailabilityResponse response2 = new GetAvailabilityResponse();// APIBooking.GetAvailability(model2.Arrival, model2.DepartDate, model2.Currency, model2.Departure, model2.PaxNum, ref SessionID, model2.PromoCode);
                    using (profiler.Step("Navitaire:GetAvailability"))
                    {
                        response2 = APIBooking.GetAvailability(model2.Arrival, model2.DepartDate, model2.Currency, model2.Departure, model2.PaxNum, ref SessionID, model2.PromoCode);
                    }

                    //string xml = GetXMLString(response2);

                    bool cont = false;
                    if (len != 0) //if previous len is >0
                    {
                        cont = true;
                    }
                    else if (ReturnOnly == true)//if only return, also may continue
                    {
                        cont = true;
                    }

                    if (cont == true)
                    {
                        if (response2.GetTripAvailabilityResponse.Schedules[0].Length > 0)
                        {
                            len = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys.Length;
                        }
                        else
                        {
                            len = 0;
                        }
                        /*
                        try
                        {
                            len = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys.Length;
                        }
                        catch { len = 0; }*/
                    }
                    if (len > 0)
                    {
                        DataRow rowTF;

                        count += 1;
                        int n = 0;
                        for (int i = 0; i < len; i++)
                        {
                            int FareLen = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].Fares.Length;

                            // added by diana 20140420, check for price
                            if (change == true)
                            {
                                bool higherPrice = false;
                                for (int y = 0; y < FareLen; y++)
                                {
                                    decimal farePrice = 0, airTax = 0, fuelChrg = 0, othChrg = 0, servCharge = 0, discCharge = 0, promoDiscCharge = 0, totChrg = 0;
                                    decimal chdFarePrice = 0, chdAirTax = 0, chdFuelChrg = 0, chdOthChrg = 0, chdServCharge = 0, chdDiscCharge = 0, chdPromoDiscCharge = 0, chdTotChrg = 0;

                                    Fare fare = (response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].Fares[y]);
                                    PaxFare paxfare = fare.PaxFares[0];
                                    PaxFare chdpaxfare = fare.PaxFares[1];
                                    int AvailableCount = ((AvailableFare)fare).AvailableCount;

                                    foreach (BookingServiceCharge charges in paxfare.ServiceCharges)
                                    {
                                        switch (charges.ChargeType.ToString().ToUpper())
                                        {
                                            case "FAREPRICE":
                                                farePrice += charges.Amount;
                                                break;
                                            case "DISCOUNT":
                                                discCharge -= charges.Amount;
                                                break;
                                            case "PROMOTIONDISCOUNT":
                                                promoDiscCharge -= charges.Amount;
                                                break;
                                            case "TRAVELFEE":
                                                switch (charges.ChargeCode.ToString().ToUpper())
                                                {
                                                    case "APT":
                                                    case "ATF":
                                                    case "APTF":
                                                        airTax += charges.Amount;
                                                        break;
                                                    case "FUEL":
                                                        fuelChrg += charges.Amount;
                                                        break;
                                                    default:
                                                        fuelChrg += charges.Amount;
                                                        break;
                                                }
                                                break;
                                            default:
                                                fuelChrg += charges.Amount;
                                                break;
                                        }
                                    }

                                    foreach (BookingServiceCharge charges in chdpaxfare.ServiceCharges)
                                    {
                                        switch (charges.ChargeType.ToString().ToUpper())
                                        {
                                            case "FAREPRICE":
                                                chdFarePrice += charges.Amount;
                                                break;
                                            case "DISCOUNT":
                                                chdDiscCharge -= charges.Amount;
                                                break;
                                            case "PROMOTIONDISCOUNT":
                                                chdPromoDiscCharge -= charges.Amount;
                                                break;
                                            case "TRAVELFEE":
                                                switch (charges.ChargeCode.ToString().ToUpper())
                                                {
                                                    case "APT":
                                                    case "ATF":
                                                    case "APTF":
                                                        chdAirTax += charges.Amount;
                                                        break;
                                                    case "FUEL":
                                                        chdFuelChrg += charges.Amount;
                                                        break;
                                                    default:
                                                        chdFuelChrg += charges.Amount;
                                                        break;
                                                }
                                                break;
                                            default:
                                                chdFuelChrg += charges.Amount;
                                                break;
                                        }
                                    }
                                    totChrg = (farePrice + discCharge + promoDiscCharge + airTax + fuelChrg) * model2.GuestNum;
                                    chdTotChrg = (chdFarePrice + chdDiscCharge + chdPromoDiscCharge + chdAirTax + chdFuelChrg) * model2.ChildNum;

                                    if ((totChrg + chdTotChrg) >= totalReturnPrevious)
                                    {
                                        //if (model2.PaxNum <= AvailableCount)
                                        //{
                                        higherPrice = true;
                                        break;
                                        //}
                                    }
                                }

                                if (higherPrice == false)
                                {
                                    FareLen = 0;
                                }

                            }
                            // end added by diana 20140420, check for price

                            //added by diana 20140127 - check for available seat
                            int eachFareLen = 0;
                            int AvailablePaxCount = 0;
                            int AvailableTransitCount = 0;
                            //added by ketee, validate if infant pax is sufficient
                            int availableINFTCount = 0;
                            int availableINFTTransitCount = 0;
                            if (FareLen > 0) //if there is fare
                            {
                                //if (response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments.Count() > 1) //only if flight is connecting flight
                                //{
                                string FlightNumber = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.FlightNumber;
                                //SessionID = "";
                                //temp remarked by diana 20160517, class service is sold out
                                //GetAvailabilityResponse eachFlightResponse = APIBooking.GetOneAvailability(model.PaxNum, model.GuestNum, model.ReturnDate, model.Arrival, model.Departure, FlightNumber, model.Currency, ref SessionID); //get single availability
                                //eachFareLen = eachFlightResponse.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments[0].Fares.Length;
                                //Fare avaiFare = new Fare();
                                //if (eachFareLen > 0) //if there is fare
                                //{
                                foreach (Fare avaiFare in response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].Fares) //load all fares
                                {
                                    if (avaiFare.ClassOfService.ToString() != "N" && avaiFare.ClassOfService.ToString() != "D")
                                    {
                                        if (AvailablePaxCount < ((AvailableFare)avaiFare).AvailableCount)
                                            AvailablePaxCount = ((AvailableFare)avaiFare).AvailableCount;
                                    }
                                }
                                if (response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments.Length > 1)
                                {
                                    foreach (Fare avaiFare in response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].Fares) //load all fares
                                    {
                                        if (avaiFare.ClassOfService.ToString() != "N" && avaiFare.ClassOfService.ToString() != "D")
                                        {
                                            if (AvailableTransitCount < ((AvailableFare)avaiFare).AvailableCount)
                                                AvailableTransitCount = ((AvailableFare)avaiFare).AvailableCount;
                                        }
                                    }
                                    if (AvailablePaxCount > AvailableTransitCount)
                                        AvailablePaxCount = AvailableTransitCount;
                                }
                                //    //avaiFare = eachFlightResponse.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments[0].Fares[eachFareLen - 1]; //get last fare
                                //}


                                //add by ketee, validate if INFT insufficient
                                if (reqInftNum > 0)
                                {
                                    Navitaire.BookingManager.Booking book = new Navitaire.BookingManager.Booking();
                                    //GetAvailabilityResponse eachFlightResponse = APIBooking.GetOneAvailability(model.PaxNum, model.GuestNum, model.ReturnDate, model.Arrival, model.Departure, FlightNumber, model.Currency, ref SessionID); //get single availability

                                    //always get the 1st segment
                                    string Origin = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].DepartureStation;
                                    string Arival = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].ArrivalStation;

                                    DateTime DepartureDate = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].STD;
                                    string carrierCode = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.CarrierCode;


                                    GetSSRAvailabilityResponse getSSRAvailabilityResponsese = APIBooking.GetSSRAvailability(SessionID, carrierCode, FlightNumber, DepartureDate, Origin, Arival);

                                    if (getSSRAvailabilityResponsese != null)
                                    {
                                        if (getSSRAvailabilityResponsese.SSRAvailabilityResponse.SegmentSSRs.Length > 0)
                                        {
                                            foreach (InventorySegmentSSRNest ssr in getSSRAvailabilityResponsese.SSRAvailabilityResponse.SegmentSSRs)
                                            {
                                                if (ssr.SSRNestCode == "INFT")
                                                {
                                                    availableINFTCount = ssr.MinLegAvailable;
                                                }
                                            }
                                        }
                                    }
                                    if (response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments.Length > 1)
                                    {
                                        string Origin2 = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].DepartureStation;
                                        string Arival2 = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].ArrivalStation;
                                        DateTime DepartureDate2 = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].STD;
                                        string carrierCode2 = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].FlightDesignator.CarrierCode;
                                        string FlightNumber2 = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].FlightDesignator.FlightNumber;

                                        GetSSRAvailabilityResponse getSSRAvailabilityResponses2 = APIBooking.GetSSRAvailability(SessionID, carrierCode2, FlightNumber2, DepartureDate2, Origin2, Arival2);

                                        if (getSSRAvailabilityResponses2 != null)
                                        {
                                            if (getSSRAvailabilityResponses2.SSRAvailabilityResponse.SegmentSSRs.Length > 0)
                                            {
                                                foreach (InventorySegmentSSRNest ssr in getSSRAvailabilityResponses2.SSRAvailabilityResponse.SegmentSSRs)
                                                {
                                                    if (ssr.SSRNestCode == "INFT")
                                                    {
                                                        availableINFTTransitCount = ssr.MinLegAvailable;
                                                        break;
                                                    }
                                                }
                                            }
                                        }

                                        if (availableINFTCount > availableINFTTransitCount)
                                            availableINFTCount = availableINFTTransitCount;
                                    }
                                }
                                //}
                                //else
                                //{
                                //    AvailablePaxCount = reqPaxNum;
                                //}
                            }
                            //end added by diana 20140127 - check for available seat

                            ////if (FareLen > 0 && AvailablePaxCount >= reqPaxNum)
                            ////{
                            ////    DataRow row;
                            ////    row = dtTempFlight.NewRow();
                            ////    string groupNameTransit = "";
                            ////    bool isVisibleTransit = true;
                            ////    segmtCount = (response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments.Count());
                            ////    if (segmtCount > 1)
                            ////    {
                            ////        row["TemFlightTransit"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].DepartureStation;
                            ////        row["TemFlightSta2"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].STA;
                            ////        row["TemFlightStd2"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].STD;
                            ////        row["TemFlightCarrierCode2"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].FlightDesignator.CarrierCode;
                            ////        row["TemFlightFlightNumber2"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].FlightDesignator.FlightNumber;
                            ////        row["TemFlightOpSuffix2"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].FlightDesignator.OpSuffix;
                            ////        //groupNameTransit = objGeneral.getOPTGroupByCarrierCode(row["TemFlightCarrierCode2"].ToString());
                            ////        isVisibleTransit = objGeneral.getVisibilityByCarrierCode(row["TemFlightCarrierCode2"].ToString());
                            ////    }
                            ////    row["TemFlightId"] = count + n;
                            ////    row["TemFlightArrival"] = model2.Arrival;
                            ////    row["TemFlightCurrencyCode"] = model2.Currency;
                            ////    row["TemFlightDate"] = model2.DepartDate;
                            ////    row["TemFlightDeparture"] = model2.Departure;
                            ////    row["TemFlightSignature"] = SessionID;
                            ////    row["TemFlightCarrierCode"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.CarrierCode;//model.Carrier; 
                            ////    row["TemFlightFlightNumber"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.FlightNumber;
                            ////    //added by ketee, opsuffix
                            ////    row["TemFlightOpSuffix"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.OpSuffix;
                            ////    row["TemFlightStd"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].STD;
                            ////    row["TemFlightSta"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].STA;
                            ////    row["TemFlightInternational"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].International;
                            ////    row["TemFlightJourneySellKey"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].JourneySellKey;
                            ////    row["TemFlightAgentName"] = LoginName;// SessionManager._LoginName;
                            ////    row["TemFlightIfReturn"] = true;
                            ////    row["TemFlightPaxNum"] = model2.PaxNum;
                            ////    row["TemFlightADTNum"] = model2.GuestNum;
                            ////    row["TemFlightCHDNum"] = model2.ChildNum;

                            ////    //added by ketee 20131113, remove aax flight
                            ////    //string groupName = objGeneral.getOPTGroupByCarrierCode(row["TemFlightCarrierCode"].ToString());
                            ////    //if (groupName != "AAX" && groupNameTransit != "AAX")

                            ////    //added by diana 20140121 - to set either flight could be chosen or not
                            ////    bool isVisible = objGeneral.getVisibilityByCarrierCode(row["TemFlightCarrierCode"].ToString());

                            ////    //added by diana 20161228, to check if flight is more than 2 hours
                            ////    if (isVisible == true && isVisibleTransit == true) //(Convert.ToDateTime(row["TemFlightDate"].ToString()) - DateTime.Now).TotalHours >= 2 && isVisible == true && isVisibleTransit == true)
                            ////    {
                            ////        dtTempFlight.Rows.Add(row);
                            ////        n += 1;
                            ////        //    count += 1;
                            ////    }

                            ////    //dtTempFlight.Rows.Add(row);
                            ////}


                            DataRow row;
                            row = dtTempFlight.NewRow();
                            string groupNameTransit = "";
                            bool isVisibleTransit = true;
                            segmtCount = (response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments.Count());
                            if (segmtCount > 1)
                            {
                                row["TemFlightTransit"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].DepartureStation;
                                row["TemFlightSta2"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].STA;
                                row["TemFlightStd2"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].STD;
                                row["TemFlightCarrierCode2"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].FlightDesignator.CarrierCode;
                                row["TemFlightFlightNumber2"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].FlightDesignator.FlightNumber;
                                row["TemFlightOpSuffix2"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].FlightDesignator.OpSuffix;
                                //groupNameTransit = objGeneral.getOPTGroupByCarrierCode(row["TemFlightCarrierCode2"].ToString());
                                isVisibleTransit = objGeneral.getVisibilityByCarrierCode(row["TemFlightCarrierCode2"].ToString());
                            }
                            row["TemFlightId"] = count + n;
                            row["TemFlightArrival"] = model2.Arrival;
                            row["TemFlightCurrencyCode"] = model2.Currency;
                            row["TemFlightDate"] = model2.DepartDate;
                            row["TemFlightDeparture"] = model2.Departure;
                            row["TemFlightSignature"] = SessionID;
                            row["TemFlightCarrierCode"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.CarrierCode;//model.Carrier; 
                            row["TemFlightFlightNumber"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.FlightNumber;
                            //added by ketee, opsuffix
                            row["TemFlightOpSuffix"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.OpSuffix;
                            row["TemFlightStd"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].STD;
                            row["TemFlightSta"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].STA;
                            row["TemFlightInternational"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].International;
                            row["TemFlightJourneySellKey"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].JourneySellKey;
                            row["TemFlightAgentName"] = LoginName;// SessionManager._LoginName;
                            row["TemFlightIfReturn"] = true;
                            row["TemFlightPaxNum"] = model2.PaxNum;
                            row["TemFlightADTNum"] = model2.GuestNum;
                            row["TemFlightCHDNum"] = model2.ChildNum;
                            row["TemFlightPromoCode"] = model2.PromoCode;

                            //added by ketee 20131113, remove aax flight
                            //string groupName = objGeneral.getOPTGroupByCarrierCode(row["TemFlightCarrierCode"].ToString());
                            //if (groupName != "AAX" && groupNameTransit != "AAX")

                            //added by diana 20140121 - to set either flight could be chosen or not
                            bool isVisible = objGeneral.getVisibilityByCarrierCode(row["TemFlightCarrierCode"].ToString());

                            if (AvailablePaxCount < reqPaxNum)
                            {
                                row["Insufficient"] = "Insufficient Seat";
                            }

                            if (reqInftNum > 0 && availableINFTCount < reqInftNum)
                            {
                                row["Insufficient"] = "Insufficient Seat";
                            }

                            if (FareLen <= 0 && row["Insufficient"].ToString() == "")
                                row["Insufficient"] = "No Fare";

                            if (response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].STD > DateTime.Now.AddHours(4) == false)
                            {
                                isVisible = false;
                            }

                            //added by diana 20161228, to check if flight is more than 2 hours
                            if (isVisible == true && isVisibleTransit == true) //(Convert.ToDateTime(row["TemFlightDate"].ToString()) - DateTime.Now).TotalHours >= 2 && isVisible == true && isVisibleTransit == true)
                            {
                                dtTempFlight.Rows.Add(row);
                                n += 1;
                                //    count += 1;
                            }

                            //dtTempFlight.Rows.Add(row);

                        }
                        //HttpContext.Current.Session.Add("tempFlightReturn", dtTempFlight);
                    }
                }
                else
                {
                    HttpContext.Current.Session.Add("invalidreturnflight", "1");
                }
            }
            #endregion
            if (dtTempFlight.Rows.Count > 0)
            { HttpContext.Current.Session.Add("tempFlight", dtTempFlight); }
        }

        public void tempFlightBackup(searchcondition model, string LoginName, string SessionID)
        {
            ABS.Navitaire.APIBooking APIBooking = new ABS.Navitaire.APIBooking(SessionID);
            ABS.Navitaire.BookingManager.GetAvailabilityResponse response = APIBooking.GetAvailability(model.Arrival, model.DepartDate, model.Currency, model.Departure, model.PaxNum, ref SessionID, model.PromoCode);
            //GetAvailabilityResponse response = bookingAPI.GetAvailability(model, SessionID); 
            //string responsexml = GetXMLString(response);
            DataTable dtTempFlight = new DataTable();
            int count = 0;
            int segmtCount = 0;
            #region oneway
            int len = 0;

            int reqPaxNum = model.PaxNum; //added by diana 20140127, store PaxNum

            if (response.GetTripAvailabilityResponse.Schedules[0].Length > 0)
            {
                len = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys.Length;
            }
            else
            {
                len = 0;
            }
            /*
            try
            {             
                len = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys.Length;
            }
            catch { len = 0; }*/

            //added by ketee, store the last arrival datetime 
            DateTime OriginSTA = new DateTime();

            if (len > 0)
            {
                //create Datatable                
                dtTempFlight = dtFlight();

                for (int i = 0; i < len; i++)
                {
                    int FareLen = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].Fares.Length;

                    //added by diana 20140127 - check for available seat
                    int eachFareLen = 0;
                    int AvailablePaxCount = 0;

                    if (FareLen > 0) //if there is fare
                    {
                        //if (response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments.Count() > 1) //only if flight is connecting flight
                        //{
                        string FlightNumber = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.FlightNumber;
                        SessionID = "";
                        GetAvailabilityResponse eachFlightResponse = APIBooking.GetOneAvailability(model.PaxNum, model.GuestNum, model.DepartDate, model.Departure, model.Arrival, FlightNumber, model.Currency, ref SessionID, model.PromoCode); //get single availability
                        eachFareLen = eachFlightResponse.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments[0].Fares.Length;
                        //Fare avaiFare = new Fare();
                        if (eachFareLen > 0) //if there is fare
                        {
                            foreach (Fare avaiFare in eachFlightResponse.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments[0].Fares) //load all fares
                            {
                                if (avaiFare.ClassOfService.ToString() != "N" && avaiFare.ClassOfService.ToString() != "D")
                                {
                                    if (AvailablePaxCount < ((AvailableFare)avaiFare).AvailableCount)
                                        AvailablePaxCount = ((AvailableFare)avaiFare).AvailableCount;
                                }
                            }
                            //avaiFare = eachFlightResponse.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments[0].Fares[eachFareLen - 1]; //get last fare
                        }
                        //}
                        //else
                        //{
                        //    AvailablePaxCount = reqPaxNum;
                        //}
                    }
                    //end added by diana 20140127 - check for available seat

                    if (FareLen > 0 && AvailablePaxCount >= reqPaxNum)
                    {
                        DataRow row;
                        row = dtTempFlight.NewRow();

                        string groupNameTransit = "";
                        bool isVisibleTransit = true;
                        segmtCount = (response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments.Count());
                        if (segmtCount > 1)
                        {
                            row["TemFlightTransit"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].DepartureStation;
                            row["TemFlightSta2"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].STA;
                            row["TemFlightStd2"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].STD;
                            row["TemFlightCarrierCode2"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].FlightDesignator.CarrierCode;
                            row["TemFlightFlightNumber2"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].FlightDesignator.FlightNumber;
                            //groupNameTransit = objGeneral.getOPTGroupByCarrierCode(row["TemFlightCarrierCode2"].ToString());
                            isVisibleTransit = objGeneral.getVisibilityByCarrierCode(row["TemFlightCarrierCode2"].ToString());
                        }

                        row["TemFlightId"] = count + 1;
                        row["TemFlightArrival"] = model.Arrival;
                        row["TemFlightCurrencyCode"] = model.Currency;
                        row["TemFlightDate"] = model.DepartDate;
                        row["TemFlightDeparture"] = model.Departure;
                        row["TemFlightSignature"] = SessionID;
                        row["TemFlightCarrierCode"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.CarrierCode;//model.Carrier; 
                        row["TemFlightFlightNumber"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.FlightNumber;
                        row["TemFlightStd"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].STD;
                        row["TemFlightSta"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].STA;
                        row["TemFlightInternational"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].International;
                        row["TemFlightJourneySellKey"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].JourneySellKey;
                        row["TemFlightAgentName"] = LoginName;// SessionManager._LoginName;
                        row["TemFlightIfReturn"] = false;
                        row["TemFlightPaxNum"] = model.PaxNum;
                        row["TemFlightADTNum"] = model.GuestNum;
                        row["TemFlightCHDNum"] = model.ChildNum;
                        row["TemFlightPromoCode"] = model.PromoCode;
                        OriginSTA = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].STA;

                        //string groupName = objGeneral.getOPTGroupByCarrierCode(row["TemFlightCarrierCode"].ToString());
                        //if (groupName != "AAX" && groupNameTransit != "AAX") //unremark by diana 20140120 - allow AAX flight

                        //added by diana 20140121 - to set either flight could be chosen or not
                        bool isVisible = objGeneral.getVisibilityByCarrierCode(row["TemFlightCarrierCode"].ToString());
                        if (isVisible == true && isVisibleTransit == true)
                        {
                            dtTempFlight.Rows.Add(row);
                            count += 1;
                        }
                        //remark by ketee
                        //count = i;
                    }
                    //HttpContext.Current.Session.Add("tempFlightDepart", dtTempFlight);
                }
            }
            #endregion

            #region    return fly

            //verify if return date time is valid


            if (model.ifOneWay == false && dtTempFlight.Rows.Count > 0) //amended by ketee
            {
                searchcondition model2 = new searchcondition();
                model2 = GetReturnModel(model);
                //added by ketee, validate valid departure date for return
                if (OriginSTA < model2.DepartDate)
                {
                    GetAvailabilityResponse response2 = APIBooking.GetAvailability(model2.Arrival, model2.DepartDate, model2.Currency, model2.Departure, model2.PaxNum, ref SessionID, model2.PromoCode);
                    if (len != 0)
                    {
                        if (response2.GetTripAvailabilityResponse.Schedules[0].Length > 0)
                        {
                            len = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys.Length;
                        }
                        else
                        {
                            len = 0;
                        }
                        /*
                        try
                        {
                            len = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys.Length;
                        }
                        catch { len = 0; }*/
                    }
                    if (len > 0)
                    {
                        count += 1;
                        int n = 0;
                        for (int i = 0; i < len; i++)
                        {
                            int FareLen = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].Fares.Length;

                            //added by diana 20140127 - check for available seat
                            int eachFareLen = 0;
                            int AvailablePaxCount = 0;

                            if (FareLen > 0) //if there is fare
                            {
                                //if (response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments.Count() > 1) //only if flight is connecting flight
                                //{
                                string FlightNumber = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.FlightNumber;
                                SessionID = "";
                                GetAvailabilityResponse eachFlightResponse = APIBooking.GetOneAvailability(model.PaxNum, model.GuestNum, model.ReturnDate, model.Arrival, model.Departure, FlightNumber, model.Currency, ref SessionID, model.PromoCode); //get single availability
                                eachFareLen = eachFlightResponse.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments[0].Fares.Length;
                                //Fare avaiFare = new Fare();
                                if (eachFareLen > 0) //if there is fare
                                {
                                    foreach (Fare avaiFare in eachFlightResponse.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments[0].Fares) //load all fares
                                    {
                                        if (avaiFare.ClassOfService.ToString() != "N" && avaiFare.ClassOfService.ToString() != "D")
                                        {
                                            if (AvailablePaxCount < ((AvailableFare)avaiFare).AvailableCount)
                                                AvailablePaxCount = ((AvailableFare)avaiFare).AvailableCount;
                                        }
                                    }
                                    //avaiFare = eachFlightResponse.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments[0].Fares[eachFareLen - 1]; //get last fare
                                }
                                //}
                                //else
                                //{
                                //    AvailablePaxCount = reqPaxNum;
                                //}
                            }
                            //end added by diana 20140127 - check for available seat

                            if (FareLen > 0 && AvailablePaxCount >= reqPaxNum)
                            {
                                DataRow row;
                                row = dtTempFlight.NewRow();
                                string groupNameTransit = "";
                                bool isVisibleTransit = true;
                                segmtCount = (response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments.Count());
                                if (segmtCount > 1)
                                {
                                    row["TemFlightTransit"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].DepartureStation;
                                    row["TemFlightSta2"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].STA;
                                    row["TemFlightStd2"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].STD;
                                    row["TemFlightCarrierCode2"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].FlightDesignator.CarrierCode;
                                    row["TemFlightFlightNumber2"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].FlightDesignator.FlightNumber;
                                    //added by ketee, opsuffix
                                    row["TemFlightOpSuffix2"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[1].FlightDesignator.OpSuffix;
                                    //groupNameTransit = objGeneral.getOPTGroupByCarrierCode(row["TemFlightCarrierCode2"].ToString());
                                    isVisibleTransit = objGeneral.getVisibilityByCarrierCode(row["TemFlightCarrierCode2"].ToString());
                                }
                                row["TemFlightId"] = count + n;
                                row["TemFlightArrival"] = model2.Arrival;
                                row["TemFlightCurrencyCode"] = model2.Currency;
                                row["TemFlightDate"] = model2.DepartDate;
                                row["TemFlightDeparture"] = model2.Departure;
                                row["TemFlightSignature"] = SessionID;
                                row["TemFlightCarrierCode"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.CarrierCode;//model.Carrier; 
                                row["TemFlightFlightNumber"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.FlightNumber;
                                //added by ketee, opsuffix
                                row["TemFlightOpSuffix"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].FlightDesignator.OpSuffix;
                                row["TemFlightStd"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].STD;
                                row["TemFlightSta"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].STA;
                                row["TemFlightInternational"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].International;
                                row["TemFlightJourneySellKey"] = response2.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].JourneySellKey;
                                row["TemFlightAgentName"] = LoginName;// SessionManager._LoginName;
                                row["TemFlightIfReturn"] = true;
                                row["TemFlightPaxNum"] = model2.PaxNum;
                                row["TemFlightADTNum"] = model2.GuestNum;
                                row["TemFlightCHDNum"] = model2.ChildNum;
                                row["TemFlightPromoCode"] = model2.PromoCode;

                                //added by ketee 20131113, remove aax flight
                                //string groupName = objGeneral.getOPTGroupByCarrierCode(row["TemFlightCarrierCode"].ToString());
                                //if (groupName != "AAX" && groupNameTransit != "AAX")

                                //added by diana 20140121 - to set either flight could be chosen or not
                                bool isVisible = objGeneral.getVisibilityByCarrierCode(row["TemFlightCarrierCode"].ToString());
                                if (isVisible == true && isVisibleTransit == true)
                                {
                                    dtTempFlight.Rows.Add(row);
                                    n += 1;
                                    //    count += 1;
                                }

                                //dtTempFlight.Rows.Add(row);
                            }
                        }
                        //HttpContext.Current.Session.Add("tempFlightReturn", dtTempFlight);
                    }
                }
                else
                {
                    HttpContext.Current.Session.Add("invalidreturnflight", "1");
                }
            }
            #endregion
            if (dtTempFlight.Rows.Count > 0)
            { HttpContext.Current.Session.Add("tempFlight", dtTempFlight); }
        }

        #region check available fare (farelength)
        public int CheckAvailableFare(searchcondition model, string SessionID)
        {
            var profiler = MiniProfiler.Current;
            ABS.Navitaire.APIBooking APIBooking = new ABS.Navitaire.APIBooking(SessionID);
            ABS.Navitaire.BookingManager.GetAvailabilityResponse response = new GetAvailabilityResponse();// APIBooking.GetAvailability(model.Arrival, model.DepartDate, model.Currency, model.Departure, model.PaxNum, ref SessionID, model.PromoCode);
            using (profiler.Step("Navitaire:GetAvailability"))
            {
                response = APIBooking.GetAvailability(model.Arrival, model.DepartDate, model.Currency, model.Departure, model.PaxNum, ref SessionID, model.PromoCode);
            }
            //edit by ketee, loop all journey to verify routes existed
            int fareLenG = 0;
            for (int i = 0; i < response.GetTripAvailabilityResponse.Schedules[0][0].Journeys.Length; i++)
            {
                fareLenG = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[i].Segments[0].Fares.Length;
                if (fareLenG > 0)
                {
                    return 1;
                }
            }
            return 0;
            //int fareLenG = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments[0].Fares.Length;
        }
        #endregion

        private void ComputeFarePerPax_OLD(int Level, int ReqPax, ref TemFlight FlightTrip, ref GetAvailabilityResponse FlightResponse, string sessID)
        {
            decimal farePrice = 0, airTax = 0, paxFeeChrg = 0, fuelChrg = 0, othChrg = 0, servCharge = 0;

            int segmtCount = 0;
            segmtCount = (FlightResponse.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments.Count());

            for (int seg = 0; seg < segmtCount; seg++)
            {
                PaxFare paxfare = (FlightResponse.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments[seg].Fares[Level]).PaxFares[0];

                if (paxfare.ServiceCharges.Length > 0) farePrice += paxfare.ServiceCharges[0].Amount;
                if (paxfare.ServiceCharges.Length > 1) airTax += paxfare.ServiceCharges[1].Amount;
                if (paxfare.ServiceCharges.Length > 2)
                {
                    for (int n = 2; n < paxfare.ServiceCharges.Length; n++)
                    {
                        fuelChrg += paxfare.ServiceCharges[n].Amount;
                    }
                }
            }

            //book.Passengers[0].PassengerFees[0].FeeCode
            //PassengerFee passFee = 

            FlightTrip.temFlightfarePrice = (farePrice / 1);
            FlightTrip.TemFlightApt = (airTax / 1);
            FlightTrip.TemFlightPaxFee = (paxFeeChrg / 1);
            FlightTrip.TemFlightFuel = (fuelChrg / 1);
            FlightTrip.TemFlightOth = 0;
            FlightTrip.TemFlightServiceCharge = 0;
            FlightTrip.TemFlightTotalPrice = (decimal)(FlightTrip.temFlightfarePrice + FlightTrip.TemFlightApt + FlightTrip.TemFlightPaxFee + FlightTrip.TemFlightFuel + FlightTrip.TemFlightOth + FlightTrip.TemFlightServiceCharge);
        }

        //amended by ketee 20130625
        private void ComputeFarePerPax(int idx, int Level, int ReqPax, ref TemFlight FlightTrip, ref GetAvailabilityResponse FlightResponse, string sessID)
        {
            decimal farePrice = 0, airTax = 0, paxFeeChrg = 0, fuelChrg = 0, othChrg = 0, servCharge = 0, discCharge = 0, promoDiscCharge = 0;
            decimal chdFarePrice = 0, chdAirTax = 0, chdFuelChrg = 0, chdOthChrg = 0, chdServCharge = 0, chdDiscCharge = 0, chdPromoDiscCharge = 0;

            DataTable dtTempTransFees = new DataTable();
            DataTable dtTempTransFees2 = new DataTable();
            dtTempTransFees = dtTransFees();
            dtTempTransFees2 = dtTransFees();
            DataRow rowTF;
            DataRow rowTF2;

            int segmtCount = 0;
            //Add by Tyas, only add by idx
            segmtCount = (FlightResponse.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments.Count());
            //string xml = GetXMLString(FlightResponse);
            for (int seg = 0; seg < segmtCount; seg++)
            {
                //added by diana 20131031 - added condition if paxfare length is more than 0
                if ((FlightResponse.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments[seg].Fares[Level]).PaxFares.Length > 0)
                {
                    PaxFare chdpaxfare = null;
                    PaxFare paxfare = (FlightResponse.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments[seg].Fares[Level]).PaxFares[0];
                    if ((FlightResponse.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments[seg].Fares[Level]).PaxFares.Length > 1)
                    {
                        chdpaxfare = (FlightResponse.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments[seg].Fares[Level]).PaxFares[1];
                    }

                    foreach (BookingServiceCharge charges in paxfare.ServiceCharges)
                    {
                        rowTF = dtTempTransFees.NewRow();
                        rowTF2 = dtTempTransFees2.NewRow();

                        if (FlightTrip.TemFlightIfReturn == true)
                        {
                            rowTF2["CarrierCode"] = FlightTrip.TemFlightCarrierCode;
                            rowTF2["FlightNumber"] = FlightTrip.TemFlightFlightNumber;
                            rowTF2["PaxType"] = "ADT";
                            rowTF2["Origin"] = FlightTrip.TemFlightDeparture;
                            rowTF2["Transit"] = FlightTrip.TemFlightTransit;
                            rowTF2["Destination"] = FlightTrip.TemFlightArrival;
                            rowTF2["FeeCode"] = charges.ChargeCode;
                            rowTF2["FeeDesc"] = charges.ChargeDetail;
                            rowTF2["FeeType"] = charges.ChargeType;
                            rowTF2["FeeQty"] = FlightTrip.TemFlightADTNum;
                            rowTF2["FeeRate"] = charges.Amount;
                            rowTF2["FeeAmt"] = FlightTrip.TemFlightADTNum * charges.Amount;
                        }
                        else
                        {
                            rowTF["CarrierCode"] = FlightTrip.TemFlightCarrierCode;
                            rowTF["FlightNumber"] = FlightTrip.TemFlightFlightNumber;
                            rowTF["PaxType"] = "ADT";
                            rowTF["Origin"] = FlightTrip.TemFlightDeparture;
                            rowTF["Transit"] = FlightTrip.TemFlightTransit;
                            rowTF["Destination"] = FlightTrip.TemFlightArrival;
                            rowTF["FeeCode"] = charges.ChargeCode;
                            rowTF["FeeDesc"] = charges.ChargeDetail;
                            rowTF["FeeType"] = charges.ChargeType;
                            rowTF["FeeQty"] = FlightTrip.TemFlightADTNum;
                            rowTF["FeeRate"] = charges.Amount;
                            rowTF["FeeAmt"] = FlightTrip.TemFlightADTNum * charges.Amount;
                        }

                        switch (charges.ChargeType.ToString().ToUpper())
                        {
                            case "FAREPRICE":
                                farePrice += charges.Amount;
                                break;
                            case "DISCOUNT":
                                discCharge -= charges.Amount;
                                break;
                            case "PROMOTIONDISCOUNT":
                                promoDiscCharge -= charges.Amount;
                                break;
                            case "TRAVELFEE":
                                switch (charges.ChargeCode.ToString().ToUpper())
                                {
                                    case "APT":
                                    case "ATF":
                                    case "APTF":
                                        airTax += charges.Amount;
                                        break;
                                    case "FUEL":
                                        fuelChrg += charges.Amount;
                                        break;
                                    default:
                                        fuelChrg += charges.Amount;
                                        break;
                                }
                                break;
                            default:
                                fuelChrg += charges.Amount;
                                break;
                        }

                        if (FlightTrip.TemFlightIfReturn == true)
                            dtTempTransFees2.Rows.Add(rowTF2);
                        else
                            dtTempTransFees.Rows.Add(rowTF);
                    }

                    if (chdpaxfare != null)
                    {
                        foreach (BookingServiceCharge charges in chdpaxfare.ServiceCharges)
                        {
                            rowTF = dtTempTransFees.NewRow();
                            rowTF2 = dtTempTransFees2.NewRow();

                            if (FlightTrip.TemFlightIfReturn == true)
                            {
                                rowTF2["CarrierCode"] = FlightTrip.TemFlightCarrierCode;
                                rowTF2["FlightNumber"] = FlightTrip.TemFlightFlightNumber;
                                rowTF2["PaxType"] = "CHD";
                                rowTF2["Origin"] = FlightTrip.TemFlightDeparture;
                                rowTF2["Transit"] = FlightTrip.TemFlightTransit;
                                rowTF2["Destination"] = FlightTrip.TemFlightArrival;
                                rowTF2["FeeCode"] = charges.ChargeCode;
                                rowTF2["FeeDesc"] = charges.ChargeDetail;
                                rowTF2["FeeType"] = charges.ChargeType;
                                rowTF2["FeeQty"] = FlightTrip.TemFlightPaxNum - FlightTrip.TemFlightADTNum;
                                rowTF2["FeeRate"] = charges.Amount;
                                rowTF2["FeeAmt"] = (FlightTrip.TemFlightPaxNum - FlightTrip.TemFlightADTNum) * charges.Amount;
                            }
                            else
                            {
                                rowTF["CarrierCode"] = FlightTrip.TemFlightCarrierCode;
                                rowTF["FlightNumber"] = FlightTrip.TemFlightFlightNumber;
                                rowTF["PaxType"] = "CHD";
                                rowTF["Origin"] = FlightTrip.TemFlightDeparture;
                                rowTF["Transit"] = FlightTrip.TemFlightTransit;
                                rowTF["Destination"] = FlightTrip.TemFlightArrival;
                                rowTF["FeeCode"] = charges.ChargeCode;
                                rowTF["FeeDesc"] = charges.ChargeDetail;
                                rowTF["FeeType"] = charges.ChargeType;
                                rowTF["FeeQty"] = FlightTrip.TemFlightPaxNum - FlightTrip.TemFlightADTNum;
                                rowTF["FeeRate"] = charges.Amount;
                                rowTF["FeeAmt"] = (FlightTrip.TemFlightPaxNum - FlightTrip.TemFlightADTNum) * charges.Amount;
                            }

                            switch (charges.ChargeType.ToString().ToUpper())
                            {
                                case "FAREPRICE":
                                    chdFarePrice += charges.Amount;
                                    break;
                                case "DISCOUNT":
                                    chdDiscCharge -= charges.Amount;
                                    break;
                                case "PROMOTIONDISCOUNT":
                                    chdPromoDiscCharge -= charges.Amount;
                                    break;
                                case "TRAVELFEE":
                                    switch (charges.ChargeCode.ToString().ToUpper())
                                    {
                                        case "APT":
                                        case "ATF":
                                        case "APTF":
                                            chdAirTax += charges.Amount;
                                            break;
                                        case "FUEL":
                                            chdFuelChrg += charges.Amount;
                                            break;
                                        default:
                                            chdFuelChrg += charges.Amount;
                                            break;
                                    }
                                    break;
                                default:
                                    chdFuelChrg += charges.Amount;
                                    break;
                            }

                            if (FlightTrip.TemFlightIfReturn == true)
                                dtTempTransFees2.Rows.Add(rowTF2);
                            else
                                dtTempTransFees.Rows.Add(rowTF);
                        }
                    }

                    //if (paxfare.ServiceCharges.Length > 0) farePrice += paxfare.ServiceCharges[0].Amount;
                    //if (paxfare.ServiceCharges.Length > 1) airTax += paxfare.ServiceCharges[1].Amount;
                    //if (paxfare.ServiceCharges.Length > 2)
                    //{
                    //    for (int n = 2; n < paxfare.ServiceCharges.Length; n++)
                    //    {
                    //        fuelChrg += paxfare.ServiceCharges[n].Amount;
                    //    }
                    //}

                    //if (chdpaxfare.ServiceCharges.Length > 0) chdFarePrice += chdpaxfare.ServiceCharges[0].Amount;
                    //if (chdpaxfare.ServiceCharges.Length > 1) chdAirTax += chdpaxfare.ServiceCharges[1].Amount;
                    //if (chdpaxfare.ServiceCharges.Length > 2)
                    //{
                    //    for (int n = 2; n < chdpaxfare.ServiceCharges.Length; n++)
                    //    {
                    //        chdFuelChrg += chdpaxfare.ServiceCharges[n].Amount;
                    //    }
                    //}
                }
            }

            //book.Passengers[0].PassengerFees[0].FeeCode
            //PassengerFee passFee = 

            FlightTrip.temFlightfarePrice = (farePrice / 1);
            FlightTrip.TemFlightDisc = (discCharge / 1);
            FlightTrip.TemFlightPromoDisc = (promoDiscCharge / 1);
            FlightTrip.TemFlightApt = (airTax / 1);
            FlightTrip.TemFlightPaxFee = (paxFeeChrg / 1);
            FlightTrip.TemFlightFuel = (fuelChrg / 1);
            FlightTrip.TemFlightOth = 0;
            FlightTrip.TemFlightServiceCharge = 0;
            //added by ketee 20130625
            FlightTrip.temFlightfarePriceChd = (chdFarePrice / 1);
            FlightTrip.TemFlightDiscChd = (chdDiscCharge / 1);
            FlightTrip.TemFlightPromoDiscChd = (chdPromoDiscCharge / 1);
            FlightTrip.TemFlightAptChd = (chdAirTax / 1);
            FlightTrip.TemFlightFuelChd = (chdFuelChrg / 1);
            FlightTrip.TemFlightOthChd = 0;
            FlightTrip.TemFlightServiceChargeChd = 0;

            FlightTrip.TemFlightTotalPrice = (decimal)(FlightTrip.temFlightfarePrice + FlightTrip.TemFlightApt + FlightTrip.TemFlightPaxFee + FlightTrip.TemFlightFuel
                + FlightTrip.TemFlightOth + FlightTrip.TemFlightServiceCharge + FlightTrip.TemFlightDisc + FlightTrip.TemFlightPromoDisc);
            //added by ketee 20130625
            FlightTrip.TemFlightTotalPriceChd = (decimal)(FlightTrip.temFlightfarePriceChd + FlightTrip.TemFlightAptChd + FlightTrip.TemFlightFuelChd
                + FlightTrip.TemFlightOthChd + FlightTrip.TemFlightServiceChargeChd + FlightTrip.TemFlightDiscChd + FlightTrip.TemFlightPromoDiscChd);


            if (dtTempTransFees.Rows.Count > 0)
            { HttpContext.Current.Session.Remove("tempTransFees"); HttpContext.Current.Session.Add("tempTransFees", dtTempTransFees); }
            if (dtTempTransFees2.Rows.Count > 0)
            { HttpContext.Current.Session.Remove("tempTransFees2"); HttpContext.Current.Session.Add("tempTransFees2", dtTempTransFees2); }
        }

        public struct ClassFare
        {
            public string FareClass;
            public int Quantity;
            public int Balance;
            public decimal FullPrice;
            public decimal FarePrice;
            public decimal PaxFeeChrg;
            public decimal TaxChrg;
            public decimal OthChrg;
            public decimal DiscChrg;
            public decimal PromoDiscChrg;
            public decimal FuelChrg;
            public decimal ServChrg;
            public decimal SSRChrg;
            public decimal SeatChrg;
            public decimal InfantChrg;
            public string FlightNumber;
            public string Signature;
            public string FareSellKey;

            //added by ketee 20130625
            public decimal ChdFullPrice;
            public decimal ChdFarePrice;
            public decimal ChdTaxChrg;
            public decimal ChdOthChrg;
            public decimal ChdDiscChrg;
            public decimal ChdPromoDiscChrg;
            public decimal ChdFuelChrg;
            public decimal ChdServChrg;

            //added by jhn
            public int AdultPax;
            public int ChildPax;
            public string CarrierCode;
            public DateTime DepartureDate;
            public string Origin;
            public string Destination;
            public DateTime ArrivalDate;
            public string ClassID;
            public string AgentName;
            public string Transit;
            public string FareApplicationType;
            public DateTime ClassStd2;
            public DateTime ClassSta2;
            public string FareSellKey2;
            public string CarrierCode2;
            public string FareClass2;
            public string FlightNumber2;
            public string FareApplicationType2;
            public string Currency;
            public decimal FlightDura;
            public decimal FlightDura2;
        }

        public struct PairedClassFare
        {
            public string FareClassGo;
            public string FareClassRtn;
            public int TotalPax;
            public decimal FareAVG;
            public decimal FullPriceGo;
            public decimal FarePriceGo;
            public decimal PaxFeeChrgGo;
            public decimal TaxChrgGo;
            public decimal OthChrgGo;
            public decimal DiscChrgGo;
            public decimal PromoDiscChrgGo;
            public decimal FuelChrgGo;
            public decimal ServChrgGo;
            public decimal SSRChrgGo;
            public decimal SeatChrgGo;
            public decimal InfantChrgGo;
            public decimal FullPriceRtn;
            public decimal FarePriceRtn;
            public decimal PaxFeeChrgRtn;
            public decimal TaxChrgRtn;
            public decimal OthChrgRtn;
            public decimal DiscChrgRtn;
            public decimal PromoDiscChrgRtn;
            public decimal FuelChrgRtn;
            public decimal ServChrgRtn;
            public decimal SSRChrgRtn;
            public decimal SeatChrgRtn;
            public decimal InfantChrgRtn;
        }

        public DataTable dtClass()
        {
            // Define the new datatable
            DataTable dt = new DataTable();

            DataColumn dc;
            dc = new DataColumn("FareClass");
            dt.Columns.Add(dc);
            dc = new DataColumn("FareClass2");
            dt.Columns.Add(dc);
            dc = new DataColumn("CarrierCode");
            dt.Columns.Add(dc);
            dc = new DataColumn("DepartureDate", System.Type.GetType("System.DateTime"));
            dt.Columns.Add(dc);
            dc = new DataColumn("Origin");
            dt.Columns.Add(dc);
            dc = new DataColumn("Destination");
            dt.Columns.Add(dc);
            dc = new DataColumn("ArrivalDate", System.Type.GetType("System.DateTime"));
            dt.Columns.Add(dc);
            dc = new DataColumn("Quantity");
            dt.Columns.Add(dc);
            dc = new DataColumn("AdultPax");
            dt.Columns.Add(dc);
            dc = new DataColumn("ChildPax");
            dt.Columns.Add(dc);
            dc = new DataColumn("FullPrice");
            dt.Columns.Add(dc);
            dc = new DataColumn("FarePrice");
            dt.Columns.Add(dc);
            dc = new DataColumn("TaxChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("PaxFeeChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("OthChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("DiscChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("PromoDiscChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("FuelChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("ServChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("SSRChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("SeatChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("InfantChrg");
            dt.Columns.Add(dc);
            //added by ketee 20130625
            dc = new DataColumn("ChdFullPrice");
            dt.Columns.Add(dc);
            dc = new DataColumn("ChdFarePrice");
            dt.Columns.Add(dc);
            dc = new DataColumn("ChdTaxChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("ChdOthChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("ChdDiscChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("ChdPromoDiscChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("ChdFuelChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("ChdServChrg");
            dt.Columns.Add(dc);

            //added by ketee
            dc = new DataColumn("ServVAT");
            dt.Columns.Add(dc);
            dc = new DataColumn("FlightNumber");
            dt.Columns.Add(dc);
            dc = new DataColumn("AgentName");
            dt.Columns.Add(dc);
            dc = new DataColumn("FareSellKey");
            dt.Columns.Add(dc);
            dc = new DataColumn("FareSellKey2");
            dt.Columns.Add(dc);
            dc = new DataColumn("SellSignature");
            dt.Columns.Add(dc);
            dc = new DataColumn("Signature");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemClassId");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemClassTransit");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemClassStd2", System.Type.GetType("System.DateTime"));
            dt.Columns.Add(dc);
            dc = new DataColumn("TemClassSta2", System.Type.GetType("System.DateTime"));
            dt.Columns.Add(dc);
            dc = new DataColumn("CarrierCode2");
            dt.Columns.Add(dc);
            dc = new DataColumn("FlightNumber2");
            dt.Columns.Add(dc);
            dc = new DataColumn("Currency");
            dt.Columns.Add(dc);
            dc = new DataColumn("FareApplicationType");
            dt.Columns.Add(dc);
            dc = new DataColumn("FareApplicationType2");
            dt.Columns.Add(dc);
            //added by ketee, 20121017
            dc = new DataColumn("RecordLocator");
            dt.Columns.Add(dc);
            //added by ketee 20130625
            //midchange = from CurrencyRate to ExchgRate
            dc = new DataColumn("CurrencyRate");
            dt.Columns.Add(dc);

            //flight duration
            dc = new DataColumn("FlightDura");
            dt.Columns.Add(dc);
            dc = new DataColumn("FlightDura2");
            dt.Columns.Add(dc);
            return dt;
        }

        public DataTable dtFlight()
        {
            DataTable dt = new DataTable();

            DataColumn dc;
            dc = new DataColumn("TemFlightId");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightArrival");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightCurrencyCode");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightDate");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightOpSuffix");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightDeparture");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightSignature");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightCarrierCode");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightFlightNumber");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightStd", System.Type.GetType("System.DateTime"));
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightSta", System.Type.GetType("System.DateTime"));
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightInternational");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightJourneySellKey");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightAgentName");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightIfReturn");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightPaxNum");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightADTNum");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightCHDNum");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightAveragePrice");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightTotalAmount");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightFarePrice");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightAPT");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightPaxFee");
            //added by diana 20131105 - add apt for chd
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightAPTCHD");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightFuel");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightOth");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightDisc");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightPromoDisc");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightPromoCode");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightServiceCharge");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightInfant");
            //added by ketee
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightServiceChargeVAT");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightTransit");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightOpSuffix2");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightStd2", System.Type.GetType("System.DateTime"));
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightSta2", System.Type.GetType("System.DateTime"));
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightCarrierCode2");
            dt.Columns.Add(dc);
            dc = new DataColumn("TemFlightFlightNumber2");
            dt.Columns.Add(dc);
            //added by ketee, 20121016
            dc = new DataColumn("DetailCollectedAmt");
            dt.Columns.Add(dc);
            //added by ketee, 20170207
            dc = new DataColumn("Insufficient");
            dt.Columns.Add(dc);
            return dt;
        }

        public DataTable dtTransMain()
        {
            DataTable dt = new DataTable();

            DataColumn dc;
            dc = new DataColumn("AgentID");
            dt.Columns.Add(dc);
            dc = new DataColumn("AgentCatgID");
            dt.Columns.Add(dc);
            dc = new DataColumn("BookingDate", System.Type.GetType("System.DateTime"));
            dt.Columns.Add(dc);
            dc = new DataColumn("TransID");
            dt.Columns.Add(dc);
            dc = new DataColumn("TransType");
            dt.Columns.Add(dc);
            dc = new DataColumn("TotalDepart");
            dt.Columns.Add(dc);
            dc = new DataColumn("TotalReturn");
            dt.Columns.Add(dc);
            dc = new DataColumn("TotalFee");
            dt.Columns.Add(dc);
            //added by ketee
            dc = new DataColumn("TotalVAT");
            dt.Columns.Add(dc);
            dc = new DataColumn("TotalTax");
            dt.Columns.Add(dc);
            dc = new DataColumn("TotalPaxFee");
            dt.Columns.Add(dc);
            dc = new DataColumn("TotalOth");
            dt.Columns.Add(dc);
            dc = new DataColumn("TotalSSR");
            dt.Columns.Add(dc);
            dc = new DataColumn("TotalSeat");
            dt.Columns.Add(dc);
            dc = new DataColumn("TotalNameChange");
            dt.Columns.Add(dc);
            dc = new DataColumn("TotalProcess");
            dt.Columns.Add(dc);
            dc = new DataColumn("TotalInfant");
            dt.Columns.Add(dc);
            dc = new DataColumn("TotalDisc");
            dt.Columns.Add(dc);
            dc = new DataColumn("TotalPromoDisc");
            dt.Columns.Add(dc);
            dc = new DataColumn("TotalTrans");
            dt.Columns.Add(dc);
            dc = new DataColumn("CollectedAmt");
            dt.Columns.Add(dc);
            dc = new DataColumn("TotalDue");
            dt.Columns.Add(dc);
            dc = new DataColumn("Currency");
            dt.Columns.Add(dc);
            dc = new DataColumn("ExchangeRate");
            dt.Columns.Add(dc);
            dc = new DataColumn("CurrencyPaid");
            dt.Columns.Add(dc);
            //added by ketee
            dc = new DataColumn("STDDate");
            dt.Columns.Add(dc);
            dc = new DataColumn("SchemeCode");
            dt.Columns.Add(dc);
            dc = new DataColumn("PromoCode");
            dt.Columns.Add(dc);
            //added by diana 20140108 - to store transstatus
            dc = new DataColumn("TransStatus");
            dt.Columns.Add(dc);
            //added by ketee 20160205, store last updated date time
            dc = new DataColumn("SyncLastUpd");
            dt.Columns.Add(dc);
            //added by ketee 20160223, expiry date
            dc = new DataColumn("ExpiryDate");
            dt.Columns.Add(dc);
            //added by ketee 20170310, isOverride
            dc = new DataColumn("IsOverride");
            dt.Columns.Add(dc);
            return dt;
        }

        public DataTable dtTransDetail()
        {
            DataTable dt = new DataTable();

            DataColumn dc;
            dc = new DataColumn("TransID");
            dt.Columns.Add(dc);
            dc = new DataColumn("RecordLocator");
            dt.Columns.Add(dc);
            dc = new DataColumn("SeqNo");
            dt.Columns.Add(dc);
            dc = new DataColumn("DetailCollectedAmount");
            dt.Columns.Add(dc);
            dc = new DataColumn("LineTotal");
            dt.Columns.Add(dc);
            dc = new DataColumn("CurrencyPaid");
            dt.Columns.Add(dc);
            dc = new DataColumn("AmountDue");
            dt.Columns.Add(dc);
            // added by diana 20130920
            dc = new DataColumn("NextDueDate");
            dt.Columns.Add(dc);
            // end added by diana 20130920
            //added by ketee, 20121016
            dc = new DataColumn("PaxAdult");
            dt.Columns.Add(dc);
            dc = new DataColumn("PaxChild");
            dt.Columns.Add(dc);
            dc = new DataColumn("LineFee");
            dt.Columns.Add(dc);
            dc = new DataColumn("SellKey");
            dt.Columns.Add(dc);
            dc = new DataColumn("LineTax");
            dt.Columns.Add(dc);
            dc = new DataColumn("LinePaxFee");
            dt.Columns.Add(dc);
            dc = new DataColumn("LineOth");
            dt.Columns.Add(dc);
            dc = new DataColumn("LineFlight");
            dt.Columns.Add(dc);
            dc = new DataColumn("LineProcess");
            dt.Columns.Add(dc);
            dc = new DataColumn("LineSSR");
            dt.Columns.Add(dc);
            dc = new DataColumn("LineSeat");
            dt.Columns.Add(dc);
            dc = new DataColumn("LineNameChange");
            dt.Columns.Add(dc);
            dc = new DataColumn("LineInfant");
            dt.Columns.Add(dc);
            //added by romy for insure
            dc = new DataColumn("LineInsureFee");
            dt.Columns.Add(dc);

            dc = new DataColumn("LineDisc");
            dt.Columns.Add(dc);
            dc = new DataColumn("LinePromoDisc");
            dt.Columns.Add(dc);
            //added by ketee
            dc = new DataColumn("LineVAT");
            dt.Columns.Add(dc);

            dc = new DataColumn("PayDueAmount1");
            dt.Columns.Add(dc);
            dc = new DataColumn("PayDueAmount2");
            dt.Columns.Add(dc);
            dc = new DataColumn("PayDueAmount3");
            dt.Columns.Add(dc);
            dc = new DataColumn("PayDueDate1");
            dt.Columns.Add(dc);
            dc = new DataColumn("PayDueDate2");
            dt.Columns.Add(dc);
            dc = new DataColumn("PayDueDate3");
            dt.Columns.Add(dc);
            //dc = new DataColumn("FullPrice");
            //dt.Columns.Add(dc);

            //added by diana 20140207, for storing num of records
            dc = new DataColumn("CntRec");
            dt.Columns.Add(dc);
            //added by ketee, 20170122, storing origin
            dc = new DataColumn("Origin");
            dt.Columns.Add(dc);

            dc = new DataColumn("OldLineTotal");
            dt.Columns.Add(dc);
            dc = new DataColumn("OldDetailCollectedAmount");
            dt.Columns.Add(dc);
            dc = new DataColumn("OldAmountDue");
            dt.Columns.Add(dc);
            dc = new DataColumn("OldPaxAdult");
            dt.Columns.Add(dc);
            dc = new DataColumn("OldPaxChild");
            dt.Columns.Add(dc);
            dc = new DataColumn("OldLineFee");
            dt.Columns.Add(dc);
            dc = new DataColumn("OldSellKey");
            dt.Columns.Add(dc);
            dc = new DataColumn("OldLineTax");
            dt.Columns.Add(dc);
            dc = new DataColumn("OldLinePaxFee");
            dt.Columns.Add(dc);
            dc = new DataColumn("OldLineOth");
            dt.Columns.Add(dc);
            dc = new DataColumn("OldLineProcess");
            dt.Columns.Add(dc);
            dc = new DataColumn("OldLineSSR");
            dt.Columns.Add(dc);
            dc = new DataColumn("OldLineInfant");
            dt.Columns.Add(dc);
            //added by romy for insure
            dc = new DataColumn("OldLineInsureFee");
            dt.Columns.Add(dc);

            dc = new DataColumn("OldLineSeat");
            dt.Columns.Add(dc);
            dc = new DataColumn("OldLineNameChange");
            dt.Columns.Add(dc);
            dc = new DataColumn("OldLineDisc");
            dt.Columns.Add(dc);
            dc = new DataColumn("OldLinePromoDisc");
            dt.Columns.Add(dc);

            dc = new DataColumn("IsLatest");
            dt.Columns.Add(dc);

            return dt;
        }

        public DataTable dtMemberData()
        {
            DataTable dt = new DataTable();

            DataColumn dc;
            dc = new DataColumn("Email");
            dt.Columns.Add(dc);
            dc = new DataColumn("Password");
            dt.Columns.Add(dc);
            dc = new DataColumn("CustomerNumber");
            dt.Columns.Add(dc);
            dc = new DataColumn("AccountID");
            dt.Columns.Add(dc);
            dc = new DataColumn("Amount");
            dt.Columns.Add(dc);
            dc = new DataColumn("Currency");
            dt.Columns.Add(dc);

            return dt;
        }

        public DataTable dtClassTrans()
        {
            //Define the new datatable
            DataTable dt = new DataTable();
            DataColumn dc;
            dc = new DataColumn("Quantity");
            dt.Columns.Add(dc);
            dc = new DataColumn("FullPrice");
            dt.Columns.Add(dc);
            dc = new DataColumn("FarePrice");
            dt.Columns.Add(dc);
            dc = new DataColumn("SellSignature");
            dt.Columns.Add(dc);
            //added by ketee, 20121016
            dc = new DataColumn("DetailCollectedAmt");
            dt.Columns.Add(dc);
            dc = new DataColumn("ServChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("SSRChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("BagaggeChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("MealChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("SportChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("ComfortChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("SeatChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("InfantChrg");
            dt.Columns.Add(dc);
            dc = new DataColumn("RecordLocator");
            dt.Columns.Add(dc);
            //added by ketee, VAT
            dc = new DataColumn("ServVAT");
            dt.Columns.Add(dc);
            //added by ketee 20130625
            dc = new DataColumn("CurrencyRate");
            dt.Columns.Add(dc);
            return dt;
        }

        public DataTable dtBreakdownFee()
        {
            DataTable dt = new DataTable();

            DataColumn dc;
            dc = new DataColumn("Fare");
            dt.Columns.Add(dc);
            dc = new DataColumn("ChApt");
            dt.Columns.Add(dc);
            dc = new DataColumn("PaxFee");
            dt.Columns.Add(dc);
            dc = new DataColumn("Apt");
            dt.Columns.Add(dc);
            dc = new DataColumn("Fuel");
            dt.Columns.Add(dc);
            dc = new DataColumn("Svc");
            dt.Columns.Add(dc);
            dc = new DataColumn("Oth");
            dt.Columns.Add(dc);
            dc = new DataColumn("Disc");
            dt.Columns.Add(dc);
            dc = new DataColumn("PromoDisc");
            dt.Columns.Add(dc);
            dc = new DataColumn("Qty");
            dt.Columns.Add(dc);
            //added by ketee
            dc = new DataColumn("VAT");
            dt.Columns.Add(dc);
            dc = new DataColumn("SSR");
            dt.Columns.Add(dc);
            dc = new DataColumn("Baggage");
            dt.Columns.Add(dc);
            dc = new DataColumn("Meal");
            dt.Columns.Add(dc);
            dc = new DataColumn("Sport");
            dt.Columns.Add(dc);
            //added by romy
            dc = new DataColumn("Insure");
            dt.Columns.Add(dc);
            dc = new DataColumn("Comfort");
            dt.Columns.Add(dc);
            dc = new DataColumn("Infant");
            dt.Columns.Add(dc);
            //added by ketee, 20161231
            dc = new DataColumn("SEAT");
            dt.Columns.Add(dc);
            return dt;
        }

        public DataTable dtKeySignature()
        {
            DataTable dt = new DataTable();
            DataColumn dc;
            dc = new DataColumn("JourneySellKey");
            dt.Columns.Add(dc);
            dc = new DataColumn("FareSellKey");
            dt.Columns.Add(dc);
            dc = new DataColumn("FareSellKeyTransit");
            dt.Columns.Add(dc);
            return dt;
        }

        public DataTable dtTransFees()
        {
            DataTable dt = new DataTable();
            DataColumn dc;
            dc = new DataColumn("CarrierCode");
            dt.Columns.Add(dc);
            dc = new DataColumn("FlightNumber");
            dt.Columns.Add(dc);
            dc = new DataColumn("TransID");
            dt.Columns.Add(dc);
            dc = new DataColumn("RecordLocator");
            dt.Columns.Add(dc);
            dc = new DataColumn("SeqNo");
            dt.Columns.Add(dc);
            dc = new DataColumn("FeeCode");
            dt.Columns.Add(dc);
            dc = new DataColumn("FeeDesc");
            dt.Columns.Add(dc);
            dc = new DataColumn("PaxType");
            dt.Columns.Add(dc);
            dc = new DataColumn("Origin");
            dt.Columns.Add(dc);
            dc = new DataColumn("Transit");
            dt.Columns.Add(dc);
            dc = new DataColumn("Destination");
            dt.Columns.Add(dc);
            dc = new DataColumn("FeeType");
            dt.Columns.Add(dc);
            dc = new DataColumn("FeeQty");
            dt.Columns.Add(dc);
            dc = new DataColumn("FeeRate");
            dt.Columns.Add(dc);
            dc = new DataColumn("FeeAmt");
            dt.Columns.Add(dc);
            dc = new DataColumn("TransVoid");
            dt.Columns.Add(dc);
            return dt;
        }

        //ammnd jhn
        //public ClassFare[] GetClassFareJhn_Old(TemFlight model, int TotalPax, string SessionID)
        //{
        //    int fareLenG = 0;
        //    int avbPax = 0, comPax = 0, cumPax = 0;
        //    int reqPax = 0;

        //    ClassFare[] aryFare = null;

        //    ABS.Navitaire.APIBooking APIBooking = new ABS.Navitaire.APIBooking(SessionID);

        //    int adult = model.TemFlightADTNum;
        //    int child = model.TemFlightCHDNum;

        //    //hkg exception
        //    //if (model.TemFlightDeparture.ToLower() != "hkg" && model.TemFlightArrival.ToLower() != "hkg")
        //    //{
        //    adult = adult + child;
        //    child = 0;
        //    //}

        //    int totalPax = adult + child;
        //    int lastFareIndex = 0;
        //    int lastAvbPax = 0;
        //    int flagNextClass = 0;
        //    int idxTemClass = 0;
        //    string agName = model.TemFlightAgentName;

        //    DataTable dataClass = dtClass();
        //    if (HttpContext.Current.Session["dataClass"] != null)
        //    {
        //        dataClass = (DataTable)HttpContext.Current.Session["dataClass"];
        //        idxTemClass = dataClass.Rows.Count;
        //    }
        //    else dataClass = dtClass();

        //    //DataRow row = dataClass.NewRow();
        //    DataRow row;

        //    //adult
        //    #region adultcalculation
        //    model.TemFlightCHDNum = 0;
        //    model.TemFlightPaxNum = model.TemFlightADTNum;
        //    GetAvailabilityResponse response = APIBooking.GetOneAvailability(model.TemFlightPaxNum, model.TemFlightADTNum, model.TemFlightDate, model.TemFlightDeparture, model.TemFlightArrival, model.TemFlightFlightNumber, model.TemFlightCurrencyCode, ref SessionID);
        //    //string requeststring = GetXMLString(response.GetTripAvailabilityResponse.Schedules[0][0]);
        //    //string xml = GetXMLString(response.GetTripAvailabilityResponse.Schedules[0][0]);
        //    int count = -1;

        //    int idx = 0;
        //    if (response.GetTripAvailabilityResponse.Schedules[0][0].Journeys.Length > 1)
        //    {

        //        for (int ctrConn = 0; ctrConn < response.GetTripAvailabilityResponse.Schedules[0][0].Journeys.Length; ctrConn++)
        //        {
        //            string[] strSplitArr = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[ctrConn].JourneySellKey.ToString().Split('^');
        //            string[] strArry2 = strSplitArr[1].Split('~');
        //            string carrier2 = strArry2[0];
        //            string flight2 = strArry2[1];
        //            if (model.TemFlightCarrierCode2 == carrier2 && model.TemFlightFlightNumber2 == flight2.Trim())
        //            {
        //                idx = ctrConn;
        //                break;
        //            }
        //        }
        //    }

        //    fareLenG = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments[0].Fares.Length;
        //    aryFare = new ClassFare[fareLenG * 2];
        //    reqPax = adult;
        //    if (adult > 0)
        //    {
        //        for (int m = 0; m < fareLenG; m++)
        //        {
        //            Fare classFare2 = new Fare();
        //            Fare classFare = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments[0].Fares[m];
        //            if (response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments.Count() > 1)
        //            {
        //                classFare2 = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments[1].Fares[m];
        //            }
        //            if (((AvailableFare)classFare).AvailableCount != lastAvbPax)
        //            {
        //                lastAvbPax = ((AvailableFare)classFare).AvailableCount;
        //                avbPax = ((AvailableFare)classFare).AvailableCount - cumPax;
        //                if (avbPax >= reqPax)
        //                {//enought Seat
        //                    comPax = reqPax;
        //                    if (avbPax - reqPax > 0)
        //                    {
        //                        lastFareIndex = m;
        //                    }
        //                    else
        //                    {
        //                        lastFareIndex = m + 1;
        //                        flagNextClass = 1;
        //                    }
        //                }
        //                else
        //                {
        //                    if ((avbPax) > reqPax)
        //                    { comPax = reqPax; }
        //                    else
        //                    { comPax = (avbPax); }
        //                }

        //                ComputeFarePerPax(m, comPax, ref model, ref response, SessionID);
        //                if (comPax != 0)
        //                {
        //                    aryFare[m].FareClass = classFare.ClassOfService;
        //                    aryFare[m].FullPrice = model.TemFlightTotalPrice;
        //                    aryFare[m].FarePrice = (decimal)model.temFlightfarePrice;
        //                    aryFare[m].OthChrg = (decimal)model.TemFlightOth;
        //                    aryFare[m].TaxChrg = (decimal)model.TemFlightApt;
        //                    aryFare[m].FuelChrg = (decimal)model.TemFlightFuel;
        //                    aryFare[m].Quantity = comPax;
        //                    aryFare[m].Balance = comPax;
        //                    aryFare[m].FlightNumber = model.TemFlightFlightNumber;

        //                    //aryFare[m].Signature = model.TemFlightSignature;
        //                    aryFare[m].Signature = SessionID;

        //                    aryFare[m].FareSellKey = classFare.FareSellKey;

        //                    //add jhn
        //                    aryFare[m].AdultPax = comPax;
        //                    aryFare[m].ChildPax = 0;
        //                    aryFare[m].ServChrg = (decimal)model.TemFlightServiceCharge;
        //                    aryFare[m].CarrierCode = model.TemFlightCarrierCode;
        //                    aryFare[m].DepartureDate = Convert.ToDateTime(model.TemFlightStd);
        //                    aryFare[m].Origin = model.TemFlightDeparture;
        //                    aryFare[m].Destination = model.TemFlightArrival;
        //                    aryFare[m].ArrivalDate = Convert.ToDateTime(model.TemFlightSta);
        //                    aryFare[m].ClassID = (idxTemClass + m).ToString();
        //                    aryFare[m].AgentName = agName;
        //                    aryFare[m].Transit = model.TemFlightTransit;
        //                    aryFare[m].FareApplicationType = classFare.FareApplicationType.ToString();
        //                    if (model.TemFlightTransit != "")
        //                    {
        //                        aryFare[m].ClassStd2 = Convert.ToDateTime(model.TemFlightStd2);
        //                        aryFare[m].ClassSta2 = Convert.ToDateTime(model.TemFlightSta2);
        //                        aryFare[m].FareSellKey2 = classFare2.FareSellKey;
        //                        aryFare[m].CarrierCode2 = model.TemFlightCarrierCode2;
        //                        aryFare[m].FareClass2 = classFare2.ClassOfService;
        //                        aryFare[m].FlightNumber2 = model.TemFlightFlightNumber2;
        //                        aryFare[m].FareApplicationType2 = classFare2.FareApplicationType.ToString();
        //                    }
        //                    aryFare[m].Currency = model.TemFlightCurrencyCode;

        //                    row = dataClass.NewRow();

        //                    row["FareClass"] = classFare.ClassOfService;
        //                    row["Quantity"] = comPax;
        //                    row["AdultPax"] = comPax;
        //                    row["ChildPax"] = 0;
        //                    row["FullPrice"] = model.TemFlightTotalPrice * comPax;
        //                    row["FarePrice"] = (decimal)model.temFlightfarePrice;
        //                    row["TaxChrg"] = (decimal)model.TemFlightApt * comPax;
        //                    row["OthChrg"] = (decimal)model.TemFlightOth * comPax;
        //                    row["FuelChrg"] = (decimal)model.TemFlightFuel * comPax;
        //                    row["ServChrg"] = (decimal)model.TemFlightServiceCharge * comPax;
        //                    row["FlightNumber"] = model.TemFlightFlightNumber;
        //                    row["CarrierCode"] = model.TemFlightCarrierCode;
        //                    row["DepartureDate"] = model.TemFlightStd;
        //                    row["Origin"] = model.TemFlightDeparture;
        //                    row["Destination"] = model.TemFlightArrival;
        //                    row["ArrivalDate"] = model.TemFlightSta;
        //                    row["FareSellKey"] = classFare.FareSellKey;
        //                    row["TemClassId"] = idxTemClass + m;
        //                    row["AgentName"] = agName;
        //                    row["TemClassTransit"] = model.TemFlightTransit;
        //                    row["FareApplicationType"] = classFare.FareApplicationType.ToString();

        //                    row["SellSignature"] = SessionID;
        //                    row["Signature"] = SessionID;

        //                    if (model.TemFlightTransit != "")
        //                    {
        //                        row["TemClassStd2"] = model.TemFlightStd2;
        //                        row["TemClassSta2"] = model.TemFlightSta2;
        //                        row["FareSellKey2"] = classFare2.FareSellKey;
        //                        row["CarrierCode2"] = model.TemFlightCarrierCode2;
        //                        row["FareClass2"] = classFare2.ClassOfService;
        //                        row["FlightNumber2"] = model.TemFlightFlightNumber2;
        //                        row["FareApplicationType2"] = classFare2.FareApplicationType.ToString();
        //                    }
        //                    row["Currency"] = model.TemFlightCurrencyCode;

        //                    dataClass.Rows.Add(row);
        //                }

        //                count = m;

        //                reqPax = reqPax - comPax;
        //                cumPax += comPax;
        //                if (reqPax == 0)
        //                {
        //                    //if (flagNextClass == 1) { cumPax = 0; }                    
        //                    break;
        //                };
        //            }
        //        }
        //    }

        //    #endregion


        //    //child
        //    #region childcalculation
        //    model.TemFlightCHDNum = child;
        //    model.TemFlightADTNum = 0;
        //    model.TemFlightPaxNum = model.TemFlightCHDNum;
        //    response = APIBooking.GetOneAvailability(model.TemFlightPaxNum, model.TemFlightADTNum, model.TemFlightDate, model.TemFlightDeparture, model.TemFlightArrival, model.TemFlightFlightNumber, model.TemFlightCurrencyCode, ref SessionID);

        //    idx = 0;
        //    if (response.GetTripAvailabilityResponse.Schedules[0][0].Journeys.Length > 1)
        //    {

        //        for (int ctrConn = 0; ctrConn < response.GetTripAvailabilityResponse.Schedules[0][0].Journeys.Length; ctrConn++)
        //        {
        //            string[] strSplitArr = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[ctrConn].JourneySellKey.ToString().Split('^');
        //            string[] strArry2 = strSplitArr[1].Split('~');
        //            string carrier2 = strArry2[0];
        //            string flight2 = strArry2[1];
        //            if (model.TemFlightCarrierCode2 == carrier2 && model.TemFlightFlightNumber2 == flight2.Trim())
        //            {
        //                idx = ctrConn;
        //                break;
        //            }
        //        }
        //    }

        //    fareLenG = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments[0].Fares.Length;
        //    if (count == -1) //no adult
        //    {
        //        aryFare = new ClassFare[fareLenG];
        //    }
        //    //aryFare = new ClassFare[fareLenG];
        //    reqPax = child;
        //    for (int m = lastFareIndex; m < fareLenG; m++)
        //    {
        //        Fare classFare2 = new Fare();
        //        Fare classFare = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments[0].Fares[m];
        //        if (response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments.Count() > 1)
        //        {
        //            classFare2 = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments[1].Fares[m];
        //        }
        //        if (((AvailableFare)classFare).AvailableCount != lastAvbPax || flagNextClass == 0)
        //        {
        //            lastAvbPax = ((AvailableFare)classFare).AvailableCount;
        //            avbPax = ((AvailableFare)classFare).AvailableCount - cumPax;
        //            flagNextClass = 1;
        //            if (avbPax >= reqPax)
        //            {//enought Seat
        //                comPax = reqPax;
        //            }
        //            else
        //            {C:\GBS\GroupBooking\ABS.Navitaire\Service References\Navitaire.BookingManager\BookingManager.wsdl
        //                if ((avbPax) > reqPax)
        //                { comPax = reqPax; }
        //                else
        //                { comPax = (avbPax); }
        //            }
        //            ComputeFarePerPax(m, comPax, ref model, ref response, SessionID );
        //            if (comPax != 0)
        //            {
        //                aryFare[count + 1].FareClass = classFare.ClassOfService;
        //                aryFare[count + 1].FullPrice = model.TemFlightTotalPrice;
        //                aryFare[count + 1].FarePrice = (decimal)model.temFlightfarePrice;
        //                aryFare[count + 1].OthChrg = (decimal)model.TemFlightOth;
        //                aryFare[count + 1].TaxChrg = (decimal)model.TemFlightApt;
        //                aryFare[count + 1].FuelChrg = (decimal)model.TemFlightFuel;
        //                aryFare[count + 1].Quantity = comPax;
        //                aryFare[count + 1].Balance = comPax;
        //                aryFare[count + 1].FlightNumber = model.TemFlightFlightNumber;

        //                //aryFare[count + 1].Signature = model.TemFlightSignature;
        //                aryFare[count + 1].Signature = SessionID;

        //                aryFare[count + 1].FareSellKey = classFare.FareSellKey;

        //                //add jhn
        //                aryFare[count + 1].AdultPax = 0;
        //                aryFare[count + 1].ChildPax = comPax;
        //                aryFare[count + 1].ServChrg = (decimal)model.TemFlightServiceCharge;
        //                aryFare[count + 1].CarrierCode = model.TemFlightCarrierCode;
        //                aryFare[count + 1].DepartureDate = Convert.ToDateTime(model.TemFlightStd);
        //                aryFare[count + 1].Origin = model.TemFlightDeparture;
        //                aryFare[count + 1].Destination = model.TemFlightArrival;
        //                aryFare[count + 1].ArrivalDate = Convert.ToDateTime(model.TemFlightSta);
        //                aryFare[count + 1].ClassID = (idxTemClass + m).ToString();
        //                aryFare[count + 1].AgentName = agName;
        //                aryFare[count + 1].Transit = model.TemFlightTransit;
        //                aryFare[count + 1].FareApplicationType = classFare.FareApplicationType.ToString();
        //                if (model.TemFlightTransit != "")
        //                {
        //                    aryFare[count + 1].ClassStd2 = Convert.ToDateTime(model.TemFlightStd2);
        //                    aryFare[count + 1].ClassSta2 = Convert.ToDateTime(model.TemFlightSta2);
        //                    aryFare[count + 1].FareSellKey2 = classFare2.FareSellKey;
        //                    aryFare[count + 1].CarrierCode2 = model.TemFlightCarrierCode2;
        //                    aryFare[count + 1].FareClass2 = classFare2.ClassOfService;
        //                    aryFare[count + 1].FlightNumber2 = model.TemFlightFlightNumber2;
        //                    aryFare[count + 1].FareApplicationType2 = classFare2.FareApplicationType.ToString();
        //                }
        //                aryFare[count + 1].Currency = model.TemFlightCurrencyCode;

        //                row = dataClass.NewRow();

        //                row["FareClass"] = classFare.ClassOfService;
        //                row["Quantity"] = comPax;
        //                row["AdultPax"] = 0;
        //                row["ChildPax"] = comPax;
        //                row["FullPrice"] = model.temFlightfarePrice * comPax;
        //                row["FarePrice"] = (decimal)model.temFlightfarePrice;
        //                row["TaxChrg"] = (decimal)model.TemFlightApt * comPax;
        //                row["OthChrg"] = (decimal)model.TemFlightOth * comPax;
        //                row["FuelChrg"] = (decimal)model.TemFlightFuel * comPax;
        //                row["ServChrg"] = (decimal)model.TemFlightServiceCharge * comPax;
        //                row["FlightNumber"] = model.TemFlightFlightNumber;
        //                row["CarrierCode"] = model.TemFlightCarrierCode;
        //                row["DepartureDate"] = model.TemFlightStd;
        //                row["Origin"] = model.TemFlightDeparture;
        //                row["Destination"] = model.TemFlightArrival;
        //                row["ArrivalDate"] = model.TemFlightSta;
        //                row["FareSellKey"] = classFare.FareSellKey;
        //                row["TemClassId"] = idxTemClass + count + 1;
        //                row["AgentName"] = agName;
        //                row["TemClassTransit"] = model.TemFlightTransit;

        //                row["SellSignature"] = SessionID;
        //                row["Signature"] = SessionID;

        //                if (model.TemFlightTransit != "")
        //                {
        //                    row["TemClassStd2"] = model.TemFlightStd2;
        //                    row["TemClassSta2"] = model.TemFlightSta2;
        //                    row["FareSellKey2"] = classFare2.FareSellKey;
        //                    row["CarrierCode2"] = model.TemFlightCarrierCode2;
        //                    row["FlightNumber2"] = model.TemFlightFlightNumber2;
        //                }
        //                row["Currency"] = model.TemFlightCurrencyCode;
        //                dataClass.Rows.Add(row);
        //            }

        //            count = count + 1;

        //            reqPax = reqPax - comPax;
        //            cumPax += comPax;
        //            if (reqPax == 0) { break; };
        //        }
        //    }
        //    #endregion

        //    model.TemFlightADTNum = adult;
        //    model.TemFlightCHDNum = child;
        //    model.TemFlightPaxNum = totalPax;

        //    ClassFare[] aryReturn = new ClassFare[count + 1];
        //    if (aryFare != null)
        //    {
        //        Array.Copy(aryFare, aryReturn, Math.Min(aryFare.Length, aryReturn.Length));
        //        if (dataClass.Rows.Count > 0)
        //        {
        //            HttpContext.Current.Session.Add("dataClass", dataClass);
        //        }
        //    }
        //    aryFare = aryReturn;

        //    return aryFare;
        //}

        //refine by ketee 20130625
        public ClassFare[] GetClassFareJhn(TemFlight model, int TotalPax, string SessionID, bool change = false, decimal totalPrevious = 0)
        {
            int fareLenG = 0;
            int avbPax = 0, comPax = 0, cumPax = 0;
            int reqPax = 0, childpax = 0, adultpax = 0, comchildpax = 0, comadultpax = 0;
            //added by ketee, 20170916, performance checking
            var profiler = MiniProfiler.Current;

            ClassFare[] aryFare = null;

            ABS.Navitaire.APIBooking APIBooking;

            //added by ketee, 20170916, performance checking
            using (profiler.Step("Declare New Booking Control"))
            {
                APIBooking = new ABS.Navitaire.APIBooking(SessionID);
            }


            int adult = model.TemFlightADTNum;
            int child = model.TemFlightCHDNum;

            adultpax = adult;
            childpax = child;

            //hkg exception
            //if (model.TemFlightDeparture.ToLower() != "hkg" && model.TemFlightArrival.ToLower() != "hkg")
            //{
            //    adult = adult + child;
            //    child = 0;
            //}

            int totalPax = adult + child;
            int lastFareIndex = 0;
            int lastAvbPax = 0;
            int flagNextClass = 0;
            int idxTemClass = 0;
            string agName = model.TemFlightAgentName;

            DataTable dataClass = dtClass();
            if (HttpContext.Current.Session["dataClass"] != null)
            {
                dataClass = (DataTable)HttpContext.Current.Session["dataClass"];
                idxTemClass = dataClass.Rows.Count;
            }
            else dataClass = dtClass();

            //DataRow row = dataClass.NewRow();
            DataRow row;

            //adult and Child
            #region adultcalculation
            model.TemFlightCHDNum = 0;
            //model.TemFlightPaxNum = model.TemFlightADTNum;

            string flightNumber = "";
            //if (model.TemFlightTransit.Trim() == "") 
            flightNumber = model.TemFlightFlightNumber;
            log.Info(this, "Flight = " + model.TemFlightPaxNum + " ; " + model.TemFlightADTNum + " ; " + model.TemFlightCHDNum + " ; " + model.TemFlightInfant + " ; " + model.TemFlightDate + " ; " + model.TemFlightDeparture + " ; " + model.TemFlightArrival + " ; " + flightNumber + " ; " + model.TemFlightCurrencyCode + " ; " + model.TemFlightFlightNumber + " ; " + model.TemFlightFlightNumber2);

            GetAvailabilityResponse response = new GetAvailabilityResponse();
            //added by ketee, 20170916, performance checking
            using (profiler.Step("Navitaire:GetOneAvailability"))
            {
                response = APIBooking.GetOneAvailability(model.TemFlightPaxNum, model.TemFlightADTNum, model.TemFlightDate, model.TemFlightDeparture, model.TemFlightArrival, flightNumber, model.TemFlightCurrencyCode, ref SessionID, model.TemFlightPromoCode);
            }

            int count = -1;

            int idx = 0;

            //added by ketee, 20170916, performance checking
            using (profiler.Step("Get Segment Indicator"))
            {
                if (model.TemFlightTransit.Trim() != "" && response.GetTripAvailabilityResponse.Schedules[0][0].Journeys.Length > 1)
                {
                    for (int ctrConn = 0; ctrConn < response.GetTripAvailabilityResponse.Schedules[0][0].Journeys.Length; ctrConn++)
                    {
                        string[] strSplitArr = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[ctrConn].JourneySellKey.ToString().Split('^');
                        string[] strArry = strSplitArr[0].Split('~');
                        string carrier = strArry[0];
                        string flight = strArry[1];

                        string[] strArry2;
                        string carrier2 = "";
                        string flight2 = "";
                        if (strSplitArr.Length > 1)
                        {
                            strArry2 = strSplitArr[1].Split('~');
                            carrier2 = strArry2[0];
                            flight2 = strArry2[1];
                        }

                        if (model.TemFlightCarrierCode.Trim() == carrier.Trim() && model.TemFlightFlightNumber.Trim() == flight.Trim() && model.TemFlightCarrierCode2.Trim() == carrier2.Trim() && model.TemFlightFlightNumber2.Trim() == flight2.Trim())
                        {
                            idx = ctrConn;
                            break;
                        }
                    }
                }
            }

            //begin, retrieve flight duration
            decimal FlightDura = 0, FlightDura2 = 0, departzone1 = 0, returnzone1 = 0, departzone2 = 0, returnzone2 = 0, diffsegment1 = 0, diffsegment2 = 0;
            string depart1 = "", return1 = "", depart2 = "", return2 = "";

            depart1 = model.TemFlightDeparture;
            if (model.TemFlightTransit.Trim() == "")
            {
                return1 = model.TemFlightArrival;
            }
            else
            {
                return1 = model.TemFlightTransit;
                depart2 = model.TemFlightTransit;
                return2 = model.TemFlightArrival;
            }

            //added by ketee, 20170916, performance checking
            using (profiler.Step("ACE initialization"))
            {
                string StationCode = depart1;
                if (depart1 != "" && return1 != "")
                {
                    ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");
                    ACE.SessionManager.SessionServiceClient aceSession = new ACE.SessionManager.SessionServiceClient();
                    ACE.LookUpManager.LookupServiceClient aceLookup = new ACE.LookUpManager.LookupServiceClient();
                    ACE.SessionManager.LogonRequest LogonReq = new ACE.SessionManager.LogonRequest();
                    LogonReq.Username = apiBooking.Username;
                    LogonReq.Password = apiBooking.Password;

                    ACE.SessionManager.LogonResponse resp;
                    ACE.LookUpManager.StationTimeZone TimeZoneResp = new ACE.LookUpManager.StationTimeZone();

                    //added by ketee, 20170916, performance checking
                    using (profiler.Step("aceSession.Logon"))
                    {
                        resp = aceSession.Logon(LogonReq);
                    }

                    //added by ketee, 20170916, performance checking
                    using (profiler.Step("retrieve flight duration"))
                    {
                        if (resp != null)
                        {

                            diffsegment1 = RetrieveTimeZone(aceLookup, resp, TimeZoneResp, depart1) - RetrieveTimeZone(aceLookup, resp, TimeZoneResp, return1);
                            FlightDura = diffsegment1 * 60 + (decimal)(Convert.ToDateTime(model.TemFlightSta) - Convert.ToDateTime(model.TemFlightStd)).TotalMinutes;

                            if (depart2 != "" && return2 != "")
                            {
                                diffsegment2 = RetrieveTimeZone(aceLookup, resp, TimeZoneResp, depart2) - RetrieveTimeZone(aceLookup, resp, TimeZoneResp, return2);
                                FlightDura2 = diffsegment2 * 60 + (decimal)(Convert.ToDateTime(model.TemFlightSta2) - Convert.ToDateTime(model.TemFlightStd2)).TotalMinutes;
                            }

                            if (HttpContext.Current.Session["errormsgTimeZone"] != null)
                            {
                                return null;
                            }
                        }
                    }

                }
            }

            //end, retrieve flight duration

            //added by ketee, 20170916, performance checking
            using (profiler.Step("check for price"))
            {
                fareLenG = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments[0].Fares.Length;
                aryFare = new ClassFare[fareLenG * 2];
                reqPax = adult + child;
                if (reqPax > 0)
                {
                    for (int m = 0; m < fareLenG; m++)
                    {
                        Fare logFare = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments[0].Fares[m];
                        log.Info(this, "Class of Service : " + ((AvailableFare)logFare).ClassOfService + " Available Seats : " + ((AvailableFare)logFare).AvailableCount);
                        if (response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments[0].Fares[m].ClassOfService.ToString() == "N" || response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments[0].Fares[m].ClassOfService.ToString() == "D")
                        {
                            continue;
                        }

                        //added by diana 20140421, check for price, if less then continue to next for
                        if (change == true)
                        {
                            decimal farePrice = 0, airTax = 0, fuelChrg = 0, othChrg = 0, servCharge = 0, discCharge = 0, promoDiscCharge = 0, totChrg = 0;
                            decimal chdFarePrice = 0, chdAirTax = 0, chdFuelChrg = 0, chdOthChrg = 0, chdServCharge = 0, chdDiscCharge = 0, chdPromoDiscCharge = 0, chdTotChrg = 0;

                            Fare fare = (response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments[0].Fares[m]);
                            PaxFare paxfare = fare.PaxFares[0];
                            PaxFare chdpaxfare = fare.PaxFares[1];
                            int AvailableCount = ((AvailableFare)fare).AvailableCount;
                            
                            foreach (BookingServiceCharge charges in paxfare.ServiceCharges)
                            {
                                switch (charges.ChargeType.ToString().ToUpper())
                                {
                                    case "FAREPRICE":
                                        farePrice += charges.Amount;
                                        break;
                                    case "DISCOUNT":
                                        discCharge -= charges.Amount;
                                        break;
                                    case "PROMOTIONDISCOUNT":
                                        promoDiscCharge -= charges.Amount;
                                        break;
                                    case "TRAVELFEE":
                                        switch (charges.ChargeCode.ToString().ToUpper())
                                        {
                                            case "APT":
                                            case "ATF":
                                            case "APTF":
                                                airTax += charges.Amount;
                                                break;
                                            case "FUEL":
                                                fuelChrg += charges.Amount;
                                                break;
                                            default:
                                                fuelChrg += charges.Amount;
                                                break;
                                        }
                                        break;
                                    default:
                                        fuelChrg += charges.Amount;
                                        break;
                                }
                            }

                            foreach (BookingServiceCharge charges in chdpaxfare.ServiceCharges)
                            {
                                switch (charges.ChargeType.ToString().ToUpper())
                                {
                                    case "FAREPRICE":
                                        chdFarePrice += charges.Amount;
                                        break;
                                    case "DISCOUNT":
                                        chdDiscCharge -= charges.Amount;
                                        break;
                                    case "PROMOTIONDISCOUNT":
                                        chdPromoDiscCharge -= charges.Amount;
                                        break;
                                    case "TRAVELFEE":
                                        switch (charges.ChargeCode.ToString().ToUpper())
                                        {
                                            case "APT":
                                            case "ATF":
                                            case "APTF":
                                                chdAirTax += charges.Amount;
                                                break;
                                            case "FUEL":
                                                chdFuelChrg += charges.Amount;
                                                break;
                                            default:
                                                chdFuelChrg += charges.Amount;
                                                break;
                                        }
                                        break;
                                    default:
                                        chdFuelChrg += charges.Amount;
                                        break;
                                }
                            }
                            totChrg = (farePrice + discCharge + promoDiscCharge + airTax + fuelChrg) * adultpax;
                            chdTotChrg = (chdFarePrice + chdDiscCharge + chdPromoDiscCharge + chdAirTax + chdFuelChrg) * childpax;

                            if ((totChrg + chdTotChrg) < totalPrevious)
                            {
                                continue;
                            }
                            else if (AvailableCount < reqPax)
                            {
                                continue;
                            }
                        }
                        //end added by diana 20140421

                        Fare classFare2 = new Fare();
                        Fare classFare = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments[0].Fares[m];
                        //log.Info(this, "Class of Service : " + ((AvailableFare)classFare).ClassOfService + " Available Seats : " + ((AvailableFare)classFare).AvailableCount);
                        if (response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments.Count() > 1)
                        {
                            classFare2 = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[idx].Segments[1].Fares[m];
                        }
                        if (((AvailableFare)classFare).AvailableCount != lastAvbPax)
                        {
                            lastAvbPax = ((AvailableFare)classFare).AvailableCount;
                            avbPax = ((AvailableFare)classFare).AvailableCount - cumPax;
                            if (avbPax >= reqPax)
                            {//enought Seat
                                comPax = reqPax;
                                comadultpax = reqPax - childpax;
                                comchildpax = reqPax - adultpax;
                                if (avbPax - reqPax > 0)
                                {
                                    lastFareIndex = m;
                                }
                                else
                                {
                                    lastFareIndex = m + 1;
                                    flagNextClass = 1;
                                }
                            }
                            else
                            {
                                //if ((avbPax) > reqPax)
                                //{
                                //    comPax = reqPax;
                                //    adultpax = adult;
                                //    childpax = child;
                                //}
                                //else
                                //{
                                comPax = (avbPax);
                                if (childpax >= avbPax)
                                {
                                    comchildpax = avbPax - 1;
                                    comadultpax = avbPax - comchildpax;
                                }
                                else
                                {
                                    comchildpax = childpax;
                                    comadultpax = avbPax - comchildpax;
                                }
                                //}
                            }
                            //string str = GetXMLString(response);
                            //Add idx by Tyas 20170407

                            ComputeFarePerPax(idx, m, comPax, ref model, ref response, SessionID);
                            if (comPax != 0)
                            {
                                aryFare[m].FareClass = classFare.ClassOfService;
                                aryFare[m].FullPrice = model.TemFlightTotalPrice;
                                aryFare[m].FarePrice = (decimal)model.temFlightfarePrice;
                                aryFare[m].OthChrg = (decimal)model.TemFlightOth;
                                aryFare[m].DiscChrg = (decimal)model.TemFlightDisc;
                                aryFare[m].PromoDiscChrg = (decimal)model.TemFlightPromoDisc;
                                aryFare[m].PaxFeeChrg = (decimal)model.TemFlightPaxFee;
                                aryFare[m].TaxChrg = (decimal)model.TemFlightApt;
                                aryFare[m].FuelChrg = (decimal)model.TemFlightFuel;
                                aryFare[m].Quantity = comPax;
                                aryFare[m].Balance = comPax;
                                aryFare[m].FlightNumber = model.TemFlightFlightNumber;

                                //aryFare[m].Signature = model.TemFlightSignature;
                                aryFare[m].Signature = SessionID;

                                aryFare[m].FareSellKey = classFare.FareSellKey;

                                //amend by ketee
                                aryFare[m].AdultPax = comadultpax;
                                aryFare[m].ChildPax = comchildpax;
                                //added by ketee
                                aryFare[m].ChdFullPrice = model.TemFlightTotalPriceChd;
                                aryFare[m].ChdFarePrice = (decimal)model.temFlightfarePriceChd;
                                aryFare[m].ChdOthChrg = (decimal)model.TemFlightOthChd;
                                aryFare[m].ChdDiscChrg = (decimal)model.TemFlightDiscChd;
                                aryFare[m].ChdPromoDiscChrg = (decimal)model.TemFlightPromoDiscChd;
                                aryFare[m].ChdTaxChrg = (decimal)model.TemFlightAptChd;
                                aryFare[m].ChdFuelChrg = (decimal)model.TemFlightFuelChd;
                                aryFare[m].ChdServChrg = (decimal)model.TemFlightServiceChargeChd;

                                aryFare[m].ServChrg = (decimal)model.TemFlightServiceCharge;
                                aryFare[m].SSRChrg = 0;
                                aryFare[m].SeatChrg = 0;
                                aryFare[m].InfantChrg = 0;
                                aryFare[m].CarrierCode = model.TemFlightCarrierCode;
                                aryFare[m].DepartureDate = Convert.ToDateTime(model.TemFlightStd);
                                aryFare[m].Origin = model.TemFlightDeparture;
                                aryFare[m].Destination = model.TemFlightArrival;
                                aryFare[m].ArrivalDate = Convert.ToDateTime(model.TemFlightSta);
                                aryFare[m].ClassID = (idxTemClass + m).ToString();
                                aryFare[m].AgentName = agName;
                                aryFare[m].Transit = model.TemFlightTransit;
                                aryFare[m].FareApplicationType = classFare.FareApplicationType.ToString();
                                if (model.TemFlightTransit != "")
                                {
                                    aryFare[m].ClassStd2 = Convert.ToDateTime(model.TemFlightStd2);
                                    aryFare[m].ClassSta2 = Convert.ToDateTime(model.TemFlightSta2);
                                    aryFare[m].FareSellKey2 = classFare2.FareSellKey;
                                    aryFare[m].CarrierCode2 = model.TemFlightCarrierCode2;
                                    aryFare[m].FareClass2 = classFare2.ClassOfService;
                                    aryFare[m].FlightNumber2 = model.TemFlightFlightNumber2;
                                    aryFare[m].FareApplicationType2 = classFare2.FareApplicationType.ToString();
                                }
                                aryFare[m].Currency = model.TemFlightCurrencyCode;
                                aryFare[m].FlightDura = FlightDura;
                                aryFare[m].FlightDura2 = FlightDura2;

                                row = dataClass.NewRow();

                                row["FareClass"] = classFare.ClassOfService;
                                row["Quantity"] = comPax;
                                row["AdultPax"] = comadultpax;
                                row["ChildPax"] = comchildpax;
                                row["FullPrice"] = model.TemFlightTotalPrice * comadultpax;
                                row["FarePrice"] = (decimal)model.temFlightfarePrice;
                                row["TaxChrg"] = (decimal)model.TemFlightApt * comadultpax;
                                row["PaxFeeChrg"] = (decimal)model.TemFlightPaxFee * comadultpax;
                                row["OthChrg"] = (decimal)model.TemFlightOth * comadultpax;
                                row["DiscChrg"] = (decimal)model.TemFlightDisc * comadultpax;
                                row["PromoDiscChrg"] = (decimal)model.TemFlightPromoDisc * comadultpax;
                                row["FuelChrg"] = (decimal)model.TemFlightFuel * comadultpax;
                                row["ServChrg"] = (decimal)model.TemFlightServiceCharge * comadultpax;
                                row["SSRChrg"] = 0;
                                //row["BaggageChrg"] = 0;
                                //row["MealChrg"] = 0;
                                //row["SportChrg"] = 0;
                                //row["ComfortChrg"] = 0;
                                row["SeatChrg"] = 0;
                                row["InfantChrg"] = 0;
                                //added by ketee

                                //if (model.TemFlightDeparture != "HKG" && model.TemFlightArrival != "HKG" && model.TemFlightTransit != "HKG")
                                //{
                                //    row["ChdFullPrice"] = model.TemFlightTotalPrice * comchildpax;
                                //    row["ChdFarePrice"] = (decimal)model.temFlightfarePrice;
                                //    row["ChdTaxChrg"] = (decimal)model.TemFlightApt * comchildpax;
                                //    row["ChdOthChrg"] = (decimal)model.TemFlightOth * comchildpax;
                                //    row["ChdDiscChrg"] = (decimal)model.TemFlightDisc * comchildpax;
                                //    row["ChdPromoDiscChrg"] = (decimal)model.TemFlightPromoDisc * comchildpax;
                                //    row["ChdFuelChrg"] = (decimal)model.TemFlightFuel * comchildpax;
                                //    row["ChdServChrg"] = (decimal)model.TemFlightServiceCharge * comchildpax;
                                //}
                                //else
                                //{
                                row["ChdFullPrice"] = model.TemFlightTotalPriceChd * comchildpax;
                                row["ChdFarePrice"] = (decimal)model.temFlightfarePriceChd;
                                row["ChdTaxChrg"] = (decimal)model.TemFlightAptChd * comchildpax;
                                row["ChdOthChrg"] = (decimal)model.TemFlightOthChd * comchildpax;
                                row["ChdDiscChrg"] = (decimal)model.TemFlightDiscChd * comchildpax;
                                row["ChdPromoDiscChrg"] = (decimal)model.TemFlightPromoDiscChd * comchildpax;
                                row["ChdFuelChrg"] = (decimal)model.TemFlightFuelChd * comchildpax;
                                row["ChdServChrg"] = (decimal)model.TemFlightServiceChargeChd * comchildpax;
                                //}


                                row["FlightNumber"] = model.TemFlightFlightNumber;
                                row["CarrierCode"] = model.TemFlightCarrierCode;
                                row["DepartureDate"] = model.TemFlightStd;
                                row["Origin"] = model.TemFlightDeparture;
                                row["Destination"] = model.TemFlightArrival;
                                row["ArrivalDate"] = model.TemFlightSta;
                                row["FareSellKey"] = classFare.FareSellKey;
                                row["TemClassId"] = idxTemClass + m;
                                row["AgentName"] = agName;
                                row["TemClassTransit"] = model.TemFlightTransit;
                                row["FareApplicationType"] = classFare.FareApplicationType.ToString();

                                row["SellSignature"] = SessionID;
                                row["Signature"] = SessionID;

                                if (model.TemFlightTransit != "")
                                {
                                    row["TemClassStd2"] = model.TemFlightStd2;
                                    row["TemClassSta2"] = model.TemFlightSta2;
                                    row["FareSellKey2"] = classFare2.FareSellKey;
                                    row["CarrierCode2"] = model.TemFlightCarrierCode2;
                                    row["FareClass2"] = classFare2.ClassOfService;
                                    row["FlightNumber2"] = model.TemFlightFlightNumber2;
                                    row["FareApplicationType2"] = classFare2.FareApplicationType.ToString();
                                }
                                row["Currency"] = model.TemFlightCurrencyCode;

                                //fill duration
                                row["FlightDura"] = FlightDura;
                                row["FlightDura2"] = FlightDura2;

                                dataClass.Rows.Add(row);
                            }

                            count = m;

                            reqPax = reqPax - comPax;
                            adultpax = adultpax - comadultpax;
                            childpax = childpax - comchildpax;

                            cumPax += comPax;
                            if (reqPax == 0)
                            {
                                //if (flagNextClass == 1) { cumPax = 0; }                    
                                break;
                            };
                        }
                    }
                }
            }

            #endregion


            model.TemFlightADTNum = adult;
            model.TemFlightCHDNum = child;
            model.TemFlightPaxNum = totalPax;

            ClassFare[] aryReturn = new ClassFare[count + 1];

            //added by ketee, 20170916, performance checking
            using (profiler.Step("dataClass"))
            {
                if (aryFare != null)
                {
                    Array.Copy(aryFare, aryReturn, Math.Min(aryFare.Length, aryReturn.Length));
                    if (dataClass.Rows.Count > 0)
                    {
                        HttpContext.Current.Session.Add("dataClass", dataClass);
                    }
                }
            }

            aryFare = aryReturn;

            APIBooking = null;
            return aryFare;
        }

        private void CompilePairedFare(int Pax, ref PairedClassFare CombFare, ref ClassFare GoFare, ref ClassFare ReturnFare)
        {
            CombFare.FareClassGo = GoFare.FareClass;
            CombFare.FareClassRtn = ReturnFare.FareClass;
            CombFare.TotalPax = Pax;
            CombFare.FullPriceGo = GoFare.FullPrice;
            CombFare.FullPriceRtn = ReturnFare.FullPrice;
            CombFare.FareAVG = (GoFare.FullPrice + ReturnFare.FullPrice);
            GoFare.Balance -= Pax;
            ReturnFare.Balance -= Pax;
        }

        //ammend jhn
        //private void CompilePairedFareJhn_OLD(int Pax, ref PairedClassFare CombFare, ref ClassFare GoFare, ref ClassFare ReturnFare)
        //{
        //    CombFare.FareClassGo = GoFare.FareClass;
        //    CombFare.FareClassRtn = ReturnFare.FareClass;
        //    CombFare.TotalPax = Pax;
        //    CombFare.FullPriceGo = GoFare.FullPrice;
        //    CombFare.FullPriceRtn = ReturnFare.FullPrice;
        //    CombFare.FareAVG = (GoFare.FullPrice + ReturnFare.FullPrice);
        //    GoFare.Balance -= Pax;
        //    ReturnFare.Balance -= Pax;

        //    DataTable dataClass = new DataTable();
        //    DataRow row;

        //    if (HttpContext.Current.Session["dataClass"] != null)
        //    {
        //        dataClass = (DataTable)HttpContext.Current.Session["dataClass"];
        //    }
        //    else dataClass = dtClass();

        //    //insert going class first

        //    row = dataClass.NewRow();

        //    row["FareClass"] = GoFare.FareClass;
        //    //row["Quantity"] = GoFare.Quantity;
        //    row["Quantity"] = Pax;

        //    if (GoFare.AdultPax > 0)
        //    {
        //        row["AdultPax"] = Pax;
        //        row["ChildPax"] = 0;
        //    }
        //    else
        //    {
        //        row["AdultPax"] = 0;
        //        row["ChildPax"] = Pax;
        //    }

        //    row["FullPrice"] = GoFare.FullPrice * Pax;
        //    row["FarePrice"] = GoFare.FarePrice;
        //    row["PaxFeeChrg"] = GoFare.PaxFeeChrg * Pax;
        //    row["TaxChrg"] = GoFare.TaxChrg * Pax;
        //    row["OthChrg"] = GoFare.OthChrg * Pax;
        //    row["DiscChrg"] = GoFare.DiscChrg * Pax;
        //    row["PromoDiscChrg"] = GoFare.PromoDiscChrg * Pax;
        //    row["FuelChrg"] = GoFare.FuelChrg * Pax;
        //    row["ServChrg"] = GoFare.ServChrg * Pax;
        //    row["SSRChrg"] = 0;
        //    row["BaggageChrg"] = 0;
        //    row["MealChrg"] = 0;
        //    row["ComfortChrg"] = 0;
        //    row["SportChrg"] = 0;
        //    row["SeatChrg"] = 0;
        //    row["InfantChrg"] = 0;
        //    row["FlightNumber"] = GoFare.FlightNumber;
        //    row["CarrierCode"] = GoFare.CarrierCode;
        //    row["DepartureDate"] = GoFare.DepartureDate;
        //    row["Origin"] = GoFare.Origin;
        //    row["Destination"] = GoFare.Destination;
        //    row["ArrivalDate"] = GoFare.ArrivalDate;
        //    row["FareSellKey"] = GoFare.FareSellKey;
        //    //row["TemClassId"] = GoFare.ClassID;
        //    row["TemClassId"] = dataClass.Rows.Count.ToString();
        //    row["AgentName"] = GoFare.AgentName;
        //    row["TemClassTransit"] = GoFare.Transit;
        //    row["FareApplicationType"] = GoFare.FareApplicationType;
        //    if (GoFare.Transit.ToString() != "")
        //    {
        //        row["TemClassStd2"] = GoFare.ClassStd2;
        //        row["TemClassSta2"] = GoFare.ClassSta2;
        //        row["FareSellKey2"] = GoFare.FareSellKey2;
        //        row["CarrierCode2"] = GoFare.CarrierCode2;
        //        row["FareClass2"] = GoFare.FareClass2;
        //        row["FlightNumber2"] = GoFare.FlightNumber2;
        //        row["FareApplicationType2"] = GoFare.FareApplicationType2;
        //    }
        //    row["Currency"] = GoFare.Currency;
        //    dataClass.Rows.Add(row);

        //    //insert return class
        //    row = dataClass.NewRow();

        //    row["FareClass"] = ReturnFare.FareClass;
        //    //row["Quantity"] = GoFare.Quantity;
        //    row["Quantity"] = Pax;

        //    if (GoFare.AdultPax > 0)
        //    {
        //        row["AdultPax"] = Pax;
        //        row["ChildPax"] = 0;
        //    }
        //    else
        //    {
        //        row["AdultPax"] = 0;
        //        row["ChildPax"] = Pax;
        //    }

        //    row["FullPrice"] = ReturnFare.FullPrice * Pax;
        //    row["FarePrice"] = ReturnFare.FarePrice;
        //    row["PaxFeeChrg"] = ReturnFare.PaxFeeChrg * Pax;
        //    row["TaxChrg"] = ReturnFare.TaxChrg * Pax;
        //    row["OthChrg"] = ReturnFare.OthChrg * Pax;
        //    row["DiscChrg"] = ReturnFare.DiscChrg * Pax;
        //    row["PromoDiscChrg"] = ReturnFare.PromoDiscChrg * Pax;
        //    row["FuelChrg"] = ReturnFare.FuelChrg * Pax;
        //    row["ServChrg"] = ReturnFare.ServChrg * Pax;
        //    row["SSRChrg"] = 0;
        //    row["BaggageChrg"] = 0;
        //    row["MealChrg"] = 0;
        //    row["ComfortChrg"] = 0;
        //    row["SportChrg"] = 0;
        //    row["SeatChrg"] = 0;
        //    row["InfantChrg"] = 0;

        //    row["FlightNumber"] = ReturnFare.FlightNumber;
        //    row["CarrierCode"] = ReturnFare.CarrierCode;
        //    row["DepartureDate"] = ReturnFare.DepartureDate;
        //    row["Origin"] = ReturnFare.Origin;
        //    row["Destination"] = ReturnFare.Destination;
        //    row["ArrivalDate"] = ReturnFare.ArrivalDate;
        //    row["FareSellKey"] = ReturnFare.FareSellKey;
        //    //row["TemClassId"] = ReturnFare.ClassID;
        //    row["TemClassId"] = dataClass.Rows.Count.ToString();
        //    row["AgentName"] = ReturnFare.AgentName;
        //    row["TemClassTransit"] = ReturnFare.Transit;
        //    row["FareApplicationType"] = ReturnFare.FareApplicationType;
        //    if (ReturnFare.Transit.ToString() != "")
        //    {
        //        row["TemClassStd2"] = ReturnFare.ClassStd2;
        //        row["TemClassSta2"] = ReturnFare.ClassSta2;
        //        row["FareSellKey2"] = ReturnFare.FareSellKey2;
        //        row["CarrierCode2"] = ReturnFare.CarrierCode2;
        //        row["FareClass2"] = ReturnFare.FareClass2;
        //        row["FlightNumber2"] = ReturnFare.FlightNumber2;
        //        row["FareApplicationType2"] = ReturnFare.FareApplicationType2;
        //    }
        //    row["Currency"] = ReturnFare.Currency;
        //    dataClass.Rows.Add(row);

        //    HttpContext.Current.Session.Remove("dataClass");
        //    HttpContext.Current.Session.Add("dataClass", dataClass);
        //}

        //Amend by ketee 20130625
        private void CompilePairedFareJhn(int Pax, ref PairedClassFare CombFare, ref ClassFare GoFare, ref ClassFare ReturnFare, int PaxADT, int PaxCHD)
        {
            CombFare.FareClassGo = GoFare.FareClass;
            CombFare.FareClassRtn = ReturnFare.FareClass;
            CombFare.TotalPax = Pax;
            CombFare.FullPriceGo = GoFare.FullPrice;
            CombFare.FullPriceRtn = ReturnFare.FullPrice;
            CombFare.FareAVG = (GoFare.FullPrice + ReturnFare.FullPrice);
            GoFare.Balance -= Pax;
            ReturnFare.Balance -= Pax;

            DataTable dataClass = new DataTable();
            DataRow row;

            if (HttpContext.Current.Session["dataClass"] != null)
            {
                dataClass = (DataTable)HttpContext.Current.Session["dataClass"];
            }
            else dataClass = dtClass();

            //insert going class first

            row = dataClass.NewRow();

            row["FareClass"] = GoFare.FareClass;
            //row["Quantity"] = GoFare.Quantity;
            row["Quantity"] = Pax;

            row["AdultPax"] = PaxADT;
            row["ChildPax"] = PaxCHD;

            //commented by diana 20131104 - need to be checked
            //if (GoFare.AdultPax > 0)
            //{
            //    row["AdultPax"] = Pax;
            //    row["ChildPax"] = 0;
            //}
            //else
            //{
            //    row["AdultPax"] = 0;
            //    row["ChildPax"] = Pax;
            //}
            //row["AdultPax"] = GoFare.AdultPax;
            //row["ChildPax"] = GoFare.ChildPax;

            row["FullPrice"] = GoFare.FullPrice * Pax;
            row["FarePrice"] = GoFare.FarePrice;
            row["PaxFeeChrg"] = GoFare.PaxFeeChrg * Pax;
            row["TaxChrg"] = GoFare.TaxChrg * Pax;
            row["OthChrg"] = GoFare.OthChrg * Pax;
            row["DiscChrg"] = GoFare.DiscChrg * Pax;
            row["PromoDiscChrg"] = GoFare.PromoDiscChrg * Pax;
            row["FuelChrg"] = GoFare.FuelChrg * Pax;
            row["ServChrg"] = GoFare.ServChrg * Pax;
            row["SSRChrg"] = 0;
            //row["BaggageChrg"] = 0;
            //row["MealChrg"] = 0;
            //row["ComfortChrg"] = 0;
            //row["SportChrg"] = 0;
            row["SeatChrg"] = 0;
            row["InfantChrg"] = 0;
            row["FlightNumber"] = GoFare.FlightNumber;
            row["CarrierCode"] = GoFare.CarrierCode;
            row["DepartureDate"] = GoFare.DepartureDate;
            row["Origin"] = GoFare.Origin;
            row["Destination"] = GoFare.Destination;
            row["ArrivalDate"] = GoFare.ArrivalDate;
            row["FareSellKey"] = GoFare.FareSellKey;
            //row["TemClassId"] = GoFare.ClassID;
            row["TemClassId"] = dataClass.Rows.Count.ToString();
            row["AgentName"] = GoFare.AgentName;
            row["TemClassTransit"] = GoFare.Transit;
            row["FareApplicationType"] = GoFare.FareApplicationType;
            if (GoFare.Transit.ToString() != "")
            {
                row["TemClassStd2"] = GoFare.ClassStd2;
                row["TemClassSta2"] = GoFare.ClassSta2;
                row["FareSellKey2"] = GoFare.FareSellKey2;
                row["CarrierCode2"] = GoFare.CarrierCode2;
                row["FareClass2"] = GoFare.FareClass2;
                row["FlightNumber2"] = GoFare.FlightNumber2;
                row["FareApplicationType2"] = GoFare.FareApplicationType2;
            }
            row["Currency"] = GoFare.Currency;
            row["FlightDura"] = GoFare.FlightDura;
            row["FlightDura2"] = GoFare.FlightDura2;
            dataClass.Rows.Add(row);

            //insert return class
            row = dataClass.NewRow();

            row["FareClass"] = ReturnFare.FareClass;
            //row["Quantity"] = GoFare.Quantity;
            row["Quantity"] = Pax;

            row["AdultPax"] = PaxADT;
            row["ChildPax"] = PaxCHD;

            //commented by diana 20131104 - need to be checked
            //if (GoFare.AdultPax > 0)
            //{
            //    row["AdultPax"] = Pax;
            //    row["ChildPax"] = 0;
            //}
            //else
            //{
            //    row["AdultPax"] = 0;
            //    row["ChildPax"] = Pax;
            //}
            //row["AdultPax"] = GoFare.AdultPax;
            //row["ChildPax"] = GoFare.ChildPax;

            row["FullPrice"] = ReturnFare.FullPrice * Pax;
            row["FarePrice"] = ReturnFare.FarePrice;
            row["PaxFeeChrg"] = ReturnFare.PaxFeeChrg * Pax;
            row["TaxChrg"] = ReturnFare.TaxChrg * Pax;
            row["OthChrg"] = ReturnFare.OthChrg * Pax;
            row["DiscChrg"] = ReturnFare.DiscChrg * Pax;
            row["PromoDiscChrg"] = ReturnFare.PromoDiscChrg * Pax;
            row["FuelChrg"] = ReturnFare.FuelChrg * Pax;
            row["ServChrg"] = ReturnFare.ServChrg * Pax;
            row["SSRChrg"] = 0;
            //row["BaggageChrg"] = 0;
            //row["MealChrg"] = 0;
            //row["ComfortChrg"] = 0;
            //row["SportChrg"] = 0;
            row["SeatChrg"] = 0;
            row["InfantChrg"] = 0;
            row["FlightNumber"] = ReturnFare.FlightNumber;
            row["CarrierCode"] = ReturnFare.CarrierCode;
            row["DepartureDate"] = ReturnFare.DepartureDate;
            row["Origin"] = ReturnFare.Origin;
            row["Destination"] = ReturnFare.Destination;
            row["ArrivalDate"] = ReturnFare.ArrivalDate;
            row["FareSellKey"] = ReturnFare.FareSellKey;
            //row["TemClassId"] = ReturnFare.ClassID;
            row["TemClassId"] = dataClass.Rows.Count.ToString();
            row["AgentName"] = ReturnFare.AgentName;
            row["TemClassTransit"] = ReturnFare.Transit;
            row["FareApplicationType"] = ReturnFare.FareApplicationType;
            if (ReturnFare.Transit.ToString() != "")
            {
                row["TemClassStd2"] = ReturnFare.ClassStd2;
                row["TemClassSta2"] = ReturnFare.ClassSta2;
                row["FareSellKey2"] = ReturnFare.FareSellKey2;
                row["CarrierCode2"] = ReturnFare.CarrierCode2;
                row["FareClass2"] = ReturnFare.FareClass2;
                row["FlightNumber2"] = ReturnFare.FlightNumber2;
                row["FareApplicationType2"] = ReturnFare.FareApplicationType2;
            }
            row["Currency"] = ReturnFare.Currency;
            row["FlightDura"] = ReturnFare.FlightDura;
            row["FlightDura2"] = ReturnFare.FlightDura2;
            dataClass.Rows.Add(row);

            HttpContext.Current.Session.Remove("dataClass");
            HttpContext.Current.Session.Add("dataClass", dataClass);
        }


        //added by ketee
        /*
        private void CompilePairedFare(int Pax, ref DataTable CombFare, ref DataTable GoFare, ref DataTable ReturnFare)
        {
            CombFare = dtClass();

            //CombFare.FareClassGo = GoFare.FareClass;
            //CombFare.FareClassRtn = ReturnFare.FareClass;
            //CombFare.TotalPax = Pax;
            //CombFare.FullPriceGo = GoFare.FullPrice;
            //CombFare.FullPriceRtn = ReturnFare.FullPrice;
            //CombFare.FareAVG = (GoFare.FullPrice + ReturnFare.FullPrice);
            //GoFare.Balance -= Pax;
            //ReturnFare.Balance -= Pax;
        }
        */
        //amended by ketee
        /*
        private void ProcessPairedFare(TemFlight Flight, TemFlight Flight2, int ReqPAX, ref ArrayList CompFareList)
        {
            DataTable dtNewFareClass = dtClass();
            DataTable dtFareClassD = dtClass();
            DataTable dtFareClassR = dtClass();
            DataTable dtFareChildClassD = dtClass();
            DataTable dtFareChildClassR = dtClass();

            dtFareClassD = GetTemClassList(Flight.TemFlightFlightNumber);
            dtFareClassR = GetTemClassList(Flight2.TemFlightFlightNumber);

            int cumPax = 0;
            int tolPax = ReqPAX, reqPax = 0;

            PairedClassFare combFare = new PairedClassFare();

            //Get Fare Class by post in PAX (G=Going, R=Retur)
            int curG = 0, curR = 0;
            bool Exec = true;
            int balPax = ReqPAX;
            if ((dtFareClassD.Rows.Count >= 0) && (dtFareClassR.Rows.Count >= 0))
            {
                //Looping 2 set of fare class for lowest seat available
                while (Exec == true)
                {
                    if ((int)dtFareClassD.Rows[curG]["Quantity"] < (int)dtFareClassR.Rows[curR]["Quantity"])
                    {//Found going with less PAX
                        if (balPax > (int)dtFareClassD.Rows[curG]["Quantity"])
                        {
                            reqPax = (int)dtFareClassD.Rows[curG]["Quantity"];
                        }
                        else
                        {
                            reqPax = balPax;
                        }
                    }
                    else
                    {//Found return with less PAX
                        if (balPax > (int)dtFareClassR.Rows[curR]["Quantity"])
                        {
                            reqPax = (int)dtFareClassR.Rows[curR]["Quantity"];
                        }
                        else
                        {
                            reqPax = balPax;
                        }
                    }
                    //Put the matching fare class together Going X PAX & Return Y PAX 
                    //CompilePairedFare(reqPax, ref combFare, ref GoingFare[curG], ref ReturnFare[curR]);
                    //CompFareList.Add(combFare);

                    dtNewFareClass.NewRow();
                    dtNewFareClass.Rows.Add();
                    //Make the lowest available fare class increase by one
                    if ((int)dtFareClassD.Rows[curG]["Quantity"] == 0) { curG += 1; };
                    if ((int)dtFareClassR.Rows[curR]["Quantity"] == 0) { curR += 1; };
                    cumPax += reqPax;
                    //Compute the balance PAX of a particular fareclass
                    balPax = tolPax - cumPax;
                    if (cumPax == tolPax) { Exec = false; };
                }
            }
        }
        */
        private void ProcessPairedFare(ClassFare[] GoingFare, ClassFare[] ReturnFare, int ReqPAX, ref ArrayList CompFareList)
        {
            int cumPax = 0;
            int tolPax = ReqPAX, reqPax = 0;

            PairedClassFare combFare = new PairedClassFare();

            //Get Fare Class by post in PAX (G=Going, R=Retur)
            int curG = 0, curR = 0;
            bool Exec = true;
            int balPax = ReqPAX;
            if ((GoingFare.Length >= 0) && (ReturnFare.Length >= 0))
            {
                //Looping 2 set of fare class for lowest seat available
                while (Exec == true)
                {
                    if (GoingFare[curG].Balance < ReturnFare[curR].Balance)
                    {//Found going with less PAX
                        if (balPax > GoingFare[curG].Balance)
                        {
                            reqPax = GoingFare[curG].Balance;
                        }
                        else
                        {
                            reqPax = balPax;
                        }
                    }
                    else
                    {//Found return with less PAX
                        if (balPax > ReturnFare[curR].Balance)
                        {
                            reqPax = ReturnFare[curR].Balance;
                        }
                        else
                        {
                            reqPax = balPax;
                        }
                    }
                    //Put the matching fare class together Going X PAX & Return Y PAX 
                    CompilePairedFare(reqPax, ref combFare, ref GoingFare[curG], ref ReturnFare[curR]);
                    CompFareList.Add(combFare);
                    //Make the lowest available fare class increase by one
                    if (GoingFare[curG].Balance == 0) { curG += 1; };
                    if (ReturnFare[curR].Balance == 0) { curR += 1; };
                    cumPax += reqPax;
                    //Compute the balance PAX of a particular fareclass
                    balPax = tolPax - cumPax;
                    if (cumPax == tolPax) { Exec = false; };
                }
            }
        }

        //ammnd jhn
        private void ProcessPairedFareJhn(ClassFare[] GoingFare, ClassFare[] ReturnFare, int ReqPAX, ref ArrayList CompFareList)
        {
            HttpContext.Current.Session.Remove("dataClass");

            int cumPax = 0;
            int tolPax = ReqPAX, reqPax = 0;

            var profiler = MiniProfiler.Current;

            PairedClassFare combFare = new PairedClassFare();

            //Get Fare Class by post in PAX (G=Going, R=Retur)
            int curG = 0, curR = 0;
            bool Exec = true;
            int balPax = ReqPAX;

            int allPaxADT = 0;
            int allPaxCHD = 0;
            //bool hkgFlight = false;

            foreach (ClassFare item in GoingFare)
            {
                allPaxADT += item.AdultPax;
                allPaxCHD += item.ChildPax;

                //commented by diana 20131105 - will result to all is adult
                //if (item.Origin != null && item.Destination != null)
                //{
                //    if (item.Origin.ToLower() == "hkg" || item.Destination.ToLower() == "hkg")
                //    {
                //        hkgFlight = true;
                //    }

                //}
                //if (hkgFlight == true)
                //    allPaxCHD += item.ChildPax;
                //else
                //    allPaxADT += item.ChildPax;
            }
            log.Info(this, "GoingFare Length = " + GoingFare.Length + "; ReturnFare Length = " + ReturnFare.Length);
            if ((GoingFare.Length >= 0) && (ReturnFare.Length >= 0))
            {
                //Looping 2 set of fare class for lowest seat available
                while (Exec == true)
                {
                    if (GoingFare[curG].Balance < ReturnFare[curR].Balance)
                    {//Found going with less PAX
                        if (balPax > GoingFare[curG].Balance)
                        {
                            reqPax = GoingFare[curG].Balance;
                        }
                        else
                        {
                            reqPax = balPax;
                        }
                    }
                    else
                    {//Found return with less PAX
                        if (balPax > ReturnFare[curR].Balance)
                        {
                            reqPax = ReturnFare[curR].Balance;
                        }
                        else
                        {
                            reqPax = balPax;
                        }
                    }
                    //Put the matching fare class together Going X PAX & Return Y PAX 

                    //amended by diana - add condition to check whether reqPax is not zero
                    if (reqPax > 0)
                    {
                        //added by diana 20131105 - separate quantity
                        int reqPaxADT = 0;
                        int reqPaxCHD = 0;

                        if (allPaxCHD >= reqPax)
                        {
                            reqPaxCHD = reqPax - 1;
                            reqPaxADT = reqPax - reqPaxCHD;

                        }
                        else
                        {
                            reqPaxCHD = allPaxCHD;
                            reqPaxADT = reqPax - reqPaxCHD;
                        }

                        allPaxCHD -= reqPaxCHD;
                        allPaxADT -= reqPaxADT;
                        //end added by diana 20131105 - separate quantity

                        //CompilePairedFare(reqPax, ref combFare, ref GoingFare[curG], ref ReturnFare[curR]);

                        //added by ketee, 20170916, performance checking
                        using (profiler.Step("CompilePairedFare"))
                        {
                            CompilePairedFareJhn(reqPax, ref combFare, ref GoingFare[curG], ref ReturnFare[curR], reqPaxADT, reqPaxCHD);
                        }


                        CompFareList.Add(combFare);
                    }

                    //Make the lowest available fare class increase by one
                    if (GoingFare[curG].Balance == 0) { curG += 1; };
                    if (ReturnFare[curR].Balance == 0) { curR += 1; };
                    cumPax += reqPax;
                    //Compute the balance PAX of a particular fareclass
                    balPax = tolPax - cumPax;
                    if (cumPax == tolPax) { Exec = false; };
                }
            }
        }

        public void UpdateTemFlight(TemFlight TemFlight)
        {
            if (HttpContext.Current.Session["TempFlight"] != null)
            {

                DataTable dt = dtFlight();

                dt = (DataTable)HttpContext.Current.Session["TempFlight"];

                DataRow[] temFlightRow =
                dt.Select("temFlightId = '" + TemFlight.TemFlightId + "'");

                temFlightRow[0]["TemFlightAveragePrice"] = TemFlight.TemFlightAveragePrice;
                temFlightRow[0]["TemFlightTotalAmount"] = TemFlight.TemFlightTotalAmount;
                temFlightRow[0]["TemFlightFarePrice"] = TemFlight.temFlightfarePrice;
                temFlightRow[0]["TemFlightAPT"] = TemFlight.TemFlightApt;
                temFlightRow[0]["TemFlightPaxFee"] = TemFlight.TemFlightPaxFee;
                temFlightRow[0]["TemFlightAPTCHD"] = TemFlight.TemFlightAptChd;
                temFlightRow[0]["TemFlightFuel"] = TemFlight.TemFlightFuel;
                temFlightRow[0]["TemFlightOth"] = TemFlight.TemFlightOth;
                temFlightRow[0]["TemFlightDisc"] = TemFlight.TemFlightDisc;
                temFlightRow[0]["TemFlightPromoDisc"] = TemFlight.TemFlightPromoDisc;
                temFlightRow[0]["TemFlightServiceCharge"] = TemFlight.TemFlightServiceCharge;

                HttpContext.Current.Session.Remove("TempFlight");
                HttpContext.Current.Session.Add("TempFlight", dt);
            }

        }

        public void UpdateFlightPrice(int flightID, decimal fare, decimal full, decimal apt, decimal paxFee, decimal chdapt, decimal fuel, decimal svc, decimal ssr, decimal seat, decimal oth, decimal disc, decimal promodisc, decimal avg, decimal vat)
        {
            if (HttpContext.Current.Session["TempFlight"] != null)
            {

                DataTable dt = dtFlight();

                dt = (DataTable)HttpContext.Current.Session["TempFlight"];

                DataRow[] temFlightRow =
                dt.Select("temFlightId = '" + flightID + "'");

                temFlightRow[0]["TemFlightAveragePrice"] = avg;
                temFlightRow[0]["TemFlightTotalAmount"] = full;
                temFlightRow[0]["TemFlightFarePrice"] = fare;
                temFlightRow[0]["TemFlightAPT"] = apt;
                //temFlightRow[0]["TemFlightInfant"] = infant;
                temFlightRow[0]["TemFlightAPTCHD"] = chdapt;
                temFlightRow[0]["TemFlightPaxFee"] = paxFee;
                temFlightRow[0]["TemFlightFuel"] = fuel;
                temFlightRow[0]["TemFlightOth"] = oth;
                temFlightRow[0]["TemFlightDisc"] = disc;
                temFlightRow[0]["TemFlightPromoDisc"] = promodisc;
                temFlightRow[0]["TemFlightServiceCharge"] = svc;

                //temFlightRow[0]["TemFlightSSR"] = ssr;
                //temFlightRow[0]["TemFlightSeat"] = seat;
                //added by ketee
                temFlightRow[0]["TemFlightServiceChargeVAT"] = vat;

                HttpContext.Current.Session.Remove("TempFlight");
                HttpContext.Current.Session.Add("TempFlight", dt);
            }

        }
        //ongoing, checking for ReturnOnly = true, then no need to search for going fare
        public void UpdateTemFlight(TemFlight GoingFlight, TemFlight ReturnFlight, string SessionID, ref string sign, bool change = false, decimal totalPrevious = 0, decimal totalReturnPrevious = 0, bool ReturnOnly = false)
        {
            var profiler = MiniProfiler.Current;
            try
            {
                decimal totalDept = 0;
                decimal totalRtrn = 0;
                int GuestNum = GoingFlight.TemFlightADTNum;
                int PaxNum = GoingFlight.TemFlightPaxNum;
                int ChildNum = GoingFlight.TemFlightCHDNum;

                int tempPax = PaxNum;
                int tempPax2 = PaxNum;

                int tolPax = 0;
                //ABS.Navitaire.APIBooking APIBooking = new ABS.Navitaire.APIBooking(SessionID);
                //GetAvailabilityResponse response = APIBooking.GetOneAvailability(GoingFlight.TemFlightPaxNum, GoingFlight.TemFlightADTNum ,GoingFlight.TemFlightDate, GoingFlight.TemFlightDeparture, GoingFlight.TemFlightArrival, GoingFlight.TemFlightFlightNumber, GoingFlight.TemFlightCurrencyCode, ref SessionID);
                //string xml = GetXMLString(response.GetTripAvailabilityResponse.Schedules[0][0]);
                sign = SessionID;

                ClassFare[] aryFareG, aryFareR;

                tolPax = GoingFlight.TemFlightPaxNum;
                if (ReturnFlight.TemFlightId == 0)
                {//One Way Processing 

                    //aryFareG = GetClassFare(GoingFlight, tolPax, SessionID);
                    aryFareG = GetClassFareJhn(GoingFlight, tolPax, SessionID, change, totalPrevious);
                    if (aryFareG != null)
                    {
                        for (int i = 0; i < aryFareG.Length; i++)
                        {
                            totalDept += aryFareG[i].FullPrice * aryFareG[i].Quantity;
                        }

                        GoingFlight.TemFlightTotalAmount = totalDept;
                        GoingFlight.TemFlightAveragePrice = totalDept / GoingFlight.TemFlightPaxNum;

                        GoingFlight.TemFlightIfReturn = false;
                        UpdateTemFlight(GoingFlight);
                    }

                }
                else if (ReturnOnly == true)
                {//Return Only Flight Change

                    //aryFareG = GetClassFare(GoingFlight, tolPax, SessionID);
                    aryFareR = GetClassFareJhn(ReturnFlight, tolPax, SessionID, change, totalReturnPrevious);
                    if (aryFareR != null)
                    {
                        for (int i = 0; i < aryFareR.Length; i++)
                        {
                            totalRtrn += aryFareR[i].FullPrice * aryFareR[i].Quantity;
                        }

                        ReturnFlight.TemFlightTotalAmount = totalRtrn;
                        ReturnFlight.TemFlightAveragePrice = totalRtrn / ReturnFlight.TemFlightPaxNum;

                        ReturnFlight.TemFlightIfReturn = true;
                        UpdateTemFlight(ReturnFlight);
                    }
                }
                else
                {//Two Way Processing
                    ArrayList aryAll = new ArrayList();
                    ClassFare thisFare;
                    PairedClassFare combFare = new PairedClassFare();


                    int curG = 0, curR = 0;
                    bool Exec = true;
                    decimal totalFareAVG = 0;
                    decimal totalFareGo = 0;
                    decimal totalFareRtn = 0;
                    int totalPaxAVG = 0;
                    int balPax = tolPax;
                    int tolPNR = 0;

                    //aryFareG = GetClassFare(GoingFlight, tolPax, SessionID);
                    //aryFareR = GetClassFare(ReturnFlight, tolPax, SessionID);
                    //added by ketee, 20170916, performance checking
                    using (profiler.Step("GetClassFareJhn"))
                    {
                        aryFareG = GetClassFareJhn(GoingFlight, tolPax, SessionID, change, totalPrevious);
                        aryFareR = GetClassFareJhn(ReturnFlight, tolPax, SessionID, change, totalReturnPrevious);
                    }

                    //ProcessPairedFare(aryFareG, aryFareR, tolPax, ref aryAll);

                    //added by ketee, 20170916, performance checking
                    using (profiler.Step("ProcessPairedFare"))
                    {
                        if (aryFareG != null && aryFareR != null)
                        {
                            ProcessPairedFareJhn(aryFareG, aryFareR, tolPax, ref aryAll);
                            tolPNR = aryAll.Count;
                        }
                    }


                    //checking the value of dataClass
                    /*
                    DataTable dataClass = dtClass();
                    if (HttpContext.Current.Session["dataClass"] != null)
                    {
                        dataClass = (DataTable)HttpContext.Current.Session["dataClass"];
                    }*/
                    // added by ketee, 20170916, performance checking
                    using (profiler.Step("UpdateTemFlight"))
                    {
                        foreach (PairedClassFare PairedFare in aryAll)
                        {
                            totalFareAVG += PairedFare.FareAVG;
                            totalFareGo += PairedFare.FullPriceGo * PairedFare.TotalPax;
                            totalFareRtn += PairedFare.FullPriceRtn * PairedFare.TotalPax;
                            totalPaxAVG += PairedFare.TotalPax;
                        }

                        ReturnFlight.TemFlightTotalAmount = totalFareRtn;

                        ReturnFlight.TemFlightAveragePrice = totalFareRtn;
                        ReturnFlight.TemFlightIfReturn = true;
                        UpdateTemFlight(ReturnFlight);

                        GoingFlight.TemFlightTotalAmount = totalFareGo;

                        GoingFlight.TemFlightAveragePrice = totalFareGo;
                        GoingFlight.TemFlightIfReturn = true;
                        UpdateTemFlight(GoingFlight);
                    }


                }
            }
            catch (Exception ex)
            {
                log.Error(this, ex);

            }
        }

        public string UpdateTemFlightChange(TemFlight GoingFlight, TemFlight ReturnFlight, string SessionID, ref string sign, bool change = false, decimal totalPrevious = 0, decimal totalReturnPrevious = 0, bool ReturnOnly = false)
        {
            decimal totalDept = 0;
            decimal totalRtrn = 0;
            int GuestNum = GoingFlight.TemFlightADTNum;
            int PaxNum = GoingFlight.TemFlightPaxNum;
            int ChildNum = GoingFlight.TemFlightCHDNum;

            int tempPax = PaxNum;
            int tempPax2 = PaxNum;

            int tolPax = 0;
            ABS.Navitaire.APIBooking APIBooking = new ABS.Navitaire.APIBooking(SessionID);
            //GetAvailabilityResponse response = APIBooking.GetOneAvailability(GoingFlight.TemFlightPaxNum, GoingFlight.TemFlightADTNum ,GoingFlight.TemFlightDate, GoingFlight.TemFlightDeparture, GoingFlight.TemFlightArrival, GoingFlight.TemFlightFlightNumber, GoingFlight.TemFlightCurrencyCode, ref SessionID);
            //string xml = GetXMLString(response.GetTripAvailabilityResponse.Schedules[0][0]);
            sign = SessionID;

            ClassFare[] aryFareG, aryFareR;

            tolPax = GoingFlight.TemFlightPaxNum;
            if (ReturnFlight.TemFlightId == 0)
            {//One Way Processing 

                //aryFareG = GetClassFare(GoingFlight, tolPax, SessionID);
                aryFareG = GetClassFareJhn(GoingFlight, tolPax, SessionID, change, totalPrevious);
                if (aryFareG.Length > 0)
                {
                    if ((aryFareG[0].AdultPax + aryFareG[0].ChildPax) != tolPax)
                    {
                        return (aryFareG[0].AdultPax + aryFareG[0].ChildPax).ToString();
                    }
                }
                else
                {
                    for (int i = 0; i < aryFareG.Length; i++)
                    {
                        totalDept += aryFareG[i].FullPrice * aryFareG[i].Quantity;
                    }

                    GoingFlight.TemFlightTotalAmount = totalDept;
                    GoingFlight.TemFlightAveragePrice = totalDept / GoingFlight.TemFlightPaxNum;

                    GoingFlight.TemFlightIfReturn = false;
                    UpdateTemFlight(GoingFlight);
                }
            }
            else if (ReturnOnly == true)
            {//Return Only Flight Change

                //aryFareG = GetClassFare(GoingFlight, tolPax, SessionID);
                aryFareR = GetClassFareJhn(ReturnFlight, tolPax, SessionID, change, totalReturnPrevious);
                if (aryFareR.Length > 0)
                {
                    if ((aryFareR[0].AdultPax + aryFareR[0].ChildPax) != tolPax)
                    {
                        return (aryFareR[0].AdultPax + aryFareR[0].ChildPax).ToString();
                    }
                }
                else
                {
                    for (int i = 0; i < aryFareR.Length; i++)
                    {
                        totalRtrn += aryFareR[i].FullPrice * aryFareR[i].Quantity;
                    }

                    ReturnFlight.TemFlightTotalAmount = totalRtrn;
                    ReturnFlight.TemFlightAveragePrice = totalRtrn / ReturnFlight.TemFlightPaxNum;

                    ReturnFlight.TemFlightIfReturn = true;
                    UpdateTemFlight(ReturnFlight);
                }
            }
            else
            {//Two Way Processing
                ArrayList aryAll = new ArrayList();
                ClassFare thisFare;
                PairedClassFare combFare = new PairedClassFare();


                int curG = 0, curR = 0;
                bool Exec = true;
                decimal totalFareAVG = 0;
                decimal totalFareGo = 0;
                decimal totalFareRtn = 0;
                int totalPaxAVG = 0;
                int balPax = tolPax;
                int tolPNR = 0;

                //aryFareG = GetClassFare(GoingFlight, tolPax, SessionID);
                //aryFareR = GetClassFare(ReturnFlight, tolPax, SessionID);
                aryFareG = GetClassFareJhn(GoingFlight, tolPax, SessionID, change, totalPrevious);
                aryFareR = GetClassFareJhn(ReturnFlight, tolPax, SessionID, change, totalReturnPrevious);
                //ProcessPairedFare(aryFareG, aryFareR, tolPax, ref aryAll);
                ProcessPairedFareJhn(aryFareG, aryFareR, tolPax, ref aryAll);
                tolPNR = aryAll.Count;
                foreach (PairedClassFare PairedFare in aryAll)
                {
                    //totalPaxAVG += PairedFare.TotalPax;
                    if (PairedFare.TotalPax != tolPax)
                    {
                        return PairedFare.TotalPax.ToString();
                    }
                }

                //checking the value of dataClass
                /*
                DataTable dataClass = dtClass();
                if (HttpContext.Current.Session["dataClass"] != null)
                {
                    dataClass = (DataTable)HttpContext.Current.Session["dataClass"];
                }*/

                foreach (PairedClassFare PairedFare in aryAll)
                {
                    totalFareAVG += PairedFare.FareAVG;
                    totalFareGo += PairedFare.FullPriceGo * PairedFare.TotalPax;
                    totalFareRtn += PairedFare.FullPriceRtn * PairedFare.TotalPax;
                    totalPaxAVG += PairedFare.TotalPax;
                }

                ReturnFlight.TemFlightTotalAmount = totalFareRtn;

                ReturnFlight.TemFlightAveragePrice = totalFareRtn;
                ReturnFlight.TemFlightIfReturn = true;
                UpdateTemFlight(ReturnFlight);

                GoingFlight.TemFlightTotalAmount = totalFareGo;

                GoingFlight.TemFlightAveragePrice = totalFareGo;
                GoingFlight.TemFlightIfReturn = true;
                UpdateTemFlight(GoingFlight);


            }
            return "";
        }

        //for change flight
        public void FillNextJourneyData(ref TemFlight GoingFlight, ref TemFlight ReturnFlight, string SessionID, ref DataTable dtNextJourney, Boolean flagOneWay, ref string fareClassDepart, ref string fareClassReturn)
        {
            var profiler = MiniProfiler.Current;
            ABS.Navitaire.APIBooking APIBooking = new ABS.Navitaire.APIBooking(SessionID);
            //DataTable dtDepartJourney = dtKeySignature();
            //DataTable dtReturnJourney = dtKeySignature();

            //depart 
            GetAvailabilityResponse response = new GetAvailabilityResponse();// APIBooking.GetOneAvailabilityWithPaxCount(GoingFlight.TemFlightPaxNum, GoingFlight.TemFlightADTNum, GoingFlight.TemFlightDate, GoingFlight.TemFlightDeparture, GoingFlight.TemFlightArrival, GoingFlight.TemFlightFlightNumber, GoingFlight.TemFlightCurrencyCode, ref SessionID);
            using (profiler.Step("Navitaire:GetSSRAvailability"))
            {
                response = APIBooking.GetOneAvailabilityWithPaxCount(GoingFlight.TemFlightPaxNum, GoingFlight.TemFlightADTNum, GoingFlight.TemFlightDate, GoingFlight.TemFlightDeparture, GoingFlight.TemFlightArrival, GoingFlight.TemFlightFlightNumber, GoingFlight.TemFlightCurrencyCode, ref SessionID);
            }

            fareClassDepart = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments[0].Fares[0].ClassOfService;

            DataRow row;
            row = dtNextJourney.NewRow();
            row["JourneySellKey"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].JourneySellKey.ToString();
            if (response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments.Length == 1)
            {
                row["FareSellKey"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments[0].Fares[0].FareSellKey.ToString();
                row["FareSellKeyTransit"] = "";
            }
            else
            {
                row["FareSellKey"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments[0].Fares[0].FareSellKey.ToString();
                row["FareSellKeyTransit"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments[1].Fares[0].FareSellKey.ToString();

            }
            dtNextJourney.Rows.Add(row);

            if (flagOneWay == false)
            {
                //return
                using (profiler.Step("Navitaire:GetSSRAvailability"))
                {
                    response = APIBooking.GetOneAvailabilityWithPaxCount(ReturnFlight.TemFlightPaxNum, ReturnFlight.TemFlightADTNum, ReturnFlight.TemFlightDate, ReturnFlight.TemFlightDeparture, ReturnFlight.TemFlightArrival, ReturnFlight.TemFlightFlightNumber, ReturnFlight.TemFlightCurrencyCode, ref SessionID);
                }

                fareClassReturn = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments[0].Fares[0].ClassOfService;

                row = dtNextJourney.NewRow();
                row["JourneySellKey"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].JourneySellKey.ToString();
                if (response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments.Length == 1)
                {
                    row["FareSellKey"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments[0].Fares[0].FareSellKey.ToString();
                    row["FareSellKeyTransit"] = "";
                }
                else
                {
                    row["FareSellKey"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments[0].Fares[0].FareSellKey.ToString();
                    row["FareSellKeyTransit"] = response.GetTripAvailabilityResponse.Schedules[0][0].Journeys[0].Segments[1].Fares[0].FareSellKey.ToString();
                }
                dtNextJourney.Rows.Add(row);
            }
        }

        //remark by ketee 20130625
        //public Boolean SellFlightByTem_bak(TemFlight temFlight, string LoginType, string LoginName, string LoginPWD, string LoginDomain, string SellSessionID)
        //{
        //    try
        //    {
        //        IBookingManager bookingAPI = new BookingManagerClient();
        //        ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");

        //        DataTable dataClass = new DataTable();
        //        DataTable dtTempClass = new DataTable();

        //        DataTable dataClassTrans = dtClassTrans();
        //        DataTable dataBreakdownFee = dtBreakdownFee();

        //        int quantityDepart = 0, quantityReturn = 0, qtychild = 0, qtyadult = 0;
        //        decimal farePriceDepart = 0, farePriceReturn = 0;
        //        string signatureDepart = "", signatureReturn = "";
        //        decimal fullPriceDepart = 0, fullPriceReturn = 0;

        //        //added by anton 12 oct
        //        decimal bdchAPT = 0, bdFare = 0, bdAPT = 0, bdPaxFee = 0, bdFuel = 0, bdOth = 0, bdDisc = 0, bdPromoDisc = 0, bdSvc = 0, bdBaggage = 0, bdMeal = 0, bdSport = 0, bdComfort = 0, bdSSR = 0, bdSeat = 0, bdFull = 0, bdVAT = 0; // for breakdownfee
        //        int totalPax = 0;

        //        dtTempClass = GetTemClassList(temFlight.TemFlightFlightNumber);
        //        IEnumerable<TemClassofService> temClasslist = ConvertToIEnum(dtTempClass);

        //        //added by ketee,
        //        List<PassengerData> lstPassenger = new List<PassengerData>();
        //        PassengerData rowPassenger;
        //        int passengerno = 0;

        //        //added by ketee, add sell service fees
        //        string cur = string.Empty;
        //        bool bError = false;

        //        int prevPNR = 0;

        //        foreach (TemClassofService temClass in temClasslist)
        //        {
        //            prevPNR += 1;
        //            if (LoginType == "SkyAgent")
        //            {
        //                SellSessionID = apiBooking.AgentLogon("SkyAgent", LoginDomain, LoginName, LoginPWD);
        //            }
        //            else
        //            {
        //                SellSessionID = apiBooking.AgentLogon();
        //            }

        //            temClass.TemClassSellSignature = SellSessionID;
        //            UpdateTemClass(temClass);
        //            //SellSessionID = temClass.TemClassSellSignature;

        //            SellRequest sellrequest = new SellRequest();

        //            sellrequest.Signature = SellSessionID;
        //            //sellrequest.Signature = temClass.TemClassSellSignature;

        //            sellrequest.ContractVersion = 3413;
        //            sellrequest.SellRequestData = new SellRequestData();
        //            sellrequest.SellRequestData.SellBy = SellBy.Journey;
        //            sellrequest.SellRequestData.SellJourneyRequest = new SellJourneyRequest();
        //            SellJourneyRequestData sjrd = new SellJourneyRequestData();
        //            sjrd.PaxCount = Convert.ToInt16(temClass.TemClassPersonNumber);
        //            sjrd.CurrencyCode = temFlight.TemFlightCurrencyCode.Trim();
        //            //added by ketee
        //            cur = temFlight.TemFlightCurrencyCode.Trim(); ;
        //            sjrd.Passengers = new Passenger[temClass.TemClassPersonNumber];

        //            //check child
        //            string adultType = "ADT";
        //            if (temClass.TemClassChildNumber > 0)
        //            {
        //                adultType = "CHD";
        //                qtychild++;
        //            }
        //            else
        //                qtyadult++;

        //            for (int i = 0; i < temClass.TemClassPersonNumber; i++)
        //            {
        //                sjrd.Passengers[i] = new Passenger();

        //                //sjrd.Passengers[i].PassengerNumber = Convert.ToInt16(passengerno);
        //                sjrd.Passengers[i].PassengerNumber = Convert.ToInt16(i);

        //                sjrd.Passengers[i].State = MessageState.New;
        //                sjrd.Passengers[i].PassengerID = passengerno;
        //                sjrd.Passengers[i].PassengerTypeInfos = new PassengerTypeInfo[1];
        //                sjrd.Passengers[i].PassengerTypeInfos[0] = new PassengerTypeInfo();

        //                if (adultType == "ADT")
        //                    sjrd.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse("1994-1-1");
        //                else if (adultType == "CHD")
        //                {
        //                    DateTime dtTime = DateTime.Now.AddYears(-5);
        //                    sjrd.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse(dtTime.Year + "-1-1");
        //                }

        //                sjrd.Passengers[i].PassengerTypeInfos[0].PaxType = adultType;
        //                sjrd.Passengers[i].PassengerTypeInfos[0].State = MessageState.New;
        //                sjrd.Passengers[i].PseudoPassenger = false;

        //                //added by ketee
        //                rowPassenger = new PassengerData();

        //                //rowPassenger.PassengerID = passengerno.ToString();
        //                rowPassenger.PassengerID = i.ToString();

        //                rowPassenger.FirstName = "TBA";
        //                rowPassenger.LastName = "TBA";
        //                rowPassenger.PassportNo = "TBA";
        //                rowPassenger.DOB = DateTime.Parse("1900-01-01");
        //                rowPassenger.SyncCreate = DateTime.Now;
        //                rowPassenger.LastSyncBy = "System";

        //                rowPassenger.RecordLocator = prevPNR.ToString();


        //                lstPassenger.Add(rowPassenger);
        //                passengerno++;
        //            }
        //            //added by ketee
        //            if (lstPassenger != null)
        //            {
        //                HttpContext.Current.Session.Remove("listPassengers");
        //                HttpContext.Current.Session.Add("listPassengers", lstPassenger);
        //            }

        //            sjrd.Journeys = new SellJourney[1];
        //            sjrd.Journeys[0] = new SellJourney();
        //            sjrd.Journeys[0].State = MessageState.New;
        //            sjrd.Journeys[0].NotForGeneralUse = false;
        //            if (temFlight.TemFlightTransit != "")
        //            { sjrd.Journeys[0].Segments = new SellSegment[2]; }
        //            else { sjrd.Journeys[0].Segments = new SellSegment[1]; }
        //            SellSegment srSegment = new SellSegment();
        //            srSegment.State = MessageState.New;
        //            srSegment.DepartureStation = temFlight.TemFlightDeparture.Trim();
        //            if (temFlight.TemFlightTransit != "")
        //            {
        //                srSegment.ArrivalStation = temFlight.TemFlightTransit.Trim();
        //            }
        //            else
        //            {
        //                srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
        //            }

        //            srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd);
        //            srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta);
        //            srSegment.FlightDesignator = new FlightDesignator();

        //            srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber.Trim();
        //            srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
        //            srSegment.Fare = new SellFare();
        //            srSegment.Fare.State = MessageState.New;
        //            srSegment.Fare.ClassOfService = temClass.TemClassClass.Trim();
        //            srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
        //            srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey.Split('~')[4].ToString();// "AAB1";
        //            srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey.Split('~')[3].ToString();// "A00H00";

        //            srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey.Split('~')[6]);
        //            srSegment.Fare.FareClassOfService = temClass.TemClassClass.Trim();
        //            srSegment.Fare.IsAllotmentMarketFare = false;

        //            switch (temClass.TempFareApplicationType.ToString().ToLower())
        //            {
        //                case "route":
        //                    srSegment.Fare.FareApplicationType = FareApplicationType.Route;
        //                    break;
        //                case "sector":
        //                    srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
        //                    break;
        //                case "governing":
        //                    srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
        //                    break;
        //                default:
        //                    srSegment.Fare.FareApplicationType = FareApplicationType.Route;
        //                    //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
        //                    break;
        //            }
        //            sjrd.Journeys[0].Segments[0] = srSegment;

        //            if (temFlight.TemFlightTransit != "")
        //            {
        //                srSegment = new SellSegment();
        //                srSegment.State = MessageState.New;
        //                srSegment.DepartureStation = temFlight.TemFlightTransit.Trim();
        //                srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
        //                srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd2);
        //                srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta2);
        //                srSegment.FlightDesignator = new FlightDesignator();

        //                srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber2.Trim();
        //                srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();

        //                srSegment.Fare = new SellFare();
        //                srSegment.Fare.State = MessageState.New;
        //                srSegment.Fare.ClassOfService = temClass.TemClassClass2.Trim();
        //                srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();
        //                srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey2.Split('~')[4].ToString();
        //                srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey2.Split('~')[3].ToString();

        //                srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey2.Split('~')[6]);
        //                srSegment.Fare.FareClassOfService = temClass.TemClassClass2.Trim();
        //                srSegment.Fare.IsAllotmentMarketFare = false;

        //                switch (temClass.TempFareApplicationType2.ToString().ToLower())
        //                {
        //                    case "route":
        //                        srSegment.Fare.FareApplicationType = FareApplicationType.Route;
        //                        break;
        //                    case "sector":
        //                        srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
        //                        break;
        //                    case "governing":
        //                        srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
        //                        break;
        //                    default:
        //                        //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
        //                        srSegment.Fare.FareApplicationType = FareApplicationType.Route;
        //                        break;
        //                }
        //                sjrd.Journeys[0].Segments[1] = srSegment;
        //            }

        //            sellrequest.SellRequestData.SellJourneyRequest.SellJourneyRequestData = sjrd;

        //            //string requeststring = GetXMLString(sellrequest);

        //            SellResponse response = bookingAPI.Sell(sellrequest);
        //            //string strxml = GetXMLString(response);
        //            //added by ketee, add service fees
        //            //foreach (PassengerData rowpassenger in lstPassenger)
        //            //{

        //            //remarked by diana 20170201, no more service fee
        //            //if (AddServiceFees(SellSessionID, cur, 0) == false)
        //            //{
        //            //    bError = true;
        //            //    log.Warning(this, "Add fees failed: " + SellSessionID);
        //            //    break;
        //            //}


        //            //}

        //            //fill data for new dataClass
        //            quantityDepart = temClass.TemClassPersonNumber;

        //            totalPax += quantityDepart;

        //            farePriceDepart = Convert.ToDecimal(temClass.TemClassClassPrice);
        //            fullPriceDepart = Convert.ToDecimal(temClass.TemClassFullPrice);
        //            signatureDepart = SellSessionID;

        //            /*
        //            DataRow row;
        //            row = dataClassTrans.NewRow();
        //            row["Quantity"] = quantityDepart;
        //            row["FarePrice"] = farePriceDepart + farePriceReturn;
        //            row["FullPrice"] = fullPriceDepart + fullPriceReturn;
        //            row["SellSignature"] = signatureDepart;
        //            dataClassTrans.Rows.Add(row);
        //            */

        //            Navitaire.BookingManager.Booking book = GetBookingFromState(SellSessionID);

        //            int segCount = book.Journeys[0].Segments.Length;

        //            //renew temClass
        //            ClassPrice classPrice = new ClassPrice();

        //            for (int iDepart = 0; iDepart < segCount; iDepart++)
        //            {
        //                //added by diana 20131031 - added condition if paxfare length is more than 0
        //                if (book.Journeys[0].Segments[iDepart].Fares[0].PaxFares.Length > 0)
        //                {
        //                    PaxFare paxFare = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];
        //                    for (int i = 0; i < paxFare.ServiceCharges.Length; i++)
        //                    {
        //                        switch (paxFare.ServiceCharges[i].ChargeType.ToString().ToUpper())
        //                        {
        //                            case "FAREPRICE":
        //                                bdFare += paxFare.ServiceCharges[i].Amount;
        //                                classPrice.FarePrice = classPrice.FarePrice + paxFare.ServiceCharges[i].Amount;
        //                                break;
        //                            case "DISCOUNT": //added by diana 20140208, to add fee for discount
        //                                bdDisc -= paxFare.ServiceCharges[i].Amount;
        //                                //classPrice.FullPrice = classPrice.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                classPrice.DiscChrg = classPrice.DiscChrg - (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                break;
        //                            case "PROMOTIONDISCOUNT": //added by diana 20140208, to add fee for discount
        //                                bdDisc -= paxFare.ServiceCharges[i].Amount;
        //                                //classPrice.FullPrice = classPrice.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                classPrice.PromoDiscChrg = classPrice.PromoDiscChrg - (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                break;
        //                            case "TRAVELFEE":
        //                                switch (paxFare.ServiceCharges[i].ChargeCode.ToString().ToUpper())
        //                                {
        //                                    case "APT":
        //                                    case "ATF":
        //                                    case "APTF":
        //                                        //case paxFare.ServiceCharges[i].ChargeCode.ToString().ToUpper().Contains(AirportTaxCode):
        //                                        if (paxFare.PaxType == "ADT")
        //                                        {
        //                                            bdAPT += paxFare.ServiceCharges[i].Amount;
        //                                        }
        //                                        else
        //                                        {
        //                                            bdchAPT += paxFare.ServiceCharges[i].Amount;
        //                                        }
        //                                        //classPrice.FullPrice = classPrice.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                        classPrice.TaxChrg = classPrice.TaxChrg + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                        break;
        //                                    case "FUEL":
        //                                        bdFuel += paxFare.ServiceCharges[i].Amount;
        //                                        //classPrice.FullPrice = classPrice.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                        classPrice.FuelChrg = classPrice.FuelChrg + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                        break;
        //                                    case "PSCH":
        //                                    case "PSH":
        //                                        bdPaxFee += paxFare.ServiceCharges[i].Amount;
        //                                        //classPrice.FullPrice = classPrice.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                        classPrice.PaxFeeChrg = classPrice.PaxFeeChrg + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                        break;
        //                                    default:
        //                                        bdOth += paxFare.ServiceCharges[i].Amount;
        //                                        //classPrice.FullPrice = classPrice.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                        classPrice.OthChrg = classPrice.OthChrg + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                        break;
        //                                }
        //                                break;
        //                            default:
        //                                bdOth += paxFare.ServiceCharges[i].Amount;
        //                                //classPrice.FullPrice = classPrice.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                classPrice.OthChrg = classPrice.OthChrg + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                break;
        //                        }
        //                        //switch (i)
        //                        //{
        //                        //    case 0:
        //                        //        bdFare += paxFare.ServiceCharges[i].Amount;
        //                        //        //classPrice.FullPrice = classPrice.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                        //        classPrice.FarePrice = classPrice.FarePrice + paxFare.ServiceCharges[i].Amount;
        //                        //        break;
        //                        //    case 1:
        //                        //        if (paxFare.PaxType == "ADT")
        //                        //        {
        //                        //            bdAPT += paxFare.ServiceCharges[i].Amount;
        //                        //        }
        //                        //        else
        //                        //        {
        //                        //            bdchAPT += paxFare.ServiceCharges[i].Amount;
        //                        //        }                                    
        //                        //        //classPrice.FullPrice = classPrice.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                        //        classPrice.TaxChrg = classPrice.TaxChrg + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                        //        break;
        //                        //    case 2:
        //                        //        bdFuel += paxFare.ServiceCharges[i].Amount;
        //                        //        //classPrice.FullPrice = classPrice.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                        //        classPrice.FuelChrg = classPrice.FuelChrg + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                        //        break;
        //                        //    default:
        //                        //        bdOth += paxFare.ServiceCharges[i].Amount;
        //                        //        //classPrice.FullPrice = classPrice.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                        //        classPrice.OthChrg = classPrice.OthChrg + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                        //        break;
        //                        //}
        //                    }
        //                }

        //            }
        //            //service charges
        //            //ADDED BY KETEE, VAT

        //            //amended by diana 20140121 - add initial value to 0, then add it
        //            classPrice.ServChrg = 0;
        //            classPrice.BaggageChrg = 0;
        //            classPrice.MealChrg = 0;
        //            classPrice.ComfortChrg = 0;
        //            classPrice.SportChrg = 0;
        //            classPrice.SSRChrg = 0;
        //            classPrice.SeatChrg = 0;
        //            classPrice.InfantChrg = 0;
        //            classPrice.ServVAT = 0;
        //            if (book.Passengers[0].PassengerFees.Length > 0 && book.Passengers[0].PassengerFees[0].ServiceCharges.Length > 0)
        //            {
        //                for (int i = 0; i < book.Passengers[0].PassengerFees[0].ServiceCharges.Length; i++)
        //                {
        //                    switch (book.Passengers[0].PassengerFees[0].ServiceCharges[i].ChargeCode.ToString().ToUpper())
        //                    {
        //                        case "SVCF":
        //                            bdSvc += book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount;
        //                            classPrice.ServChrg += book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount * temClass.TemClassPersonNumber;
        //                            break;
        //                        case "VAT":
        //                            bdVAT += book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount;
        //                            classPrice.ServVAT += book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount * temClass.TemClassPersonNumber;
        //                            break;
        //                        default:
        //                            bdSvc += book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount;
        //                            classPrice.ServChrg += book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount * temClass.TemClassPersonNumber;
        //                            break;
        //                    }
        //                }

        //            }

        //            //classPrice.FullPrice += classPrice.ServChrg;
        //            bdFull += book.BookingSum.TotalCost;

        //            classPrice.ClassID = temClass.TemClassId;
        //            classPrice.FullPrice = book.BookingSum.TotalCost;

        //            UpdateClassPrice(classPrice);

        //            DataRow row;
        //            row = dataClassTrans.NewRow();
        //            row["Quantity"] = quantityDepart;
        //            row["FarePrice"] = classPrice.FarePrice;
        //            row["FullPrice"] = classPrice.FullPrice;
        //            row["SellSignature"] = signatureDepart;
        //            dataClassTrans.Rows.Add(row);
        //            //added by ketee, 20121016
        //            row["ServChrg"] = classPrice.ServChrg;
        //            row["SSRChrg"] = classPrice.SSRChrg;
        //            row["BaggageChrg"] = classPrice.BaggageChrg;
        //            row["MealChrg"] = classPrice.MealChrg;
        //            row["ComfortChrg"] = classPrice.ComfortChrg;
        //            row["SportChrg"] = classPrice.SportChrg;
        //            row["SeatChrg"] = classPrice.SeatChrg;
        //            row["InfantChrg"] = classPrice.InfantChrg;
        //            //added by ketee, VAT
        //            row["ServVAT"] = classPrice.ServVAT;
        //            row["DetailCollectedAmt"] = 0;
        //            row["RecordLocator"] = "";

        //            //save new data class into session
        //            if (dataClassTrans.Rows.Count > 0)
        //            {
        //                HttpContext.Current.Session.Remove("dataClassTrans");
        //                HttpContext.Current.Session.Add("dataClassTrans", dataClassTrans);
        //            }
        //        }

        //        DataRow rowBD;
        //        rowBD = dataBreakdownFee.NewRow();

        //        rowBD["Fare"] = bdFare / dataClassTrans.Rows.Count;
        //        if (qtychild > 0)
        //        {
        //            rowBD["ChApt"] = bdchAPT / qtychild;
        //        }
        //        else
        //        {
        //            rowBD["ChApt"] = bdAPT / qtyadult;
        //        }
        //        rowBD["Apt"] = bdAPT / qtyadult;
        //        rowBD["PaxFee"] = bdPaxFee / dataClassTrans.Rows.Count;
        //        rowBD["Fuel"] = bdFuel / dataClassTrans.Rows.Count;
        //        rowBD["Svc"] = bdSvc / dataClassTrans.Rows.Count;
        //        rowBD["Baggage"] = bdBaggage;
        //        rowBD["Meal"] = bdMeal;
        //        rowBD["Sport"] = bdSport;
        //        rowBD["Comfort"] = bdComfort;
        //        rowBD["SSR"] = bdSSR;
        //        rowBD["Seat"] = bdSeat;
        //        rowBD["Oth"] = bdOth / dataClassTrans.Rows.Count;
        //        rowBD["Disc"] = bdDisc / dataClassTrans.Rows.Count;
        //        rowBD["PromoDisc"] = bdPromoDisc;
        //        //added by ketee, VAT
        //        rowBD["VAT"] = bdVAT / dataClassTrans.Rows.Count;
        //        //rowBD["SSR"] = 0;
        //        dataBreakdownFee.Rows.Add(rowBD);

        //        if (dataClassTrans.Rows.Count > 0)
        //        {
        //            HttpContext.Current.Session.Remove("dataBDFeeDepart");
        //            HttpContext.Current.Session.Add("dataBDFeeDepart", dataBreakdownFee);
        //        }

        //        UpdateFlightPrice(temFlight.TemFlightId, bdFare, bdFull, bdAPT, bdPaxFee, bdchAPT, bdFuel, bdSvc, bdSSR, bdSeat, bdOth, bdDisc, bdPromoDisc, bdFull / temFlight.TemFlightPaxNum, bdVAT);
        //        return true;
        //    }
        //    catch (Exception ex)
        //    {
        //        log.Error(this, ex);
        //        return false;
        //    }


        //}

        public SellResponse SellSSR(string SellSessionID, GetSSRAvailabilityForBookingResponse response, List<Bk_transaddon> List1, List<Bk_transaddon> List2, List<Bk_transaddon> List3, List<Bk_transaddon> List4, Boolean delete, string PNR = "", string Currency = "", string change = "")
        {
            short count = 0;
            List<Bk_transaddon> ListSSR = new List<Bk_transaddon>();
            try
            {
                IBookingManager bookingAPI = new BookingManagerClient();
                SellRequest sellSsrRequest = new SellRequest();
                SellRequestData sellreqd = new SellRequestData();
                sellreqd.SellBy = SellBy.SSR;
                sellreqd.SellSSR = new SellSSR();
                sellreqd.SellSSR.SSRRequest = new SSRRequest();
                sellreqd.SellSSR.SSRRequest.CancelFirstSSR = delete;
                //int SSRRequestCount = response.SSRAvailabilityForBookingResponse.SSRSegmentList.Length;
                int SSRRequestCount = 0;
                if ((List1 != null && List1.Count > 0) && (List2 != null && List2.Count > 0) && (List3 != null && List3.Count > 0) && (List4 != null && List4.Count > 0))
                {
                    SSRRequestCount = 4;
                }
                else if (((List1 != null && List1.Count > 0) && (List2 != null && List2.Count > 0) && (List3 != null && List3.Count > 0) && (List4 == null || List4.Count == 0)) || ((List1 != null && List1.Count > 0) && (List2 == null || List2.Count == 0) && (List3 != null && List3.Count > 0) && (List4 != null && List4.Count > 0)))
                {
                    SSRRequestCount = 3;
                }
                else if (((List1 != null && List1.Count > 0) && (List2 != null && List2.Count > 0) && (List3 == null || List3.Count == 0) && (List4 == null || List4.Count == 0)) || ((List1 != null && List1.Count > 0) && (List2 == null || List2.Count == 0) && (List3 != null && List3.Count > 0) && (List4 == null || List4.Count == 0)))
                {
                    SSRRequestCount = 2;
                }
                else if (((List1 != null && List1.Count > 0) && (List2 == null || List2.Count == 0) && (List3 == null || List3.Count == 0) && (List4 == null || List4.Count == 0)) || ((List1 == null || List1.Count == 0) && (List2 != null && List2.Count > 0) && (List3 == null || List3.Count == 0) && (List4 == null || List4.Count == 0)) || ((List1 == null || List1.Count == 0) && (List2 == null || List2.Count == 0) && (List3 != null && List3.Count > 0) && (List4 == null || List4.Count == 0)) || ((List1 == null || List1.Count == 0) && (List2 == null || List2.Count == 0) && (List3 == null || List3.Count == 0) && (List4 != null && List4.Count > 0)))
                {
                    SSRRequestCount = 1;
                }
                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests = new SegmentSSRRequest[SSRRequestCount];
                int index = 0, loopSSR = 0;
                for (count = 0; count < 4; count++)
                {
                    if (count == 0) ListSSR = List1;
                    else if (count == 1) ListSSR = List2;
                    else if (count == 2) ListSSR = List3;
                    else ListSSR = List4;
                    if (ListSSR != null && ListSSR.Count > 0)
                    {
                        sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[index] = new SegmentSSRRequest();
                        ArrayList SSRCode = new ArrayList();
                        ArrayList origin = new ArrayList();
                        ArrayList destination = new ArrayList();
                        ArrayList PassNo = new ArrayList();
                        loopSSR = 0;
                        for (int i = 0; i < ListSSR.Count; i++)
                        {
                            string[] SSRCat = new string[] { ListSSR[i].BaggageCode, ListSSR[i].SportCode, ListSSR[i].MealCode1, ListSSR[i].DrinkCode1, ListSSR[i].KitCode, ListSSR[i].InfantCode };
                            for (int ii = 0; ii < SSRCat.Length; ii++)
                            {
                                if (SSRCat[ii] != null && SSRCat[ii].ToString() != "")
                                {
                                    loopSSR += 1;
                                    SSRCode.Add(SSRCat[ii]);
                                    origin.Add(ListSSR[i].Origin);
                                    destination.Add(ListSSR[i].Destination);
                                    PassNo.Add(ListSSR[i].PassengerID);
                                }
                            }
                        }

                        sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs = new PaxSSR[loopSSR];
                        for (int ind = 0; ind < response.SSRAvailabilityForBookingResponse.SSRSegmentList.Length; ind++)
                        {
                            if (response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.DepartureStation == origin[0].ToString() && response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.ArrivalStation == destination[0].ToString())
                            {
                                for (int loop = 0; loop < sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs.Length; loop++)
                                {
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop] = new PaxSSR();
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].ActionStatusCode = "SS";
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].State = ABS.Navitaire.BookingManager.MessageState.Modified;
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].SSRCode = SSRCode[loop].ToString();
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].SSRNumber = 0;
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].DepartureStation = origin[loop].ToString();
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].ArrivalStation = destination[loop].ToString();
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].PassengerNumber = (short)Convert.ToInt16(PassNo[loop]);
                                }
                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[index].DepartureStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.DepartureStation;
                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[index].ArrivalStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.ArrivalStation;
                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[index].STD = response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.DepartureDate;
                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[index].FlightDesignator = new FlightDesignator();
                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[index].FlightDesignator.CarrierCode = response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.CarrierCode;
                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[index].FlightDesignator.FlightNumber = response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.FlightNumber;
                                index += 1;
                                break;
                            }

                        }
                    }
                }

                sellSsrRequest.Signature = SellSessionID;
                sellSsrRequest.ContractVersion = 3413;
                sellSsrRequest.SellRequestData = sellreqd;
                SellResponse sellSsrResponse = null;
                sellSsrResponse = bookingAPI.Sell(sellSsrRequest);
                //string xml = GetXMLString(sellSsrRequest);
                return sellSsrResponse;

            }
            catch (Exception ex)
            {
                log.Error(this, ex, "SellSession " + ex.Message);
                return null;
            }

        }

        public CancelResponse CancelSSR(string SellSessionID, GetSSRAvailabilityForBookingResponse response, string currency, List<Bk_transaddon> List1, List<Bk_transaddon> List2, List<Bk_transaddon> List3, List<Bk_transaddon> List4)
        {
            short count = 0;
            try
            {
                IBookingManager bookingAPI = new BookingManagerClient();
                CancelRequest cancelSSRs = new CancelRequest();
                cancelSSRs.Signature = SellSessionID;
                cancelSSRs.ContractVersion = 3413;
                cancelSSRs.CancelRequestData = new CancelRequestData();
                cancelSSRs.CancelRequestData.CancelBy = CancelBy.SSR;
                cancelSSRs.CancelRequestData.CancelSSR = new CancelSSR();
                SSRRequest sellreqd = new SSRRequest();
                sellreqd.CurrencyCode = currency;
                sellreqd.CancelFirstSSR = true;
                int index = 0, loopSSR = 0;
                List<Bk_transaddon> ListSSR = new List<Bk_transaddon>();
                //int SSRRequestCount = response.SSRAvailabilityForBookingResponse.SSRSegmentList.Length;
                int SSRRequestCount = 0;
                if ((List1 != null && List1.Count > 0) && (List2 != null && List2.Count > 0) && (List3 != null && List3.Count > 0) && (List4 != null && List4.Count > 0))
                {
                    SSRRequestCount = 4;
                }
                else if (((List1 != null && List1.Count > 0) && (List2 != null && List2.Count > 0) && (List3 != null && List3.Count > 0) && (List4 == null || List4.Count == 0)) || ((List1 != null && List1.Count > 0) && (List2 == null || List2.Count == 0) && (List3 != null && List3.Count > 0) && (List4 != null && List4.Count > 0)))
                {
                    SSRRequestCount = 3;
                }
                else if (((List1 != null && List1.Count > 0) && (List2 != null && List2.Count > 0) && (List3 == null || List3.Count == 0) && (List4 == null || List4.Count == 0)) || ((List1 != null && List1.Count > 0) && (List2 == null || List2.Count == 0) && (List3 != null && List3.Count > 0) && (List4 == null || List4.Count == 0)))
                {
                    SSRRequestCount = 2;
                }
                else if (((List1 != null && List1.Count > 0) && (List2 == null || List2.Count == 0) && (List3 == null || List3.Count == 0) && (List4 == null || List4.Count == 0)) || ((List1 == null || List1.Count == 0) && (List2 != null && List2.Count > 0) && (List3 == null || List3.Count == 0) && (List4 == null || List4.Count == 0)) || ((List1 == null || List1.Count == 0) && (List2 == null || List2.Count == 0) && (List3 != null && List3.Count > 0) && (List4 == null || List4.Count == 0)) || ((List1 == null || List1.Count == 0) && (List2 == null || List2.Count == 0) && (List3 == null || List3.Count == 0) && (List4 != null && List4.Count > 0)))
                {
                    SSRRequestCount = 1;
                }
                sellreqd.SegmentSSRRequests = new SegmentSSRRequest[SSRRequestCount];

                for (count = 0; count < 4; count++)
                {
                    if (count == 0) ListSSR = List1;
                    else if (count == 1) ListSSR = List2;
                    else if (count == 2) ListSSR = List3;
                    else ListSSR = List4;
                    if (ListSSR != null && ListSSR.Count > 0)
                    {
                        sellreqd.SegmentSSRRequests[index] = new SegmentSSRRequest();
                        ArrayList SSRCode = new ArrayList();
                        ArrayList origin = new ArrayList();
                        ArrayList destination = new ArrayList();
                        ArrayList PassNo = new ArrayList();
                        loopSSR = 0;
                        for (int i = 0; i < ListSSR.Count; i++)
                        {
                            string[] SSRCat = new string[] { ListSSR[i].BaggageCode, ListSSR[i].SportCode, ListSSR[i].MealCode1, ListSSR[i].DrinkCode1, ListSSR[i].KitCode };
                            for (int ii = 0; ii < SSRCat.Length; ii++)
                            {
                                if (SSRCat[ii].ToString() != "")
                                {
                                    loopSSR += 1;
                                    SSRCode.Add(SSRCat[ii]);
                                    origin.Add(ListSSR[i].Origin);
                                    destination.Add(ListSSR[i].Destination);
                                    PassNo.Add(ListSSR[i].PassengerID);
                                }
                            }
                        }

                        sellreqd.SegmentSSRRequests[index].PaxSSRs = new PaxSSR[loopSSR];
                        for (int ind = 0; ind < response.SSRAvailabilityForBookingResponse.SSRSegmentList.Length; ind++)
                        {
                            if (response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.DepartureStation == origin[0].ToString() && response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.ArrivalStation == destination[0].ToString())
                            {
                                for (int loop = 0; loop < sellreqd.SegmentSSRRequests[index].PaxSSRs.Length; loop++)
                                {
                                    sellreqd.SegmentSSRRequests[index].PaxSSRs[loop] = new PaxSSR();
                                    sellreqd.SegmentSSRRequests[index].PaxSSRs[loop].ActionStatusCode = "SS";
                                    sellreqd.SegmentSSRRequests[index].PaxSSRs[loop].State = ABS.Navitaire.BookingManager.MessageState.Modified;
                                    sellreqd.SegmentSSRRequests[index].PaxSSRs[loop].SSRCode = SSRCode[loop].ToString();
                                    sellreqd.SegmentSSRRequests[index].PaxSSRs[loop].SSRNumber = 0;
                                    sellreqd.SegmentSSRRequests[index].PaxSSRs[loop].DepartureStation = origin[loop].ToString();
                                    sellreqd.SegmentSSRRequests[index].PaxSSRs[loop].ArrivalStation = destination[loop].ToString();
                                    sellreqd.SegmentSSRRequests[index].PaxSSRs[loop].PassengerNumber = (short)Convert.ToInt16(PassNo[loop]);
                                }
                                sellreqd.SegmentSSRRequests[index].DepartureStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.DepartureStation;
                                sellreqd.SegmentSSRRequests[index].ArrivalStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.ArrivalStation;
                                sellreqd.SegmentSSRRequests[index].STD = response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.DepartureDate;
                                sellreqd.SegmentSSRRequests[index].FlightDesignator = new FlightDesignator();
                                sellreqd.SegmentSSRRequests[index].FlightDesignator.CarrierCode = response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.CarrierCode;
                                sellreqd.SegmentSSRRequests[index].FlightDesignator.FlightNumber = response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.FlightNumber;
                                index += 1;
                                break;
                            }
                        }
                    }
                }

                cancelSSRs.CancelRequestData.CancelSSR.SSRRequest = sellreqd;
                CancelResponse cancelResponse = bookingAPI.Cancel(cancelSSRs);
                return cancelResponse;
            }
            catch (Exception ex)
            {
                log.Error(this, ex, "CancelSSRTransit: " + ex.Message);
                return null;
            }

        }

        public string SellSSR(string PNR, GetSSRAvailabilityForBookingResponse response, List<Bk_transaddon> List1, List<Bk_transaddon> List2, List<Bk_transaddon> List3, List<Bk_transaddon> List4, List<Bk_transaddon> List1Old, List<Bk_transaddon> List2Old, List<Bk_transaddon> List3Old, List<Bk_transaddon> List4Old)
        {
            short count = 0;
            List<Bk_transaddon> ListSSR = new List<Bk_transaddon>();
            try
            {
                IBookingManager bookingAPI = new BookingManagerClient();
                ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");
                HttpContext.Current.Session["Commit"] = false;
                string SellSessionID = apiBooking.AgentLogon();
                GetBookingResponse resp = GetBookingByPNR(PNR, SellSessionID);

                CancelRequest cancelSSRs = new CancelRequest();
                cancelSSRs.Signature = SellSessionID;
                cancelSSRs.ContractVersion = 3413;
                cancelSSRs.CancelRequestData = new CancelRequestData();
                cancelSSRs.CancelRequestData.CancelBy = CancelBy.SSR;
                cancelSSRs.CancelRequestData.CancelSSR = new CancelSSR();
                SSRRequest sellreqd = new SSRRequest();
                sellreqd.CurrencyCode = HttpContext.Current.Session["Currency"].ToString();
                sellreqd.CancelFirstSSR = true;
                int SSRRequestCount = response.SSRAvailabilityForBookingResponse.SSRSegmentList.Length;


                DataTable dt1 = new DataTable();
                dt1.Columns.Add("SSRCode");
                dt1.Columns.Add("SSRNumber");
                dt1.Columns.Add("PassengerNumber");

                DataTable dt2 = new DataTable();
                dt2.Columns.Add("SSRCode");
                dt2.Columns.Add("SSRNumber");
                dt2.Columns.Add("PassengerNumber");

                DataTable dt3 = new DataTable();
                dt3.Columns.Add("SSRCode");
                dt3.Columns.Add("SSRNumber");
                dt3.Columns.Add("PassengerNumber");

                DataTable dt4 = new DataTable();
                dt4.Columns.Add("SSRCode");
                dt4.Columns.Add("SSRNumber");
                dt4.Columns.Add("PassengerNumber");


                for (int i = 0; i < resp.Booking.Passengers.Length; i++)
                {
                    for (int ii = 0; ii < resp.Booking.Passengers[i].PassengerFees.Length; ii++)
                    {
                        if (resp.Booking.Passengers[i].PassengerFees[ii].FeeType == FeeType.SSRFee && resp.Booking.Passengers[i].PassengerFees[ii].SSRCode != "INFT")
                        {
                            if (resp.Booking.Passengers[i].PassengerFees[ii].FlightReference != "")
                            {

                                if (SSRRequestCount > 2)
                                {
                                    if ((resp.Booking.Passengers[i].PassengerFees[ii].FlightReference.Substring(16, 6) == response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.DepartureStation + response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.ArrivalStation))
                                    {
                                        if (List1.Count > 0)
                                        {

                                            for (int t = 0; t < List1.Count; t++)
                                            {
                                                if (t < List1Old.Count)
                                                {
                                                    string[] SSRCat = new string[] { List1Old[t].BaggageCode, List1Old[t].SportCode, List1Old[t].MealCode1, List1Old[t].DrinkCode1, List1Old[t].KitCode, List1Old[t].InfantCode };//edited by romy, 20170814, insurance
                                                    int[] SSRIndicator = new int[] { List1[t].IndicatorBaggage, List1[t].IndicatorSport, List1[t].IndicatorMeal, List1[t].IndicatorDrink, List1[t].IndicatorKit, List1[t].IndicatorInfant };//edited by romy, 20170814, insurance
                                                    for (int tt = 0; tt < SSRCat.Length; tt++)
                                                    {
                                                        if (SSRCat[tt].ToString() != "" && Convert.ToInt16(SSRIndicator[tt]) != 0)
                                                        {
                                                            if (SSRCat[tt].ToString() == resp.Booking.Passengers[i].PassengerFees[ii].SSRCode && resp.Booking.Passengers[i].PassengerNumber.ToString() == List1[t].PassengerID)
                                                                dt1.Rows.Add(SSRCat[tt].ToString(), 0, List1[t].PassengerID);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (1 < response.SSRAvailabilityForBookingResponse.SSRSegmentList.Length && (resp.Booking.Passengers[i].PassengerFees[ii].FlightReference.Substring(16, 6) == response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.DepartureStation + response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.ArrivalStation))
                                    {
                                        if (List2.Count > 0)
                                        {

                                            for (int t = 0; t < List2.Count; t++)
                                            {
                                                if (t < List2Old.Count)
                                                {
                                                    string[] SSRCat = new string[] { List2Old[t].BaggageCode, List2Old[t].SportCode, List2Old[t].MealCode1, List2Old[t].DrinkCode1, List2Old[t].KitCode, List2Old[t].InfantCode };//edited by romy, 20170814, insurance
                                                    int[] SSRIndicator = new int[] { List2[t].IndicatorBaggage, List2[t].IndicatorSport, List2[t].IndicatorMeal, List2[t].IndicatorDrink, List2[t].IndicatorKit, List2[t].IndicatorInfant };//edited by romy, 20170814, insurance
                                                    for (int tt = 0; tt < SSRCat.Length; tt++)
                                                    {
                                                        if (SSRCat[tt].ToString() != "" && Convert.ToInt16(SSRIndicator[tt]) != 0)
                                                        {
                                                            if (SSRCat[tt].ToString() == resp.Booking.Passengers[i].PassengerFees[ii].SSRCode && resp.Booking.Passengers[i].PassengerNumber.ToString() == List2[t].PassengerID)
                                                                dt2.Rows.Add(SSRCat[tt].ToString(), 0, List2[t].PassengerID);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (2 < response.SSRAvailabilityForBookingResponse.SSRSegmentList.Length && (resp.Booking.Passengers[i].PassengerFees[ii].FlightReference.Substring(16, 6) == response.SSRAvailabilityForBookingResponse.SSRSegmentList[2].LegKey.DepartureStation + response.SSRAvailabilityForBookingResponse.SSRSegmentList[2].LegKey.ArrivalStation))
                                    {
                                        if (List3.Count > 0)
                                        {

                                            for (int t = 0; t < List3.Count; t++)
                                            {
                                                if (t < List3Old.Count)
                                                {
                                                    string[] SSRCat = new string[] { List3Old[t].BaggageCode, List3Old[t].SportCode, List3Old[t].MealCode1, List3Old[t].DrinkCode1, List3Old[t].KitCode, List3Old[t].InfantCode };//edited by romy, 20170814, insurance
                                                    int[] SSRIndicator = new int[] { List3[t].IndicatorBaggage, List3[t].IndicatorSport, List3[t].IndicatorMeal, List3[t].IndicatorDrink, List3[t].IndicatorKit, List3[t].IndicatorInfant };//edited by romy, 20170814, insurance
                                                    for (int tt = 0; tt < SSRCat.Length; tt++)
                                                    {
                                                        if (SSRCat[tt].ToString() != "" && Convert.ToInt16(SSRIndicator[tt]) != 0)
                                                        {
                                                            if (SSRCat[tt].ToString() == resp.Booking.Passengers[i].PassengerFees[ii].SSRCode && resp.Booking.Passengers[i].PassengerNumber.ToString() == List3[t].PassengerID)
                                                                dt3.Rows.Add(SSRCat[tt].ToString(), 0, List3[t].PassengerID);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (3 < response.SSRAvailabilityForBookingResponse.SSRSegmentList.Length && (resp.Booking.Passengers[i].PassengerFees[ii].FlightReference.Substring(16, 6) == response.SSRAvailabilityForBookingResponse.SSRSegmentList[3].LegKey.DepartureStation + response.SSRAvailabilityForBookingResponse.SSRSegmentList[3].LegKey.ArrivalStation))
                                    {
                                        if (List4.Count > 0)
                                        {

                                            for (int t = 0; t < List4.Count; t++)
                                            {
                                                if (t < List4Old.Count)
                                                {
                                                    string[] SSRCat = new string[] { List4Old[t].BaggageCode, List4Old[t].SportCode, List4Old[t].MealCode1, List4Old[t].DrinkCode1, List4Old[t].KitCode, List4Old[t].InfantCode };//edited by romy, 20170814, insurance
                                                    int[] SSRIndicator = new int[] { List4[t].IndicatorBaggage, List4[t].IndicatorSport, List4[t].IndicatorMeal, List4[t].IndicatorDrink, List4[t].IndicatorKit, List4[t].IndicatorInfant };//edited by romy, 20170814, insurance
                                                    for (int tt = 0; tt < SSRCat.Length; tt++)
                                                    {
                                                        if (SSRCat[tt].ToString() != "" && Convert.ToInt16(SSRIndicator[tt]) != 0)
                                                        {
                                                            if (SSRCat[tt].ToString() == resp.Booking.Passengers[i].PassengerFees[ii].SSRCode && resp.Booking.Passengers[i].PassengerNumber.ToString() == List4[t].PassengerID)
                                                                dt4.Rows.Add(SSRCat[tt].ToString(), 0, List4[t].PassengerID);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if ((resp.Booking.Passengers[i].PassengerFees[ii].FlightReference.Substring(16, 3) == response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.DepartureStation))
                                    {
                                        if (List1.Count > 0)
                                        {

                                            for (int t = 0; t < List1.Count; t++)
                                            {
                                                if (t < List1Old.Count)
                                                {
                                                    string[] SSRCat = new string[] { List1Old[t].BaggageCode, List1Old[t].SportCode, List1Old[t].MealCode1, List1Old[t].DrinkCode1, List1Old[t].KitCode, List1Old[t].InfantCode };//edited by romy, 20170814, insurance
                                                    int[] SSRIndicator = new int[] { List1[t].IndicatorBaggage, List1[t].IndicatorSport, List1[t].IndicatorMeal, List1[t].IndicatorDrink, List1[t].IndicatorKit, List1[t].IndicatorInfant };//edited by romy, 20170814, insurance
                                                    for (int tt = 0; tt < SSRCat.Length; tt++)
                                                    {
                                                        if (SSRCat[tt].ToString() != "" && Convert.ToInt16(SSRIndicator[tt]) != 0)
                                                        {
                                                            if (SSRCat[tt].ToString() == resp.Booking.Passengers[i].PassengerFees[ii].SSRCode && resp.Booking.Passengers[i].PassengerNumber.ToString() == List1[t].PassengerID)
                                                                dt1.Rows.Add(SSRCat[tt].ToString(), 0, List1[t].PassengerID);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (1 < response.SSRAvailabilityForBookingResponse.SSRSegmentList.Length && (resp.Booking.Passengers[i].PassengerFees[ii].FlightReference.Substring(16, 3) == response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.DepartureStation))
                                    {
                                        if (List3.Count > 0)
                                        {

                                            for (int t = 0; t < List3.Count; t++)
                                            {
                                                if (t < List3Old.Count)
                                                {
                                                    string[] SSRCat = new string[] { List3Old[t].BaggageCode, List3Old[t].SportCode, List3Old[t].MealCode1, List3Old[t].DrinkCode1, List3Old[t].KitCode, List3Old[t].InfantCode };//edited by romy, 20170814, insurance
                                                    int[] SSRIndicator = new int[] { List3[t].IndicatorBaggage, List3[t].IndicatorSport, List3[t].IndicatorMeal, List3[t].IndicatorDrink, List3[t].IndicatorKit, List3[t].IndicatorInfant };//edited by romy, 20170814, insurance
                                                    for (int tt = 0; tt < SSRCat.Length; tt++)
                                                    {
                                                        if (SSRCat[tt].ToString() != "" && Convert.ToInt16(SSRIndicator[tt]) != 0)
                                                        {
                                                            if (SSRCat[tt].ToString() == resp.Booking.Passengers[i].PassengerFees[ii].SSRCode && resp.Booking.Passengers[i].PassengerNumber.ToString() == List3[t].PassengerID)
                                                                dt2.Rows.Add(SSRCat[tt].ToString(), 0, List3[t].PassengerID);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                SSRRequestCount = 0;
                if ((dt1 != null && dt1.Rows.Count > 0) && (dt2 != null && dt2.Rows.Count > 0) && (dt3 != null && dt3.Rows.Count > 0) && (dt4 != null && dt4.Rows.Count > 0))
                {
                    SSRRequestCount = 4;
                }
                else if (((dt1 != null && dt1.Rows.Count > 0) && (dt2 != null && dt2.Rows.Count > 0) && (dt3 != null && dt3.Rows.Count > 0) && (dt4 == null || dt4.Rows.Count == 0)) ||
                    ((dt1 != null && dt1.Rows.Count > 0) && (dt2 == null || dt2.Rows.Count == 0) && (dt3 != null && dt3.Rows.Count > 0) && (dt4 != null && dt4.Rows.Count > 0)) ||
                    ((dt1 == null && dt1.Rows.Count == 0) && (dt2 != null || dt2.Rows.Count > 0) && (dt3 != null && dt3.Rows.Count > 0) && (dt4 != null && dt4.Rows.Count > 0)) ||
                    ((dt1 != null && dt1.Rows.Count > 0) && (dt2 != null || dt2.Rows.Count > 0) && (dt3 == null && dt3.Rows.Count == 0) && (dt4 != null && dt4.Rows.Count > 0)))
                {
                    SSRRequestCount = 3;
                }
                else if (((dt1 != null && dt1.Rows.Count > 0) && (dt2 != null && dt2.Rows.Count > 0) && (dt3 == null || dt3.Rows.Count == 0) && (dt4 == null || dt4.Rows.Count == 0)) ||
                    ((dt1 != null && dt1.Rows.Count > 0) && (dt2 == null || dt2.Rows.Count == 0) && (dt3 != null && dt3.Rows.Count > 0) && (dt4 == null || dt4.Rows.Count == 0)) ||
                    ((dt1 == null && dt1.Rows.Count == 0) && (dt2 == null || dt2.Rows.Count == 0) && (dt3 != null && dt3.Rows.Count > 0) && (dt4 != null || dt4.Rows.Count > 0)) ||
                    ((dt1 == null && dt1.Rows.Count == 0) && (dt2 != null || dt2.Rows.Count > 0) && (dt3 == null && dt3.Rows.Count == 0) && (dt4 != null || dt4.Rows.Count > 0)))
                {
                    SSRRequestCount = 2;
                }
                else if (((dt1 != null && dt1.Rows.Count > 0) && (dt2 == null || dt2.Rows.Count == 0) && (dt3 == null || dt3.Rows.Count == 0) && (dt4 == null || dt4.Rows.Count == 0)) || ((dt1 == null || dt1.Rows.Count == 0) && (dt2 != null && dt2.Rows.Count > 0) && (dt3 == null || dt3.Rows.Count == 0) && (dt4 == null || dt4.Rows.Count == 0)) || ((dt1 == null || dt1.Rows.Count == 0) && (dt2 == null || dt2.Rows.Count == 0) && (dt3 != null && dt3.Rows.Count > 0) && (dt4 == null || dt4.Rows.Count == 0)) || ((dt1 == null || dt1.Rows.Count == 0) && (dt2 == null || dt2.Rows.Count == 0) && (dt3 == null || dt3.Rows.Count == 0) && (dt4 != null && dt4.Rows.Count > 0)))
                {
                    SSRRequestCount = 1;
                }
                sellreqd.SegmentSSRRequests = new SegmentSSRRequest[SSRRequestCount];
                if (SSRRequestCount > 0)
                {
                    if (SSRRequestCount == 1)
                    {
                        sellreqd.SegmentSSRRequests[0] = new SegmentSSRRequest();
                        if (dt1.Rows.Count > 0)
                        {
                            sellreqd.SegmentSSRRequests[0].PaxSSRs = new PaxSSR[dt1.Rows.Count];
                            for (int i = 0; i < dt1.Rows.Count; i++)
                            {
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i] = new PaxSSR();
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i].ActionStatusCode = "NN";
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i].SSRCode = dt1.Rows[i]["SSRCode"].ToString();
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i].SSRNumber = Convert.ToInt16(dt1.Rows[i]["SSRNumber"]);
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i].DepartureStation = resp.Booking.Journeys[0].Segments[0].DepartureStation;
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i].ArrivalStation = resp.Booking.Journeys[0].Segments[0].ArrivalStation;
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i].PassengerNumber = Convert.ToInt16(dt1.Rows[i]["PassengerNumber"]);
                            }
                            sellreqd.SegmentSSRRequests[0].DepartureStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.DepartureStation;
                            sellreqd.SegmentSSRRequests[0].ArrivalStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.ArrivalStation;
                            sellreqd.SegmentSSRRequests[0].STD = response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.DepartureDate;
                            sellreqd.SegmentSSRRequests[0].FlightDesignator = new FlightDesignator();
                            sellreqd.SegmentSSRRequests[0].FlightDesignator.CarrierCode = response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.CarrierCode;
                            sellreqd.SegmentSSRRequests[0].FlightDesignator.FlightNumber = response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.FlightNumber;
                        }
                        else
                        {
                            if (dt2.Rows.Count > 0)
                            {
                                sellreqd.SegmentSSRRequests[0].PaxSSRs = new PaxSSR[dt2.Rows.Count];
                                for (int i = 0; i < dt2.Rows.Count; i++)
                                {
                                    sellreqd.SegmentSSRRequests[0].PaxSSRs[i] = new PaxSSR();
                                    sellreqd.SegmentSSRRequests[0].PaxSSRs[i].ActionStatusCode = "NN";
                                    sellreqd.SegmentSSRRequests[0].PaxSSRs[i].SSRCode = dt2.Rows[i]["SSRCode"].ToString();
                                    sellreqd.SegmentSSRRequests[0].PaxSSRs[i].SSRNumber = Convert.ToInt16(dt2.Rows[i]["SSRNumber"]);
                                    sellreqd.SegmentSSRRequests[0].PaxSSRs[i].DepartureStation = resp.Booking.Journeys[1].Segments[0].DepartureStation;
                                    sellreqd.SegmentSSRRequests[0].PaxSSRs[i].ArrivalStation = resp.Booking.Journeys[1].Segments[0].ArrivalStation;
                                    sellreqd.SegmentSSRRequests[0].PaxSSRs[i].PassengerNumber = Convert.ToInt16(dt2.Rows[i]["PassengerNumber"]);
                                }
                                sellreqd.SegmentSSRRequests[0].DepartureStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.DepartureStation;
                                sellreqd.SegmentSSRRequests[0].ArrivalStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.ArrivalStation;
                                sellreqd.SegmentSSRRequests[0].STD = response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.DepartureDate;
                                sellreqd.SegmentSSRRequests[0].FlightDesignator = new FlightDesignator();
                                sellreqd.SegmentSSRRequests[0].FlightDesignator.CarrierCode = response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.CarrierCode;
                                sellreqd.SegmentSSRRequests[0].FlightDesignator.FlightNumber = response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.FlightNumber;
                            }
                        }
                    }
                    else
                    {
                        sellreqd.SegmentSSRRequests[0] = new SegmentSSRRequest();
                        if (dt1.Rows.Count > 0)
                        {
                            sellreqd.SegmentSSRRequests[0].PaxSSRs = new PaxSSR[dt1.Rows.Count];
                            for (int i = 0; i < dt1.Rows.Count; i++)
                            {
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i] = new PaxSSR();
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i].ActionStatusCode = "NN";
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i].SSRCode = dt1.Rows[i]["SSRCode"].ToString();
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i].SSRNumber = Convert.ToInt16(dt1.Rows[i]["SSRNumber"]);
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i].DepartureStation = resp.Booking.Journeys[0].Segments[0].DepartureStation;
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i].ArrivalStation = resp.Booking.Journeys[0].Segments[0].ArrivalStation;
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i].PassengerNumber = Convert.ToInt16(dt1.Rows[i]["PassengerNumber"]);
                            }
                            sellreqd.SegmentSSRRequests[0].DepartureStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.DepartureStation;
                            sellreqd.SegmentSSRRequests[0].ArrivalStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.ArrivalStation;
                            sellreqd.SegmentSSRRequests[0].STD = response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.DepartureDate;
                            sellreqd.SegmentSSRRequests[0].FlightDesignator = new FlightDesignator();
                            sellreqd.SegmentSSRRequests[0].FlightDesignator.CarrierCode = response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.CarrierCode;
                            sellreqd.SegmentSSRRequests[0].FlightDesignator.FlightNumber = response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.FlightNumber;
                        }

                        if (dt2.Rows.Count > 0)
                        {
                            sellreqd.SegmentSSRRequests[1] = new SegmentSSRRequest();
                            sellreqd.SegmentSSRRequests[1].PaxSSRs = new PaxSSR[dt2.Rows.Count];

                            for (int i = 0; i < dt2.Rows.Count; i++)
                            {
                                sellreqd.SegmentSSRRequests[1].PaxSSRs[i] = new PaxSSR();
                                sellreqd.SegmentSSRRequests[1].PaxSSRs[i].ActionStatusCode = "NN";
                                sellreqd.SegmentSSRRequests[1].PaxSSRs[i].SSRCode = dt2.Rows[i]["SSRCode"].ToString();
                                sellreqd.SegmentSSRRequests[1].PaxSSRs[i].SSRNumber = Convert.ToInt16(dt2.Rows[i]["SSRNumber"]);

                                if (resp.Booking.Journeys[0].Segments.Length > 1)
                                {
                                    sellreqd.SegmentSSRRequests[1].PaxSSRs[i].DepartureStation = resp.Booking.Journeys[0].Segments[1].DepartureStation;
                                    sellreqd.SegmentSSRRequests[1].PaxSSRs[i].ArrivalStation = resp.Booking.Journeys[0].Segments[1].ArrivalStation;
                                }
                                else if (resp.Booking.Journeys.Length > 1)
                                {
                                    sellreqd.SegmentSSRRequests[1].PaxSSRs[i].DepartureStation = resp.Booking.Journeys[1].Segments[0].DepartureStation;
                                    sellreqd.SegmentSSRRequests[1].PaxSSRs[i].ArrivalStation = resp.Booking.Journeys[1].Segments[0].ArrivalStation;
                                }
                                sellreqd.SegmentSSRRequests[1].PaxSSRs[i].PassengerNumber = Convert.ToInt16(dt2.Rows[i]["PassengerNumber"]);
                            }

                            sellreqd.SegmentSSRRequests[1].DepartureStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.DepartureStation;
                            sellreqd.SegmentSSRRequests[1].ArrivalStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.ArrivalStation;
                            sellreqd.SegmentSSRRequests[1].STD = response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.DepartureDate;
                            sellreqd.SegmentSSRRequests[1].FlightDesignator = new FlightDesignator();
                            sellreqd.SegmentSSRRequests[1].FlightDesignator.CarrierCode = response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.CarrierCode;
                            sellreqd.SegmentSSRRequests[1].FlightDesignator.FlightNumber = response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.FlightNumber;
                        }

                        if (SSRRequestCount > 2)
                        {
                            if (dt3.Rows.Count > 0)
                            {
                                sellreqd.SegmentSSRRequests[2] = new SegmentSSRRequest();
                                sellreqd.SegmentSSRRequests[2].PaxSSRs = new PaxSSR[dt3.Rows.Count];
                                for (int i = 0; i < dt3.Rows.Count; i++)
                                {
                                    sellreqd.SegmentSSRRequests[2].PaxSSRs[i] = new PaxSSR();
                                    sellreqd.SegmentSSRRequests[2].PaxSSRs[i].ActionStatusCode = "NN";
                                    sellreqd.SegmentSSRRequests[2].PaxSSRs[i].SSRCode = dt3.Rows[i]["SSRCode"].ToString();
                                    sellreqd.SegmentSSRRequests[2].PaxSSRs[i].SSRNumber = Convert.ToInt16(dt3.Rows[i]["SSRNumber"]);
                                    if (resp.Booking.Journeys[1].Segments.Length > 1)
                                    {
                                        sellreqd.SegmentSSRRequests[2].PaxSSRs[i].DepartureStation = resp.Booking.Journeys[1].Segments[0].DepartureStation;
                                        sellreqd.SegmentSSRRequests[2].PaxSSRs[i].ArrivalStation = resp.Booking.Journeys[1].Segments[0].ArrivalStation;
                                    }
                                    else
                                    {
                                        sellreqd.SegmentSSRRequests[2].PaxSSRs[i].DepartureStation = resp.Booking.Journeys[1].Segments[1].DepartureStation;
                                        sellreqd.SegmentSSRRequests[2].PaxSSRs[i].ArrivalStation = resp.Booking.Journeys[1].Segments[1].ArrivalStation;
                                    }
                                    sellreqd.SegmentSSRRequests[2].PaxSSRs[i].PassengerNumber = Convert.ToInt16(dt3.Rows[i]["PassengerNumber"]);
                                }

                                sellreqd.SegmentSSRRequests[2].DepartureStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[2].LegKey.DepartureStation;
                                sellreqd.SegmentSSRRequests[2].ArrivalStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[2].LegKey.ArrivalStation;
                                sellreqd.SegmentSSRRequests[2].STD = response.SSRAvailabilityForBookingResponse.SSRSegmentList[2].LegKey.DepartureDate;
                                sellreqd.SegmentSSRRequests[2].FlightDesignator = new FlightDesignator();
                                sellreqd.SegmentSSRRequests[2].FlightDesignator.CarrierCode = response.SSRAvailabilityForBookingResponse.SSRSegmentList[2].LegKey.CarrierCode;
                                sellreqd.SegmentSSRRequests[2].FlightDesignator.FlightNumber = response.SSRAvailabilityForBookingResponse.SSRSegmentList[2].LegKey.FlightNumber;
                            }

                            if (dt4.Rows.Count > 0)
                            {
                                sellreqd.SegmentSSRRequests[3] = new SegmentSSRRequest();
                                sellreqd.SegmentSSRRequests[3].PaxSSRs = new PaxSSR[dt4.Rows.Count];
                                for (int i = 0; i < dt4.Rows.Count; i++)
                                {
                                    sellreqd.SegmentSSRRequests[3].PaxSSRs[i] = new PaxSSR();
                                    sellreqd.SegmentSSRRequests[3].PaxSSRs[i].ActionStatusCode = "NN";
                                    sellreqd.SegmentSSRRequests[3].PaxSSRs[i].SSRCode = dt4.Rows[i]["SSRCode"].ToString();
                                    sellreqd.SegmentSSRRequests[3].PaxSSRs[i].SSRNumber = Convert.ToInt16(dt4.Rows[i]["SSRNumber"]);
                                    sellreqd.SegmentSSRRequests[3].PaxSSRs[i].DepartureStation = resp.Booking.Journeys[1].Segments[1].DepartureStation;
                                    sellreqd.SegmentSSRRequests[3].PaxSSRs[i].ArrivalStation = resp.Booking.Journeys[1].Segments[1].ArrivalStation;
                                    sellreqd.SegmentSSRRequests[3].PaxSSRs[i].PassengerNumber = Convert.ToInt16(dt4.Rows[i]["PassengerNumber"]);
                                }

                                sellreqd.SegmentSSRRequests[3].DepartureStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[3].LegKey.DepartureStation;
                                sellreqd.SegmentSSRRequests[3].ArrivalStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[3].LegKey.ArrivalStation;
                                sellreqd.SegmentSSRRequests[3].STD = response.SSRAvailabilityForBookingResponse.SSRSegmentList[3].LegKey.DepartureDate;
                                sellreqd.SegmentSSRRequests[3].FlightDesignator = new FlightDesignator();
                                sellreqd.SegmentSSRRequests[3].FlightDesignator.CarrierCode = response.SSRAvailabilityForBookingResponse.SSRSegmentList[3].LegKey.CarrierCode;
                                sellreqd.SegmentSSRRequests[3].FlightDesignator.FlightNumber = response.SSRAvailabilityForBookingResponse.SSRSegmentList[3].LegKey.FlightNumber;
                            }
                        }
                    }

                    cancelSSRs.CancelRequestData.CancelSSR.SSRRequest = sellreqd;
                    CancelResponse cancelResponse = bookingAPI.Cancel(cancelSSRs);
                }

                SellRequest sellSsrRequest = new SellRequest();
                SellRequestData sellreq = new SellRequestData();
                sellreq.SellBy = SellBy.SSR;
                sellreq.SellSSR = new SellSSR();
                sellreq.SellSSR.SSRRequest = new SSRRequest();
                sellreq.SellSSR.SSRRequest.CancelFirstSSR = true;
                SSRRequestCount = 0;
                //SSRRequestCount = response.SSRAvailabilityForBookingResponse.SSRSegmentList.Length;
                //int SSRRequestCount = 0;
                List<Bk_transaddon> List1Indicator = List1.Where(item => item.IndicatorBaggage != 0 || item.IndicatorMeal != 0 || item.IndicatorDrink != 0 || item.IndicatorSport != 0 || item.IndicatorKit != 0 || item.IndicatorInfant != 0).ToList();//edited by romy, 20170814, insurance
                List<Bk_transaddon> List2Indicator = List2.Where(item => item.IndicatorBaggage != 0 || item.IndicatorMeal != 0 || item.IndicatorDrink != 0 || item.IndicatorSport != 0 || item.IndicatorKit != 0 || item.IndicatorInfant != 0).ToList();//edited by romy, 20170814, insurance
                List<Bk_transaddon> List3Indicator = List3.Where(item => item.IndicatorBaggage != 0 || item.IndicatorMeal != 0 || item.IndicatorDrink != 0 || item.IndicatorSport != 0 || item.IndicatorKit != 0 || item.IndicatorInfant != 0).ToList();//edited by romy, 20170814, insurance
                List<Bk_transaddon> List4Indicator = List4.Where(item => item.IndicatorBaggage != 0 || item.IndicatorMeal != 0 || item.IndicatorDrink != 0 || item.IndicatorSport != 0 || item.IndicatorKit != 0 || item.IndicatorInfant != 0).ToList();//edited by romy, 20170814, insurance
                if ((List1Indicator.Count > 0) && (List2Indicator.Count > 0) && (List3Indicator.Count > 0) && (List4Indicator.Count > 0))
                {
                    SSRRequestCount = 4;
                }
                else if (((List1Indicator.Count > 0) && (List2Indicator.Count > 0) && (List3Indicator.Count > 0) && (List4Indicator.Count == 0)) ||
                    ((List1Indicator.Count > 0) && (List2Indicator.Count == 0) && (List3Indicator.Count > 0) && (List4Indicator.Count > 0)) ||
                    ((List1Indicator.Count == 0) && (List2Indicator.Count > 0) && (List3Indicator.Count > 0) && (List4Indicator.Count > 0)) ||
                   ((List1Indicator.Count > 0) && (List2Indicator.Count > 0) && (List3Indicator.Count == 0) && (List4Indicator.Count > 0)))
                {
                    SSRRequestCount = 3;
                }
                else if (((List1Indicator.Count > 0) && (List2Indicator.Count > 0) && (List3Indicator.Count == 0) && (List4Indicator.Count == 0)) || ((List1Indicator.Count > 0) && (List2Indicator.Count == 0) && (List3Indicator.Count > 0) && (List4Indicator.Count == 0)) || ((List1Indicator.Count == 0) && (List2Indicator.Count == 0) && (List3Indicator.Count > 0) && (List4Indicator.Count > 0)) || ((List1Indicator.Count == 0) && (List2Indicator.Count > 0) && (List3Indicator.Count == 0) && (List4Indicator.Count > 0)))
                {
                    SSRRequestCount = 2;
                }
                else if (((List1Indicator.Count > 0) && (List2Indicator.Count == 0) && (List3Indicator.Count == 0) && (List4Indicator.Count == 0)) || ((List1Indicator.Count == 0) && (List2Indicator.Count > 0) && (List3Indicator.Count == 0) && (List4Indicator.Count == 0)) || ((List1Indicator.Count == 0) && (List2Indicator.Count == 0) && (List3Indicator.Count > 0) && (List4Indicator.Count == 0)) || ((List1Indicator.Count == 0) && (List2Indicator.Count == 0) && (List3Indicator.Count == 0) && (List4Indicator.Count > 0)))
                {
                    SSRRequestCount = 1;
                }

                if (SSRRequestCount > 0)
                {
                    sellreq.SellSSR.SSRRequest.SegmentSSRRequests = new SegmentSSRRequest[SSRRequestCount];
                    int index = 0, loopSSR = 0;
                    for (count = 0; count < 4; count++)
                    {
                        if (count == 0) ListSSR = List1Indicator;
                        else if (count == 1) ListSSR = List2Indicator;
                        else if (count == 2) ListSSR = List3Indicator;
                        else ListSSR = List4Indicator;
                        if (ListSSR != null && ListSSR.Count > 0)
                        {

                            ArrayList SSRCode = new ArrayList();
                            ArrayList origin = new ArrayList();
                            ArrayList destination = new ArrayList();
                            ArrayList PassNo = new ArrayList();
                            loopSSR = 0;
                            for (int i = 0; i < ListSSR.Count; i++)
                            {
                                string[] SSRCat = new string[] { ListSSR[i].BaggageCode, ListSSR[i].SportCode, ListSSR[i].MealCode1, ListSSR[i].DrinkCode1, ListSSR[i].KitCode, ListSSR[i].InfantCode };//edited by romy, 20170814, insurance
                                int[] SSRIndicator = new int[] { ListSSR[i].IndicatorBaggage, ListSSR[i].IndicatorSport, ListSSR[i].IndicatorMeal, ListSSR[i].IndicatorDrink, ListSSR[i].IndicatorKit, ListSSR[i].IndicatorInfant };//edited by romy, 20170814, insurance
                                for (int ii = 0; ii < SSRCat.Length; ii++)
                                {
                                    if (SSRCat[ii].ToString() != "" && Convert.ToInt16(SSRIndicator[ii]) != 0)
                                    {
                                        loopSSR += 1;
                                        SSRCode.Add(SSRCat[ii]);
                                        origin.Add(ListSSR[i].Origin);
                                        destination.Add(ListSSR[i].Destination);
                                        PassNo.Add(ListSSR[i].PassengerID);
                                    }
                                }
                            }

                            sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index] = new SegmentSSRRequest();
                            sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs = new PaxSSR[loopSSR];
                            for (int ind = 0; ind < response.SSRAvailabilityForBookingResponse.SSRSegmentList.Length; ind++)
                            {
                                if (response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.DepartureStation == origin[0].ToString() && response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.ArrivalStation == destination[0].ToString())
                                {
                                    for (int loop = 0; loop < sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs.Length; loop++)
                                    {
                                        sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop] = new PaxSSR();
                                        sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].ActionStatusCode = "SS";
                                        sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].State = ABS.Navitaire.BookingManager.MessageState.Modified;
                                        sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].SSRCode = SSRCode[loop].ToString();
                                        sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].SSRNumber = 0;
                                        sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].DepartureStation = origin[loop].ToString();
                                        sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].ArrivalStation = destination[loop].ToString();
                                        sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].PassengerNumber = (short)Convert.ToInt16(PassNo[loop]);
                                    }
                                    sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].DepartureStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.DepartureStation;
                                    sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].ArrivalStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.ArrivalStation;
                                    sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].STD = response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.DepartureDate;
                                    sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].FlightDesignator = new FlightDesignator();
                                    sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].FlightDesignator.CarrierCode = response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.CarrierCode;
                                    sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].FlightDesignator.FlightNumber = response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.FlightNumber;
                                    index += 1;
                                    break;
                                }
                            }
                        }
                    }

                    sellSsrRequest.Signature = SellSessionID;
                    sellSsrRequest.ContractVersion = 3413;
                    sellSsrRequest.SellRequestData = sellreq;
                    SellResponse sellSsrResponse = null;
                    sellSsrResponse = bookingAPI.Sell(sellSsrRequest);
                    //string xml = GetXMLString(sellSsrRequest);


                    string msg = "";
                    if (resp.Booking.BookingSum.BalanceDue > 0 || (sellSsrResponse.BookingUpdateResponseData.Success != null && sellSsrResponse.BookingUpdateResponseData.Success.PNRAmount.BalanceDue == 0))
                    {
                        //List<PassengerData> lstPassInfantData = new List<PassengerData>();
                        BookingCommitChangeInfant(PNR, SellSessionID, ref msg, HttpContext.Current.Session["Currency"].ToString(), true, true);
                        //apiBooking.BookingCommitChange(PNR, SellSessionID, ref msg, HttpContext.Current.Session["Currency"].ToString(), true, true);
                        HttpContext.Current.Session["Commit"] = true;
                    }
                }
                //BookingCommitChange(PNR, SellSessionID, ref msg, HttpContext.Current.Session["Currency"].ToString(), true, true);
                return SellSessionID;
            }
            catch (Exception ex)
            {
                log.Error(this, ex, "SellSSR " + ex.Message);
                return "";
            }

        }

        //add by romy, 20170905, Insure
        public bool AddInsureFees(string SellSessionID, string cur, int passengerNo, string feecode, string PNR)
        {
            //Create an instance of BookingManagerClient
            IBookingManager bookingAPI = new BookingManagerClient();
            SellRequest feeRequest = new SellRequest();
            ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");
            BookingTransactionDetail objBK_TRANSDTL_Infos;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Infos = new List<BookingTransactionDetail>();
            try
            {
                //string SellSessionID = "";
                if (HttpContext.Current.Session["SellSessionID"] == null)
                {
                    SellSessionID = apiBooking.AgentLogon();
                    GetBookingResponse response = GetBookingByPNR(PNR, SellSessionID);
                    objBK_TRANSDTL_Infos = new BookingTransactionDetail();
                    objBK_TRANSDTL_Infos.RecordLocator = PNR;
                    objBK_TRANSDTL_Infos.Signature = SellSessionID;
                    objListBK_TRANSDTL_Infos.Add(objBK_TRANSDTL_Infos);
                    HttpContext.Current.Session["objListBK_TRANSDTL_Infos"] = objListBK_TRANSDTL_Infos;
                    HttpContext.Current.Session["SellSessionID"] = SellSessionID;
                }
                else
                {
                    int count = 0;
                    objListBK_TRANSDTL_Infos = (List<BookingTransactionDetail>)HttpContext.Current.Session["objListBK_TRANSDTL_Infos"];
                    foreach (BookingTransactionDetail a in objListBK_TRANSDTL_Infos)
                    {
                        if (PNR == a.RecordLocator)
                        {
                            SellSessionID = a.Signature;
                            break;
                        }
                        else
                        {
                            count += 1;

                        }
                    }

                    if (count == objListBK_TRANSDTL_Infos.Count)
                    {
                        SellSessionID = apiBooking.AgentLogon();
                        GetBookingResponse response = GetBookingByPNR(PNR, SellSessionID);
                        objBK_TRANSDTL_Infos = new BookingTransactionDetail();
                        objBK_TRANSDTL_Infos.RecordLocator = PNR;
                        objBK_TRANSDTL_Infos.Signature = SellSessionID;
                        objListBK_TRANSDTL_Infos.Add(objBK_TRANSDTL_Infos);
                        HttpContext.Current.Session["objListBK_TRANSDTL_Infos"] = objListBK_TRANSDTL_Infos;
                    }
                }

                feeRequest.SellRequestData = new SellRequestData();
                feeRequest.SellRequestData.SellBy = SellBy.Fee;
                feeRequest.SellRequestData.SellFee = new SellFee();
                feeRequest.SellRequestData.SellFee.SellFeeRequestData = new SellFeeRequestData();
                feeRequest.SellRequestData.SellFee.SellFeeRequestData.PassengerNumber = passengerNo;
                feeRequest.SellRequestData.SellFee.SellFeeRequestData.FeeCode = feecode;
                feeRequest.SellRequestData.SellFee.SellFeeRequestData.CollectedCurrencyCode = cur;
                feeRequest.SellRequestData.SellFee.SellFeeRequestData.Note = "API added Insure Fee";
                feeRequest.Signature = SellSessionID;

                feeRequest.ContractVersion = 3413;
                //string xml = GetXMLString(feeRequest);
                SellResponse resp = bookingAPI.Sell(feeRequest);
                //string respxml = GetXMLString(resp);

                if (resp.BookingUpdateResponseData.Warning != null)
                {
                    log.Warning(this, resp.BookingUpdateResponseData.Warning.WarningText);
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
        }
        //add by romy, 20170905, Insure
        public string OverrideFee(string SellSessionID, string PassengerID, decimal Amount, string PNR, short FeeNumber)
        {
            IBookingManager bookingAPI = new BookingManagerClient();
            HttpContext.Current.Session["Commit"] = false;
            OverrideFeeRequest request = new OverrideFeeRequest();
            FeeRequest requestData = new FeeRequest();
            ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");

            requestData.PassengerNumber = Convert.ToInt16(PassengerID);
            requestData.FeeNumber = FeeNumber;
            requestData.NetAmount = Amount;

            request.FeeRequest = requestData;
            request.ContractVersion = 3413;
            request.Signature = SellSessionID;
            //string xmls = GetXMLString(request);
            OverrideFeeResponse response = bookingAPI.OverrideFee(request);
            //string xmlr = GetXMLString(response);
            if (response != null)
            {
                //                HttpContext.Current.Session["Commit"] = true;
                return SellSessionID;
            }
            return "";
        }
        //add by romy, for insure
        public DataTable GetInsure(string itemcategory, Boolean Order = true)
        {
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            if (StartConnection() == true)
            {
                StartSQLControl();
                strSQL = "SELECT CodeDesc FROM CODEMASTER where CodeType = 'INS' AND Code = '" + itemcategory + "'";
                dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                if (dt.Rows.Count > 0)
                {
                    return dt;
                }
                else
                {
                    return null;
                }
            }
            else
            {
                throw new Exception("No Connection");
            }
            EndSQLControl();
            EndConnection();
        }
        //add by romy, for insure
        public DataTable GetInsureCode(string itemcategory)
        {
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            if (StartConnection() == true)
            {
                StartSQLControl();
                strSQL = "SELECT ItemCode,ItemDesc FROM ITEM where ItmCatgCode = '" + itemcategory + "' AND Flag = 1 AND Active = 1 ORDER BY ItemCode";
                dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                if (dt.Rows.Count > 0)
                {
                    return dt;
                }
                else
                {
                    return null;
                }
            }
            else
            {
                throw new Exception("No Connection");
            }
            EndSQLControl();
            EndConnection();
        }
        public String GetCountryCode(string StationCode, string PhysicalApplicationPath)
        {
            GetRouteListResponse AllCityPairResponse = new GetRouteListResponse();
            string CountryCodes = "";
            try
            {
                AllCityPairResponse = objGeneral.LookUpAllCity(PhysicalApplicationPath);
                //DataTable dt = new DataTable();
                //dt.Columns.Add("DepartCountryCode");
                if (AllCityPairResponse != null)
                {
                    CountryCodes = AllCityPairResponse.RouteListExtend.Where(a => a.DepartureStation == StationCode).Select(a => a.CountryCode).FirstOrDefault().ToString();
                    //dt.Rows.Add(AllCityPairResponse.RouteListExtend.Where(a => a.DepartureStation == StationCode).Select(a => a.CountryCode).FirstOrDefault());
                }

                if (CountryCodes != "")
                {
                    return CountryCodes;
                }

                return null;
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                log.Error(this, ex);
                return null;
            }
        }

        public bool BookingCommitChangeInfant(string RecordLocator, string sign, ref string errMessage, string CurrencyCode = "", Boolean WaivePenaltyFee = true, Boolean WaiveSpoilageFee = false, string Username = "")
        {
            BookingCommitRequest request = new BookingCommitRequest();
            BookingCommitRequestData requestData = new BookingCommitRequestData();
            List<PassengerData> lstPassInfantData = new List<PassengerData>();
            IBookingManager bookingAPI = new BookingManagerClient();
            Navitaire.APIBooking ApiBook = new Navitaire.APIBooking("");
            try
            {
                Navitaire.BookingManager.Booking book = GetBookingFromState(sign);
                //Navitaire.BookingManager.Booking oldbook = GetBookingFromState(sign);

                if (HttpContext.Current.Session["lstPassInfantData"] != null)
                {
                    lstPassInfantData = (List<PassengerData>)HttpContext.Current.Session["lstPassInfantData"];
                }

                int ii = 0;
                if (lstPassInfantData.Count > 0)
                {
                    requestData.Passengers = new Passenger[lstPassInfantData.Count];
                    foreach (PassengerData PassData in lstPassInfantData)
                    {
                        ;
                        // create travel document objects
                        // add infant information to passenger
                        requestData.Passengers[ii] = new Passenger();
                        requestData.Passengers[ii].PassengerNumber = Convert.ToInt16(PassData.PassengerID);
                        requestData.Passengers[ii].State = MessageState.Modified; ;
                        requestData.Passengers[ii].Names = new BookingName[1];
                        requestData.Passengers[ii].Names[0] = new BookingName();
                        requestData.Passengers[ii].Names[0].State = MessageState.Modified;
                        requestData.Passengers[ii].Names[0].FirstName = book.Passengers[Convert.ToInt16(PassData.PassengerID)].Names[0].FirstName;
                        requestData.Passengers[ii].Names[0].LastName = book.Passengers[Convert.ToInt16(PassData.PassengerID)].Names[0].LastName;
                        requestData.Passengers[ii].Names[0].Title = book.Passengers[Convert.ToInt16(PassData.PassengerID)].Names[0].Title;

                        requestData.Passengers[ii].PassengerInfo = new PassengerInfo();
                        requestData.Passengers[ii].PassengerInfo.State = MessageState.Modified;
                        requestData.Passengers[ii].PassengerInfo.Gender = book.Passengers[Convert.ToInt16(PassData.PassengerID)].PassengerInfo.Gender;

                        requestData.Passengers[ii].PassengerInfo.Nationality = book.Passengers[Convert.ToInt16(PassData.PassengerID)].PassengerInfo.Nationality;
                        requestData.Passengers[ii].PassengerInfo.ResidentCountry = book.Passengers[Convert.ToInt16(PassData.PassengerID)].PassengerInfo.ResidentCountry;
                        requestData.Passengers[ii].PassengerTypeInfos = new PassengerTypeInfo[1];
                        requestData.Passengers[ii].PassengerTypeInfos[0] = new PassengerTypeInfo();
                        requestData.Passengers[ii].PassengerTypeInfos[0].State = MessageState.Modified;
                        requestData.Passengers[ii].PassengerTypeInfos[0].DOB = book.Passengers[Convert.ToInt16(PassData.PassengerID)].PassengerTypeInfos[0].DOB;

                        requestData.Passengers[ii].PassengerTypeInfos[0].PaxType = book.Passengers[Convert.ToInt16(PassData.PassengerID)].PassengerTypeInfos[0].PaxType;


                        requestData.Passengers[ii].Infant = new PassengerInfant();
                        requestData.Passengers[ii].Infant.State = MessageState.New;
                        requestData.Passengers[ii].Infant.Names = new BookingName[1];
                        requestData.Passengers[ii].Infant.Names[0] = new BookingName();
                        requestData.Passengers[ii].Infant.Names[0].FirstName = PassData.FirstName;
                        //requestData.Passengers[0].Infant.Names[0].MiddleName = "T";
                        requestData.Passengers[ii].Infant.Names[0].LastName = PassData.LastName;
                        if (PassData.Gender.ToUpper() == "MALE")
                            requestData.Passengers[ii].Infant.Gender = Gender.Male;
                        else
                            requestData.Passengers[ii].Infant.Gender = Gender.Female;
                        requestData.Passengers[ii].Infant.DOB = PassData.DOB;
                        requestData.Passengers[ii].Infant.Nationality = PassData.Nationality;

                        if ((PassData.PassportNo != null && PassData.PassportNo != "") && book.Passengers[Convert.ToInt16(PassData.PassengerID)].PassengerTravelDocuments.Length > 0)
                        {
                            requestData.Passengers[ii].PassengerTravelDocuments = new PassengerTravelDocument[2];
                            requestData.Passengers[ii].PassengerTravelDocuments[0] = new PassengerTravelDocument();
                            requestData.Passengers[ii].PassengerTravelDocuments[0].State = MessageState.Modified;
                            requestData.Passengers[ii].PassengerTravelDocuments[0].Names = new BookingName[1];
                            requestData.Passengers[ii].PassengerTravelDocuments[0].Names[0] = new BookingName();
                            requestData.Passengers[ii].PassengerTravelDocuments[0].Names[0].State = MessageState.Modified; ;
                            requestData.Passengers[ii].PassengerTravelDocuments[0].Names[0].FirstName = book.Passengers[Convert.ToInt16(PassData.PassengerID)].PassengerTravelDocuments[0].Names[0].FirstName;
                            //requestData.Passengers[0].PassengerTravelDocuments[0].Names[0].MiddleName = "T";
                            requestData.Passengers[ii].PassengerTravelDocuments[0].Names[0].LastName = book.Passengers[Convert.ToInt16(PassData.PassengerID)].PassengerTravelDocuments[0].Names[0].LastName;
                            requestData.Passengers[ii].PassengerTravelDocuments[0].DocNumber = book.Passengers[Convert.ToInt16(PassData.PassengerID)].PassengerTravelDocuments[0].DocNumber;
                            requestData.Passengers[ii].PassengerTravelDocuments[0].ExpirationDate = book.Passengers[Convert.ToInt16(PassData.PassengerID)].PassengerTravelDocuments[0].ExpirationDate;
                            requestData.Passengers[ii].PassengerTravelDocuments[0].DocTypeCode = "P";
                            requestData.Passengers[ii].PassengerTravelDocuments[0].Gender = book.Passengers[Convert.ToInt16(PassData.PassengerID)].PassengerTravelDocuments[0].Gender;
                            requestData.Passengers[ii].PassengerTravelDocuments[0].IssuedByCode = book.Passengers[Convert.ToInt16(PassData.PassengerID)].PassengerTravelDocuments[0].IssuedByCode;

                            requestData.Passengers[ii].PassengerTravelDocuments[1] = new PassengerTravelDocument();
                            // populate travel document data and add to passenger
                            requestData.Passengers[ii].PassengerTravelDocuments[1].State = MessageState.New;
                            requestData.Passengers[ii].PassengerTravelDocuments[1].Names = new BookingName[1];
                            requestData.Passengers[ii].PassengerTravelDocuments[1].Names[0] = new BookingName();
                            requestData.Passengers[ii].PassengerTravelDocuments[1].Names[0].FirstName = PassData.FirstName;
                            //requestData.Passengers[0].PassengerTravelDocuments[0].Names[0].MiddleName = "T";
                            requestData.Passengers[ii].PassengerTravelDocuments[1].Names[0].LastName = PassData.LastName;
                            requestData.Passengers[ii].PassengerTravelDocuments[1].DocNumber = PassData.PassportNo;
                            requestData.Passengers[ii].PassengerTravelDocuments[1].DocSuffix = "I";
                            if (PassData.Gender.ToUpper() == "MALE")
                                requestData.Passengers[ii].PassengerTravelDocuments[1].Gender = Gender.Male;
                            else
                                requestData.Passengers[ii].PassengerTravelDocuments[1].Gender = Gender.Female;
                            requestData.Passengers[ii].PassengerTravelDocuments[1].DOB = PassData.DOB;
                            requestData.Passengers[ii].PassengerTravelDocuments[1].DocTypeCode = "P";
                            //requestData.Passengers[i].PassengerTravelDocuments[0].IssuedDate = DateTime.Parse("2020-09-01T00:00:00");
                            requestData.Passengers[ii].PassengerTravelDocuments[1].ExpirationDate = PassData.ExpiryDate;
                            requestData.Passengers[ii].PassengerTravelDocuments[1].IssuedByCode = PassData.IssuingCountry;
                        }
                        if ((PassData.PassportNo != null && PassData.PassportNo != "") && book.Passengers[Convert.ToInt16(PassData.PassengerID)].PassengerTravelDocuments.Length == 0)
                        {
                            requestData.Passengers[ii].PassengerTravelDocuments = new PassengerTravelDocument[2];
                            requestData.Passengers[ii].PassengerTravelDocuments[0] = new PassengerTravelDocument();
                            requestData.Passengers[ii].PassengerTravelDocuments[0].State = MessageState.New;
                            requestData.Passengers[ii].PassengerTravelDocuments[0].Names = new BookingName[1];
                            requestData.Passengers[ii].PassengerTravelDocuments[0].Names[0] = new BookingName();
                            requestData.Passengers[ii].PassengerTravelDocuments[0].Names[0].State = MessageState.New; ;
                            requestData.Passengers[ii].PassengerTravelDocuments[0].Names[0].FirstName = "TBA";
                            //requestData.Passengers[0].PassengerTravelDocuments[0].Names[0].MiddleName = "T";
                            requestData.Passengers[ii].PassengerTravelDocuments[0].Names[0].LastName = "TBA";
                            requestData.Passengers[ii].PassengerTravelDocuments[0].DocNumber = "TBA";
                            requestData.Passengers[ii].PassengerTravelDocuments[0].ExpirationDate = DateTime.Parse("2020-01-01");
                            requestData.Passengers[ii].PassengerTravelDocuments[0].DocTypeCode = "P";
                            requestData.Passengers[ii].PassengerTravelDocuments[0].Gender = Gender.Male;
                            requestData.Passengers[ii].PassengerTravelDocuments[0].IssuedByCode = PassData.IssuingCountry;

                            requestData.Passengers[ii].PassengerTravelDocuments[1] = new PassengerTravelDocument();
                            // populate travel document data and add to passenger
                            requestData.Passengers[ii].PassengerTravelDocuments[1].State = MessageState.New;
                            requestData.Passengers[ii].PassengerTravelDocuments[1].Names = new BookingName[1];
                            requestData.Passengers[ii].PassengerTravelDocuments[1].Names[0] = new BookingName();
                            requestData.Passengers[ii].PassengerTravelDocuments[1].Names[0].FirstName = PassData.FirstName;
                            //requestData.Passengers[0].PassengerTravelDocuments[0].Names[0].MiddleName = "T";
                            requestData.Passengers[ii].PassengerTravelDocuments[1].Names[0].LastName = PassData.LastName;
                            requestData.Passengers[ii].PassengerTravelDocuments[1].DocNumber = PassData.PassportNo;
                            requestData.Passengers[ii].PassengerTravelDocuments[1].DocSuffix = "I";
                            if (PassData.Gender.ToUpper() == "MALE")
                                requestData.Passengers[ii].PassengerTravelDocuments[1].Gender = Gender.Male;
                            else
                                requestData.Passengers[ii].PassengerTravelDocuments[1].Gender = Gender.Female;
                            requestData.Passengers[ii].PassengerTravelDocuments[1].DOB = PassData.DOB;
                            requestData.Passengers[ii].PassengerTravelDocuments[1].DocTypeCode = "P";
                            //requestData.Passengers[i].PassengerTravelDocuments[0].IssuedDate = DateTime.Parse("2020-09-01T00:00:00");
                            requestData.Passengers[ii].PassengerTravelDocuments[1].ExpirationDate = PassData.ExpiryDate;
                            requestData.Passengers[ii].PassengerTravelDocuments[1].IssuedByCode = PassData.IssuingCountry;
                        }
                        else if ((PassData.PassportNo == null || PassData.PassportNo == "") && book.Passengers[Convert.ToInt16(PassData.PassengerID)].PassengerTravelDocuments.Length > 0)
                        {
                            requestData.Passengers[ii].PassengerTravelDocuments = new PassengerTravelDocument[1];
                            requestData.Passengers[ii].PassengerTravelDocuments[0] = new PassengerTravelDocument();
                            requestData.Passengers[ii].PassengerTravelDocuments[0].State = MessageState.Modified;
                            requestData.Passengers[ii].PassengerTravelDocuments[0].Names = new BookingName[1];
                            requestData.Passengers[ii].PassengerTravelDocuments[0].Names[0] = new BookingName();
                            requestData.Passengers[ii].PassengerTravelDocuments[0].Names[0].State = MessageState.Modified; ;
                            requestData.Passengers[ii].PassengerTravelDocuments[0].Names[0].FirstName = book.Passengers[Convert.ToInt16(PassData.PassengerID)].PassengerTravelDocuments[0].Names[0].FirstName;
                            //requestData.Passengers[0].PassengerTravelDocuments[0].Names[0].MiddleName = "T";
                            requestData.Passengers[ii].PassengerTravelDocuments[0].Names[0].LastName = book.Passengers[Convert.ToInt16(PassData.PassengerID)].PassengerTravelDocuments[0].Names[0].LastName;
                            requestData.Passengers[ii].PassengerTravelDocuments[0].DocNumber = book.Passengers[Convert.ToInt16(PassData.PassengerID)].PassengerTravelDocuments[0].DocNumber;
                            requestData.Passengers[ii].PassengerTravelDocuments[0].ExpirationDate = book.Passengers[Convert.ToInt16(PassData.PassengerID)].PassengerTravelDocuments[0].ExpirationDate;
                            requestData.Passengers[ii].PassengerTravelDocuments[0].DocTypeCode = "P";
                            requestData.Passengers[ii].PassengerTravelDocuments[0].Gender = book.Passengers[Convert.ToInt16(PassData.PassengerID)].PassengerTravelDocuments[0].Gender;
                            requestData.Passengers[ii].PassengerTravelDocuments[0].IssuedByCode = book.Passengers[Convert.ToInt16(PassData.PassengerID)].PassengerTravelDocuments[0].IssuedByCode;

                        }

                        ii += 1;
                    }

                }

                requestData.RecordLocator = book.RecordLocator;
                requestData.CurrencyCode = book.CurrencyCode;
                requestData.RestrictionOverride = false;
                requestData.ChangeHoldDateTime = false;
                requestData.WaiveNameChangeFee = false;
                requestData.WaivePenaltyFee = WaivePenaltyFee;
                requestData.WaiveSpoilageFee = WaiveSpoilageFee;
                requestData.DistributeToContacts = false;
                request.BookingCommitRequestData = requestData;
                request.Signature = sign;
                request.ContractVersion = 3413;

                BookingCommitResponse response = null;
                response = bookingAPI.BookingCommit(request);

                //CommitRequest commitRequest = new CommitRequest();
                //commitRequest.ContractVersion = 3413;
                //commitRequest.BookingRequest = new CommitRequestData();
                //commitRequest.BookingRequest.Booking = book;
                //commitRequest.BookingRequest.Booking.ReceivedBy = new ReceivedByInfo();
                //commitRequest.BookingRequest.Booking.ReceivedBy.ReceivedBy = "AirAsia";
                //commitRequest.Signature = sign;
                //commitRequest.BookingRequest.DistributeToContacts = true;

                //CommitResponse br = bookingAPI.Commit(commitRequest);

                //string msg = "";
                //if (ApiBook.AddPaymentToBooking(br.BookingUpdateResponseData.Success.PNRAmount.BalanceDue, book.CurrencyCode, sign, ref msg))
                //{
                //    ApiBook.BookingCommitChange(RecordLocator, sign, ref msg, book.CurrencyCode, true, true);
                //}


                //Navitaire.APIBooking ApiBook = new Navitaire.APIBooking("");
                //Navitaire.BookingManager.GetBookingResponse Response = new Navitaire.BookingManager.GetBookingResponse();
                //Response = ApiBook.GetBookingResponseByPNR(RecordLocator);
                //string resp = GetXMLString(Response);

                if (response.BookingUpdateResponseData.Error != null)
                {
                    errMessage = response.BookingUpdateResponseData.Error.ErrorText;
                    log.Error(this, RecordLocator + " " + errMessage);
                    return false;
                }
                else
                {
                    errMessage = "";
                    return true;
                }
            }
            catch (Exception ex)
            {
                errMessage = ex.Message.ToString();
                log.Error(this, ex);
                return false;
            }
        }

        public string SellSSROld(string PNR, GetSSRAvailabilityForBookingResponse response, List<Bk_transaddon> List1, List<Bk_transaddon> List2, List<Bk_transaddon> List3, List<Bk_transaddon> List4)
        {
            short count = 0;
            List<Bk_transaddon> ListSSR = new List<Bk_transaddon>();
            try
            {
                IBookingManager bookingAPI = new BookingManagerClient();
                ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");
                HttpContext.Current.Session["Commit"] = false;
                string SellSessionID = apiBooking.AgentLogon();
                GetBookingResponse resp = GetBookingByPNR(PNR, SellSessionID);

                CancelRequest cancelSSRs = new CancelRequest();
                cancelSSRs.Signature = SellSessionID;
                cancelSSRs.ContractVersion = 3413;
                cancelSSRs.CancelRequestData = new CancelRequestData();
                cancelSSRs.CancelRequestData.CancelBy = CancelBy.SSR;
                cancelSSRs.CancelRequestData.CancelSSR = new CancelSSR();
                SSRRequest sellreqd = new SSRRequest();
                sellreqd.CurrencyCode = HttpContext.Current.Session["Currency"].ToString();
                sellreqd.CancelFirstSSR = true;
                int SSRRequestCount = response.SSRAvailabilityForBookingResponse.SSRSegmentList.Length;


                DataTable dt1 = new DataTable();
                dt1.Columns.Add("SSRCode");
                dt1.Columns.Add("SSRNumber");
                dt1.Columns.Add("PassengerNumber");

                DataTable dt2 = new DataTable();
                dt2.Columns.Add("SSRCode");
                dt2.Columns.Add("SSRNumber");
                dt2.Columns.Add("PassengerNumber");

                DataTable dt3 = new DataTable();
                dt3.Columns.Add("SSRCode");
                dt3.Columns.Add("SSRNumber");
                dt3.Columns.Add("PassengerNumber");

                DataTable dt4 = new DataTable();
                dt4.Columns.Add("SSRCode");
                dt4.Columns.Add("SSRNumber");
                dt4.Columns.Add("PassengerNumber");


                for (int i = 0; i < resp.Booking.Passengers.Length; i++)
                {
                    for (int ii = 0; ii < resp.Booking.Passengers[i].PassengerFees.Length; ii++)
                    {
                        if (resp.Booking.Passengers[i].PassengerFees[ii].FeeType == FeeType.SSRFee && resp.Booking.Passengers[i].PassengerFees[ii].SSRCode != "INFT")
                        {
                            if (resp.Booking.Passengers[i].PassengerFees[ii].FlightReference != "")
                            {

                                if (SSRRequestCount > 2)
                                {
                                    if ((resp.Booking.Passengers[i].PassengerFees[ii].FlightReference.Substring(16, 6) == response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.DepartureStation + response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.ArrivalStation))
                                    {
                                        dt1.Rows.Add(resp.Booking.Passengers[i].PassengerFees[ii].SSRCode, resp.Booking.Passengers[i].PassengerFees[ii].SSRNumber, resp.Booking.Passengers[i].PassengerNumber);
                                    }
                                    else if (1 < response.SSRAvailabilityForBookingResponse.SSRSegmentList.Length && (resp.Booking.Passengers[i].PassengerFees[ii].FlightReference.Substring(16, 6) == response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.DepartureStation + response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.ArrivalStation))
                                    {
                                        dt2.Rows.Add(resp.Booking.Passengers[i].PassengerFees[ii].SSRCode, resp.Booking.Passengers[i].PassengerFees[ii].SSRNumber, resp.Booking.Passengers[i].PassengerNumber);
                                    }
                                    else if (2 < response.SSRAvailabilityForBookingResponse.SSRSegmentList.Length && (resp.Booking.Passengers[i].PassengerFees[ii].FlightReference.Substring(16, 6) == response.SSRAvailabilityForBookingResponse.SSRSegmentList[2].LegKey.DepartureStation + response.SSRAvailabilityForBookingResponse.SSRSegmentList[2].LegKey.ArrivalStation))
                                    {
                                        dt3.Rows.Add(resp.Booking.Passengers[i].PassengerFees[ii].SSRCode, resp.Booking.Passengers[i].PassengerFees[ii].SSRNumber, resp.Booking.Passengers[i].PassengerNumber);
                                    }
                                    else if (3 < response.SSRAvailabilityForBookingResponse.SSRSegmentList.Length && (resp.Booking.Passengers[i].PassengerFees[ii].FlightReference.Substring(16, 6) == response.SSRAvailabilityForBookingResponse.SSRSegmentList[3].LegKey.DepartureStation + response.SSRAvailabilityForBookingResponse.SSRSegmentList[3].LegKey.ArrivalStation))
                                    {
                                        dt4.Rows.Add(resp.Booking.Passengers[i].PassengerFees[ii].SSRCode, resp.Booking.Passengers[i].PassengerFees[ii].SSRNumber, resp.Booking.Passengers[i].PassengerNumber);
                                    }
                                }
                                else
                                {
                                    if ((resp.Booking.Passengers[i].PassengerFees[ii].FlightReference.Substring(16, 3) == response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.DepartureStation))
                                    {
                                        dt1.Rows.Add(resp.Booking.Passengers[i].PassengerFees[ii].SSRCode, resp.Booking.Passengers[i].PassengerFees[ii].SSRNumber, resp.Booking.Passengers[i].PassengerNumber);
                                    }
                                    else if (1 < response.SSRAvailabilityForBookingResponse.SSRSegmentList.Length && (resp.Booking.Passengers[i].PassengerFees[ii].FlightReference.Substring(16, 3) == response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.DepartureStation))
                                    {
                                        dt2.Rows.Add(resp.Booking.Passengers[i].PassengerFees[ii].SSRCode, resp.Booking.Passengers[i].PassengerFees[ii].SSRNumber, resp.Booking.Passengers[i].PassengerNumber);
                                    }
                                }
                            }
                        }
                    }
                }

                SSRRequestCount = 0;
                if ((dt1 != null && dt1.Rows.Count > 0) && (dt2 != null && dt2.Rows.Count > 0) && (dt3 != null && dt3.Rows.Count > 0) && (dt4 != null && dt4.Rows.Count > 0))
                {
                    SSRRequestCount = 4;
                }
                else if (((dt1 != null && dt1.Rows.Count > 0) && (dt2 != null && dt2.Rows.Count > 0) && (dt3 != null && dt3.Rows.Count > 0) && (dt4 == null || dt4.Rows.Count == 0)) || ((dt1 != null && dt1.Rows.Count > 0) && (dt2 == null || dt2.Rows.Count == 0) && (dt3 != null && dt3.Rows.Count > 0) && (dt4 != null && dt4.Rows.Count > 0)))
                {
                    SSRRequestCount = 3;
                }
                else if (((dt1 != null && dt1.Rows.Count > 0) && (dt2 != null && dt2.Rows.Count > 0) && (dt3 == null || dt3.Rows.Count == 0) && (dt4 == null || dt4.Rows.Count == 0)) || ((dt1 != null && dt1.Rows.Count > 0) && (dt2 == null || dt2.Rows.Count == 0) && (dt3 != null && dt3.Rows.Count > 0) && (dt4 == null || dt4.Rows.Count == 0)))
                {
                    SSRRequestCount = 2;
                }
                else if (((dt1 != null && dt1.Rows.Count > 0) && (dt2 == null || dt2.Rows.Count == 0) && (dt3 == null || dt3.Rows.Count == 0) && (dt4 == null || dt4.Rows.Count == 0)) || ((dt1 == null || dt1.Rows.Count == 0) && (dt2 != null && dt2.Rows.Count > 0) && (dt3 == null || dt3.Rows.Count == 0) && (dt4 == null || dt4.Rows.Count == 0)) || ((dt1 == null || dt1.Rows.Count == 0) && (dt2 == null || dt2.Rows.Count == 0) && (dt3 != null && dt3.Rows.Count > 0) && (dt4 == null || dt4.Rows.Count == 0)) || ((dt1 == null || dt1.Rows.Count == 0) && (dt2 == null || dt2.Rows.Count == 0) && (dt3 == null || dt3.Rows.Count == 0) && (dt4 != null && dt4.Rows.Count > 0)))
                {
                    SSRRequestCount = 1;
                }
                sellreqd.SegmentSSRRequests = new SegmentSSRRequest[SSRRequestCount];

                if (SSRRequestCount == 1)
                {
                    sellreqd.SegmentSSRRequests[0] = new SegmentSSRRequest();
                    if (dt1.Rows.Count > 0)
                    {
                        sellreqd.SegmentSSRRequests[0].PaxSSRs = new PaxSSR[dt1.Rows.Count];
                        for (int i = 0; i < dt1.Rows.Count; i++)
                        {
                            sellreqd.SegmentSSRRequests[0].PaxSSRs[i] = new PaxSSR();
                            sellreqd.SegmentSSRRequests[0].PaxSSRs[i].ActionStatusCode = "NN";
                            sellreqd.SegmentSSRRequests[0].PaxSSRs[i].SSRCode = dt1.Rows[i]["SSRCode"].ToString();
                            sellreqd.SegmentSSRRequests[0].PaxSSRs[i].SSRNumber = Convert.ToInt16(dt1.Rows[i]["SSRNumber"]);
                            sellreqd.SegmentSSRRequests[0].PaxSSRs[i].DepartureStation = resp.Booking.Journeys[0].Segments[0].DepartureStation;
                            sellreqd.SegmentSSRRequests[0].PaxSSRs[i].ArrivalStation = resp.Booking.Journeys[0].Segments[0].ArrivalStation;
                            sellreqd.SegmentSSRRequests[0].PaxSSRs[i].PassengerNumber = Convert.ToInt16(dt1.Rows[i]["PassengerNumber"]);
                        }
                        sellreqd.SegmentSSRRequests[0].DepartureStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.DepartureStation;
                        sellreqd.SegmentSSRRequests[0].ArrivalStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.ArrivalStation;
                        sellreqd.SegmentSSRRequests[0].STD = response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.DepartureDate;
                        sellreqd.SegmentSSRRequests[0].FlightDesignator = new FlightDesignator();
                        sellreqd.SegmentSSRRequests[0].FlightDesignator.CarrierCode = response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.CarrierCode;
                        sellreqd.SegmentSSRRequests[0].FlightDesignator.FlightNumber = response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.FlightNumber;
                    }
                    else
                    {
                        if (dt2.Rows.Count > 0)
                        {
                            sellreqd.SegmentSSRRequests[0].PaxSSRs = new PaxSSR[dt2.Rows.Count];
                            for (int i = 0; i < dt2.Rows.Count; i++)
                            {
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i] = new PaxSSR();
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i].ActionStatusCode = "NN";
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i].SSRCode = dt2.Rows[i]["SSRCode"].ToString();
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i].SSRNumber = Convert.ToInt16(dt2.Rows[i]["SSRNumber"]);
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i].DepartureStation = resp.Booking.Journeys[1].Segments[0].DepartureStation;
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i].ArrivalStation = resp.Booking.Journeys[1].Segments[0].ArrivalStation;
                                sellreqd.SegmentSSRRequests[0].PaxSSRs[i].PassengerNumber = Convert.ToInt16(dt2.Rows[i]["PassengerNumber"]);
                            }
                            sellreqd.SegmentSSRRequests[0].DepartureStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.DepartureStation;
                            sellreqd.SegmentSSRRequests[0].ArrivalStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.ArrivalStation;
                            sellreqd.SegmentSSRRequests[0].STD = response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.DepartureDate;
                            sellreqd.SegmentSSRRequests[0].FlightDesignator = new FlightDesignator();
                            sellreqd.SegmentSSRRequests[0].FlightDesignator.CarrierCode = response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.CarrierCode;
                            sellreqd.SegmentSSRRequests[0].FlightDesignator.FlightNumber = response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.FlightNumber;
                        }
                    }
                }
                else
                {
                    sellreqd.SegmentSSRRequests[0] = new SegmentSSRRequest();
                    if (dt1.Rows.Count > 0)
                    {
                        sellreqd.SegmentSSRRequests[0].PaxSSRs = new PaxSSR[dt1.Rows.Count];
                        for (int i = 0; i < dt1.Rows.Count; i++)
                        {
                            sellreqd.SegmentSSRRequests[0].PaxSSRs[i] = new PaxSSR();
                            sellreqd.SegmentSSRRequests[0].PaxSSRs[i].ActionStatusCode = "NN";
                            sellreqd.SegmentSSRRequests[0].PaxSSRs[i].SSRCode = dt1.Rows[i]["SSRCode"].ToString();
                            sellreqd.SegmentSSRRequests[0].PaxSSRs[i].SSRNumber = Convert.ToInt16(dt1.Rows[i]["SSRNumber"]);
                            sellreqd.SegmentSSRRequests[0].PaxSSRs[i].DepartureStation = resp.Booking.Journeys[0].Segments[0].DepartureStation;
                            sellreqd.SegmentSSRRequests[0].PaxSSRs[i].ArrivalStation = resp.Booking.Journeys[0].Segments[0].ArrivalStation;
                            sellreqd.SegmentSSRRequests[0].PaxSSRs[i].PassengerNumber = Convert.ToInt16(dt1.Rows[i]["PassengerNumber"]);
                        }
                        sellreqd.SegmentSSRRequests[0].DepartureStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.DepartureStation;
                        sellreqd.SegmentSSRRequests[0].ArrivalStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.ArrivalStation;
                        sellreqd.SegmentSSRRequests[0].STD = response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.DepartureDate;
                        sellreqd.SegmentSSRRequests[0].FlightDesignator = new FlightDesignator();
                        sellreqd.SegmentSSRRequests[0].FlightDesignator.CarrierCode = response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.CarrierCode;
                        sellreqd.SegmentSSRRequests[0].FlightDesignator.FlightNumber = response.SSRAvailabilityForBookingResponse.SSRSegmentList[0].LegKey.FlightNumber;
                    }

                    if (dt2.Rows.Count > 0)
                    {
                        sellreqd.SegmentSSRRequests[1] = new SegmentSSRRequest();
                        sellreqd.SegmentSSRRequests[1].PaxSSRs = new PaxSSR[dt2.Rows.Count];

                        for (int i = 0; i < dt2.Rows.Count; i++)
                        {
                            sellreqd.SegmentSSRRequests[1].PaxSSRs[i] = new PaxSSR();
                            sellreqd.SegmentSSRRequests[1].PaxSSRs[i].ActionStatusCode = "NN";
                            sellreqd.SegmentSSRRequests[1].PaxSSRs[i].SSRCode = dt2.Rows[i]["SSRCode"].ToString();
                            sellreqd.SegmentSSRRequests[1].PaxSSRs[i].SSRNumber = Convert.ToInt16(dt2.Rows[i]["SSRNumber"]);

                            if (resp.Booking.Journeys[0].Segments.Length > 1)
                            {
                                sellreqd.SegmentSSRRequests[1].PaxSSRs[i].DepartureStation = resp.Booking.Journeys[0].Segments[1].DepartureStation;
                                sellreqd.SegmentSSRRequests[1].PaxSSRs[i].ArrivalStation = resp.Booking.Journeys[0].Segments[1].ArrivalStation;
                            }
                            else if (resp.Booking.Journeys.Length > 1)
                            {
                                sellreqd.SegmentSSRRequests[1].PaxSSRs[i].DepartureStation = resp.Booking.Journeys[1].Segments[0].DepartureStation;
                                sellreqd.SegmentSSRRequests[1].PaxSSRs[i].ArrivalStation = resp.Booking.Journeys[1].Segments[0].ArrivalStation;
                            }
                            sellreqd.SegmentSSRRequests[1].PaxSSRs[i].PassengerNumber = Convert.ToInt16(dt2.Rows[i]["PassengerNumber"]);
                        }

                        sellreqd.SegmentSSRRequests[1].DepartureStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.DepartureStation;
                        sellreqd.SegmentSSRRequests[1].ArrivalStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.ArrivalStation;
                        sellreqd.SegmentSSRRequests[1].STD = response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.DepartureDate;
                        sellreqd.SegmentSSRRequests[1].FlightDesignator = new FlightDesignator();
                        sellreqd.SegmentSSRRequests[1].FlightDesignator.CarrierCode = response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.CarrierCode;
                        sellreqd.SegmentSSRRequests[1].FlightDesignator.FlightNumber = response.SSRAvailabilityForBookingResponse.SSRSegmentList[1].LegKey.FlightNumber;
                    }

                    if (SSRRequestCount > 2)
                    {
                        if (dt3.Rows.Count > 0)
                        {
                            sellreqd.SegmentSSRRequests[2] = new SegmentSSRRequest();
                            sellreqd.SegmentSSRRequests[2].PaxSSRs = new PaxSSR[dt3.Rows.Count];
                            for (int i = 0; i < dt3.Rows.Count; i++)
                            {
                                sellreqd.SegmentSSRRequests[2].PaxSSRs[i] = new PaxSSR();
                                sellreqd.SegmentSSRRequests[2].PaxSSRs[i].ActionStatusCode = "NN";
                                sellreqd.SegmentSSRRequests[2].PaxSSRs[i].SSRCode = dt3.Rows[i]["SSRCode"].ToString();
                                sellreqd.SegmentSSRRequests[2].PaxSSRs[i].SSRNumber = Convert.ToInt16(dt3.Rows[i]["SSRNumber"]);
                                if (resp.Booking.Journeys[1].Segments.Length > 1)
                                {
                                    sellreqd.SegmentSSRRequests[2].PaxSSRs[i].DepartureStation = resp.Booking.Journeys[1].Segments[0].DepartureStation;
                                    sellreqd.SegmentSSRRequests[2].PaxSSRs[i].ArrivalStation = resp.Booking.Journeys[1].Segments[0].ArrivalStation;
                                }
                                else
                                {
                                    sellreqd.SegmentSSRRequests[2].PaxSSRs[i].DepartureStation = resp.Booking.Journeys[1].Segments[1].DepartureStation;
                                    sellreqd.SegmentSSRRequests[2].PaxSSRs[i].ArrivalStation = resp.Booking.Journeys[1].Segments[1].ArrivalStation;
                                }
                                sellreqd.SegmentSSRRequests[2].PaxSSRs[i].PassengerNumber = Convert.ToInt16(dt3.Rows[i]["PassengerNumber"]);
                            }

                            sellreqd.SegmentSSRRequests[2].DepartureStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[2].LegKey.DepartureStation;
                            sellreqd.SegmentSSRRequests[2].ArrivalStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[2].LegKey.ArrivalStation;
                            sellreqd.SegmentSSRRequests[2].STD = response.SSRAvailabilityForBookingResponse.SSRSegmentList[2].LegKey.DepartureDate;
                            sellreqd.SegmentSSRRequests[2].FlightDesignator = new FlightDesignator();
                            sellreqd.SegmentSSRRequests[2].FlightDesignator.CarrierCode = response.SSRAvailabilityForBookingResponse.SSRSegmentList[2].LegKey.CarrierCode;
                            sellreqd.SegmentSSRRequests[2].FlightDesignator.FlightNumber = response.SSRAvailabilityForBookingResponse.SSRSegmentList[2].LegKey.FlightNumber;
                        }

                        if (dt4.Rows.Count > 0)
                        {
                            sellreqd.SegmentSSRRequests[3] = new SegmentSSRRequest();
                            sellreqd.SegmentSSRRequests[3].PaxSSRs = new PaxSSR[dt4.Rows.Count];
                            for (int i = 0; i < dt4.Rows.Count; i++)
                            {
                                sellreqd.SegmentSSRRequests[3].PaxSSRs[i] = new PaxSSR();
                                sellreqd.SegmentSSRRequests[3].PaxSSRs[i].ActionStatusCode = "NN";
                                sellreqd.SegmentSSRRequests[3].PaxSSRs[i].SSRCode = dt4.Rows[i]["SSRCode"].ToString();
                                sellreqd.SegmentSSRRequests[3].PaxSSRs[i].SSRNumber = Convert.ToInt16(dt4.Rows[i]["SSRNumber"]);
                                sellreqd.SegmentSSRRequests[3].PaxSSRs[i].DepartureStation = resp.Booking.Journeys[1].Segments[1].DepartureStation;
                                sellreqd.SegmentSSRRequests[3].PaxSSRs[i].ArrivalStation = resp.Booking.Journeys[1].Segments[1].ArrivalStation;
                                sellreqd.SegmentSSRRequests[3].PaxSSRs[i].PassengerNumber = Convert.ToInt16(dt4.Rows[i]["PassengerNumber"]);
                            }

                            sellreqd.SegmentSSRRequests[3].DepartureStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[3].LegKey.DepartureStation;
                            sellreqd.SegmentSSRRequests[3].ArrivalStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[3].LegKey.ArrivalStation;
                            sellreqd.SegmentSSRRequests[3].STD = response.SSRAvailabilityForBookingResponse.SSRSegmentList[3].LegKey.DepartureDate;
                            sellreqd.SegmentSSRRequests[3].FlightDesignator = new FlightDesignator();
                            sellreqd.SegmentSSRRequests[3].FlightDesignator.CarrierCode = response.SSRAvailabilityForBookingResponse.SSRSegmentList[3].LegKey.CarrierCode;
                            sellreqd.SegmentSSRRequests[3].FlightDesignator.FlightNumber = response.SSRAvailabilityForBookingResponse.SSRSegmentList[3].LegKey.FlightNumber;
                        }
                    }
                }

                cancelSSRs.CancelRequestData.CancelSSR.SSRRequest = sellreqd;
                CancelResponse cancelResponse = bookingAPI.Cancel(cancelSSRs);


                SellRequest sellSsrRequest = new SellRequest();
                SellRequestData sellreq = new SellRequestData();
                sellreq.SellBy = SellBy.SSR;
                sellreq.SellSSR = new SellSSR();
                sellreq.SellSSR.SSRRequest = new SSRRequest();
                sellreq.SellSSR.SSRRequest.CancelFirstSSR = true;
                //SSRRequestCount = response.SSRAvailabilityForBookingResponse.SSRSegmentList.Length;
                //int SSRRequestCount = 0;
                if ((List1 != null && List1.Count > 0) && (List2 != null && List2.Count > 0) && (List3 != null && List3.Count > 0) && (List4 != null && List4.Count > 0))
                {
                    SSRRequestCount = 4;
                }
                else if (((List1 != null && List1.Count > 0) && (List2 != null && List2.Count > 0) && (List3 != null && List3.Count > 0) && (List4 == null || List4.Count == 0)) || ((List1 != null && List1.Count > 0) && (List2 == null || List2.Count == 0) && (List3 != null && List3.Count > 0) && (List4 != null && List4.Count > 0)))
                {
                    SSRRequestCount = 3;
                }
                else if (((List1 != null && List1.Count > 0) && (List2 != null && List2.Count > 0) && (List3 == null || List3.Count == 0) && (List4 == null || List4.Count == 0)) || ((List1 != null && List1.Count > 0) && (List2 == null || List2.Count == 0) && (List3 != null && List3.Count > 0) && (List4 == null || List4.Count == 0)))
                {
                    SSRRequestCount = 2;
                }
                else if (((List1 != null && List1.Count > 0) && (List2 == null || List2.Count == 0) && (List3 == null || List3.Count == 0) && (List4 == null || List4.Count == 0)) || ((List1 == null || List1.Count == 0) && (List2 != null && List2.Count > 0) && (List3 == null || List3.Count == 0) && (List4 == null || List4.Count == 0)) || ((List1 == null || List1.Count == 0) && (List2 == null || List2.Count == 0) && (List3 != null && List3.Count > 0) && (List4 == null || List4.Count == 0)) || ((List1 == null || List1.Count == 0) && (List2 == null || List2.Count == 0) && (List3 == null || List3.Count == 0) && (List4 != null && List4.Count > 0)))
                {
                    SSRRequestCount = 1;
                }
                sellreq.SellSSR.SSRRequest.SegmentSSRRequests = new SegmentSSRRequest[SSRRequestCount];
                int index = 0, loopSSR = 0;
                for (count = 0; count < 4; count++)
                {
                    if (count == 0) ListSSR = List1;
                    else if (count == 1) ListSSR = List2;
                    else if (count == 2) ListSSR = List3;
                    else ListSSR = List4;
                    if (ListSSR != null && ListSSR.Count > 0)
                    {
                        sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index] = new SegmentSSRRequest();
                        ArrayList SSRCode = new ArrayList();
                        ArrayList origin = new ArrayList();
                        ArrayList destination = new ArrayList();
                        ArrayList PassNo = new ArrayList();
                        loopSSR = 0;
                        for (int i = 0; i < ListSSR.Count; i++)
                        {
                            string[] SSRCat = new string[] { ListSSR[i].BaggageCode, ListSSR[i].SportCode, ListSSR[i].MealCode1, ListSSR[i].DrinkCode1, ListSSR[i].KitCode };
                            for (int ii = 0; ii < SSRCat.Length; ii++)
                            {
                                if (SSRCat[ii].ToString() != "")
                                {
                                    loopSSR += 1;
                                    SSRCode.Add(SSRCat[ii]);
                                    origin.Add(ListSSR[i].Origin);
                                    destination.Add(ListSSR[i].Destination);
                                    PassNo.Add(ListSSR[i].PassengerID);
                                }
                            }
                        }

                        sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs = new PaxSSR[loopSSR];
                        for (int ind = 0; ind < response.SSRAvailabilityForBookingResponse.SSRSegmentList.Length; ind++)
                        {
                            if (response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.DepartureStation == origin[0].ToString() && response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.ArrivalStation == destination[0].ToString())
                            {
                                for (int loop = 0; loop < sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs.Length; loop++)
                                {
                                    sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop] = new PaxSSR();
                                    sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].ActionStatusCode = "SS";
                                    sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].State = ABS.Navitaire.BookingManager.MessageState.Modified;
                                    sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].SSRCode = SSRCode[loop].ToString();
                                    sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].SSRNumber = 0;
                                    sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].DepartureStation = origin[loop].ToString();
                                    sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].ArrivalStation = destination[loop].ToString();
                                    sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].PaxSSRs[loop].PassengerNumber = (short)Convert.ToInt16(PassNo[loop]);
                                }
                                sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].DepartureStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.DepartureStation;
                                sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].ArrivalStation = response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.ArrivalStation;
                                sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].STD = response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.DepartureDate;
                                sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].FlightDesignator = new FlightDesignator();
                                sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].FlightDesignator.CarrierCode = response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.CarrierCode;
                                sellreq.SellSSR.SSRRequest.SegmentSSRRequests[index].FlightDesignator.FlightNumber = response.SSRAvailabilityForBookingResponse.SSRSegmentList[ind].LegKey.FlightNumber;
                                index += 1;
                                break;
                            }
                        }
                    }
                }

                sellSsrRequest.Signature = SellSessionID;
                sellSsrRequest.ContractVersion = 3413;
                sellSsrRequest.SellRequestData = sellreq;
                SellResponse sellSsrResponse = null;
                sellSsrResponse = bookingAPI.Sell(sellSsrRequest);
                //string xml = GetXMLString(sellSsrRequest);

                string msg = "";
                if (resp.Booking.BookingSum.BalanceDue > 0 || (sellSsrResponse.BookingUpdateResponseData.Success != null && sellSsrResponse.BookingUpdateResponseData.Success.PNRAmount.BalanceDue == 0))
                {
                    apiBooking.BookingCommitChange(PNR, SellSessionID, ref msg, HttpContext.Current.Session["Currency"].ToString(), true, true);
                    HttpContext.Current.Session["Commit"] = true;
                }

                //BookingCommitChange(PNR, SellSessionID, ref msg, HttpContext.Current.Session["Currency"].ToString(), true, true);
                return SellSessionID;
            }
            catch (Exception ex)
            {
                log.Error(this, ex, "SellSSR " + ex.Message);
                return "";
            }

        }

        public Boolean GetItineraryByTem(TemFlight temFlight, string LoginType, string LoginName, string LoginPWD, string LoginDomain, string SellSessionID, string OrgID, bool moveJourney = false)//amended by diana 20140211, add parameter for moveJourney true/false
        {
            try
            {
                IBookingManager bookingAPI = new BookingManagerClient();
                ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");

                DataTable dataClass = new DataTable();
                DataTable dtTempClass = new DataTable();

                DataTable dataClassTrans = dtClassTrans();
                DataTable dataBreakdownFee = dtBreakdownFee();

                int quantityDepart = 0, quantityReturn = 0, qtychild = 0, qtyadult = 0;
                decimal farePriceDepart = 0, farePriceReturn = 0;
                string signatureDepart = "", signatureReturn = "";
                decimal fullPriceDepart = 0, fullPriceReturn = 0;

                //added by anton 12 oct
                decimal bdchAPT = 0, bdFare = 0, bdAPT = 0, bdPaxFee = 0, bdFuel = 0, bdOth = 0, bdDisc = 0, bdPromoDisc = 0, bdSvc = 0, bdSSR = 0, bdBaggage = 0, bdMeal = 0, bdComfort = 0, bdSport = 0, bdSeat = 0, bdInfant = 0, bdFull = 0, bdVAT = 0; // for breakdownfee
                int totalPax = 0, totalPaxADT = 0, totalPaxCHD = 0; //amended by diana 20131103 - add pax for adt and chd

                dtTempClass = GetTemClassList(temFlight.TemFlightFlightNumber);
                IEnumerable<TemClassofService> temClasslist = ConvertToIEnum(dtTempClass);

                //added by ketee,
                List<PassengerData> lstPassenger = new List<PassengerData>();
                PassengerData rowPassenger;
                int passengerno = 0;

                //added by ketee, add sell service fees
                string cur = string.Empty;
                bool bError = false;

                int prevPNR = 0;

                foreach (TemClassofService temClass in temClasslist)
                {
                    prevPNR += 1;
                    if (moveJourney == false) //not for moving Journey
                    {
                        if (LoginType == "SkyAgent")
                        {
                            SellSessionID = apiBooking.AgentLogon("SkyAgent", LoginDomain, LoginName, LoginPWD);
                        }
                        else
                        {
                            SellSessionID = apiBooking.AgentLogon();
                        }
                    }
                    temClass.TemClassSellSignature = SellSessionID;
                    UpdateTemClass(temClass);

                    //Added by Tyas
                    PriceItineraryRequest priceItinRequest = new PriceItineraryRequest();
                    priceItinRequest.Signature = SellSessionID;
                    priceItinRequest.ContractVersion = 3413;
                    priceItinRequest.ItineraryPriceRequest = new ItineraryPriceRequest();
                    priceItinRequest.ItineraryPriceRequest.PriceItineraryBy = PriceItineraryBy.JourneyWithLegs;
                    priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest = new PriceJourneyRequestData();
                    priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.PaxCount = Convert.ToInt16(temClass.TemClassPersonNumber);
                    priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.CurrencyCode = temFlight.TemFlightCurrencyCode.Trim();
                    priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers = new Passenger[Convert.ToInt16(temClass.TemClassPersonNumber)];
                    //check child
                    string adultType = "ADT";

                    //check child and adult
                    int childpax = temClass.TemClassChildNumber;
                    qtychild = childpax;
                    int adultpax = temClass.TemClassAdultNumber;
                    qtyadult = adultpax;

                    //added by diana 20131103 - add numofpax
                    totalPaxADT += qtyadult;
                    totalPaxCHD += qtychild;

                    //added by ketee, performance checking, 20170916
                    for (int i = 0; i < temClass.TemClassPersonNumber; i++)
                    {
                        if (adultpax > 0)
                        {
                            adultType = "ADT";
                        }
                        else
                        {
                            adultType = "CHD";
                        }

                        priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i] = new Passenger();
                        priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i].PassengerNumber = Convert.ToInt16(i);
                        priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i].State = MessageState.New;
                        priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i].PassengerID = passengerno;
                        priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i].PassengerTypeInfos = new PassengerTypeInfo[1];
                        priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i].PassengerTypeInfos[0] = new PassengerTypeInfo();

                        if (adultType == "ADT")
                            priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse("1994-1-1");
                        else if (adultType == "CHD")
                        {
                            DateTime dtTime = DateTime.Now.AddYears(-5);
                            priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse(dtTime.Year + "-1-1");
                        }

                        priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i].PassengerTypeInfos[0].PaxType = adultType;
                        priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i].PassengerTypeInfos[0].State = MessageState.New;
                        priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i].PseudoPassenger = false;

                        //added by ketee
                        rowPassenger = new PassengerData();
                        rowPassenger.PassengerID = i.ToString();
                        rowPassenger.FirstName = "TBA";
                        rowPassenger.LastName = "TBA";
                        rowPassenger.PassportNo = "TBA";
                        rowPassenger.DOB = DateTime.Parse("1900-01-01");
                        rowPassenger.SyncCreate = DateTime.Now;
                        rowPassenger.LastSyncBy = "System";
                        if (adultType == "CHD")
                        {
                            rowPassenger.Title = "Chd";
                        }

                        //ongoing, added by diana, 20161225
                        if (temFlight.TemFlightCarrierCode == "D7" || temFlight.TemFlightCarrierCode == "XJ" || temFlight.TemFlightCarrierCode == "ST")
                        {
                            rowPassenger.MaxChange = 1;
                            rowPassenger.MaxPax1 = qtyadult + qtychild;
                            rowPassenger.MaxPax2 = 0;
                        }
                        else
                        {
                            rowPassenger.MaxChange = 1;
                            rowPassenger.MaxPax1 = (int)(0.3 * (qtyadult + qtychild));
                            rowPassenger.MaxPax2 = 0;
                        }

                        rowPassenger.RecordLocator = prevPNR.ToString();
                        lstPassenger.Add(rowPassenger);

                        passengerno++;
                        adultpax--;
                    }


                    priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.PriceJourneys = new PriceJourney[1];
                    priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.PriceJourneys[0] = new PriceJourney();
                    if (temFlight.TemFlightTransit != "")
                    { priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.PriceJourneys[0].Segments = new PriceSegment[2]; }
                    else { priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.PriceJourneys[0].Segments = new PriceSegment[1]; }
                    PriceSegment srSegment = new PriceSegment();
                    srSegment.State = MessageState.New;
                    srSegment.DepartureStation = temFlight.TemFlightDeparture.Trim();

                    if (temFlight.TemFlightTransit != "")
                    {
                        srSegment.ArrivalStation = temFlight.TemFlightTransit.Trim();
                    }
                    else
                    {
                        srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                    }

                    srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd);
                    srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta);
                    srSegment.FlightDesignator = new FlightDesignator();
                    srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber.Trim().PadLeft(4, ' ');
                    srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
                    srSegment.Fare = new SellFare();
                    srSegment.Fare.State = MessageState.New;
                    srSegment.Fare.ClassOfService = temClass.TemClassClass.Trim();
                    srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode.Trim();

                    srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey.Split('~')[4].ToString();
                    srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey.Split('~')[3].ToString();

                    srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey.Split('~')[6]);
                    srSegment.Fare.FareClassOfService = temClass.TemClassClass.Trim();
                    srSegment.Fare.IsAllotmentMarketFare = false;

                    switch (temClass.TempFareApplicationType.ToString().ToLower())
                    {
                        case "route":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                            break;
                        case "sector":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                            break;
                        case "governing":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                            break;
                        default:
                            srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                            //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                            break;
                    }
                    priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.PriceJourneys[0].Segments[0] = srSegment;

                    if (temFlight.TemFlightTransit != "")
                    {
                        srSegment = new PriceSegment();
                        srSegment.State = MessageState.New;
                        srSegment.DepartureStation = temFlight.TemFlightTransit.Trim();
                        srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                        srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd2);
                        srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta2);
                        srSegment.FlightDesignator = new FlightDesignator();

                        srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber2.Trim();
                        srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();

                        srSegment.Fare = new SellFare();
                        srSegment.Fare.State = MessageState.New;
                        srSegment.Fare.ClassOfService = temClass.TemClassClass2.Trim();
                        srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();
                        srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey2.Split('~')[4].ToString();
                        srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey2.Split('~')[3].ToString();

                        srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey2.Split('~')[6]);
                        srSegment.Fare.FareClassOfService = temClass.TemClassClass2.Trim();
                        srSegment.Fare.IsAllotmentMarketFare = false;

                        switch (temClass.TempFareApplicationType2.ToString().ToLower())
                        {
                            case "route":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                break;
                            case "sector":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                                break;
                            case "governing":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                                break;
                            default:
                                srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                                break;
                        }
                        priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.PriceJourneys[0].Segments[1] = srSegment;

                    }

                    //fill data for new dataClass
                    quantityDepart = temClass.TemClassPersonNumber;
                    farePriceDepart = Convert.ToDecimal(temClass.TemClassClassPrice);
                    fullPriceDepart = Convert.ToDecimal(temClass.TemClassFullPrice);
                    signatureDepart = SellSessionID;


                    PriceItineraryResponse piResponse = null;
                    piResponse = bookingAPI.GetItineraryPrice(priceItinRequest);


                    //fill data for new dataClass
                    quantityDepart = temClass.TemClassPersonNumber;

                    totalPax += quantityDepart;

                    farePriceDepart = Convert.ToDecimal(temClass.TemClassClassPrice);
                    fullPriceDepart = Convert.ToDecimal(temClass.TemClassFullPrice);
                    signatureDepart = SellSessionID;


                    //added by diana 20131103 - get currency rate for one way flight
                    Navitaire.UtilitiesManager.GetExternalRatesListResponseData RateResponse = apiBooking.GetExternalRateList(SellSessionID);
                    string curr = piResponse.Booking.CurrencyCode;
                    //string req = GetXMLString(RateResponse);
                    decimal currRate = 1;
                    if (curr != "MYR")
                    {
                        for (int i = 0; i < RateResponse.ExternalRateList.Length; i++)
                        {
                            if (RateResponse.ExternalRateList[i].QuotedCurrency == curr && RateResponse.ExternalRateList[i].CollectedCurrency == "MYR")
                            {
                                currRate = RateResponse.ExternalRateList[i].ExchangeRate;
                            }
                        }
                    }

                    int segCount = piResponse.Booking.Journeys[0].Segments.Length;

                    //renew temClass
                    ClassPrice classPrice = new ClassPrice();

                    for (int iDepart = 0; iDepart < segCount; iDepart++)
                    {
                        //added by diana 20131031 - add condition if paxfare length is more than 0
                        if (piResponse.Booking.Journeys[0].Segments[iDepart].Fares[0].PaxFares.Length > 0)
                        {
                            PaxFare paxFare = piResponse.Booking.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];
                            PaxFare paxFareChd;

                            if (temClass.TemClassAdultNumber > 0)
                            {
                                HttpContext.Current.Session.Add("getFlightDepartureData", temFlight.TemFlightDeparture);
                                HttpContext.Current.Session.Add("getFlightTransitData", temFlight.TemFlightTransit);
                                HttpContext.Current.Session.Add("getFlightArrivalData", temFlight.TemFlightArrival);
                                AddFarePrice(paxFare, temClass, ref classPrice, "ADT");

                                if (HttpContext.Current.Session["dataTransFeesOthers"] != null)
                                {
                                    DataTable dataTF = dtTransFees();
                                    dataTF = (DataTable)HttpContext.Current.Session["dataTransFeesOthers"];

                                    HttpContext.Current.Session.Add("dataTFOthSellFlightByTem", dataTF);
                                }
                            }
                            if (temClass.TemClassChildNumber > 0)
                            {
                                if (piResponse.Booking.Journeys[0].Segments[iDepart].Fares[0].PaxFares.Length > 1)
                                    paxFareChd = piResponse.Booking.Journeys[0].Segments[iDepart].Fares[0].PaxFares[1];
                                else
                                    paxFareChd = piResponse.Booking.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];

                                //if (temFlight.TemFlightDeparture.ToString().ToUpper() != "HKG" && temFlight.TemFlightDeparture.ToString().ToUpper() != "HKG")
                                //{
                                //    paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];
                                //}
                                HttpContext.Current.Session.Add("getFlightDepartureData", temFlight.TemFlightDeparture);
                                HttpContext.Current.Session.Add("getFlightTransitData", temFlight.TemFlightTransit);
                                HttpContext.Current.Session.Add("getFlightArrivalData", temFlight.TemFlightArrival);
                                AddFarePrice(paxFareChd, temClass, ref classPrice, "CHD");

                                if (HttpContext.Current.Session["dataTransFeesOthers"] != null)
                                {
                                    DataTable dataTF = dtTransFees();
                                    dataTF = (DataTable)HttpContext.Current.Session["dataTransFeesOthers"];

                                    HttpContext.Current.Session.Add("dataTFOthSellFlightByTem", dataTF);
                                }
                            }
                        }
                    }
                    //service charges
                    //ADDED BY KETEE, VAT

                    //amended by diana 20140121 - add initial value to 0, then add it
                    classPrice.ServChrg = 0;
                    classPrice.SSRChrg = 0;
                    classPrice.BaggageChrg = 0;
                    classPrice.MealChrg = 0;
                    classPrice.ComfortChrg = 0;
                    classPrice.SportChrg = 0;
                    classPrice.SeatChrg = 0;
                    classPrice.InfantChrg = 0;
                    classPrice.ServVAT = 0;
                    if (piResponse.Booking.Passengers[0].PassengerFees.Length > 0 && piResponse.Booking.Passengers[0].PassengerFees[0].ServiceCharges.Length > 0)
                    {
                        for (int i = 0; i < piResponse.Booking.Passengers[0].PassengerFees[0].ServiceCharges.Length; i++)
                        {
                            switch (piResponse.Booking.Passengers[0].PassengerFees[0].ServiceCharges[i].ChargeCode.ToString().ToUpper())
                            {
                                case "SVCF":
                                    //bdSvc += book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount;
                                    classPrice.ServChrg += piResponse.Booking.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount * temClass.TemClassPersonNumber;
                                    break;
                                case "VAT":
                                    //bdVAT += book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount;
                                    classPrice.ServVAT += piResponse.Booking.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount * temClass.TemClassPersonNumber;
                                    break;
                                default:
                                    classPrice.ServChrg += piResponse.Booking.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount * temClass.TemClassPersonNumber;
                                    break;
                            }
                        }

                    }

                    //classPrice.FullPrice += classPrice.ServChrg;
                    //bdFull += book.BookingSum.TotalCost;

                    classPrice.ClassID = temClass.TemClassId;
                    classPrice.FullPrice = piResponse.Booking.BookingSum.TotalCost;

                    //added by diana 20131103 - for currency rate
                    classPrice.CurrencyRate = currRate;

                    UpdateClassPrice(classPrice);

                    DataRow row;
                    row = dataClassTrans.NewRow();
                    row["Quantity"] = quantityDepart;
                    row["FarePrice"] = classPrice.FarePrice;
                    row["FullPrice"] = classPrice.FullPrice;
                    row["SellSignature"] = signatureDepart;
                    dataClassTrans.Rows.Add(row);
                    //added by ketee, 20121016
                    row["ServChrg"] = classPrice.ServChrg;
                    row["SSRChrg"] = classPrice.SSRChrg;
                    //row["BaggageChrg"] = classPrice.BaggageChrg;
                    //row["MealChrg"] = classPrice.MealChrg;
                    //row["ComfortChrg"] = classPrice.ComfortChrg;
                    //row["SportChrg"] = classPrice.SportChrg;
                    row["SeatChrg"] = classPrice.SeatChrg;
                    row["InfantChrg"] = classPrice.InfantChrg;
                    //added by ketee, VAT
                    row["ServVAT"] = classPrice.ServVAT;
                    row["DetailCollectedAmt"] = 0;
                    row["RecordLocator"] = "";
                    //added by diana 20131103 - for currency rate
                    row["CurrencyRate"] = classPrice.CurrencyRate;

                    //added by ketee, breakdown fees 20130625
                    bdPaxFee += classPrice.PaxFeeChrg;
                    bdAPT += classPrice.TaxChrg;
                    bdchAPT += classPrice.TAxChrgChd;
                    bdFare += classPrice.FarePrice;
                    bdFuel += classPrice.FuelChrg;
                    bdFull += piResponse.Booking.BookingSum.TotalCost;
                    //commented by diana 20131103 - need to be checked
                    //if (bdFull != classPrice.FullPrice)
                    //{
                    //    throw new ApplicationException("SellFlightByTem - Booking amount is not taly.");
                    //}
                    bdOth += classPrice.OthChrg;
                    bdDisc += classPrice.DiscChrg;
                    bdPromoDisc += classPrice.PromoDiscChrg;
                    bdSvc += classPrice.ServChrg;
                    bdSSR += classPrice.SSRChrg;
                    //bdBaggage += classPrice.BaggageChrg;
                    //bdSport += classPrice.SportChrg;
                    //bdMeal += classPrice.MealChrg;
                    //bdComfort += classPrice.ComfortChrg;
                    bdSeat += classPrice.SeatChrg;
                    bdInfant += classPrice.InfantChrg;
                    bdVAT += classPrice.ServVAT;

                    //save new data class into session
                    if (dataClassTrans.Rows.Count > 0)
                    {
                        HttpContext.Current.Session.Remove("dataClassTrans");
                        HttpContext.Current.Session.Add("dataClassTrans", dataClassTrans);
                    }

                    //added by ketee, validate if session sold or not 
                    //ABS.Navitaire.BookingManager.Booking booking = apiBooking.GetBookingFromState(signatureDepart, 3);
                    //if (booking == null || booking.Journeys.Length <= 0)
                    //{
                    //    log.Error(this, "Fail to Sell booking");
                    //    return false;
                    //}

                }

                DataRow rowBD;
                rowBD = dataBreakdownFee.NewRow();

                rowBD["Fare"] = bdFare / (totalPaxADT + totalPaxCHD);
                if (totalPaxCHD > 0)
                {
                    rowBD["ChApt"] = bdchAPT / totalPaxCHD;
                }
                else
                {
                    rowBD["ChApt"] = 0;
                }
                rowBD["PaxFee"] = bdPaxFee;
                rowBD["Apt"] = bdAPT / totalPaxADT;
                rowBD["Fuel"] = bdFuel;
                rowBD["Svc"] = bdSvc;
                rowBD["SSR"] = bdSSR;
                rowBD["Seat"] = bdSeat;
                rowBD["Oth"] = bdOth;
                rowBD["Disc"] = bdDisc;
                rowBD["PromoDisc"] = bdPromoDisc;
                //added by ketee, VAT
                rowBD["VAT"] = bdVAT;
                //rowBD["SSR"] = 0;
                dataBreakdownFee.Rows.Add(rowBD);

                if (dataClassTrans.Rows.Count > 0)
                {
                    HttpContext.Current.Session.Remove("dataBDFeeDepart");
                    HttpContext.Current.Session.Add("dataBDFeeDepart", dataBreakdownFee);
                }

                UpdateFlightPrice(temFlight.TemFlightId, decimal.Parse(rowBD["Fare"].ToString()), bdFull, bdAPT, bdPaxFee, bdchAPT, bdFuel, bdSvc, bdSSR, bdSeat, bdOth, bdDisc, bdPromoDisc, bdFull / temFlight.TemFlightPaxNum, bdVAT);
                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                HttpContext.Current.Session["errormsg"] = ex.ToString();
                return false;
            }


        }

        //amend by ketee 20130625
        public Boolean SellFlightByTem(TemFlight temFlight, string LoginType, string LoginName, string LoginPWD, string LoginDomain, string SellSessionID, string OrgID, bool moveJourney = false)//amended by diana 20140211, add parameter for moveJourney true/false
        {
            try
            {
                IBookingManager bookingAPI = new BookingManagerClient();
                ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");

                DataTable dataClass = new DataTable();
                DataTable dtTempClass = new DataTable();

                DataTable dataClassTrans = dtClassTrans();
                DataTable dataBreakdownFee = dtBreakdownFee();

                int quantityDepart = 0, quantityReturn = 0, qtychild = 0, qtyadult = 0;
                decimal farePriceDepart = 0, farePriceReturn = 0;
                string signatureDepart = "", signatureReturn = "";
                decimal fullPriceDepart = 0, fullPriceReturn = 0;

                //added by anton 12 oct
                decimal bdchAPT = 0, bdFare = 0, bdAPT = 0, bdPaxFee = 0, bdFuel = 0, bdOth = 0, bdDisc = 0, bdPromoDisc = 0, bdSvc = 0, bdSSR = 0, bdBaggage = 0, bdMeal = 0, bdComfort = 0, bdSport = 0, bdSeat = 0, bdInfant = 0, bdFull = 0, bdVAT = 0; // for breakdownfee
                int totalPax = 0, totalPaxADT = 0, totalPaxCHD = 0; //amended by diana 20131103 - add pax for adt and chd

                dtTempClass = GetTemClassList(temFlight.TemFlightFlightNumber);
                IEnumerable<TemClassofService> temClasslist = ConvertToIEnum(dtTempClass);

                //added by ketee,
                List<PassengerData> lstPassenger = new List<PassengerData>();
                PassengerData rowPassenger;
                int passengerno = 0;

                //added by ketee, add sell service fees
                string cur = string.Empty;
                bool bError = false;

                int prevPNR = 0;

                foreach (TemClassofService temClass in temClasslist)
                {
                    prevPNR += 1;
                    if (moveJourney == false) //not for moving Journey
                    {
                        if (LoginType == "SkyAgent")
                        {
                            SellSessionID = apiBooking.AgentLogon("SkyAgent", LoginDomain, LoginName, LoginPWD);
                        }
                        else
                        {
                            SellSessionID = apiBooking.AgentLogon();
                        }
                    }
                    temClass.TemClassSellSignature = SellSessionID;
                    UpdateTemClass(temClass);
                    //SellSessionID = temClass.TemClassSellSignature;

                    SellRequest sellrequest = new SellRequest();

                    sellrequest.Signature = SellSessionID;
                    //sellrequest.Signature = temClass.TemClassSellSignature;

                    sellrequest.ContractVersion = 3413;
                    sellrequest.SellRequestData = new SellRequestData();
                    sellrequest.SellRequestData.SellBy = SellBy.Journey;
                    sellrequest.SellRequestData.SellJourneyRequest = new SellJourneyRequest();
                    SellJourneyRequestData sjrd = new SellJourneyRequestData();

                    if (temClass.TempPromoDiscCharge != 0)
                    {
                        sjrd.TypeOfSale = new TypeOfSale();
                        sjrd.TypeOfSale.State = MessageState.New;
                        //sjrd.TypeOfSale.PromotionCode = "AMADEUS";
                        sjrd.TypeOfSale.PromotionCode = temFlight.TemFlightPromoCode.ToUpper().Trim();
                        sjrd.TypeOfSale.FareTypes = new string[1];
                        sjrd.TypeOfSale.FareTypes[0] = "R";
                    }

                    sjrd.SourcePOS = new PointOfSale();
                    sjrd.SourcePOS.State = MessageState.New;
                    sjrd.SourcePOS.OrganizationCode = OrgID;

                    sjrd.PaxCount = Convert.ToInt16(temClass.TemClassPersonNumber);
                    sjrd.CurrencyCode = temFlight.TemFlightCurrencyCode.Trim();
                    //added by ketee
                    cur = temFlight.TemFlightCurrencyCode.Trim();

                    sjrd.Passengers = new Passenger[temClass.TemClassPersonNumber];

                    //check child
                    string adultType = "ADT";

                    //check child and adult
                    int childpax = temClass.TemClassChildNumber;
                    qtychild = childpax;
                    int adultpax = temClass.TemClassAdultNumber;
                    qtyadult = adultpax;

                    //added by diana 20131103 - add numofpax
                    totalPaxADT += qtyadult;
                    totalPaxCHD += qtychild;

                    for (int i = 0; i < temClass.TemClassPersonNumber; i++)
                    {
                        if (adultpax > 0)
                        {
                            adultType = "ADT";
                        }
                        //else if (temFlight.TemFlightDeparture.Trim() != "HKG" && temFlight.TemFlightArrival.Trim() != "HKG" && temFlight.TemFlightTransit.Trim() != "HKG")
                        //{
                        //    adultType = "ADT";
                        //}
                        else
                        {
                            adultType = "CHD";
                        }
                        sjrd.Passengers[i] = new Passenger();

                        //sjrd.Passengers[i].PassengerNumber = Convert.ToInt16(passengerno);
                        sjrd.Passengers[i].PassengerNumber = Convert.ToInt16(i);

                        sjrd.Passengers[i].State = MessageState.New;
                        sjrd.Passengers[i].PassengerID = passengerno;
                        sjrd.Passengers[i].PassengerTypeInfos = new PassengerTypeInfo[1];
                        sjrd.Passengers[i].PassengerTypeInfos[0] = new PassengerTypeInfo();

                        if (adultType == "ADT")
                            sjrd.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse("1994-1-1");
                        else if (adultType == "CHD")
                        {
                            DateTime dtTime = DateTime.Now.AddYears(-5);
                            sjrd.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse(dtTime.Year + "-1-1");
                        }

                        sjrd.Passengers[i].PassengerTypeInfos[0].PaxType = adultType;
                        sjrd.Passengers[i].PassengerTypeInfos[0].State = MessageState.New;
                        sjrd.Passengers[i].PseudoPassenger = false;

                        //added by ketee
                        rowPassenger = new PassengerData();

                        //rowPassenger.PassengerID = passengerno.ToString();
                        rowPassenger.PassengerID = i.ToString();

                        rowPassenger.FirstName = "TBA";
                        rowPassenger.LastName = "TBA";
                        rowPassenger.PassportNo = "TBA";
                        rowPassenger.DOB = DateTime.Parse("1900-01-01");
                        rowPassenger.SyncCreate = DateTime.Now;
                        rowPassenger.LastSyncBy = "System";
                        if (adultType == "CHD")
                        {
                            rowPassenger.Title = "Chd";
                        }

                        //ongoing, added by diana, 20161225
                        if (temFlight.TemFlightCarrierCode == "D7" || temFlight.TemFlightCarrierCode == "XJ" || temFlight.TemFlightCarrierCode == "ST")
                        {
                            rowPassenger.MaxChange = 1;
                            rowPassenger.MaxPax1 = qtyadult + qtychild;
                            rowPassenger.MaxPax2 = 0;
                        }
                        else
                        {
                            rowPassenger.MaxChange = 1;
                            rowPassenger.MaxPax1 = (int)(0.3 * (qtyadult + qtychild));
                            rowPassenger.MaxPax2 = 0;
                        }

                        rowPassenger.PrevFirstName1 = "";
                        rowPassenger.PrevLastName1 = "";
                        rowPassenger.PrevFirstName2 = "";
                        rowPassenger.PrevLastName2 = "";

                        rowPassenger.ChangeCount = 0;
                        rowPassenger.ChangeFee = 0;
                        rowPassenger.ChangeFee2 = 0;

                        rowPassenger.RecordLocator = prevPNR.ToString();

                        lstPassenger.Add(rowPassenger);
                        passengerno++;
                        adultpax--;
                    }
                    //added by ketee
                    if (lstPassenger != null)
                    {
                        HttpContext.Current.Session.Remove("listPassengers");
                        HttpContext.Current.Session.Add("listPassengers", lstPassenger);
                    }

                    sjrd.Journeys = new SellJourney[1];
                    sjrd.Journeys[0] = new SellJourney();
                    sjrd.Journeys[0].State = MessageState.New;
                    sjrd.Journeys[0].NotForGeneralUse = false;
                    if (temFlight.TemFlightTransit != "")
                    { sjrd.Journeys[0].Segments = new SellSegment[2]; }
                    else { sjrd.Journeys[0].Segments = new SellSegment[1]; }
                    SellSegment srSegment = new SellSegment();
                    srSegment.State = MessageState.New;
                    srSegment.DepartureStation = temFlight.TemFlightDeparture.Trim();
                    if (temFlight.TemFlightTransit != "")
                    {
                        srSegment.ArrivalStation = temFlight.TemFlightTransit.Trim();
                    }
                    else
                    {
                        srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                    }
                    srSegment.ActionStatusCode = "NN";
                    srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd);
                    srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta);
                    srSegment.FlightDesignator = new FlightDesignator();

                    srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber.Trim();
                    srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
                    srSegment.Fare = new SellFare();
                    srSegment.Fare.State = MessageState.New;
                    srSegment.Fare.ClassOfService = temClass.TemClassClass.Trim();
                    srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
                    srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey.Split('~')[4].ToString();// "AAB1";
                    srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey.Split('~')[3].ToString();// "A00H00";

                    srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey.Split('~')[6]);
                    srSegment.Fare.FareClassOfService = temClass.TemClassClass.Trim();
                    srSegment.Fare.IsAllotmentMarketFare = false;

                    switch (temClass.TempFareApplicationType.ToString().ToLower())
                    {
                        case "route":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                            break;
                        case "sector":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                            break;
                        case "governing":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                            break;
                        default:
                            srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                            //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                            break;
                    }
                    sjrd.Journeys[0].Segments[0] = srSegment;

                    if (temFlight.TemFlightTransit != "")
                    {
                        srSegment = new SellSegment();
                        srSegment.State = MessageState.New;
                        srSegment.DepartureStation = temFlight.TemFlightTransit.Trim();
                        srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                        srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd2);
                        srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta2);
                        srSegment.ActionStatusCode = "NN";
                        srSegment.FlightDesignator = new FlightDesignator();

                        srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber2.Trim();
                        srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();

                        srSegment.Fare = new SellFare();
                        srSegment.Fare.State = MessageState.New;
                        srSegment.Fare.ClassOfService = temClass.TemClassClass2.Trim();
                        srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();
                        srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey2.Split('~')[4].ToString();
                        srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey2.Split('~')[3].ToString();

                        srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey2.Split('~')[6]);
                        srSegment.Fare.FareClassOfService = temClass.TemClassClass2.Trim();
                        srSegment.Fare.IsAllotmentMarketFare = false;

                        switch (temClass.TempFareApplicationType2.ToString().ToLower())
                        {
                            case "route":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                break;
                            case "sector":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                                break;
                            case "governing":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                                break;
                            default:
                                //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                                srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                break;
                        }
                        sjrd.Journeys[0].Segments[1] = srSegment;
                    }

                    sellrequest.SellRequestData.SellJourneyRequest.SellJourneyRequestData = sjrd;

                    //string requeststring = GetXMLString(sellrequest);

                    SellResponse response = bookingAPI.Sell(sellrequest);

                    //string responsestring = GetXMLString(response);
                    //added by ketee, add service fees
                    //foreach (PassengerData rowpassenger in lstPassenger)
                    //{


                    //remarked by diana 20170201, no more service fee
                    //if (moveJourney == false)
                    //{
                    //    if (AddServiceFees(SellSessionID, cur, 0) == false)
                    //    {
                    //        bError = true;
                    //        log.Warning(this, "Add fees failed: " + SellSessionID);
                    //        break;
                    //    }
                    //}

                    //}

                    //fill data for new dataClass
                    quantityDepart = temClass.TemClassPersonNumber;

                    totalPax += quantityDepart;

                    farePriceDepart = Convert.ToDecimal(temClass.TemClassClassPrice);
                    fullPriceDepart = Convert.ToDecimal(temClass.TemClassFullPrice);
                    signatureDepart = SellSessionID;

                    /*
                    DataRow row;
                    row = dataClassTrans.NewRow();
                    row["Quantity"] = quantityDepart;
                    row["FarePrice"] = farePriceDepart + farePriceReturn;
                    row["FullPrice"] = fullPriceDepart + fullPriceReturn;
                    row["SellSignature"] = signatureDepart;
                    dataClassTrans.Rows.Add(row);
                    */

                    Navitaire.BookingManager.Booking book = GetBookingFromState(SellSessionID);
                    HttpContext.Current.Session.Add("signature", SellSessionID);
                    //string xml = GetXMLString(book);

                    //added by diana 20131103 - get currency rate for one way flight
                    Navitaire.UtilitiesManager.GetExternalRatesListResponseData RateResponse = apiBooking.GetExternalRateList(SellSessionID);
                    string curr = book.CurrencyCode;
                    //string req = GetXMLString(RateResponse);
                    decimal currRate = 1;
                    if (curr != "MYR")
                    {
                        for (int i = 0; i < RateResponse.ExternalRateList.Length; i++)
                        {
                            if (RateResponse.ExternalRateList[i].QuotedCurrency == curr && RateResponse.ExternalRateList[i].CollectedCurrency == "MYR")
                            {
                                currRate = RateResponse.ExternalRateList[i].ExchangeRate;
                            }
                        }
                    }

                    int segCount = book.Journeys[0].Segments.Length;

                    //renew temClass
                    ClassPrice classPrice = new ClassPrice();

                    for (int iDepart = 0; iDepart < segCount; iDepart++)
                    {
                        //added by diana 20131031 - add condition if paxfare length is more than 0
                        if (book.Journeys[0].Segments[iDepart].Fares[0].PaxFares.Length > 0)
                        {
                            PaxFare paxFare = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];
                            PaxFare paxFareChd;

                            if (temClass.TemClassAdultNumber > 0)
                            {
                                HttpContext.Current.Session.Add("getFlightDepartureData", temFlight.TemFlightDeparture);
                                HttpContext.Current.Session.Add("getFlightTransitData", temFlight.TemFlightTransit);
                                HttpContext.Current.Session.Add("getFlightArrivalData", temFlight.TemFlightArrival);
                                AddFarePrice(paxFare, temClass, ref classPrice, "ADT");

                                if (HttpContext.Current.Session["dataTransFeesOthers"] != null)
                                {
                                    DataTable dataTF = dtTransFees();
                                    dataTF = (DataTable)HttpContext.Current.Session["dataTransFeesOthers"];

                                    HttpContext.Current.Session.Add("dataTFOthSellFlightByTem", dataTF);
                                }
                            }
                            if (temClass.TemClassChildNumber > 0)
                            {
                                if (book.Journeys[0].Segments[iDepart].Fares[0].PaxFares.Length > 1)
                                    paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[1];
                                else
                                    paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];

                                //if (temFlight.TemFlightDeparture.ToString().ToUpper() != "HKG" && temFlight.TemFlightDeparture.ToString().ToUpper() != "HKG")
                                //{
                                //    paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];
                                //}
                                HttpContext.Current.Session.Add("getFlightDepartureData", temFlight.TemFlightDeparture);
                                HttpContext.Current.Session.Add("getFlightTransitData", temFlight.TemFlightTransit);
                                HttpContext.Current.Session.Add("getFlightArrivalData", temFlight.TemFlightArrival);
                                AddFarePrice(paxFareChd, temClass, ref classPrice, "CHD");

                                if (HttpContext.Current.Session["dataTransFeesOthers"] != null)
                                {
                                    DataTable dataTF = dtTransFees();
                                    dataTF = (DataTable)HttpContext.Current.Session["dataTransFeesOthers"];

                                    HttpContext.Current.Session.Add("dataTFOthSellFlightByTem", dataTF);
                                }
                            }
                        }
                    }
                    //service charges
                    //ADDED BY KETEE, VAT

                    //amended by diana 20140121 - add initial value to 0, then add it
                    classPrice.ServChrg = 0;
                    classPrice.SSRChrg = 0;
                    classPrice.BaggageChrg = 0;
                    classPrice.MealChrg = 0;
                    classPrice.ComfortChrg = 0;
                    classPrice.SportChrg = 0;
                    classPrice.SeatChrg = 0;
                    classPrice.InfantChrg = 0;
                    classPrice.ServVAT = 0;
                    if (book.Passengers[0].PassengerFees.Length > 0 && book.Passengers[0].PassengerFees[0].ServiceCharges.Length > 0)
                    {
                        for (int i = 0; i < book.Passengers[0].PassengerFees[0].ServiceCharges.Length; i++)
                        {
                            switch (book.Passengers[0].PassengerFees[0].ServiceCharges[i].ChargeCode.ToString().ToUpper())
                            {
                                case "SVCF":
                                    //bdSvc += book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount;
                                    classPrice.ServChrg += book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount * temClass.TemClassPersonNumber;
                                    break;
                                case "VAT":
                                    //bdVAT += book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount;
                                    classPrice.ServVAT += book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount * temClass.TemClassPersonNumber;
                                    break;
                                default:
                                    classPrice.ServChrg += book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount * temClass.TemClassPersonNumber;
                                    break;
                            }
                        }

                    }

                    //classPrice.FullPrice += classPrice.ServChrg;
                    //bdFull += book.BookingSum.TotalCost;

                    classPrice.ClassID = temClass.TemClassId;
                    classPrice.FullPrice = book.BookingSum.TotalCost;

                    //added by diana 20131103 - for currency rate
                    classPrice.CurrencyRate = currRate;

                    UpdateClassPrice(classPrice);

                    DataRow row;
                    row = dataClassTrans.NewRow();
                    row["Quantity"] = quantityDepart;
                    row["FarePrice"] = classPrice.FarePrice;
                    row["FullPrice"] = classPrice.FullPrice;
                    row["SellSignature"] = signatureDepart;
                    dataClassTrans.Rows.Add(row);
                    //added by ketee, 20121016
                    row["ServChrg"] = classPrice.ServChrg;
                    row["SSRChrg"] = classPrice.SSRChrg;
                    //row["BaggageChrg"] = classPrice.BaggageChrg;
                    //row["MealChrg"] = classPrice.MealChrg;
                    //row["ComfortChrg"] = classPrice.ComfortChrg;
                    //row["SportChrg"] = classPrice.SportChrg;
                    row["SeatChrg"] = classPrice.SeatChrg;
                    row["InfantChrg"] = classPrice.InfantChrg;
                    //added by ketee, VAT
                    row["ServVAT"] = classPrice.ServVAT;
                    row["DetailCollectedAmt"] = 0;
                    row["RecordLocator"] = "";
                    //added by diana 20131103 - for currency rate
                    row["CurrencyRate"] = classPrice.CurrencyRate;

                    //added by ketee, breakdown fees 20130625
                    bdPaxFee += classPrice.PaxFeeChrg;
                    bdAPT += classPrice.TaxChrg;
                    bdchAPT += classPrice.TAxChrgChd;
                    bdFare += classPrice.FarePrice;
                    bdFuel += classPrice.FuelChrg;
                    bdFull += book.BookingSum.TotalCost;
                    //commented by diana 20131103 - need to be checked
                    //if (bdFull != classPrice.FullPrice)
                    //{
                    //    throw new ApplicationException("SellFlightByTem - Booking amount is not taly.");
                    //}
                    bdOth += classPrice.OthChrg;
                    bdDisc += classPrice.DiscChrg;
                    bdPromoDisc += classPrice.PromoDiscChrg;
                    bdSvc += classPrice.ServChrg;
                    bdSSR += classPrice.SSRChrg;
                    //bdBaggage += classPrice.BaggageChrg;
                    //bdSport += classPrice.SportChrg;
                    //bdMeal += classPrice.MealChrg;
                    //bdComfort += classPrice.ComfortChrg;
                    bdSeat += classPrice.SeatChrg;
                    bdInfant += classPrice.InfantChrg;
                    bdVAT += classPrice.ServVAT;

                    //save new data class into session
                    if (dataClassTrans.Rows.Count > 0)
                    {
                        HttpContext.Current.Session.Remove("dataClassTrans");
                        HttpContext.Current.Session.Add("dataClassTrans", dataClassTrans);
                    }

                    //added by ketee, validate if session sold or not 
                    ABS.Navitaire.BookingManager.Booking booking = apiBooking.GetBookingFromState(signatureDepart, 3);
                    if (booking == null || booking.Journeys.Length <= 0)
                    {
                        log.Error(this, "Fail to Sell booking");
                        return false;
                    }

                }

                DataRow rowBD;
                rowBD = dataBreakdownFee.NewRow();

                rowBD["Fare"] = bdFare / (totalPaxADT + totalPaxCHD);
                if (totalPaxCHD > 0)
                {
                    rowBD["ChApt"] = bdchAPT / totalPaxCHD;
                }
                else
                {
                    rowBD["ChApt"] = 0;
                }
                rowBD["PaxFee"] = bdPaxFee;
                rowBD["Apt"] = bdAPT / totalPaxADT;
                rowBD["Fuel"] = bdFuel;
                rowBD["Svc"] = bdSvc;
                rowBD["SSR"] = bdSSR;
                rowBD["Seat"] = bdSeat;
                rowBD["Oth"] = bdOth;
                rowBD["Disc"] = bdDisc;
                rowBD["PromoDisc"] = bdPromoDisc;
                //added by ketee, VAT
                rowBD["VAT"] = bdVAT;
                //rowBD["SSR"] = 0;
                dataBreakdownFee.Rows.Add(rowBD);

                if (dataClassTrans.Rows.Count > 0)
                {
                    HttpContext.Current.Session.Remove("dataBDFeeDepart");
                    HttpContext.Current.Session.Add("dataBDFeeDepart", dataBreakdownFee);
                }

                UpdateFlightPrice(temFlight.TemFlightId, decimal.Parse(rowBD["Fare"].ToString()), bdFull, bdAPT, bdPaxFee, bdchAPT, bdFuel, bdSvc, bdSSR, bdSeat, bdOth, bdDisc, bdPromoDisc, bdFull / temFlight.TemFlightPaxNum, bdVAT);
                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                HttpContext.Current.Session["errormsg"] = ex.ToString();
                return false;
            }


        }

        //retrieve timezone standard deviation
        public int RetrieveTimeZone(ACE.LookUpManager.LookupServiceClient aceLookup, ACE.SessionManager.LogonResponse resp, ACE.LookUpManager.StationTimeZone TimeZoneResp, string StationCode)
        {
            try
            {
                if (resp != null)
                {
                    TimeZoneResp = aceLookup.GetStationTimeZone(StationCode, resp.SessionID);
                    //string xml = GetXMLString(TimeZoneResp);
                    if (TimeZoneResp != null)
                    {
                        return TimeZoneResp.StandardVariation;
                    }
                }
                return 0;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                HttpContext.Current.Session["errormsgTimeZone"] = StationCode + " Time Zone not found. Kindly contact system administrator for further information.";
                return 0;
            }
        }

        public Boolean SellFlightByTemAddInfant(int InfantNum, TemFlight temFlight, string LoginType, string LoginName, string LoginPWD, string LoginDomain, string SellSessionID, bool moveJourney = false)//amended by diana 20140211, add parameter for moveJourney true/false
        {
            try
            {
                IBookingManager bookingAPI = new BookingManagerClient();
                ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");

                DataTable dataClass = new DataTable();
                DataTable dtTempClass = new DataTable();

                DataTable dataClassTrans = dtClassTrans();
                DataTable dataBreakdownFee = dtBreakdownFee();

                int quantityDepart = 0, quantityReturn = 0, qtychild = 0, qtyadult = 0;
                decimal farePriceDepart = 0, farePriceReturn = 0;
                string signatureDepart = "", signatureReturn = "";
                decimal fullPriceDepart = 0, fullPriceReturn = 0;

                //added by anton 12 oct
                decimal bdchAPT = 0, bdFare = 0, bdAPT = 0, bdPaxFee = 0, bdInfant = 0, bdFuel = 0, bdOth = 0, bdDisc = 0, bdPromoDisc = 0, bdSvc = 0, bdSSR = 0, bdBaggage = 0, bdMeal = 0, bdComfort = 0, bdSport = 0, bdSeat = 0, bdFull = 0, bdVAT = 0; // for breakdownfee
                int totalPax = 0, totalPaxADT = 0, totalPaxCHD = 0; //amended by diana 20131103 - add pax for adt and chd

                dtTempClass = GetTemClassList(temFlight.TemFlightFlightNumber);
                IEnumerable<TemClassofService> temClasslist = ConvertToIEnum(dtTempClass);

                //added by ketee,
                List<PassengerData> lstPassenger = new List<PassengerData>();
                PassengerData rowPassenger;
                int passengerno = 0;

                //added by ketee, add sell service fees
                string cur = string.Empty;
                bool bError = false;

                int prevPNR = 0;
                int infantcount = 0;
                int sellalready = 0;
                foreach (TemClassofService temClass in temClasslist)
                {
                    prevPNR += 1;
                    infantcount += 1;
                    if (moveJourney == false) //not for moving Journey
                    {
                        if (LoginType == "SkyAgent")
                        {
                            SellSessionID = apiBooking.AgentLogon("SkyAgent", LoginDomain, LoginName, LoginPWD);
                        }
                        else
                        {
                            SellSessionID = apiBooking.AgentLogon();
                        }
                    }
                    temClass.TemClassSellSignature = SellSessionID;
                    UpdateTemClass(temClass);
                    //SellSessionID = temClass.TemClassSellSignature;

                    SellRequest sellrequest = new SellRequest();

                    sellrequest.Signature = SellSessionID;
                    //sellrequest.Signature = temClass.TemClassSellSignature;

                    sellrequest.ContractVersion = 3413;
                    sellrequest.SellRequestData = new SellRequestData();
                    sellrequest.SellRequestData.SellBy = SellBy.Journey;
                    sellrequest.SellRequestData.SellJourneyRequest = new SellJourneyRequest();
                    SellJourneyRequestData sjrd = new SellJourneyRequestData();

                    if (temClass.TempPromoDiscCharge != 0)
                    {
                        sjrd.TypeOfSale = new TypeOfSale();
                        sjrd.TypeOfSale.State = MessageState.New;
                        //sjrd.TypeOfSale.PromotionCode = "AMADEUS";
                        sjrd.TypeOfSale.PromotionCode = temFlight.TemFlightPromoCode.ToUpper().Trim();
                        sjrd.TypeOfSale.FareTypes = new string[1];
                        sjrd.TypeOfSale.FareTypes[0] = "R";
                    }

                    sjrd.PaxCount = Convert.ToInt16(temClass.TemClassPersonNumber);
                    sjrd.CurrencyCode = temFlight.TemFlightCurrencyCode.Trim();
                    //added by ketee
                    cur = temFlight.TemFlightCurrencyCode.Trim(); ;
                    sjrd.Passengers = new Passenger[temClass.TemClassPersonNumber];

                    //check child
                    string adultType = "ADT";

                    //check child and adult
                    int childpax = temClass.TemClassChildNumber;
                    qtychild = childpax;
                    int adultpax = temClass.TemClassAdultNumber;
                    qtyadult = adultpax;

                    //added by diana 20131103 - add numofpax
                    totalPaxADT += qtyadult;
                    totalPaxCHD += qtychild;

                    for (int i = 0; i < temClass.TemClassPersonNumber; i++)
                    {
                        if (adultpax > 0)
                        {
                            adultType = "ADT";
                        }
                        //else if (temFlight.TemFlightDeparture.Trim() != "HKG" && temFlight.TemFlightArrival.Trim() != "HKG" && temFlight.TemFlightTransit.Trim() != "HKG")
                        //{
                        //    adultType = "ADT";
                        //}
                        else
                        {
                            adultType = "CHD";
                        }
                        sjrd.Passengers[i] = new Passenger();

                        //sjrd.Passengers[i].PassengerNumber = Convert.ToInt16(passengerno);
                        sjrd.Passengers[i].PassengerNumber = Convert.ToInt16(i);

                        sjrd.Passengers[i].State = MessageState.New;
                        sjrd.Passengers[i].PassengerID = passengerno;
                        sjrd.Passengers[i].PassengerTypeInfos = new PassengerTypeInfo[1];
                        sjrd.Passengers[i].PassengerTypeInfos[0] = new PassengerTypeInfo();

                        if (adultType == "ADT")
                            sjrd.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse("1994-1-1");
                        else if (adultType == "CHD")
                        {
                            DateTime dtTime = DateTime.Now.AddYears(-5);
                            sjrd.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse(dtTime.Year + "-1-1");
                        }

                        sjrd.Passengers[i].PassengerTypeInfos[0].PaxType = adultType;
                        sjrd.Passengers[i].PassengerTypeInfos[0].State = MessageState.New;
                        sjrd.Passengers[i].PseudoPassenger = false;

                        //added by ketee
                        rowPassenger = new PassengerData();

                        //rowPassenger.PassengerID = passengerno.ToString();
                        rowPassenger.PassengerID = i.ToString();

                        rowPassenger.FirstName = "TBA";
                        rowPassenger.LastName = "TBA";
                        rowPassenger.PassportNo = "TBA";
                        rowPassenger.DOB = DateTime.Parse("1900-01-01");
                        rowPassenger.SyncCreate = DateTime.Now;
                        rowPassenger.LastSyncBy = "System";
                        //if (adultType == "CHD")
                        //{
                        //    rowPassenger.Title = "CHILD";
                        //}

                        //ongoing, added by diana, 20161225
                        if (temFlight.TemFlightCarrierCode == "D7" || temFlight.TemFlightCarrierCode == "XJ" || temFlight.TemFlightCarrierCode == "ST")
                        {
                            rowPassenger.MaxChange = 1;
                            rowPassenger.MaxPax1 = qtyadult + qtychild;
                            rowPassenger.MaxPax2 = 0;
                        }
                        else
                        {
                            rowPassenger.MaxChange = 1;
                            rowPassenger.MaxPax1 = (int)(0.3 * (qtyadult + qtychild));
                            rowPassenger.MaxPax2 = 0;
                        }

                        rowPassenger.PrevFirstName1 = "";
                        rowPassenger.PrevLastName1 = "";
                        rowPassenger.PrevFirstName2 = "";
                        rowPassenger.PrevLastName2 = "";

                        rowPassenger.ChangeCount = 0;
                        rowPassenger.ChangeFee = 0;
                        rowPassenger.ChangeFee2 = 0;

                        rowPassenger.RecordLocator = prevPNR.ToString();

                        lstPassenger.Add(rowPassenger);
                        passengerno++;
                        adultpax--;
                    }
                    //added by ketee
                    if (lstPassenger != null)
                    {
                        HttpContext.Current.Session.Remove("listPassengers");
                        HttpContext.Current.Session.Add("listPassengers", lstPassenger);
                    }

                    sjrd.Journeys = new SellJourney[1];
                    sjrd.Journeys[0] = new SellJourney();
                    sjrd.Journeys[0].State = MessageState.New;
                    sjrd.Journeys[0].NotForGeneralUse = false;
                    if (temFlight.TemFlightTransit != "")
                    { sjrd.Journeys[0].Segments = new SellSegment[2]; }
                    else { sjrd.Journeys[0].Segments = new SellSegment[1]; }
                    SellSegment srSegment = new SellSegment();
                    srSegment.State = MessageState.New;
                    srSegment.DepartureStation = temFlight.TemFlightDeparture.Trim();
                    if (temFlight.TemFlightTransit != "")
                    {
                        srSegment.ArrivalStation = temFlight.TemFlightTransit.Trim();
                    }
                    else
                    {
                        srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                    }

                    srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd);
                    srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta);
                    srSegment.FlightDesignator = new FlightDesignator();

                    srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber.Trim();
                    srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
                    srSegment.Fare = new SellFare();
                    srSegment.Fare.State = MessageState.New;
                    srSegment.Fare.ClassOfService = temClass.TemClassClass.Trim();
                    srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
                    srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey.Split('~')[4].ToString();// "AAB1";
                    srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey.Split('~')[3].ToString();// "A00H00";

                    srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey.Split('~')[6]);
                    srSegment.Fare.FareClassOfService = temClass.TemClassClass.Trim();
                    srSegment.Fare.IsAllotmentMarketFare = false;

                    switch (temClass.TempFareApplicationType.ToString().ToLower())
                    {
                        case "route":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                            break;
                        case "sector":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                            break;
                        case "governing":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                            break;
                        default:
                            srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                            //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                            break;
                    }
                    sjrd.Journeys[0].Segments[0] = srSegment;

                    if (temFlight.TemFlightTransit != "")
                    {
                        srSegment = new SellSegment();
                        srSegment.State = MessageState.New;
                        srSegment.DepartureStation = temFlight.TemFlightTransit.Trim();
                        srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                        srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd2);
                        srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta2);
                        srSegment.FlightDesignator = new FlightDesignator();

                        srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber2.Trim();
                        srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();

                        srSegment.Fare = new SellFare();
                        srSegment.Fare.State = MessageState.New;
                        srSegment.Fare.ClassOfService = temClass.TemClassClass2.Trim();
                        srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();
                        srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey2.Split('~')[4].ToString();
                        srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey2.Split('~')[3].ToString();

                        srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey2.Split('~')[6]);
                        srSegment.Fare.FareClassOfService = temClass.TemClassClass2.Trim();
                        srSegment.Fare.IsAllotmentMarketFare = false;

                        switch (temClass.TempFareApplicationType2.ToString().ToLower())
                        {
                            case "route":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                break;
                            case "sector":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                                break;
                            case "governing":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                                break;
                            default:
                                //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                                srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                break;
                        }
                        sjrd.Journeys[0].Segments[1] = srSegment;
                    }

                    sellrequest.SellRequestData.SellJourneyRequest.SellJourneyRequestData = sjrd;

                    //string requeststring = GetXMLString(sellrequest);

                    SellResponse response = bookingAPI.Sell(sellrequest);

                    //string responsestring = GetXMLString(response);
                    //added by ketee, add service fees
                    //foreach (PassengerData rowpassenger in lstPassenger)
                    //{

                    //remarked by diana 20170201, no more service fee
                    //if (moveJourney == false)
                    //{
                    //    if (AddServiceFees(SellSessionID, cur, 0) == false)
                    //    {
                    //        bError = true;
                    //        log.Warning(this, "Add fees failed: " + SellSessionID);
                    //        break;
                    //    }
                    //}

                    //}



                    //fill data for new dataClass
                    quantityDepart = temClass.TemClassPersonNumber;

                    totalPax += quantityDepart;

                    farePriceDepart = Convert.ToDecimal(temClass.TemClassClassPrice);
                    fullPriceDepart = Convert.ToDecimal(temClass.TemClassFullPrice);
                    signatureDepart = SellSessionID;

                    /*
                    DataRow row;
                    row = dataClassTrans.NewRow();
                    row["Quantity"] = quantityDepart;
                    row["FarePrice"] = farePriceDepart + farePriceReturn;
                    row["FullPrice"] = fullPriceDepart + fullPriceReturn;
                    row["SellSignature"] = signatureDepart;
                    dataClassTrans.Rows.Add(row);
                    */
                    int count = 0;
                    int lengths = 0;
                    Navitaire.BookingManager.Booking book = GetBookingFromState(SellSessionID);
                    HttpContext.Current.Session.Add("signature", SellSessionID);
                    //string xml = GetXMLString(book);

                    GetSSRAvailabilityForBookingResponse getSSRAvailabilityForBookingResponses = apiBooking.GetSSRAvailabilityForBooking(book, SellSessionID);
                    if (getSSRAvailabilityForBookingResponses != null)
                    {
                        SSRAvailabilityForBookingResponse ssrAvailabilityResponseForBooking = getSSRAvailabilityForBookingResponses.SSRAvailabilityForBookingResponse;
                        if (sellalready == 0)
                        {
                            for (int j = 0; j < ssrAvailabilityResponseForBooking.SSRSegmentList.Length; j++) //for SSR index
                            {
                                for (int k = 0; k < ssrAvailabilityResponseForBooking.SSRSegmentList[j].AvailablePaxSSRList.Length; k++) //for SSR index
                                {
                                    if (ssrAvailabilityResponseForBooking.SSRSegmentList[j].AvailablePaxSSRList[k].SSRCode.Equals("INFT"))
                                    {

                                        lengths = ssrAvailabilityResponseForBooking.SSRSegmentList[j].AvailablePaxSSRList[k].Available;
                                        if (lengths >= InfantNum)
                                        {
                                            count += 1;
                                            break;
                                        }
                                        //break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            count = 0;
                        }

                        if (count == ssrAvailabilityResponseForBooking.SSRSegmentList.Length)
                        {
                            if (InfantNum <= book.Passengers.Length && sellalready == 0)
                            {
                                //string boolxml = GetXMLString(book);
                                SellRequest sellSsrRequest = new SellRequest();
                                SellRequestData sellreqd = new SellRequestData();
                                sellreqd.SellBy = SellBy.SSR;
                                sellreqd.SellSSR = new SellSSR();
                                sellreqd.SellSSR.SSRRequest = new SSRRequest();
                                sellreqd.SellSSR.SSRRequest.CurrencyCode = book.CurrencyCode;
                                int SSRRequestCount = ssrAvailabilityResponseForBooking.SSRSegmentList.Length;
                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests = new SegmentSSRRequest[SSRRequestCount];

                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0] = new SegmentSSRRequest();
                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].PaxSSRs = new PaxSSR[InfantNum];
                                for (int i = 0; i < sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].PaxSSRs.Length; i++)
                                {
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].PaxSSRs[i] = new PaxSSR();
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].PaxSSRs[i].State = MessageState.New;
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].PaxSSRs[i].ActionStatusCode = "NN";
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].PaxSSRs[i].SSRCode = "INFT";
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].PaxSSRs[i].SSRNumber = 0;
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].PaxSSRs[i].DepartureStation = book.Journeys[0].
                                    Segments[0].DepartureStation;
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].PaxSSRs[i].ArrivalStation = book.Journeys[0].
                                    Segments[0].ArrivalStation;
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].PaxSSRs[i].PassengerNumber = (short)i;
                                }
                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].DepartureStation = ssrAvailabilityResponseForBooking.SSRSegmentList[0].LegKey.DepartureStation;
                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].ArrivalStation = ssrAvailabilityResponseForBooking.SSRSegmentList[0].LegKey.ArrivalStation;
                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].STD = ssrAvailabilityResponseForBooking.SSRSegmentList[0].LegKey.DepartureDate;
                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].FlightDesignator = new FlightDesignator();
                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].FlightDesignator.CarrierCode = ssrAvailabilityResponseForBooking.SSRSegmentList[0].LegKey.CarrierCode;
                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].FlightDesignator.FlightNumber = ssrAvailabilityResponseForBooking.SSRSegmentList[0].LegKey.FlightNumber;

                                if (SSRRequestCount == 2)
                                {
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1] = new SegmentSSRRequest();

                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs = new PaxSSR[InfantNum];
                                    for (int i = 0; i < sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs.Length; i++)
                                    {
                                        sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i] = new PaxSSR();
                                        sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].State = MessageState.New;
                                        sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].ActionStatusCode = "NN";
                                        sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].SSRCode = "INFT";
                                        sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].SSRNumber = 0;
                                        sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].DepartureStation = book.Journeys[0].
                                        Segments[1].DepartureStation;
                                        sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].ArrivalStation = book.Journeys[0].
                                        Segments[1].ArrivalStation;
                                        sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].PassengerNumber = (short)i;
                                    }
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].DepartureStation = ssrAvailabilityResponseForBooking.SSRSegmentList[1].LegKey.DepartureStation;
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].ArrivalStation = ssrAvailabilityResponseForBooking.SSRSegmentList[1].LegKey.ArrivalStation;
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].STD = ssrAvailabilityResponseForBooking.SSRSegmentList[1].LegKey.DepartureDate;
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].FlightDesignator = new FlightDesignator();
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].FlightDesignator.CarrierCode = ssrAvailabilityResponseForBooking.SSRSegmentList[1].LegKey.CarrierCode;
                                    sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].FlightDesignator.FlightNumber = ssrAvailabilityResponseForBooking.SSRSegmentList[1].LegKey.FlightNumber;
                                }


                                sellSsrRequest.SellRequestData = sellreqd;
                                sellSsrRequest.Signature = SellSessionID;

                                sellSsrRequest.ContractVersion = 340;
                                SellResponse sellSsrResponse = null;
                                sellSsrResponse = bookingAPI.Sell(sellSsrRequest);
                                sellalready = 1;


                                book = GetBookingFromState(SellSessionID);
                                //string req = GetXMLString(book);

                                //remark 1st ya by Tyas
                                int length = lstPassenger.Count;
                                for (int i = 0; i < InfantNum; i++)
                                {
                                    rowPassenger = new PassengerData();

                                    //rowPassenger.PassengerID = passengerno.ToString();
                                    rowPassenger.PassengerID = (i).ToString();

                                    rowPassenger.FirstName = "Infant";
                                    rowPassenger.LastName = "Infant";
                                    rowPassenger.PassportNo = "TBA";
                                    rowPassenger.DOB = DateTime.Today.AddMonths(-5);
                                    rowPassenger.SyncCreate = DateTime.Now;
                                    rowPassenger.LastSyncBy = "System";
                                    rowPassenger.Title = "INFT";

                                    rowPassenger.RecordLocator = prevPNR.ToString();


                                    lstPassenger.Add(rowPassenger);
                                }

                            }
                        }


                        if (lstPassenger != null)
                        {
                            HttpContext.Current.Session.Remove("listPassengers");
                            HttpContext.Current.Session.Add("listPassengers", lstPassenger);
                        }

                        //added by diana 20131103 - get currency rate for one way flight
                        Navitaire.UtilitiesManager.GetExternalRatesListResponseData RateResponse = apiBooking.GetExternalRateList(SellSessionID);
                        string curr = book.CurrencyCode;
                        //string req = GetXMLString(RateResponse);
                        decimal currRate = 1;
                        if (curr != "MYR")
                        {
                            for (int i = 0; i < RateResponse.ExternalRateList.Length; i++)
                            {
                                if (RateResponse.ExternalRateList[i].QuotedCurrency == curr && RateResponse.ExternalRateList[i].CollectedCurrency == "MYR")
                                {
                                    currRate = RateResponse.ExternalRateList[i].ExchangeRate;
                                }
                            }
                        }

                        int segCount = book.Journeys[0].Segments.Length;

                        //renew temClass
                        ClassPrice classPrice = new ClassPrice();

                        for (int iDepart = 0; iDepart < segCount; iDepart++)
                        {
                            //added by diana 20131031 - add condition if paxfare length is more than 0
                            if (book.Journeys[0].Segments[iDepart].Fares[0].PaxFares.Length > 0)
                            {
                                PaxFare paxFare = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];
                                PaxFare paxFareChd;

                                if (temClass.TemClassAdultNumber > 0)
                                {
                                    HttpContext.Current.Session.Add("getFlightDepartureData", temFlight.TemFlightDeparture);
                                    HttpContext.Current.Session.Add("getFlightTransitData", temFlight.TemFlightTransit);
                                    HttpContext.Current.Session.Add("getFlightArrivalData", temFlight.TemFlightArrival);
                                    AddFarePrice(paxFare, temClass, ref classPrice, "ADT");

                                    if (HttpContext.Current.Session["dataTransFeesOthers"] != null)
                                    {
                                        DataTable dataTF = dtTransFees();
                                        dataTF = (DataTable)HttpContext.Current.Session["dataTransFeesOthers"];

                                        HttpContext.Current.Session.Add("dataTFOthSellFlightByTemAddInfant", dataTF);
                                    }
                                }
                                if (temClass.TemClassChildNumber > 0)
                                {
                                    if (book.Journeys[0].Segments[iDepart].Fares[0].PaxFares.Length > 1)
                                        paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[1];
                                    else
                                        paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];

                                    //if (temFlight.TemFlightDeparture.ToString().ToUpper() != "HKG" && temFlight.TemFlightDeparture.ToString().ToUpper() != "HKG")
                                    //{
                                    //    paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];
                                    //}
                                    HttpContext.Current.Session.Add("getFlightDepartureData", temFlight.TemFlightDeparture);
                                    HttpContext.Current.Session.Add("getFlightTransitData", temFlight.TemFlightTransit);
                                    HttpContext.Current.Session.Add("getFlightArrivalData", temFlight.TemFlightArrival);
                                    AddFarePrice(paxFareChd, temClass, ref classPrice, "CHD");

                                    if (HttpContext.Current.Session["dataTransFeesOthers"] != null)
                                    {
                                        DataTable dataTF = dtTransFees();
                                        dataTF = (DataTable)HttpContext.Current.Session["dataTransFeesOthers"];

                                        HttpContext.Current.Session.Add("dataTFOthSellFlightByTemAddInfant", dataTF);
                                    }
                                }
                            }
                        }
                        //service charges
                        //ADDED BY KETEE, VAT

                        //amended by diana 20140121 - add initial value to 0, then add it
                        classPrice.ServChrg = 0;
                        classPrice.SSRChrg = 0;
                        classPrice.BaggageChrg = 0;
                        classPrice.MealChrg = 0;
                        classPrice.ComfortChrg = 0;
                        classPrice.SportChrg = 0;
                        classPrice.SeatChrg = 0;
                        classPrice.ServVAT = 0;
                        classPrice.InfantChrg = 0;
                        if (book.Passengers[0].PassengerFees.Length > 0 && book.Passengers[0].PassengerFees[0].ServiceCharges.Length > 0)
                        {
                            for (int i = 0; i < book.Passengers[0].PassengerFees[0].ServiceCharges.Length; i++)
                            {
                                if (book.Passengers[0].PassengerFees[0].FeeType != FeeType.SSRFee)
                                {
                                    switch (book.Passengers[0].PassengerFees[0].ServiceCharges[i].ChargeCode.ToString().ToUpper())
                                    {
                                        case "SVCF":
                                            //bdSvc += book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount;
                                            classPrice.ServChrg += book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount * temClass.TemClassPersonNumber;
                                            break;
                                        case "VAT":
                                            //bdVAT += book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount;
                                            classPrice.ServVAT += book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount * temClass.TemClassPersonNumber;
                                            break;
                                        default:
                                            classPrice.ServChrg += book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount * temClass.TemClassPersonNumber;
                                            break;
                                    }
                                }
                            }
                        }

                        for (int i = 0; i < book.Passengers.Length; i++)
                        {
                            for (int ii = 0; ii < book.Passengers[i].PassengerFees.Length; ii++)
                            {
                                if (book.Passengers[i].PassengerFees[ii].FeeType == FeeType.SSRFee)
                                {
                                    if (book.Passengers[i].PassengerFees[ii].FlightReference != "")
                                    {
                                        //if ((book.Passengers[i].PassengerFees[ii].FlightReference.Substring(16, 6) == temFlight.TemFlightDeparture + temFlight.TemFlightArrival))
                                        //{
                                        for (int y = 0; y < book.Passengers[i].PassengerFees[ii].ServiceCharges.Length; y++)
                                        {
                                            classPrice.InfantChrg += book.Passengers[i].PassengerFees[ii].ServiceCharges[y].Amount;
                                        }
                                        //}

                                    }
                                }
                            }
                        }

                        //classPrice.FullPrice += classPrice.ServChrg;
                        //bdFull += book.BookingSum.TotalCost;

                        classPrice.ClassID = temClass.TemClassId;
                        classPrice.FullPrice = book.BookingSum.TotalCost;

                        //added by diana 20131103 - for currency rate
                        classPrice.CurrencyRate = currRate;

                        UpdateClassPrice(classPrice);

                        DataRow row;
                        row = dataClassTrans.NewRow();
                        row["Quantity"] = quantityDepart;
                        row["FarePrice"] = classPrice.FarePrice;
                        row["FullPrice"] = classPrice.FullPrice;
                        row["SellSignature"] = signatureDepart;
                        dataClassTrans.Rows.Add(row);
                        //added by ketee, 20121016
                        row["ServChrg"] = classPrice.ServChrg;
                        row["SSRChrg"] = classPrice.SSRChrg;
                        //row["BaggageChrg"] = classPrice.BaggageChrg;
                        //row["MealChrg"] = classPrice.MealChrg;
                        //row["ComfortChrg"] = classPrice.ComfortChrg;
                        //row["SportChrg"] = classPrice.SportChrg;
                        row["SeatChrg"] = classPrice.SeatChrg;
                        row["InfantChrg"] = classPrice.InfantChrg;
                        //added by ketee, VAT
                        row["ServVAT"] = classPrice.ServVAT;
                        row["DetailCollectedAmt"] = 0;
                        row["RecordLocator"] = "";
                        //added by diana 20131103 - for currency rate
                        row["CurrencyRate"] = classPrice.CurrencyRate;

                        //added by ketee, breakdown fees 20130625
                        bdPaxFee += classPrice.PaxFeeChrg;
                        bdAPT += classPrice.TaxChrg;
                        bdchAPT += classPrice.TAxChrgChd;
                        bdFare += classPrice.FarePrice;
                        bdFuel += classPrice.FuelChrg;
                        bdInfant += classPrice.InfantChrg;
                        bdFull += book.BookingSum.TotalCost;
                        //commented by diana 20131103 - need to be checked
                        //if (bdFull != classPrice.FullPrice)
                        //{
                        //    throw new ApplicationException("SellFlightByTem - Booking amount is not taly.");
                        //}
                        bdOth += classPrice.OthChrg;
                        bdDisc += classPrice.DiscChrg;
                        bdPromoDisc += classPrice.PromoDiscChrg;
                        bdSvc += classPrice.ServChrg;
                        bdSSR += classPrice.SSRChrg;
                        //bdBaggage += classPrice.BaggageChrg;
                        //bdSport += classPrice.SportChrg;
                        //bdMeal += classPrice.MealChrg;
                        //bdComfort += classPrice.ComfortChrg;
                        bdSeat += classPrice.SeatChrg;
                        bdVAT += classPrice.ServVAT;

                        //save new data class into session
                        if (dataClassTrans.Rows.Count > 0)
                        {
                            HttpContext.Current.Session.Remove("dataClassTrans");
                            HttpContext.Current.Session.Add("dataClassTrans", dataClassTrans);
                        }

                    }
                }
                if (sellalready == 0)
                {
                    bError = true;

                    log.Warning(this, "Add Infant failed: " + SellSessionID);
                    return false;
                    //break;
                }
                else
                {
                    DataRow rowBD;
                    rowBD = dataBreakdownFee.NewRow();

                    rowBD["Fare"] = bdFare / (totalPaxADT + totalPaxCHD);
                    if (totalPaxCHD > 0)
                    {
                        rowBD["ChApt"] = bdchAPT / totalPaxCHD;
                    }
                    else
                    {
                        rowBD["ChApt"] = 0;
                    }
                    rowBD["Apt"] = bdAPT / totalPaxADT;
                    rowBD["PaxFee"] = bdPaxFee;
                    rowBD["Fuel"] = bdFuel;
                    rowBD["Svc"] = bdSvc;
                    rowBD["SSR"] = bdSSR;
                    rowBD["Seat"] = bdSeat;
                    rowBD["Infant"] = bdInfant;
                    rowBD["Oth"] = bdOth;
                    rowBD["Disc"] = bdDisc;
                    rowBD["PromoDisc"] = bdPromoDisc;
                    //added by ketee, VAT
                    rowBD["VAT"] = bdVAT;
                    //rowBD["SSR"] = 0;
                    dataBreakdownFee.Rows.Add(rowBD);

                    if (dataClassTrans.Rows.Count > 0)
                    {
                        HttpContext.Current.Session.Remove("dataBDFeeDepart");
                        HttpContext.Current.Session.Add("dataBDFeeDepart", dataBreakdownFee);
                    }

                    UpdateFlightPrice(temFlight.TemFlightId, decimal.Parse(rowBD["Fare"].ToString()), bdFull, bdAPT, bdPaxFee, bdchAPT, bdFuel, bdSvc, bdSSR, bdSeat, bdOth, bdDisc, bdPromoDisc, bdFull / temFlight.TemFlightPaxNum, bdVAT);
                    //return true;

                    //}
                    //else
                    //{
                    //    bError = true;
                    //    log.Warning(this, "Add Infant failed: " + SellSessionID);
                    //    break;


                    //}

                    if (bError == true)
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                HttpContext.Current.Session["errormsg"] = ex.ToString();
                return false;
            }


        }

        public IEnumerable<TemClassofService> ConvertToIEnum(DataTable dataTable)
        {
            if (dataTable != null && dataTable.Rows.Count > 0)
            {
                foreach (DataRow row in dataTable.Rows)
                {
                    yield return new TemClassofService
                    {
                        TemClassAgentName = row["AgentName"].ToString(),
                        TemClassClass = row["FareClass"].ToString(),
                        TemClassClass2 = row["FareClass2"].ToString(),
                        TemClassClassPrice = Convert.ToDecimal(row["FarePrice"]),
                        TemClassFareSellKey = row["FareSellKey"].ToString(),
                        TemClassFareSellKey2 = row["FareSellKey2"].ToString(),
                        TemClassFlightNumber = row["FlightNumber"].ToString(),
                        TemClassPersonNumber = Convert.ToInt16(row["Quantity"]),
                        TemClassAdultNumber = Convert.ToInt16(row["AdultPax"]),
                        TemClassChildNumber = Convert.ToInt16(row["ChildPax"]),
                        TemClassSellSignature = row["SellSignature"].ToString(),
                        TemClassSignature = row["Signature"].ToString(),
                        TemClassId = row["TemClassId"].ToString(),
                        TempFareApplicationType = row["FareApplicationType"].ToString(),
                        TempFareApplicationType2 = row["FareApplicationType2"].ToString(),
                        TemClassFullPrice = Convert.ToDecimal(row["FullPrice"]),
                        TempPromoDiscCharge = Convert.ToDecimal(row["PromoDiscChrg"])
                    };
                }
            }
        }

        //mainfunction
        public DataTable GetTemClassList(string flightNumber)
        {
            DataTable dataClass = new DataTable();
            DataTable tempDt = dtClass();
            string strExpr;
            string strSort;

            DataTable dataTransFees = new DataTable();
            DataTable tempDataTF = dtTransFees();

            strExpr = "FlightNumber = '" + flightNumber + "'";
            strSort = "";

            if (HttpContext.Current.Session["dataClass"] != null)
            {
                dataClass = (DataTable)HttpContext.Current.Session["dataClass"];
                DataRow[] foundRows = dataClass.Select(strExpr, strSort, DataViewRowState.Added);

                tempDt.Clear();

                foreach (DataRow row in foundRows)
                {
                    tempDt.ImportRow(row);
                }

                return tempDt;
            }
            else { return null; }

        }
        /*
        public void SellFlightByTem(TemFlight temFlight, TemFlight temFlight2, string LoginType, string LoginName, string LoginPWD, string LoginDomain, string SellSessionID)
        {
            IBookingManager bookingAPI = new BookingManagerClient();
            ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking(""); 
           
            DataTable dataClass = dtClass();
            DataTable dtTempClass = dtClass();
            DataTable dtTempClass2 = dtClass();
            

            dtTempClass = GetTemClassList(temFlight.TemFlightFlightNumber);
            dtTempClass2 = GetTemClassList(temFlight2.TemFlightFlightNumber);
            IEnumerable<TemClassofService> temClasslist = ConvertToIEnum(dtTempClass);
            IEnumerable<TemClassofService> temClasslist2 = ConvertToIEnum(dtTempClass2);
            int id = 0;

            //added by ketee,
            List<PassengerData> lstPassenger = new List<PassengerData>();
            PassengerData rowPassenger;

            int passengerno = 0;
            
            foreach (TemClassofService temClass in temClasslist)
            {
               
                    if (LoginType == "SkyAgent")
                    {
               
                        SellSessionID = apiBooking.AgentLogon("SkyAgent",LoginDomain,LoginName,LoginPWD);
                    }
                    else
                    {
                        SellSessionID = apiBooking.AgentLogon();
                    }
               
                temClass.TemClassSellSignature = SellSessionID;
                UpdateTemClass(temClass);
                SellRequest sellrequest = new SellRequest();
                sellrequest.Signature = SellSessionID;
                sellrequest.ContractVersion = this.ContractVersion;
                sellrequest.SellRequestData = new SellRequestData();
                sellrequest.SellRequestData.SellBy = SellBy.Journey;
                sellrequest.SellRequestData.SellJourneyRequest = new SellJourneyRequest();
                SellJourneyRequestData sjrd = new SellJourneyRequestData();
                sjrd.PaxCount = Convert.ToInt16(temClass.TemClassPersonNumber);
                sjrd.CurrencyCode = temFlight.TemFlightCurrencyCode.Trim();
                sjrd.Passengers = new Passenger[temClass.TemClassPersonNumber];
                for (int i = 0; i < temClass.TemClassPersonNumber; i++)
                {
                    sjrd.Passengers[i] = new Passenger();
                    sjrd.Passengers[i].PassengerNumber = Convert.ToInt16(passengerno);
                    sjrd.Passengers[i].State = MessageState.New;
                    sjrd.Passengers[i].PassengerID = passengerno;
                    sjrd.Passengers[i].PassengerTypeInfos = new PassengerTypeInfo[1];
                    sjrd.Passengers[i].PassengerTypeInfos[0] = new PassengerTypeInfo();
                    sjrd.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse("1994-1-1");
                    sjrd.Passengers[i].PassengerTypeInfos[0].PaxType = "ADT";
                    sjrd.Passengers[i].PassengerTypeInfos[0].State = MessageState.New;
                    sjrd.Passengers[i].PseudoPassenger = false;

                    //added by ketee
                    rowPassenger = new PassengerData();

                        rowPassenger.PassengerID = passengerno.ToString();
                    
                    rowPassenger.FirstName = "TBA";
                    rowPassenger.LastName = "TBA";
                    rowPassenger.PassportNo = "TBA";
                    rowPassenger.DOB = DateTime.Parse("1900-01-01");
                    rowPassenger.SyncCreate = DateTime.Now;
                    rowPassenger.LastSyncBy = "System";
                    lstPassenger.Add(rowPassenger);

                    passengerno++;
                }
                //added by ketee
                if (lstPassenger != null)
                {
                    HttpContext.Current.Session.Remove("listPassengers");
                    HttpContext.Current.Session.Add("listPassengers", lstPassenger);
                }

                sjrd.Journeys = new SellJourney[1];
                sjrd.Journeys[0] = new SellJourney();
                sjrd.Journeys[0].State = MessageState.New;
                sjrd.Journeys[0].NotForGeneralUse = false;
                if (temFlight.TemFlightTransit != "")
                { sjrd.Journeys[0].Segments = new SellSegment[2]; }
                else { sjrd.Journeys[0].Segments = new SellSegment[1]; }
                SellSegment srSegment = new SellSegment();
                srSegment.State = MessageState.New;
                srSegment.DepartureStation = temFlight.TemFlightDeparture.Trim();

                if (temFlight.TemFlightTransit != "")
                {
                    srSegment.ArrivalStation = temFlight.TemFlightTransit.Trim();
                }
                else
                {
                    srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                }
                
                srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd);
                srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta);
                srSegment.FlightDesignator = new FlightDesignator();
                srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber.Trim().PadLeft(4, ' ');
                srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
                srSegment.Fare = new SellFare();
                srSegment.Fare.State = MessageState.New;
                srSegment.Fare.ClassOfService = temClass.TemClassClass.Trim();
                srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
                srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey.Split('~')[4].ToString();
                srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey.Split('~')[3].ToString();
                
                srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey.Split('~')[6]);
                srSegment.Fare.FareClassOfService = temClass.TemClassClass.Trim();
                srSegment.Fare.IsAllotmentMarketFare = false;
                
                switch (temClass.TempFareApplicationType.ToString().ToLower())
                {
                    case "route":
                        srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                        break;
                    case "sector":
                        srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                        break;
                    case "governing":
                        srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                        break;
                    default:
                        srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                        break;
                }
                sjrd.Journeys[0].Segments[0] = srSegment;

                if (temFlight.TemFlightTransit != "")
                {
                    srSegment = new SellSegment();
                    srSegment.State = MessageState.New;
                    srSegment.DepartureStation = temFlight.TemFlightTransit.Trim();
                    srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                    srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd2);
                    srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta2);
                    srSegment.FlightDesignator = new FlightDesignator();
                    
                    srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber2.Trim();
                    srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();

                    srSegment.Fare = new SellFare();
                    srSegment.Fare.State = MessageState.New;
                    srSegment.Fare.ClassOfService = temClass.TemClassClass2.Trim();
                    srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();
                    srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey2.Split('~')[4].ToString();
                    srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey2.Split('~')[3].ToString();
                    
                    srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey2.Split('~')[6]);
                    srSegment.Fare.FareClassOfService = temClass.TemClassClass2.Trim();
                    srSegment.Fare.IsAllotmentMarketFare = false;
                    
                    switch (temClass.TempFareApplicationType2.ToString().ToLower())
                    {
                        case "route":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                            break;
                        case "sector":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                            break;
                        case "governing":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                            break;
                        default:
                            srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                            break;
                    }
                    sjrd.Journeys[0].Segments[1] = srSegment;
                }

                sellrequest.SellRequestData.SellJourneyRequest.SellJourneyRequestData = sjrd;
                //string requeststring = GetXMLString(sellrequest);
                SellResponse response = bookingAPI.Sell(sellrequest);
            }
            foreach (TemClassofService temClass2 in temClasslist2)
            {
                
                    if (LoginType == "SkyAgent")
                    {
                
                        SellSessionID = apiBooking.AgentLogon("SkyAgent", LoginDomain, LoginName, LoginPWD);
                    }
                    else
                    {
                        SellSessionID = apiBooking.AgentLogon();
                    }
                
                SellRequest sellrequest = new SellRequest();
                sellrequest.Signature = SellSessionID;
                sellrequest.ContractVersion = this.ContractVersion;
                sellrequest.SellRequestData = new SellRequestData();
                sellrequest.SellRequestData.SellBy = SellBy.Journey;
                sellrequest.SellRequestData.SellJourneyRequest = new SellJourneyRequest();
                SellJourneyRequestData sjrd = new SellJourneyRequestData();
                sjrd.PaxCount = Convert.ToInt16(temClass2.TemClassPersonNumber);
                sjrd.CurrencyCode = temFlight.TemFlightCurrencyCode.Trim();
                sjrd.Passengers = new Passenger[temClass2.TemClassPersonNumber];
                
                temClass2.TemClassSellSignature = SellSessionID;// SessionManager._signature;
                UpdateTemClass(temClass2);
                for (int i = 0; i < temClass2.TemClassPersonNumber; i++)
                {
                    sjrd.Passengers[i] = new Passenger();
                    sjrd.Passengers[i].PassengerNumber = Convert.ToInt16(passengerno);
                    sjrd.Passengers[i].State = MessageState.New;
                    sjrd.Passengers[i].PassengerID = passengerno;
                    sjrd.Passengers[i].PassengerTypeInfos = new PassengerTypeInfo[1];
                    sjrd.Passengers[i].PassengerTypeInfos[0] = new PassengerTypeInfo();
                    sjrd.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse("1994-1-1");
                    sjrd.Passengers[i].PassengerTypeInfos[0].PaxType = "ADT";
                    sjrd.Passengers[i].PassengerTypeInfos[0].State = MessageState.New;
                    sjrd.Passengers[i].PseudoPassenger = false;

                    //added by ketee
                    rowPassenger = new PassengerData();

                        rowPassenger.PassengerID = passengerno.ToString();
                    
                    rowPassenger.FirstName = "TBA";
                    rowPassenger.LastName = "TBA";
                    rowPassenger.PassportNo = "TBA";
                    rowPassenger.DOB = DateTime.Parse("1900-01-01");
                    rowPassenger.SyncCreate = DateTime.Now;
                    rowPassenger.LastSyncBy = "System";
                    lstPassenger.Add(rowPassenger);
                    passengerno++;
                }

                //added by ketee
                if (lstPassenger != null)
                {
                    HttpContext.Current.Session.Remove("listPassengers");
                    HttpContext.Current.Session.Add("listPassengers", lstPassenger);
                }
                sjrd.Journeys = new SellJourney[1];
                sjrd.Journeys[0] = new SellJourney();
                sjrd.Journeys[0].State = MessageState.New;
                sjrd.Journeys[0].NotForGeneralUse = false;
                if (temFlight2.TemFlightTransit != "")
                { sjrd.Journeys[0].Segments = new SellSegment[2]; }
                else { sjrd.Journeys[0].Segments = new SellSegment[1]; }
                SellSegment srSegment1 = new SellSegment();
                srSegment1.State = MessageState.New;
                srSegment1.DepartureStation = temFlight2.TemFlightDeparture.Trim();

                if (temFlight2.TemFlightTransit != "")
                {
                    srSegment1.ArrivalStation = temFlight2.TemFlightTransit.Trim();
                }
                else
                {
                    srSegment1.ArrivalStation = temFlight2.TemFlightArrival.Trim();
                }
                
                srSegment1.STD = Convert.ToDateTime(temFlight2.TemFlightStd);
                srSegment1.STA = Convert.ToDateTime(temFlight2.TemFlightSta);
                srSegment1.FlightDesignator = new FlightDesignator();
                srSegment1.FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber.Trim().PadLeft(4, ' ');
                srSegment1.FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode.Trim();
                srSegment1.Fare = new SellFare();
                srSegment1.Fare.State = MessageState.New;
                srSegment1.Fare.ClassOfService = temClass2.TemClassClass.Trim();
                srSegment1.Fare.CarrierCode = temFlight2.TemFlightCarrierCode.Trim();
                srSegment1.Fare.RuleNumber = temClass2.TemClassFareSellKey.Split('~')[4].ToString();// "AAB1";
                srSegment1.Fare.FareBasisCode = temClass2.TemClassFareSellKey.Split('~')[3].ToString();// "A00H00";
                
                srSegment1.Fare.FareSequence = Convert.ToInt16(temClass2.TemClassFareSellKey.Split('~')[6]);
                srSegment1.Fare.FareClassOfService = temClass2.TemClassClass.Trim();
                srSegment1.Fare.IsAllotmentMarketFare = false;                

                switch (temClass2.TempFareApplicationType.ToString().ToLower())
                {
                    case "route":
                        srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                        break;
                    case "sector":
                        srSegment1.Fare.FareApplicationType = FareApplicationType.Sector;
                        break;
                    case "governing":
                        srSegment1.Fare.FareApplicationType = FareApplicationType.Governing;
                        break;
                    default:
                        srSegment1.Fare.FareApplicationType = FareApplicationType.Unmapped;
                        break;
                }
                sjrd.Journeys[0].Segments[0] = srSegment1;

                if (temFlight2.TemFlightTransit != "")
                {
                    srSegment1 = new SellSegment();
                    srSegment1.State = MessageState.New;
                    srSegment1.DepartureStation = temFlight2.TemFlightTransit.Trim();
                    srSegment1.ArrivalStation = temFlight2.TemFlightArrival.Trim();
                    srSegment1.STD = Convert.ToDateTime(temFlight2.TemFlightStd2);
                    srSegment1.STA = Convert.ToDateTime(temFlight2.TemFlightSta2);
                    srSegment1.FlightDesignator = new FlightDesignator();
                    
                    srSegment1.FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber2.Trim();
                    srSegment1.FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode2.Trim();

                    srSegment1.Fare = new SellFare();
                    srSegment1.Fare.State = MessageState.New;
                    srSegment1.Fare.ClassOfService = temClass2.TemClassClass2.Trim();
                    srSegment1.Fare.CarrierCode = temFlight2.TemFlightCarrierCode2.Trim();
                    srSegment1.Fare.RuleNumber = temClass2.TemClassFareSellKey2.Split('~')[4].ToString();
                    srSegment1.Fare.FareBasisCode = temClass2.TemClassFareSellKey2.Split('~')[3].ToString();
                    
                    srSegment1.Fare.FareSequence = Convert.ToInt16(temClass2.TemClassFareSellKey2.Split('~')[6]);
                    srSegment1.Fare.FareClassOfService = temClass2.TemClassClass2.Trim();
                    srSegment1.Fare.IsAllotmentMarketFare = false;
                    
                    switch (temClass2.TempFareApplicationType2.ToString().ToLower())
                    {
                        case "route":
                            srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                            break;
                        case "sector":
                            srSegment1.Fare.FareApplicationType = FareApplicationType.Sector;
                            break;
                        case "governing":
                            srSegment1.Fare.FareApplicationType = FareApplicationType.Governing;
                            break;
                        default:
                            srSegment1.Fare.FareApplicationType = FareApplicationType.Unmapped;
                            break;
                    }
                    sjrd.Journeys[0].Segments[1] = srSegment1;
                }

                sellrequest.SellRequestData.SellJourneyRequest.SellJourneyRequestData = sjrd;
                //string requeststring = GetXMLString(sellrequest);
                SellResponse response = bookingAPI.Sell(sellrequest);
                
            }

        }
        */
        public Navitaire.BookingManager.Booking GetBookingFromState(string sessionID)
        {
            // Create an instance of the BookingService interface 
            //Navitaire.BookingManager.Booking stateBooking = new Navitaire.BookingManager.Booking();
            ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");
            //stateBooking = apiBooking.GetBookingFromState(sessionID);

            //GetBookingResponse bookResponse = new GetBookingResponse();

            //bookResponse.Booking = stateBooking;

            return apiBooking.GetBookingFromState(sessionID, 2);


        }

        public void UpdateTemClass(TemClassofService TemClass)
        {
            if (HttpContext.Current.Session["dataClass"] != null)
            {
                DataTable dt = dtClass();

                dt = (DataTable)HttpContext.Current.Session["dataClass"];

                DataRow[] temClassRow =
                dt.Select("TemClassId = '" + TemClass.TemClassId + "'");

                temClassRow[0]["SellSignature"] = TemClass.TemClassSellSignature;

                HttpContext.Current.Session.Remove("dataClass");
                HttpContext.Current.Session.Add("dataClass", dt);
            }

        }

        public void UpdateClassPrice(ClassPrice classPrice)
        {
            if (HttpContext.Current.Session["dataClass"] != null)
            {
                DataTable dt = dtClass();

                dt = (DataTable)HttpContext.Current.Session["dataClass"];

                DataRow[] temClassRow =
                dt.Select("TemClassId = '" + classPrice.ClassID + "'");

                temClassRow[0]["FarePrice"] = classPrice.FarePrice;
                temClassRow[0]["FullPrice"] = classPrice.FullPrice;
                temClassRow[0]["PaxFeeChrg"] = classPrice.PaxFeeChrg;
                temClassRow[0]["TaxChrg"] = classPrice.TaxChrg;
                temClassRow[0]["ChdTaxChrg"] = classPrice.TAxChrgChd;
                temClassRow[0]["OthChrg"] = classPrice.OthChrg;
                temClassRow[0]["DiscChrg"] = classPrice.DiscChrg;
                temClassRow[0]["PromoDiscChrg"] = classPrice.PromoDiscChrg;
                temClassRow[0]["FuelChrg"] = classPrice.FuelChrg;
                temClassRow[0]["ServChrg"] = classPrice.ServChrg;
                temClassRow[0]["SSRChrg"] = classPrice.SSRChrg;
                temClassRow[0]["InfantChrg"] = classPrice.InfantChrg;
                //temClassRow[0]["BaggageChrg"] = classPrice.BaggageChrg;
                //temClassRow[0]["MealChrg"] = classPrice.MealChrg;
                //temClassRow[0]["ComfortChrg"] = classPrice.ComfortChrg;
                //temClassRow[0]["SportChrg"] = classPrice.SportChrg;
                temClassRow[0]["SeatChrg"] = classPrice.SeatChrg;

                if (classPrice.ServVAT == null)
                {
                    classPrice.ServVAT = 0;
                }
                else if (classPrice.ServVAT.ToString() == "")
                {
                    classPrice.ServVAT = 0;
                }

                if (classPrice.CurrencyRate == null)
                {
                    classPrice.CurrencyRate = 1;
                }
                else if (classPrice.CurrencyRate.ToString() == "")
                {
                    classPrice.CurrencyRate = 1;
                }

                //added by ketee
                temClassRow[0]["ServVAT"] = classPrice.ServVAT;
                temClassRow[0]["CurrencyRate"] = classPrice.CurrencyRate;

                HttpContext.Current.Session.Remove("dataClass");
                HttpContext.Current.Session.Add("dataClass", dt);
            }

        }

        private string GetXMLString(object Obj)
        {
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(Obj.GetType());
            System.IO.StringWriter writer = new System.IO.StringWriter();
            x.Serialize(writer, Obj);

            return writer.ToString();
        }

        public decimal GetTotalCharge(string PNR, string Origin, string Destination)
        {
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            decimal total = 0;
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    strSQL = "SELECT FarePerPax, LineTotal,LineTax,LinePaxFee,LineFee,LineCharge,LineVAT,LineOth, LineProcess, LineSSR, LineSeat, LineNameChange, LineInfant, LineDisc, LinePromoDisc, PaxAdult, PaxChild FROM BK_TRANSDTL WHERE RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "' AND Origin='" + Origin + "' AND Destination='" + Destination + "' order by DepartureDate";
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        total = (decimal.Parse(dt.Rows[0]["FarePerPax"].ToString())) * (decimal.Parse(dt.Rows[0]["PaxAdult"].ToString()) + decimal.Parse(dt.Rows[0]["PaxChild"].ToString())) + decimal.Parse(dt.Rows[0]["LineTax"].ToString()) + decimal.Parse(dt.Rows[0]["LinePaxFee"].ToString()) + decimal.Parse(dt.Rows[0]["LineCharge"].ToString()) + decimal.Parse(dt.Rows[0]["LineVAT"].ToString()) + decimal.Parse(dt.Rows[0]["LineOth"].ToString()) + decimal.Parse(dt.Rows[0]["LineProcess"].ToString()) + decimal.Parse(dt.Rows[0]["LineSSR"].ToString()) + decimal.Parse(dt.Rows[0]["LineSeat"].ToString()) + decimal.Parse(dt.Rows[0]["LineNameChange"].ToString()) + decimal.Parse(dt.Rows[0]["LineInfant"].ToString()) + decimal.Parse(dt.Rows[0]["LineDisc"].ToString()) + decimal.Parse(dt.Rows[0]["LinePromoDisc"].ToString());
                        return total;
                    }
                    else
                    {
                        return 0;
                    }
                }
                return 0;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        public int GetChangeCount(string TransID)
        {
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            decimal total = 0;
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    strSQL = "SELECT SUM(ChangeCount) AS ChgCount FROM BK_PASSENGERLIST WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' GROUP BY TransID";
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        return Convert.ToInt32(dt.Rows[0]["ChgCount"].ToString());
                    }
                    else
                    {
                        return 0;
                    }
                }
                return 0;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        //added by diana 20140422, get collectedamount for each PNR
        public decimal GetTotalCollectedAmount(string PNR, bool ReturnOnly = false)
        {
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            decimal total = 0;
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    if (ReturnOnly == false)
                    {
                        strSQL = "SELECT SUM(DetailCollectedAmt) AS TotalCollectedAmount FROM BK_TRANSDTL WHERE RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "' GROUP BY RecordLocator";
                    }
                    else
                    {
                        strSQL = "SELECT TOP 1 LineTotal AS TotalCollectedAmount FROM BK_TRANSDTL WHERE RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "' ORDER BY SeqNo DESC";
                    }

                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        if (!DBNull.Value.Equals(dt.Rows[0]["TotalCollectedAmount"]))
                        {
                            total = (decimal.Parse(dt.Rows[0]["TotalCollectedAmount"].ToString()));
                        }
                        return total;
                    }
                    else
                    {
                        return 0;
                    }
                }
                return 0;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        //added by diana 20140422, get collectedamount for each PNR
        public decimal GetTotalDueAmount(string PNR)
        {
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            decimal total = 0;
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    strSQL = "SELECT SUM(LineTotal) AS TotalLineTotal, SUM(DetailCollectedAmt) AS TotalCollectedAmount FROM BK_TRANSDTL WHERE RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "' GROUP BY RecordLocator";
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        if (!DBNull.Value.Equals(dt.Rows[0]["TotalLineTotal"]))
                        {
                            total = (decimal.Parse(dt.Rows[0]["TotalLineTotal"].ToString()));
                        }
                        if (!DBNull.Value.Equals(dt.Rows[0]["TotalCollectedAmount"]))
                        {
                            total = total - (decimal.Parse(dt.Rows[0]["TotalCollectedAmount"].ToString()));
                        }
                        return total;
                    }
                    else
                    {
                        return 0;
                    }
                }
                return 0;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        //added by romy for update passenger
        public bool CheckCompletePassenger70(string TransID, bool IsInt = false)
        {
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            string totalpax = "0", totalupload = "0";
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    string CheckPassport = "";
                    if (IsInt == true)
                        CheckPassport = " OR PassportNo = 'TBA' or IssuingCountry = '' OR ExpiryDate IS NULL";

                    strSQL = "SELECT COUNT(TransID)TotalRow, TotalPassenger, B1.TransID FROM BK_PASSENGERLIST B1 ";
                    strSQL += "OUTER APPLY(SELECT COUNT(B2.PassengerID) TotalPassenger FROM BK_PASSENGERLIST B2 ";
                    strSQL += "WHERE LEN(B2.RecordLocator) >= 6 AND(B2.Title = '' OR B2.Gender = '' OR B2.FirstName = 'TBA' OR ";
                    strSQL += "B2.LastName = '' OR B2.Nationality = '' OR B2.DOB = '1900-01-01 00:00:00'" + CheckPassport + ") AND B2.Title <> 'INFT' AND B1.TransID = B2.TransID) B2 ";
                    strSQL += "WHERE B1.Title <> 'INFT' AND B1.TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND LEN(B1.RecordLocator) >= 6 GROUP BY B1.TransID, TotalPassenger";

                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt != null)
                    {
                        totalpax = Convert.ToString((Convert.ToDouble(dt.Rows[0]["TotalRow"]) * 0.7).ToString().Split('.')[0]);
                        totalupload = Convert.ToString(dt.Rows[0]["TotalPassenger"]);
                        if ((Convert.ToDouble(dt.Rows[0]["TotalRow"]) - Convert.ToDouble((Convert.ToDouble(dt.Rows[0]["TotalRow"]) * 0.7).ToString().Split('.')[0])) >= Convert.ToDouble(dt.Rows[0]["TotalPassenger"]))
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        //added by diana 20140604, check for complete passenger
        public bool CheckCompletePassenger(string TransID, bool IsInt = false)
        {
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            decimal total = 0;
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    string CheckPassport = "";
                    if (IsInt == true)
                        CheckPassport = " OR PassportNo = 'TBA' or IssuingCountry = '' OR ExpiryDate IS NULL";

                    strSQL = "SELECT PassengerID FROM BK_PASSENGERLIST WHERE LEN(RecordLocator) >= 6 AND TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND (Title = '' OR Gender = '' OR FirstName = 'TBA' OR 'LastName' = '' OR Nationality = '' OR DOB = '1900-01-01 00:00:00'" + CheckPassport + ")"; //)";
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        //added by diana 20140605, get transaction status
        public byte GetTransStatus(string TransID)
        {
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            decimal total = 0;
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    strSQL = "SELECT TransStatus FROM BK_TRANSMAIN WHERE TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'";
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        return (byte)dt.Rows[0]["TransStatus"];
                    }
                    else
                    {
                        return 0;
                    }
                }
                return 0;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }

        public DataTable GetKeyFieldDetailByPNR(string PNR, string TransID = "")
        {
            log.Info(this, "GetKeyFieldDetailByPNR: " + PNR);

            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();
                    if (TransID != "")
                    {
                        strSQL = "SELECT RecordLocator, TransID, SeqNo FROM BK_TRANSDTL WHERE RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "' AND TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' order by DepartureDate";
                    }
                    else
                    {
                        strSQL = "SELECT RecordLocator, TransID, SeqNo FROM BK_TRANSDTL WHERE RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "' order by DepartureDate";
                    }
                    log.Info(this, strSQL);
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        return dt;
                    }
                    else
                    {
                        return null;
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                log.Error(this, ex);
                return null;
            }
        }

        public DataTable GetKeyFieldDetailByPNRMoveFlight(string PNR, string TransID)
        {
            log.Info(this, "GetKeyFieldDetailByPNR: " + PNR);

            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    strSQL = "SELECT RecordLocator, TransID, SeqNo FROM BK_TRANSDTL WHERE RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "' AND TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' order by DepartureDate";
                    log.Info(this, strSQL);
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        return dt;
                    }
                    else
                    {
                        return null;
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                log.Error(this, ex);
                return null;
            }
        }

        public DataTable GetKeyFieldDetailBySignature(string signature)
        {
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    strSQL = "SELECT RecordLocator, TransID, SeqNo FROM BK_TRANSDTL WHERE SellKey = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, signature) + "' order by SeqNo";
                    log.Info(this, strSQL);
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        return dt;
                    }
                    else
                    {
                        return null;
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                log.Error(this, ex);
                return null;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        public DataTable GetKeyFieldMainByTransID(string TransID)
        {
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            try
            {
                using (var connection = new SqlConnection(ConnStr))
                {
                    connection.Open();
                    strSQL = "SELECT AgentID, AgentCatgID, TransType, BookingDate, TransTotalPax FROM BK_TRANSMAIN WHERE TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'";
                    SqlCommand cmd = new SqlCommand(strSQL, connection);
                    SqlDataAdapter da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    connection.Close();
                    if (dt.Rows.Count > 0)
                    {
                        return dt;
                    }
                    else
                    {
                        return null;
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                log.Error(this, ex);
                return null;
            }
        }

        public Boolean SaveListBookingDetail(List<BookingTransactionDetail> lstBookingTransDetail, EnumSaveType saveType)
        {
            try
            {
                bool rValue = false;
                ArrayList lstSQL = new ArrayList();
                string strSQL = string.Empty;
                foreach (BookingTransactionDetail BookingTransDetail in lstBookingTransDetail)
                {
                    objSQL.AddField("RecordLocator", BookingTransDetail.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransID", BookingTransDetail.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SeqNo", BookingTransDetail.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CarrierCode", BookingTransDetail.CarrierCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightNo", BookingTransDetail.FlightNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DepartureDate", BookingTransDetail.DepatureDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DepartureDate2", BookingTransDetail.DepatureDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightDura", BookingTransDetail.FlightDura, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightDura2", BookingTransDetail.FlightDura2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Origin", BookingTransDetail.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Transit", BookingTransDetail.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Destination", BookingTransDetail.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ArrivalDate", BookingTransDetail.ArrivalDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ArrivalDate2", BookingTransDetail.ArrivalDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FareClass", BookingTransDetail.FareClass, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FarePerPax", BookingTransDetail.FarePerPax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineTotal", BookingTransDetail.LineTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineTax", BookingTransDetail.LineTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LinePaxFee", BookingTransDetail.LinePaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineFee", BookingTransDetail.LineFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineOth", BookingTransDetail.LineOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineProcess", BookingTransDetail.LineProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineSSR", BookingTransDetail.LineSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineSeat", BookingTransDetail.LineSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineNameChange", BookingTransDetail.LineNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineInfant", BookingTransDetail.LineInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineDisc", BookingTransDetail.LineDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LinePromoDisc", BookingTransDetail.LinePromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("AttemptCount", BookingTransDetail.AttemptCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Currency", BookingTransDetail.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaxAdult", BookingTransDetail.PaxAdult, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaxChild", BookingTransDetail.PaxChild, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransVoid", BookingTransDetail.TransVoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CreateBy", BookingTransDetail.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncCreate", BookingTransDetail.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncLastUpd", BookingTransDetail.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LastSyncBy", BookingTransDetail.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DetailCollectedAmt", BookingTransDetail.CollectedAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PayDueAmount1", BookingTransDetail.PayDueAmount1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PayDueDate1", BookingTransDetail.PayDueDate1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PayDueAmount2", BookingTransDetail.PayDueAmount2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PayDueDate2", BookingTransDetail.PayDueDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PayDueAmount3", BookingTransDetail.PayDueAmount3, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PayDueDate3", BookingTransDetail.PayDueDate3, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SellKey", BookingTransDetail.Signature, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FareSellKey", BookingTransDetail.FareSellKey, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("OverridedFareSellKey", BookingTransDetail.OverridedFareSellKey, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                    switch (saveType)
                    {
                        case EnumSaveType.Insert:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSDTL", string.Empty);
                            break;
                        case EnumSaveType.Update:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.TransID='" + BookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + BookingTransDetail.SeqNo + "'");
                            break;
                    }
                    lstSQL.Add(strSQL);
                }

                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);

                return rValue;
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                log.Error(this, ex);
                return false;
            }
        }

        public Boolean SaveDetailBatch(List<BookingTransactionDetail> lstBookingTransDetail, BookingTransTender BookingTransTender, EnumSaveType saveType)
        {
            try
            {
                bool rValue = false;
                ArrayList lstSQL = new ArrayList();
                string strSQL = string.Empty;
                string str = "";
                foreach (BookingTransactionDetail BookingTransDetail in lstBookingTransDetail)
                {
                    objSQL.AddField("RecordLocator", BookingTransDetail.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransID", BookingTransDetail.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SeqNo", BookingTransDetail.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CarrierCode", BookingTransDetail.CarrierCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightNo", BookingTransDetail.FlightNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DepartureDate", BookingTransDetail.DepatureDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DepartureDate2", BookingTransDetail.DepatureDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightDura", BookingTransDetail.FlightDura, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightDura2", BookingTransDetail.FlightDura2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Origin", BookingTransDetail.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Transit", BookingTransDetail.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Destination", BookingTransDetail.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ArrivalDate", BookingTransDetail.ArrivalDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ArrivalDate2", BookingTransDetail.ArrivalDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FareClass", BookingTransDetail.FareClass, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FarePerPax", BookingTransDetail.FarePerPax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineTotal", BookingTransDetail.LineTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineTax", BookingTransDetail.LineTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LinePaxFee", BookingTransDetail.LinePaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineFee", BookingTransDetail.LineFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineOth", BookingTransDetail.LineOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineProcess", BookingTransDetail.LineProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineSSR", BookingTransDetail.LineSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineSeat", BookingTransDetail.LineSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineNameChange", BookingTransDetail.LineNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineInsureFee", BookingTransDetail.LineInsureFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);//added by romy for insure
                    objSQL.AddField("LineInfant", BookingTransDetail.LineInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineDisc", BookingTransDetail.LineDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LinePromoDisc", BookingTransDetail.LinePromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("AttemptCount", BookingTransDetail.AttemptCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Currency", BookingTransDetail.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaxAdult", BookingTransDetail.PaxAdult, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaxChild", BookingTransDetail.PaxChild, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransVoid", BookingTransDetail.TransVoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CreateBy", BookingTransDetail.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncCreate", BookingTransDetail.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncLastUpd", BookingTransDetail.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LastSyncBy", BookingTransDetail.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DetailCollectedAmt", BookingTransDetail.CollectedAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SellKey", BookingTransDetail.Signature, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    //added by ketee
                    objSQL.AddField("NextDueDate", BookingTransDetail.NextDueDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("NextDueAmount", BookingTransDetail.NextDueAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PayDueDate1", BookingTransDetail.PayDueDate1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PayDueAmount1", BookingTransDetail.PayDueAmount1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PayDueDate2", BookingTransDetail.PayDueDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PayDueAmount2", BookingTransDetail.PayDueAmount2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PayDueDate3", BookingTransDetail.PayDueDate3, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PayDueAmount3", BookingTransDetail.PayDueAmount3, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("RemindAttempt", BookingTransDetail.RemindAttempt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("RemindLog", BookingTransDetail.RemindLog, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                    switch (saveType)
                    {
                        case EnumSaveType.Insert:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSDTL", string.Empty);
                            break;
                        case EnumSaveType.Update:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.TransID='" + BookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + BookingTransDetail.SeqNo + "'");
                            break;
                    }
                    lstSQL.Add(strSQL);
                    str += strSQL + "\n";
                }

                if (BookingTransTender != null)
                {
                    objSQL.AddField("TransID", BookingTransTender.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SeqNo", BookingTransTender.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransDate", BookingTransTender.TransDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    //objSQL.AddField("PaymentDate", BookingTransTend, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Currency", BookingTransTender.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CurrencyPaid", BookingTransTender.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TenderID", BookingTransTender.TenderID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FeeType", BookingTransTender.FeeType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TenderAmt", BookingTransTender.TenderAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ExchgRate", BookingTransTender.ExchgRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TenderDue", BookingTransTender.TenderDue, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FeeAmt", BookingTransTender.FeeAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PayAmt", BookingTransTender.PayAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Transvoid", BookingTransTender.Transvoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncCreate", BookingTransTender.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("RefNo", BookingTransTender.RefNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("AuthorizationCode", BookingTransTender.AuthorizationCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("MerchantID", BookingTransTender.MerchantID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CreateBy", BookingTransTender.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                    strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSTENDER", string.Empty);

                    lstSQL.Add(strSQL);
                    str += strSQL + "\n";
                }
                log.Info(this, str);
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);

                return rValue;

            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                log.Error(this, ex);
                return false;
            }
        }

        public BookingTransactionMain SaveHeaderDetailTrans(BookingTransactionMain BookingTransMain, List<BookingTransactionDetail> lstBookingTransDetail, BookingTransTender BookingTransTender, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                objSQL.AddField("TransID", BookingTransMain.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransType", BookingTransMain.TransType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AgentID", BookingTransMain.AgentID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AgentCatgID", BookingTransMain.AgentCatgID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("BookingDate", BookingTransMain.BookingDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx1", BookingTransMain.PaymentDateEx1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx1", BookingTransMain.PaymentAmtEx1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx2", BookingTransMain.PaymentDateEx2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx2", BookingTransMain.PaymentAmtEx2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx3", BookingTransMain.PaymentDateEx3, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx3", BookingTransMain.PaymentAmtEx3, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDate", BookingTransMain.PaymentDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CancelDate", BookingTransMain.CancelDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ExpiryDate", BookingTransMain.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("STDDate", BookingTransMain.STDDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Currency", BookingTransMain.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CurrencyPaid", BookingTransMain.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CollectedAmt", BookingTransMain.CollectedAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtAVG", BookingTransMain.TotalAmtAVG, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtGoing", BookingTransMain.TotalAmtGoing, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtReturn", BookingTransMain.TotalAmtReturn, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransSubTotal", BookingTransMain.TransSubTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalAmt", BookingTransMain.TransTotalAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalFee", BookingTransMain.TransTotalFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalTax", BookingTransMain.TransTotalTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPaxFee", BookingTransMain.TransTotalPaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalOth", BookingTransMain.TransTotalOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalSSR", BookingTransMain.TransTotalSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalDisc", BookingTransMain.TransTotalDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPromoDisc", BookingTransMain.TransTotalPromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPAX", BookingTransMain.TransTotalPAX, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalSeat", BookingTransMain.TransTotalSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalNameChange", BookingTransMain.TransTotalNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalProcess", BookingTransMain.TransTotalProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalInfant", BookingTransMain.TransTotalInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransRemark1", BookingTransMain.TransRemark1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                objSQL.AddField("TransRemark2", BookingTransMain.TransRemark2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                objSQL.AddField("TransStatus", BookingTransMain.TransStatus, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Posted", BookingTransMain.Posted, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CreateBy", BookingTransMain.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", BookingTransMain.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncLastUpd", BookingTransMain.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LastSyncBy", BookingTransMain.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CurReminderDate", BookingTransMain.CurReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("NextReminderDate", BookingTransMain.NextReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ReminderType", BookingTransMain.ReminderType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PromoCode", BookingTransMain.PromoCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                switch (saveType)
                {
                    case EnumSaveType.Insert:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSMAIN", string.Empty);
                        break;
                    case EnumSaveType.Update:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSMAIN", "BK_TRANSMAIN.TransID='" + BookingTransMain.TransID + "'" + " AND BK_TRANSMAIN.TransType='" + BookingTransMain.TransType + "' AND BK_TRANSMAIN.AgentID='" + BookingTransMain.AgentID + "' AND BK_TRANSMAIN.AgentCatgID='" + BookingTransMain.AgentCatgID + "' AND BK_TRANSMAIN.BookingDate='" + BookingTransMain.BookingDate + "'");
                        break;
                }
                lstSQL.Add(strSQL);
                foreach (BookingTransactionDetail pBookingTransDetail in lstBookingTransDetail)
                {
                    objSQL.AddField("RecordLocator", pBookingTransDetail.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransID", pBookingTransDetail.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SeqNo", pBookingTransDetail.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CarrierCode", pBookingTransDetail.CarrierCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightNo", pBookingTransDetail.FlightNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DepartureDate", pBookingTransDetail.DepatureDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DepartureDate2", pBookingTransDetail.DepatureDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightDura", pBookingTransDetail.FlightDura, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightDura2", pBookingTransDetail.FlightDura2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Origin", pBookingTransDetail.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Transit", pBookingTransDetail.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Destination", pBookingTransDetail.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ArrivalDate", pBookingTransDetail.ArrivalDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ArrivalDate2", pBookingTransDetail.ArrivalDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FareClass", pBookingTransDetail.FareClass, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FarePerPax", pBookingTransDetail.FarePerPax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineTotal", pBookingTransDetail.LineTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineTax", pBookingTransDetail.LineTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LinePaxFee", pBookingTransDetail.LinePaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineFee", pBookingTransDetail.LineFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineOth", pBookingTransDetail.LineOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineProcess", pBookingTransDetail.LineProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineSSR", pBookingTransDetail.LineSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineSeat", pBookingTransDetail.LineSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineNameChange", pBookingTransDetail.LineNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineInsureFee", pBookingTransDetail.LineInsureFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);//added by romy for insure
                    objSQL.AddField("LineInfant", pBookingTransDetail.LineInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineDisc", pBookingTransDetail.LineDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LinePromoDisc", pBookingTransDetail.LinePromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("AttemptCount", pBookingTransDetail.AttemptCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Currency", pBookingTransDetail.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaxAdult", pBookingTransDetail.PaxAdult, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaxChild", pBookingTransDetail.PaxChild, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransVoid", pBookingTransDetail.TransVoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CreateBy", pBookingTransDetail.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncCreate", pBookingTransDetail.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncLastUpd", pBookingTransDetail.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LastSyncBy", pBookingTransDetail.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DetailCollectedAmt", pBookingTransDetail.CollectedAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SellKey", pBookingTransDetail.Signature, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                    switch (saveType)
                    {
                        case EnumSaveType.Insert:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSDTL", string.Empty);
                            break;
                        /*
                        case EnumSaveType.Update:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.RecordLocator='" + pBookingTransDetail.RecordLocator + "' AND BK_TRANSDTL.TransID='" + pBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBookingTransDetail.SeqNo + "'");
                            break;*/
                        case EnumSaveType.Update:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.TransID='" + pBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBookingTransDetail.SeqNo + "'");
                            break;
                    }
                    lstSQL.Add(strSQL);
                }

                objSQL.AddField("TransID", BookingTransTender.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SeqNo", BookingTransTender.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransDate", BookingTransTender.TransDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Currency", BookingTransTender.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CurrencyPaid", BookingTransTender.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TenderID", BookingTransTender.TenderID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("FeeType", BookingTransTender.FeeType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TenderAmt", BookingTransTender.TenderAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ExchgRate", BookingTransTender.ExchgRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TenderDue", BookingTransTender.TenderDue, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("FeeAmt", BookingTransTender.FeeAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PayAmt", BookingTransTender.PayAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Transvoid", BookingTransTender.Transvoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", BookingTransTender.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("RefNo", BookingTransTender.RefNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AuthorizationCode", BookingTransTender.AuthorizationCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("MerchantID", BookingTransTender.MerchantID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CreateBy", BookingTransTender.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSTENDER", string.Empty);

                lstSQL.Add(strSQL);



                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return null;
                }
                return GetSingleBK_TRANSMAIN(BookingTransMain.TransID, BookingTransMain.TransType, BookingTransMain.AgentID, BookingTransMain.AgentCatgID, BookingTransMain.BookingDate);
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                log.Error(this, ex);
                return null;
            }
        }

        public bool SetNextTransAmount(string TransID = "", string recordLocator = "", int NextDue = 2, decimal amountdtl = 0, decimal amountmain = 0)
        {
            try
            {
                string strSQL = "";
                ArrayList lstSQL = new ArrayList();
                bool rValue = false;
                string updateRecordLocator = "";

                strSQL = "UPDATE BK_TRANSDTL SET PayDueAmount" + NextDue + " = " + amountdtl + "  WHERE TransID ='" + TransID + "' AND RecordLocator = '" + recordLocator + "';";
                log.Info(this, "SetNextTransAmount BK_TRANSDTL: " + strSQL);
                lstSQL.Add(strSQL);

                strSQL = "UPDATE BK_TRANSMAIN SET PaymentAmtEx" + NextDue + " = " + amountmain + " WHERE TransID = '" + TransID + "';";
                log.Info(this, "SetNextTransAmount BK_TRANSMAIN: " + strSQL);
                lstSQL.Add(strSQL);


                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return false;
                }

                return true;
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                log.Error(ex, "Function: SetTransDetailStatus fail");
                return false;
                //throw new ApplicationException("Data not found");
            }
            finally
            {
                //lstSQL = null;
            }
        }

        public bool SetForfeitedAmount(string TransID = "", string recordLocator = "", decimal forfeitedAmount = 0)
        {
            try
            {
                string strSQL = "";
                ArrayList lstSQL = new ArrayList();
                bool rValue = false;
                string updateRecordLocator = "";

                strSQL = "UPDATE BK_TRANSMAIN SET ForfeitedAmount = ForfeitedAmount + " + forfeitedAmount + " WHERE TransID = '" + TransID + "';";
                log.Info(this, "SetForfeitedAmount BK_TRANSMAIN: " + strSQL);
                lstSQL.Add(strSQL);


                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return false;
                }

                return true;
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                log.Error(ex, "Function: SetForfeitedAmount fail");
                return false;
                //throw new ApplicationException("Data not found");
            }
            finally
            {
                //lstSQL = null;
            }
        }

        public BookingTransactionMain SaveHeaderDetail(BookingTransactionMain BookingTransMain, List<BookingTransactionDetail> lstBookingTransDetail, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                if (BookingTransMain != null)
                {
                    objSQL.AddField("TransID", BookingTransMain.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransType", BookingTransMain.TransType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("AgentID", BookingTransMain.AgentID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("AgentCatgID", BookingTransMain.AgentCatgID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("BookingDate", BookingTransMain.BookingDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDateEx1", BookingTransMain.PaymentDateEx1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentAmtEx1", BookingTransMain.PaymentAmtEx1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDateEx2", BookingTransMain.PaymentDateEx2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentAmtEx2", BookingTransMain.PaymentAmtEx2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDateEx3", BookingTransMain.PaymentDateEx3, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentAmtEx3", BookingTransMain.PaymentAmtEx3, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDate", BookingTransMain.PaymentDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CancelDate", BookingTransMain.CancelDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ExpiryDate", BookingTransMain.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("STDDate", BookingTransMain.STDDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Currency", BookingTransMain.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CurrencyPaid", BookingTransMain.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CollectedAmt", BookingTransMain.CollectedAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TotalAmtAVG", BookingTransMain.TotalAmtAVG, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TotalAmtGoing", BookingTransMain.TotalAmtGoing, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TotalAmtReturn", BookingTransMain.TotalAmtReturn, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransSubTotal", BookingTransMain.TransSubTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalAmt", BookingTransMain.TransTotalAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalFee", BookingTransMain.TransTotalFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalTax", BookingTransMain.TransTotalTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalPaxFee", BookingTransMain.TransTotalPaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalOth", BookingTransMain.TransTotalOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalSSR", BookingTransMain.TransTotalSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalDisc", BookingTransMain.TransTotalDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalPromoDisc", BookingTransMain.TransTotalPromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalPAX", BookingTransMain.TransTotalPAX, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalSeat", BookingTransMain.TransTotalSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalNameChange", BookingTransMain.TransTotalNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalProcess", BookingTransMain.TransTotalProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalInfant", BookingTransMain.TransTotalInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransRemark1", BookingTransMain.TransRemark1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                    objSQL.AddField("TransRemark2", BookingTransMain.TransRemark2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                    objSQL.AddField("TransStatus", BookingTransMain.TransStatus, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Posted", BookingTransMain.Posted, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CreateBy", BookingTransMain.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncCreate", BookingTransMain.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncLastUpd", BookingTransMain.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LastSyncBy", BookingTransMain.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CurReminderDate", BookingTransMain.CurReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("NextReminderDate", BookingTransMain.NextReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ReminderType", BookingTransMain.ReminderType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PromoCode", BookingTransMain.PromoCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    switch (saveType)
                    {
                        case EnumSaveType.Insert:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSMAIN", string.Empty);
                            break;
                        case EnumSaveType.Update:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSMAIN", "BK_TRANSMAIN.TransID='" + BookingTransMain.TransID + "'" + " AND BK_TRANSMAIN.TransType='" + BookingTransMain.TransType + "' AND BK_TRANSMAIN.AgentID='" + BookingTransMain.AgentID + "' AND BK_TRANSMAIN.AgentCatgID='" + BookingTransMain.AgentCatgID + "' AND BK_TRANSMAIN.BookingDate='" + BookingTransMain.BookingDate + "'");
                            break;
                    }
                    lstSQL.Add(strSQL);
                }

                if (lstBookingTransDetail != null)
                {
                    foreach (BookingTransactionDetail pBookingTransDetail in lstBookingTransDetail)
                    {
                        string[] FlightNo = pBookingTransDetail.FlightNo.Split(' ');
                        objSQL.AddField("RecordLocator", pBookingTransDetail.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransID", pBookingTransDetail.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SeqNo", pBookingTransDetail.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CarrierCode", pBookingTransDetail.CarrierCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightNo", FlightNo[FlightNo.Length - 1], SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DepartureDate", pBookingTransDetail.DepatureDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DepartureDate2", pBookingTransDetail.DepatureDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightDura", pBookingTransDetail.FlightDura, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightDura2", pBookingTransDetail.FlightDura2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Origin", pBookingTransDetail.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Transit", pBookingTransDetail.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Destination", pBookingTransDetail.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ArrivalDate", pBookingTransDetail.ArrivalDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ArrivalDate2", pBookingTransDetail.ArrivalDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FareClass", pBookingTransDetail.FareClass, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FarePerPax", pBookingTransDetail.FarePerPax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineTotal", pBookingTransDetail.LineTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineTax", pBookingTransDetail.LineTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LinePaxFee", pBookingTransDetail.LinePaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineFee", pBookingTransDetail.LineFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineOth", pBookingTransDetail.LineOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineProcess", pBookingTransDetail.LineProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineSSR", pBookingTransDetail.LineSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineSeat", pBookingTransDetail.LineSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineNameChange", pBookingTransDetail.LineNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineInsureFee", pBookingTransDetail.LineInsureFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);//added by romy for insure
                        objSQL.AddField("LineInfant", pBookingTransDetail.LineInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineDisc", pBookingTransDetail.LineDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LinePromoDisc", pBookingTransDetail.LinePromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                        //added by diana 20170129, store pay due amount
                        objSQL.AddField("PayDueAmount1", pBookingTransDetail.PayDueAmount1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PayDueDate1", pBookingTransDetail.PayDueDate1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PayDueAmount2", pBookingTransDetail.PayDueAmount2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PayDueDate2", pBookingTransDetail.PayDueDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PayDueAmount3", pBookingTransDetail.PayDueAmount3, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PayDueDate3", pBookingTransDetail.PayDueDate3, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);

                        objSQL.AddField("AttemptCount", pBookingTransDetail.AttemptCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Currency", pBookingTransDetail.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaxAdult", pBookingTransDetail.PaxAdult, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaxChild", pBookingTransDetail.PaxChild, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransVoid", pBookingTransDetail.TransVoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CreateBy", pBookingTransDetail.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncCreate", pBookingTransDetail.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncLastUpd", pBookingTransDetail.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LastSyncBy", pBookingTransDetail.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DetailCollectedAmt", pBookingTransDetail.CollectedAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SellKey", pBookingTransDetail.Signature, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                        switch (saveType)
                        {
                            case EnumSaveType.Insert:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSDTL", string.Empty);
                                break;
                            /*
                            case EnumSaveType.Update:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.RecordLocator='" + pBookingTransDetail.RecordLocator + "' AND BK_TRANSDTL.TransID='" + pBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBookingTransDetail.SeqNo + "'");
                                break;*/
                            case EnumSaveType.Update:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.TransID='" + pBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBookingTransDetail.SeqNo + "'");
                                break;
                        }
                        lstSQL.Add(strSQL);
                    }
                }

                //added by ketee, 2016-01-03
                List<PassengerData> lstPassenger = new List<PassengerData>();
                if (HttpContext.Current.Session["listPassengers"] != null)
                {

                    //strSQL = "DELETE FROM BK_PASSENGERLIST WHERE BK_TRANSMAIN.TransID='" + BookingTransMain.TransID + "'";
                    //lstSQL.Add(strSQL);

                    lstPassenger = (List<PassengerData>)HttpContext.Current.Session["listPassengers"];
                    foreach (PassengerData pBK_PASSENGERLIST_Info in lstPassenger)
                    {
                        objSQL.AddField("TransID", BookingTransMain.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("RecordLocator", pBK_PASSENGERLIST_Info.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("PassengerID", pBK_PASSENGERLIST_Info.PassengerID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("Title", pBK_PASSENGERLIST_Info.Title, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("Gender", pBK_PASSENGERLIST_Info.Gender, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("FirstName", pBK_PASSENGERLIST_Info.FirstName, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("LastName", pBK_PASSENGERLIST_Info.LastName, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("PrevFirstName1", pBK_PASSENGERLIST_Info.PrevFirstName1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("PrevLastName1", pBK_PASSENGERLIST_Info.PrevLastName1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("PrevFirstName2", pBK_PASSENGERLIST_Info.PrevFirstName2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("PrevLastName2", pBK_PASSENGERLIST_Info.PrevLastName2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("Nationality", pBK_PASSENGERLIST_Info.Nationality, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("DOB", pBK_PASSENGERLIST_Info.DOB, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PassportNo", pBK_PASSENGERLIST_Info.PassportNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("IssuingCountry", pBK_PASSENGERLIST_Info.IssuingCountry, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("ExpiryDate", pBK_PASSENGERLIST_Info.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ChangeFee", pBK_PASSENGERLIST_Info.ChangeFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ChangeDate", pBK_PASSENGERLIST_Info.ChangeDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ChangeFee2", pBK_PASSENGERLIST_Info.ChangeFee2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ChangeDate2", pBK_PASSENGERLIST_Info.ChangeDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ChangeCount", pBK_PASSENGERLIST_Info.ChangeCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("MaxChange", pBK_PASSENGERLIST_Info.MaxChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("MaxPax1", pBK_PASSENGERLIST_Info.MaxPax1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("MaxPax2", pBK_PASSENGERLIST_Info.MaxPax2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncCreate", pBK_PASSENGERLIST_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncLastUpd", pBK_PASSENGERLIST_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LastSyncBy", pBK_PASSENGERLIST_Info.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        //added by ketee,
                        objSQL.AddField("DepartSeat", pBK_PASSENGERLIST_Info.DepartSeat, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("DepartConnectingSeat", pBK_PASSENGERLIST_Info.DepartConnectingSeat, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("ReturnSeat", pBK_PASSENGERLIST_Info.ReturnSeat, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("ReturnConnectingSeat", pBK_PASSENGERLIST_Info.ReturnConnectingSeat, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);

                        switch (saveType)
                        {
                            case EnumSaveType.Insert:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_PASSENGERLIST", string.Empty);
                                break;
                            case EnumSaveType.Update:
                                string sign = "!=";
                                if (pBK_PASSENGERLIST_Info.Title == "INFT")
                                    sign = "=";
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_PASSENGERLIST", "BK_PASSENGERLIST.TransID='" + BookingTransMain.TransID + "' AND BK_PASSENGERLIST.RecordLocator='" + pBK_PASSENGERLIST_Info.RecordLocator + "' AND BK_PASSENGERLIST.PassengerID='" + pBK_PASSENGERLIST_Info.PassengerID + "' AND BK_PASSENGERLIST.Title " + sign + " 'INFT'");
                                break;
                        }
                        lstSQL.Add(strSQL);
                    }
                }

                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return null;
                }
                return GetSingleBK_TRANSMAIN(BookingTransMain.TransID, BookingTransMain.TransType, BookingTransMain.AgentID, BookingTransMain.AgentCatgID, BookingTransMain.BookingDate);
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                log.Error(this, ex);
                return null;
            }
        }

        public Boolean UpdatePaymentExpiry(BookingTransactionMain BookingTransMain, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            string str = "";
            try
            {
                objSQL.AddField("TransID", BookingTransMain.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("TransType", BookingTransMain.TransType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("AgentID", BookingTransMain.AgentID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("AgentCatgID", BookingTransMain.AgentCatgID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("BookingDate", BookingTransMain.BookingDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("PaymentDateEx1", BookingTransMain.PaymentDateEx1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("PaymentDateEx2", BookingTransMain.PaymentDateEx2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("PaymentDateEx3", BookingTransMain.PaymentDateEx3, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("PaymentDate", BookingTransMain.PaymentDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("CancelDate", BookingTransMain.CancelDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ExpiryDate", BookingTransMain.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("STDDate", BookingTransMain.STDDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("Currency", BookingTransMain.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("CurrencyPaid", BookingTransMain.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("CollectedAmt", BookingTransMain.CollectedAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("TotalAmtAVG", BookingTransMain.TotalAmtAVG, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("TotalAmtGoing", BookingTransMain.TotalAmtGoing, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("TotalAmtReturn", BookingTransMain.TotalAmtReturn, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("TransSubTotal", BookingTransMain.TransSubTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("TransTotalAmt", BookingTransMain.TransTotalAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("TransTotalFee", BookingTransMain.TransTotalFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("TransTotalTax", BookingTransMain.TransTotalTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("TransTotalOth", BookingTransMain.TransTotalOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("TransTotalPAX", BookingTransMain.TransTotalPAX, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("TransTotalSeat", BookingTransMain.TransTotalSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("TransRemark1", BookingTransMain.TransRemark1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                //objSQL.AddField("TransRemark2", BookingTransMain.TransRemark2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                //objSQL.AddField("TransStatus", BookingTransMain.TransStatus, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("Posted", BookingTransMain.Posted, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("CreateBy", BookingTransMain.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("SyncCreate", BookingTransMain.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("SyncLastUpd", BookingTransMain.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("LastSyncBy", BookingTransMain.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CurReminderDate", BookingTransMain.CurReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("NextReminderDate", BookingTransMain.NextReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                //objSQL.AddField("ReminderType", BookingTransMain.ReminderType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                switch (saveType)
                {
                    case EnumSaveType.Insert:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSMAIN", string.Empty);
                        break;
                    case EnumSaveType.Update:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSMAIN", "BK_TRANSMAIN.TransID='" + BookingTransMain.TransID + "'");
                        break;
                }
                lstSQL.Add(strSQL);
                str += strSQL + "\n";
                log.Info(this, str);
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                log.Error(this, ex);
                return false;
            }
        }

        public Boolean SaveHeaderDetailTransFirst(BookingTransactionMain BookingTransMain, List<BookingTransactionDetail> lstBookingTransDetail, BookingTransTender BookingTransTender, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            string logSQL = string.Empty;
            try
            {
                objSQL.AddField("TransID", BookingTransMain.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransType", BookingTransMain.TransType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AgentID", BookingTransMain.AgentID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AgentCatgID", BookingTransMain.AgentCatgID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("BookingDate", BookingTransMain.BookingDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx1", BookingTransMain.PaymentDateEx1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx1", BookingTransMain.PaymentAmtEx1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx2", BookingTransMain.PaymentDateEx2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx2", BookingTransMain.PaymentAmtEx2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDateEx3", BookingTransMain.PaymentDateEx3, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentAmtEx3", BookingTransMain.PaymentAmtEx3, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PaymentDate", BookingTransMain.PaymentDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CancelDate", BookingTransMain.CancelDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ExpiryDate", BookingTransMain.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("STDDate", BookingTransMain.STDDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Currency", BookingTransMain.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CurrencyPaid", BookingTransMain.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CollectedAmt", BookingTransMain.CollectedAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtAVG", BookingTransMain.TotalAmtAVG, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtGoing", BookingTransMain.TotalAmtGoing, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TotalAmtReturn", BookingTransMain.TotalAmtReturn, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransSubTotal", BookingTransMain.TransSubTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalAmt", BookingTransMain.TransTotalAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalFee", BookingTransMain.TransTotalFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalTax", BookingTransMain.TransTotalTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPaxFee", BookingTransMain.TransTotalPaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalOth", BookingTransMain.TransTotalOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalSSR", BookingTransMain.TransTotalSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalDisc", BookingTransMain.TransTotalDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPromoDisc", BookingTransMain.TransTotalPromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalPAX", BookingTransMain.TransTotalPAX, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalSeat", BookingTransMain.TransTotalSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalNameChange", BookingTransMain.TransTotalNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalProcess", BookingTransMain.TransTotalProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransTotalInfant", BookingTransMain.TransTotalInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransRemark1", BookingTransMain.TransRemark1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                objSQL.AddField("TransRemark2", BookingTransMain.TransRemark2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                objSQL.AddField("TransStatus", BookingTransMain.TransStatus, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Posted", BookingTransMain.Posted, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CreateBy", BookingTransMain.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", BookingTransMain.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncLastUpd", BookingTransMain.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("LastSyncBy", BookingTransMain.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CurReminderDate", BookingTransMain.CurReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("NextReminderDate", BookingTransMain.NextReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ReminderType", BookingTransMain.ReminderType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PromoCode", BookingTransMain.PromoCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                switch (saveType)
                {
                    case EnumSaveType.Insert:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSMAIN", string.Empty);
                        break;
                    case EnumSaveType.Update:
                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSMAIN", "BK_TRANSMAIN.TransID='" + BookingTransMain.TransID + "'");
                        break;
                }
                logSQL += strSQL + "\n";
                lstSQL.Add(strSQL);
                foreach (BookingTransactionDetail pBookingTransDetail in lstBookingTransDetail)
                {
                    objSQL.AddField("RecordLocator", pBookingTransDetail.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransID", pBookingTransDetail.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SeqNo", pBookingTransDetail.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CarrierCode", pBookingTransDetail.CarrierCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightNo", pBookingTransDetail.FlightNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DepartureDate", pBookingTransDetail.DepatureDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DepartureDate2", pBookingTransDetail.DepatureDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightDura", pBookingTransDetail.FlightDura, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FlightDura2", pBookingTransDetail.FlightDura2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Origin", pBookingTransDetail.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Transit", pBookingTransDetail.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Destination", pBookingTransDetail.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ArrivalDate", pBookingTransDetail.ArrivalDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ArrivalDate2", pBookingTransDetail.ArrivalDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FareClass", pBookingTransDetail.FareClass, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("FarePerPax", pBookingTransDetail.FarePerPax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineTotal", pBookingTransDetail.LineTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineTax", pBookingTransDetail.LineTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LinePaxFee", pBookingTransDetail.LinePaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineFee", pBookingTransDetail.LineFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineOth", pBookingTransDetail.LineOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineProcess", pBookingTransDetail.LineProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineSSR", pBookingTransDetail.LineSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineSeat", pBookingTransDetail.LineSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineNameChange", pBookingTransDetail.LineNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineInsureFee", pBookingTransDetail.LineInsureFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);//added by romy for insure
                    objSQL.AddField("LineInfant", pBookingTransDetail.LineInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LineDisc", pBookingTransDetail.LineDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LinePromoDisc", pBookingTransDetail.LinePromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("AttemptCount", pBookingTransDetail.AttemptCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Currency", pBookingTransDetail.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaxAdult", pBookingTransDetail.PaxAdult, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaxChild", pBookingTransDetail.PaxChild, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransVoid", pBookingTransDetail.TransVoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CreateBy", pBookingTransDetail.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncCreate", pBookingTransDetail.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncLastUpd", pBookingTransDetail.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LastSyncBy", pBookingTransDetail.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("DetailCollectedAmt", pBookingTransDetail.CollectedAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SellKey", pBookingTransDetail.Signature, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("NextDueDate", pBookingTransDetail.NextDueDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);

                    switch (saveType)
                    {
                        case EnumSaveType.Insert:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSDTL", string.Empty);
                            break;
                        /*
                        case EnumSaveType.Update:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.RecordLocator='" + pBookingTransDetail.RecordLocator + "' AND BK_TRANSDTL.TransID='" + pBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBookingTransDetail.SeqNo + "'");
                            break;*/
                        case EnumSaveType.Update:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.TransID='" + pBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBookingTransDetail.SeqNo + "'");
                            break;
                    }
                    logSQL += strSQL + "\n";
                    lstSQL.Add(strSQL);
                }

                objSQL.AddField("TransID", BookingTransTender.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SeqNo", BookingTransTender.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TransDate", BookingTransTender.TransDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Currency", BookingTransTender.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CurrencyPaid", BookingTransTender.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TenderID", BookingTransTender.TenderID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("FeeType", BookingTransTender.FeeType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TenderAmt", BookingTransTender.TenderAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("ExchgRate", BookingTransTender.ExchgRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("TenderDue", BookingTransTender.TenderDue, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("FeeAmt", BookingTransTender.FeeAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("PayAmt", BookingTransTender.PayAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("Transvoid", BookingTransTender.Transvoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                objSQL.AddField("SyncCreate", BookingTransTender.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                objSQL.AddField("RefNo", BookingTransTender.RefNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("AuthorizationCode", BookingTransTender.AuthorizationCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("MerchantID", BookingTransTender.MerchantID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                objSQL.AddField("CreateBy", BookingTransTender.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                //added by ketee, 20121028
                objSQL.AddField("RecordLocator", BookingTransTender.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                if (BookingTransTender.CommandType == "insert")
                {
                    strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSTENDER", string.Empty);
                }
                else
                {
                    strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSTENDER", string.Empty);
                }
                logSQL += strSQL + "\n";
                lstSQL.Add(strSQL);

                log.Info(this, logSQL);
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return false;
                }
                //return GetSingleBK_TRANSMAIN(BookingTransMain.TransID, BookingTransMain.TransType, BookingTransMain.AgentID, BookingTransMain.AgentCatgID, BookingTransMain.BookingDate);
                return true;
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                log.Error(this, ex);
                return false;
            }
        }

        //added by ketee, 20121028
        public Boolean UpdateHeaderDetailTrans(BookingTransactionMain BookingTransMain, List<BookingTransactionDetail> lstBookingTransDetail, List<BookingTransTender> lstBookingTransTender, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;

            DateTime nextDueDate = DateTime.Now;
            Decimal nextDueAmount = 0;
            DateTime payDueDate1 = DateTime.Now;
            Decimal payDueAmount1 = 0;
            DateTime payDueDate2 = DateTime.Now;
            Decimal payDueAmount2 = 0;
            DateTime payDueDate3 = DateTime.Now;
            Decimal payDueAmount3 = 0;

            ArrayList ListRecordLocator = new ArrayList();
            ArrayList ListCollectedAmount = new ArrayList();
            ArrayList ListLineTotal = new ArrayList();
            ArrayList ListLineFee = new ArrayList();
            ArrayList ListNextDueDate = new ArrayList();
            ArrayList ListNextDueAmount = new ArrayList();
            ArrayList ListPayDueDate1 = new ArrayList();
            ArrayList ListPayDueAmount1 = new ArrayList();
            ArrayList ListPayDueDate2 = new ArrayList();
            ArrayList ListPayDueAmount2 = new ArrayList();
            ArrayList ListPayDueDate3 = new ArrayList();
            ArrayList ListPayDueAmount3 = new ArrayList();


            //added by diana 20131112 - get payment extension
            DateTime paymentExtensionDate = DateTime.Now;
            Boolean extendPayment = false;
            if (BookingTransMain != null)
            {
                extendPayment = GetPaymentExtensionDate(BookingTransMain.TransID, ref paymentExtensionDate);
            }
            //end added by diana 20131112 - get payment extension

            try
            {
                if (BookingTransMain != null && lstBookingTransDetail != null)
                {
                    //from here
                    decimal totalCollectedAmount = 0;
                    decimal totalLineTotal = 0;
                    decimal totalLineFee = 0;

                    //amended by diana 20131106 - to get lowest expirydate

                    nextDueDate = BookingTransMain.BookingDate;
                    DateTime ExpiryDate = BookingTransMain.ExpiryDate;
                    DateTime LowestExpiryDate = BookingTransMain.ExpiryDate;

                    //added by diana 20140121 - to store GroupName
                    int cnt = 0;
                    string GroupName = "";

                    foreach (BookingTransactionDetail pBookingTransDetail in lstBookingTransDetail)
                    {
                        //added by diana 20140121 - store first segement GroupName
                        if (cnt == 0)
                        {
                            GeneralControl objGeneral = new GeneralControl();
                            GroupName = objGeneral.getOPTGroupByCarrierCode(pBookingTransDetail.CarrierCode);
                        }
                        cnt += 1;

                        if (ListRecordLocator.IndexOf(pBookingTransDetail.RecordLocator) < 0)
                        {
                            ListRecordLocator.Add(pBookingTransDetail.RecordLocator);
                            ListCollectedAmount.Add(pBookingTransDetail.CollectedAmount);
                            ListLineTotal.Add(pBookingTransDetail.LineTotal);
                            ListLineFee.Add(pBookingTransDetail.LineFee);
                            ListNextDueDate.Add(pBookingTransDetail.NextDueDate);
                            ListNextDueAmount.Add(pBookingTransDetail.NextDueAmount);
                            ListPayDueDate1.Add(pBookingTransDetail.PayDueDate1);
                            ListPayDueAmount1.Add(pBookingTransDetail.PayDueAmount1);
                            ListPayDueDate2.Add(pBookingTransDetail.PayDueDate2);
                            ListPayDueAmount2.Add(pBookingTransDetail.PayDueAmount2);
                            ListPayDueDate3.Add(pBookingTransDetail.PayDueDate3);
                            ListPayDueAmount3.Add(pBookingTransDetail.PayDueAmount3);
                        }
                        else
                        {
                            int index = ListRecordLocator.IndexOf(pBookingTransDetail.RecordLocator);
                            ListCollectedAmount[index] = (decimal)ListCollectedAmount[index] + (decimal)pBookingTransDetail.CollectedAmount;
                            ListLineTotal[index] = (decimal)ListLineTotal[index] + (decimal)pBookingTransDetail.LineTotal;
                            ListLineFee[index] = (decimal)ListLineFee[index] + (decimal)pBookingTransDetail.LineFee;
                            ListNextDueDate[index] = pBookingTransDetail.NextDueDate;
                            ListNextDueAmount[index] = pBookingTransDetail.NextDueAmount;
                            ListPayDueDate1[index] = pBookingTransDetail.PayDueDate1;
                            ListPayDueAmount1[index] = pBookingTransDetail.PayDueAmount1;
                            ListPayDueDate2[index] = pBookingTransDetail.PayDueDate2;
                            ListPayDueAmount2[index] = pBookingTransDetail.PayDueAmount2;
                            ListPayDueDate3[index] = pBookingTransDetail.PayDueDate3;
                            ListPayDueAmount3[index] = pBookingTransDetail.PayDueAmount3;
                        }
                    }


                    int indexDetail = 0;
                    bool firstRecord = true;
                    foreach (string detailList in ListRecordLocator)
                    {
                        //added by ketee, passing in existing expiry date for validation , 20160223
                        ExpiryDate = (DateTime)ListNextDueDate[indexDetail];
                        nextDueAmount = GetNextAmount_Date_Due(BookingTransMain.TransID, detailList, GroupName, BookingTransMain.PayScheme, 1, (decimal)ListCollectedAmount[indexDetail], (decimal)ListLineTotal[indexDetail] - (decimal)ListCollectedAmount[indexDetail], (decimal)ListLineFee[indexDetail], (decimal)ListLineTotal[indexDetail], BookingTransMain.STDDate, BookingTransMain.BookingDate, ref ExpiryDate);//, ref payDueDate1, ref payDueAmount1, ref payDueDate2, ref payDueAmount2, ref payDueDate3, ref payDueAmount3);
                        int indexPNR = ListRecordLocator.IndexOf(detailList);
                        //ListNextDueDate[indexPNR] = ExpiryDate;
                        ListNextDueAmount[indexPNR] = nextDueAmount;

                        indexDetail += 1;

                        if (detailList.ToString().Trim().Length >= 6)
                        {
                            //remark by ketee and replace with just check expiry date, 20160223
                            if (ExpiryDate.Date > LowestExpiryDate.Date)
                                LowestExpiryDate = ExpiryDate;
                            //if (firstRecord)
                            //{
                            //    LowestExpiryDate = ExpiryDate;
                            //    firstRecord = false;
                            //}
                            //else if (ExpiryDate.Date < LowestExpiryDate.Date)
                            //    LowestExpiryDate = ExpiryDate;
                        }
                    }

                    ExpiryDate = LowestExpiryDate;

                    //amended by dianaa 20131112 - check for extension
                    if (extendPayment)
                    {
                        if (ExpiryDate < paymentExtensionDate)
                        {
                            ExpiryDate = paymentExtensionDate;
                        }
                    }
                    //end amended by dianaa 20131112 - check for extension

                    if (BookingTransMain.TransStatus == 1 && BookingTransMain.PayScheme == "W1W")
                    {
                        nextDueDate = BookingTransMain.STDDate.AddDays(-1);
                        BookingTransMain.ExpiryDate = ExpiryDate;
                        if (BookingTransMain.ExpiryDate.Date.AddDays(-5) > DateTime.Now.Date)
                            BookingTransMain.CurReminderDate = BookingTransMain.ExpiryDate.AddDays(-5);
                        else if (BookingTransMain.ExpiryDate.Date.AddDays(-1) > DateTime.Now.Date)
                            BookingTransMain.CurReminderDate = BookingTransMain.ExpiryDate.AddDays(-1);
                        else
                            BookingTransMain.CurReminderDate = BookingTransMain.ExpiryDate.Date;
                    }
                    else
                    {
                        nextDueDate = ExpiryDate;
                        BookingTransMain.ExpiryDate = ExpiryDate;
                        BookingTransMain.CurReminderDate = BookingTransMain.ExpiryDate.AddDays(-5);
                    }
                    //to here
                }

                if (BookingTransMain != null)
                {
                    //added by diana 20131030 - check whether booking is expired or not
                    //if (BookingTransMain.ExpiryDate.Date < DateTime.Now.Date && (BookingTransMain.TransStatus == 1 || BookingTransMain.TransStatus == 2))
                    //{
                    //    BookingTransMain.TransStatus += 5;
                    //    BookingTransMain.TransRemark1 = "AUTO CANCEL PROCESS";
                    //    BookingTransMain.CancelDate = DateTime.Now;
                    //}
                    //end added by diana 20131030
                    objSQL.AddField("TransID", BookingTransMain.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransType", BookingTransMain.TransType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("AgentID", BookingTransMain.AgentID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("AgentCatgID", BookingTransMain.AgentCatgID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("BookingDate", BookingTransMain.BookingDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDateEx1", BookingTransMain.PaymentDateEx1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentAmtEx1", BookingTransMain.PaymentAmtEx1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDateEx2", BookingTransMain.PaymentDateEx2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentAmtEx2", BookingTransMain.PaymentAmtEx2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDateEx3", BookingTransMain.PaymentDateEx3, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentAmtEx3", BookingTransMain.PaymentAmtEx3, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDate", BookingTransMain.PaymentDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CancelDate", BookingTransMain.CancelDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    if (BookingTransMain.TransStatus <= 2)
                        objSQL.AddField("ExpiryDate", BookingTransMain.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("STDDate", BookingTransMain.STDDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Currency", BookingTransMain.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CurrencyPaid", BookingTransMain.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CollectedAmt", BookingTransMain.CollectedAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TotalAmtAVG", BookingTransMain.TotalAmtAVG, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TotalAmtGoing", BookingTransMain.TotalAmtGoing, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TotalAmtReturn", BookingTransMain.TotalAmtReturn, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransSubTotal", BookingTransMain.TransSubTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalAmt", BookingTransMain.TransTotalAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalFee", BookingTransMain.TransTotalFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalTax", BookingTransMain.TransTotalTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalPaxFee", BookingTransMain.TransTotalPaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalOth", BookingTransMain.TransTotalOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalSSR", BookingTransMain.TransTotalSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalDisc", BookingTransMain.TransTotalDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalPromoDisc", BookingTransMain.TransTotalPromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalPAX", BookingTransMain.TransTotalPAX, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalSeat", BookingTransMain.TransTotalSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalNameChange", BookingTransMain.TransTotalNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalProcess", BookingTransMain.TransTotalProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalInfant", BookingTransMain.TransTotalInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransRemark1", BookingTransMain.TransRemark1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                    objSQL.AddField("TransRemark2", BookingTransMain.TransRemark2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                    objSQL.AddField("TransStatus", BookingTransMain.TransStatus, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("NeedPaymentStatus", BookingTransMain.NeedPaymentStatus, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Posted", BookingTransMain.Posted, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CreateBy", BookingTransMain.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncCreate", BookingTransMain.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncLastUpd", BookingTransMain.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LastSyncBy", BookingTransMain.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    if (BookingTransMain.TransStatus <= 2)
                        objSQL.AddField("CurReminderDate", BookingTransMain.CurReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("NextReminderDate", BookingTransMain.NextReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ReminderType", BookingTransMain.ReminderType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PromoCode", BookingTransMain.PromoCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                    //objSQL.AddField("Currency", BookingTransMain.Currency, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    //objSQL.AddField("CurrencyPaid", BookingTransMain.Currency, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    //objSQL.AddField("ExchangeRate", BookingTransMain.ExchangeRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                    switch (saveType)
                    {
                        case EnumSaveType.Insert:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSMAIN", string.Empty);
                            break;
                        case EnumSaveType.Update:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSMAIN", "BK_TRANSMAIN.TransID='" + BookingTransMain.TransID + "'");
                            break;
                    }
                    lstSQL.Add(strSQL);
                }

                if (lstBookingTransDetail != null)
                {
                    foreach (BookingTransactionDetail pBookingTransDetail in lstBookingTransDetail)
                    {
                        //added by diana 20131029 - update transvoid to 1 if booking status is cancel
                        pBookingTransDetail.TransVoid = 0;
                        if (BookingTransMain != null)
                        {
                            if (BookingTransMain.TransStatus >= 4)
                                pBookingTransDetail.TransVoid = 1;
                            else if (BookingTransMain.TransStatus >= 1 && pBookingTransDetail.RecordLocator.ToString().Trim().Length < 6) //added by diana 20140526, avoid keep retrieving details while viewing booking details
                                pBookingTransDetail.TransVoid = 1;
                        }
                        //end added by diana 20131029

                        //added byd diana 20131106 - update expirydate
                        //if (BookingTransMain.TransStatus == 1 && BookingTransMain.PayScheme == "W1W")
                        //{
                        //    pBookingTransDetail.NextDueDate = BookingTransMain.STDDate.AddDays(-1);
                        //}
                        //else
                        //{
                        //    int indexPNR = ListRecordLocator.IndexOf(pBookingTransDetail.RecordLocator);
                        //    if (indexPNR >= 0)
                        //    {
                        //        pBookingTransDetail.NextDueDate = (DateTime)ListNextDueDate[indexPNR];
                        //        pBookingTransDetail.NextDueAmount = (decimal)ListNextDueAmount[indexPNR];
                        //        objSQL.AddField("NextDueAmount", pBookingTransDetail.NextDueAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        //    }
                        //}
                        //end added by diana 20131106

                        //amended by dianaa 20131112 - check for extension
                        if (extendPayment)
                        {
                            if (pBookingTransDetail.NextDueDate < paymentExtensionDate)
                            {
                                pBookingTransDetail.NextDueDate = paymentExtensionDate;
                            }
                        }
                        //end amended by dianaa 20131112 - check for extension

                        objSQL.AddField("RecordLocator", pBookingTransDetail.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransID", pBookingTransDetail.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SeqNo", pBookingTransDetail.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CarrierCode", pBookingTransDetail.CarrierCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightNo", pBookingTransDetail.FlightNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DepartureDate", pBookingTransDetail.DepatureDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DepartureDate2", pBookingTransDetail.DepatureDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightDura", pBookingTransDetail.FlightDura, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightDura2", pBookingTransDetail.FlightDura2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Origin", pBookingTransDetail.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Transit", pBookingTransDetail.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Destination", pBookingTransDetail.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ArrivalDate", pBookingTransDetail.ArrivalDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ArrivalDate2", pBookingTransDetail.ArrivalDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FareClass", pBookingTransDetail.FareClass, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FarePerPax", pBookingTransDetail.FarePerPax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineTotal", pBookingTransDetail.LineTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineTax", pBookingTransDetail.LineTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LinePaxFee", pBookingTransDetail.LinePaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineFee", pBookingTransDetail.LineFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineOth", pBookingTransDetail.LineOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineProcess", pBookingTransDetail.LineProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineSSR", pBookingTransDetail.LineSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineSeat", pBookingTransDetail.LineSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineNameChange", pBookingTransDetail.LineNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineInsureFee", pBookingTransDetail.LineInsureFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);//added by romy for insure
                        objSQL.AddField("LineInfant", pBookingTransDetail.LineInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineDisc", pBookingTransDetail.LineDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LinePromoDisc", pBookingTransDetail.LinePromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("AttemptCount", pBookingTransDetail.AttemptCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Currency", pBookingTransDetail.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaxAdult", pBookingTransDetail.PaxAdult, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaxChild", pBookingTransDetail.PaxChild, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransVoid", pBookingTransDetail.TransVoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CreateBy", pBookingTransDetail.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncCreate", pBookingTransDetail.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncLastUpd", pBookingTransDetail.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LastSyncBy", pBookingTransDetail.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DetailCollectedAmt", pBookingTransDetail.CollectedAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                        objSQL.AddField("NextDueDate", pBookingTransDetail.NextDueDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);

                        objSQL.AddField("SellKey", pBookingTransDetail.Signature, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                        switch (saveType)
                        {
                            case EnumSaveType.Insert:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSDTL", string.Empty);
                                break;
                            /*
                            case EnumSaveType.Update:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.RecordLocator='" + pBookingTransDetail.RecordLocator + "' AND BK_TRANSDTL.TransID='" + pBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBookingTransDetail.SeqNo + "'");
                                break;*/
                            case EnumSaveType.Update:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.TransID='" + pBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBookingTransDetail.SeqNo + "'");
                                break;
                        }
                        lstSQL.Add(strSQL);
                    }
                }

                if (lstBookingTransTender != null)
                {
                    foreach (BookingTransTender BookingTransTender in lstBookingTransTender)
                    {
                        objSQL.AddField("TransID", BookingTransTender.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SeqNo", BookingTransTender.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransDate", BookingTransTender.TransDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Currency", BookingTransTender.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CurrencyPaid", BookingTransTender.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TenderID", BookingTransTender.TenderID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeType", BookingTransTender.FeeType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TenderAmt", BookingTransTender.TenderAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TenderDue", BookingTransTender.TenderDue, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeAmt", BookingTransTender.FeeAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TenderAmt", BookingTransTender.TenderAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PayAmt", BookingTransTender.PayAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncCreate", BookingTransTender.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("RefNo", BookingTransTender.RefNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("AuthorizationCode", BookingTransTender.AuthorizationCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("MerchantID", BookingTransTender.MerchantID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CreateBy", BookingTransTender.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        //added by ketee, 20121028
                        objSQL.AddField("RecordLocator", BookingTransTender.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        if (BookingTransTender.CommandType == "insert")
                        {
                            objSQL.AddField("ExchgRate", BookingTransTender.ExchgRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        }

                        if (BookingTransTender.CommandType == "insert")
                        {
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSTENDER", string.Empty);
                        }
                        else
                        {
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSTENDER", "TransID='" + BookingTransTender.TransID + "' AND SeqNo=" + BookingTransTender.SeqNo + " AND RecordLocator='" + BookingTransTender.RecordLocator + "'");
                        }

                        lstSQL.Add(strSQL);
                    }
                }
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return false;
                }
                //return GetSingleBK_TRANSMAIN(BookingTransMain.TransID, BookingTransMain.TransType, BookingTransMain.AgentID, BookingTransMain.AgentCatgID, BookingTransMain.BookingDate);
                return true;
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                log.Error(this, ex);
                return false;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        public Boolean UpdateHeaderDetailTransForView(BookingTransactionMain BookingTransMain, List<BookingTransactionDetail> lstBookingTransDetail, List<BookingTransTender> lstBookingTransTender, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;

            DateTime nextDueDate = DateTime.Now;
            Decimal nextDueAmount = 0;

            ArrayList ListRecordLocator = new ArrayList();
            ArrayList ListCollectedAmount = new ArrayList();
            ArrayList ListLineTotal = new ArrayList();
            ArrayList ListLineFee = new ArrayList();
            ArrayList ListNextDueDate = new ArrayList();
            ArrayList ListNextDueAmount = new ArrayList();

            try
            {
                if (BookingTransMain != null && lstBookingTransDetail != null)
                {
                    //from here
                    decimal totalCollectedAmount = 0;
                    decimal totalLineTotal = 0;
                    decimal totalLineFee = 0;

                    //amended by diana 20131106 - to get lowest expirydate

                    nextDueDate = BookingTransMain.BookingDate;
                    DateTime ExpiryDate = BookingTransMain.ExpiryDate;

                    //commented by diana 20131112 - need to be checked

                    //DateTime LowestExpiryDate = BookingTransMain.ExpiryDate;

                    //foreach (BookingTransactionDetail pBookingTransDetail in lstBookingTransDetail)
                    //{
                    //    if (ListRecordLocator.IndexOf(pBookingTransDetail.RecordLocator) < 0)
                    //    {
                    //        ListRecordLocator.Add(pBookingTransDetail.RecordLocator);
                    //        ListCollectedAmount.Add(pBookingTransDetail.CollectedAmount);
                    //        ListLineTotal.Add(pBookingTransDetail.LineTotal);
                    //        ListLineFee.Add(pBookingTransDetail.LineFee);
                    //        ListNextDueDate.Add(pBookingTransDetail.NextDueDate);
                    //        ListNextDueAmount.Add(pBookingTransDetail.NextDueAmount);
                    //    }
                    //    else
                    //    {
                    //        int index = ListRecordLocator.IndexOf(pBookingTransDetail.RecordLocator);
                    //        ListCollectedAmount[index] = (decimal)ListCollectedAmount[index] + (decimal)pBookingTransDetail.CollectedAmount;
                    //        ListLineTotal[index] = (decimal)ListLineTotal[index] + (decimal)pBookingTransDetail.LineTotal;
                    //        ListLineFee[index] = (decimal)ListLineFee[index] + (decimal)pBookingTransDetail.LineFee;
                    //        ListNextDueDate[index] = pBookingTransDetail.NextDueDate;
                    //        ListNextDueAmount[index] = pBookingTransDetail.NextDueAmount;
                    //    }
                    //}


                    //int indexDetail = 0;
                    //foreach (string detailList in ListRecordLocator)
                    //{
                    //    nextDueAmount = GetNextAmount_Date_Due(BookingTransMain.PayScheme, (decimal)ListCollectedAmount[indexDetail], (decimal)ListLineTotal[indexDetail] - (decimal)ListCollectedAmount[indexDetail], (decimal)ListLineFee[indexDetail], (decimal)ListLineTotal[indexDetail], BookingTransMain.STDDate, BookingTransMain.BookingDate, ref ExpiryDate);
                    //    int indexPNR = ListRecordLocator.IndexOf(detailList);
                    //    ListNextDueDate[indexPNR] = ExpiryDate;
                    //    ListNextDueAmount[indexPNR] = nextDueAmount;

                    //    indexDetail += 1;

                    //    if (ExpiryDate.Date < LowestExpiryDate.Date)
                    //        LowestExpiryDate = ExpiryDate;
                    //}

                    //ExpiryDate = LowestExpiryDate;

                    if (BookingTransMain.TransStatus == 1 && BookingTransMain.PayScheme == "W1W")
                    {
                        nextDueDate = BookingTransMain.STDDate.AddDays(-1);
                        BookingTransMain.ExpiryDate = ExpiryDate;
                        if (BookingTransMain.ExpiryDate.Date.AddDays(-5) > DateTime.Now.Date)
                            BookingTransMain.CurReminderDate = BookingTransMain.ExpiryDate.Date.AddDays(-5);
                        else if (BookingTransMain.ExpiryDate.Date.AddDays(-1) > DateTime.Now.Date)
                            BookingTransMain.CurReminderDate = BookingTransMain.ExpiryDate.Date.AddDays(-1);
                        else
                            BookingTransMain.CurReminderDate = BookingTransMain.ExpiryDate.Date;
                    }
                    else
                    {
                        nextDueDate = ExpiryDate;
                        BookingTransMain.ExpiryDate = ExpiryDate;
                        BookingTransMain.CurReminderDate = BookingTransMain.ExpiryDate.Date.AddDays(-5);
                    }
                    //to here
                }

                if (BookingTransMain != null)
                {
                    //added by diana 20131030 - check whether booking is expired or not
                    //if (BookingTransMain.ExpiryDate.Date < DateTime.Now.Date && (BookingTransMain.TransStatus == 1 || BookingTransMain.TransStatus == 2))
                    //{
                    //    BookingTransMain.TransStatus += 5;
                    //    BookingTransMain.TransRemark1 = "AUTO CANCEL PROCESS";
                    //    BookingTransMain.CancelDate = DateTime.Now;
                    //}
                    //end added by diana 20131030
                    objSQL.AddField("TransID", BookingTransMain.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransType", BookingTransMain.TransType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("AgentID", BookingTransMain.AgentID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("AgentCatgID", BookingTransMain.AgentCatgID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("BookingDate", BookingTransMain.BookingDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDateEx1", BookingTransMain.PaymentDateEx1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentAmtEx1", BookingTransMain.PaymentAmtEx1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDateEx2", BookingTransMain.PaymentDateEx2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentAmtEx2", BookingTransMain.PaymentAmtEx2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDateEx3", BookingTransMain.PaymentDateEx3, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentAmtEx3", BookingTransMain.PaymentAmtEx3, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDate", BookingTransMain.PaymentDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CancelDate", BookingTransMain.CancelDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    if (BookingTransMain.TransStatus <= 2)
                        objSQL.AddField("ExpiryDate", BookingTransMain.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("STDDate", BookingTransMain.STDDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Currency", BookingTransMain.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CurrencyPaid", BookingTransMain.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CollectedAmt", BookingTransMain.CollectedAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TotalAmtAVG", BookingTransMain.TotalAmtAVG, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TotalAmtGoing", BookingTransMain.TotalAmtGoing, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TotalAmtReturn", BookingTransMain.TotalAmtReturn, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransSubTotal", BookingTransMain.TransSubTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalAmt", BookingTransMain.TransTotalAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalFee", BookingTransMain.TransTotalFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalTax", BookingTransMain.TransTotalTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalPaxFee", BookingTransMain.TransTotalPaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalOth", BookingTransMain.TransTotalOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalSSR", BookingTransMain.TransTotalSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalDisc", BookingTransMain.TransTotalDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalPromoDisc", BookingTransMain.TransTotalPromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalPAX", BookingTransMain.TransTotalPAX, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalSeat", BookingTransMain.TransTotalSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalNameChange", BookingTransMain.TransTotalNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalProcess", BookingTransMain.TransTotalProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalInfant", BookingTransMain.TransTotalInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransRemark1", BookingTransMain.TransRemark1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                    objSQL.AddField("TransRemark2", BookingTransMain.TransRemark2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                    objSQL.AddField("TransStatus", BookingTransMain.TransStatus, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Posted", BookingTransMain.Posted, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CreateBy", BookingTransMain.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncCreate", BookingTransMain.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncLastUpd", BookingTransMain.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LastSyncBy", BookingTransMain.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    if (BookingTransMain.TransStatus <= 2)
                        objSQL.AddField("CurReminderDate", BookingTransMain.CurReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("NextReminderDate", BookingTransMain.NextReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ReminderType", BookingTransMain.ReminderType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PromoCode", BookingTransMain.PromoCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                    //objSQL.AddField("Currency", BookingTransMain.Currency, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    //objSQL.AddField("CurrencyPaid", BookingTransMain.Currency, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    //objSQL.AddField("ExchangeRate", BookingTransMain.ExchangeRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                    switch (saveType)
                    {
                        case EnumSaveType.Insert:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSMAIN", string.Empty);
                            break;
                        case EnumSaveType.Update:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSMAIN", "BK_TRANSMAIN.TransID='" + BookingTransMain.TransID + "'");
                            break;
                    }
                    lstSQL.Add(strSQL);
                }

                if (lstBookingTransDetail != null)
                {
                    foreach (BookingTransactionDetail pBookingTransDetail in lstBookingTransDetail)
                    {
                        //added by diana 20131029 - update transvoid to 1 if booking status is cancel
                        pBookingTransDetail.TransVoid = 0;
                        if (BookingTransMain != null)
                        {
                            if (BookingTransMain.TransStatus >= 4) pBookingTransDetail.TransVoid = 1;
                        }
                        //end added by diana 20131029

                        //added by diana 20131106 - update expirydate
                        if (BookingTransMain.TransStatus == 1 && BookingTransMain.PayScheme == "W1W")
                        {
                            //commented by diana 20131112 - need to be checked
                            //pBookingTransDetail.NextDueDate = BookingTransMain.STDDate.AddDays(-1);
                        }
                        else
                        {
                            int indexPNR = ListRecordLocator.IndexOf(pBookingTransDetail.RecordLocator);
                            if (indexPNR >= 0)
                            {
                                //commented by diana 20131112 - need to be checked
                                //pBookingTransDetail.NextDueDate = (DateTime)ListNextDueDate[indexPNR];
                                pBookingTransDetail.NextDueAmount = (decimal)ListNextDueAmount[indexPNR];
                                objSQL.AddField("NextDueAmount", pBookingTransDetail.NextDueAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            }
                        }
                        //end added by diana 20131106

                        objSQL.AddField("RecordLocator", pBookingTransDetail.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransID", pBookingTransDetail.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SeqNo", pBookingTransDetail.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CarrierCode", pBookingTransDetail.CarrierCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightNo", pBookingTransDetail.FlightNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DepartureDate", pBookingTransDetail.DepatureDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DepartureDate2", pBookingTransDetail.DepatureDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightDura", pBookingTransDetail.FlightDura, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightDura2", pBookingTransDetail.FlightDura2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Origin", pBookingTransDetail.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Transit", pBookingTransDetail.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Destination", pBookingTransDetail.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ArrivalDate", pBookingTransDetail.ArrivalDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ArrivalDate2", pBookingTransDetail.ArrivalDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FareClass", pBookingTransDetail.FareClass, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FarePerPax", pBookingTransDetail.FarePerPax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineTotal", pBookingTransDetail.LineTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineTax", pBookingTransDetail.LineTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LinePaxFee", pBookingTransDetail.LinePaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineFee", pBookingTransDetail.LineFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineOth", pBookingTransDetail.LineOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineProcess", pBookingTransDetail.LineProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineSSR", pBookingTransDetail.LineSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineSeat", pBookingTransDetail.LineSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineNameChange", pBookingTransDetail.LineNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineInsureFee", pBookingTransDetail.LineInsureFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);//added by romy for insure
                        objSQL.AddField("LineInfant", pBookingTransDetail.LineInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineDisc", pBookingTransDetail.LineDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LinePromoDisc", pBookingTransDetail.LinePromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("AttemptCount", pBookingTransDetail.AttemptCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Currency", pBookingTransDetail.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaxAdult", pBookingTransDetail.PaxAdult, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaxChild", pBookingTransDetail.PaxChild, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransVoid", pBookingTransDetail.TransVoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CreateBy", pBookingTransDetail.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncCreate", pBookingTransDetail.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncLastUpd", pBookingTransDetail.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LastSyncBy", pBookingTransDetail.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DetailCollectedAmt", pBookingTransDetail.CollectedAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                        objSQL.AddField("NextDueDate", pBookingTransDetail.NextDueDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);

                        objSQL.AddField("SellKey", pBookingTransDetail.Signature, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                        switch (saveType)
                        {
                            case EnumSaveType.Insert:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSDTL", string.Empty);
                                break;
                            /*
                            case EnumSaveType.Update:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.RecordLocator='" + pBookingTransDetail.RecordLocator + "' AND BK_TRANSDTL.TransID='" + pBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBookingTransDetail.SeqNo + "'");
                                break;*/
                            case EnumSaveType.Update:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.TransID='" + pBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBookingTransDetail.SeqNo + "'");
                                break;
                        }
                        lstSQL.Add(strSQL);
                    }
                }

                if (lstBookingTransTender != null)
                {
                    foreach (BookingTransTender BookingTransTender in lstBookingTransTender)
                    {
                        objSQL.AddField("TransID", BookingTransTender.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SeqNo", BookingTransTender.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransDate", BookingTransTender.TransDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Currency", BookingTransTender.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CurrencyPaid", BookingTransTender.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TenderID", BookingTransTender.TenderID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeType", BookingTransTender.FeeType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TenderAmt", BookingTransTender.TenderAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TenderDue", BookingTransTender.TenderDue, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeAmt", BookingTransTender.FeeAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PayAmt", BookingTransTender.PayAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Transvoid", BookingTransTender.Transvoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncCreate", BookingTransTender.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("RefNo", BookingTransTender.RefNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("AuthorizationCode", BookingTransTender.AuthorizationCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("MerchantID", BookingTransTender.MerchantID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CreateBy", BookingTransTender.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        //added by ketee, 20121028
                        objSQL.AddField("RecordLocator", BookingTransTender.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        if (BookingTransTender.CommandType == "insert")
                        {
                            objSQL.AddField("ExchgRate", BookingTransTender.ExchgRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        }

                        if (BookingTransTender.CommandType == "insert")
                        {
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSTENDER", string.Empty);
                        }
                        else
                        {
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSTENDER", "TransID='" + BookingTransTender.TransID + "' AND SeqNo=" + BookingTransTender.SeqNo + " AND RecordLocator='" + BookingTransTender.RecordLocator + "'");
                        }

                        lstSQL.Add(strSQL);
                    }
                }
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return false;
                }
                //return GetSingleBK_TRANSMAIN(BookingTransMain.TransID, BookingTransMain.TransType, BookingTransMain.AgentID, BookingTransMain.AgentCatgID, BookingTransMain.BookingDate);
                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        //added by diana 20130923
        public Boolean UpdatePassengerFlight(List<PassengerData> lstBookingPassenger, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;

            try
            {

                if (lstBookingPassenger != null)
                {
                    foreach (PassengerData BookingPassenger in lstBookingPassenger)
                    {
                        objSQL.AddField("TransID", BookingPassenger.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PassengerID", BookingPassenger.PassengerID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Title", BookingPassenger.Title, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Gender", BookingPassenger.Gender, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FirstName", BookingPassenger.FirstName, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LastName", BookingPassenger.LastName, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PrevFirstName1", BookingPassenger.PrevFirstName1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PrevLastName1", BookingPassenger.PrevLastName1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PrevFirstName2", BookingPassenger.PrevFirstName2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PrevLastName2", BookingPassenger.PrevLastName2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Nationality", BookingPassenger.Nationality, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        DateTime dateValue;
                        if (DateTime.TryParse(BookingPassenger.DOB.ToString(), out dateValue))
                        {
                            if (BookingPassenger.DOB.Year != 9999)
                                objSQL.AddField("DOB", BookingPassenger.DOB, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        }
                        objSQL.AddField("PassportNo", BookingPassenger.PassportNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("IssuingCountry", BookingPassenger.IssuingCountry, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ChangeFee", BookingPassenger.ChangeFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ExpiryDate", BookingPassenger.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ChangeFee2", BookingPassenger.ChangeFee2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ChangeDate2", BookingPassenger.ChangeDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("RecordLocator", BookingPassenger.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        //added by ketee, 20140610
                        objSQL.AddField("ChangeCount", BookingPassenger.ChangeCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("MaxChange", BookingPassenger.MaxChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("MaxPax1", BookingPassenger.MaxPax1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("MaxPax2", BookingPassenger.MaxPax2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                        //added by ketee, 20170319
                        objSQL.AddField("DepartSeat", BookingPassenger.DepartSeat, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DepartConnectingSeat", BookingPassenger.DepartConnectingSeat, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ReturnConnectingSeat", BookingPassenger.ReturnConnectingSeat, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ReturnSeat", BookingPassenger.ReturnSeat, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                        if (BookingPassenger.CommandType == "insert")
                        {
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_PASSENGERLIST", string.Empty);
                        }
                        else
                        {
                            string sign = "!=";
                            if (BookingPassenger.Title == "INFT")
                                sign = "=";
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_PASSENGERLIST", "TransID='" + BookingPassenger.TransID + "' AND PassengerID=" + BookingPassenger.PassengerID + " AND RecordLocator='" + BookingPassenger.RecordLocator + "' AND Title " + sign + " 'INFT'");
                        }

                        lstSQL.Add(strSQL);
                    }
                }
                if (HttpContext.Current.Session["listPassengerDataDelete"] != null)
                {
                    List<PassengerData> listPassengerDataDelete = (List<PassengerData>)HttpContext.Current.Session["listPassengerDataDelete"];
                    if (listPassengerDataDelete.Count > 0)
                    {
                        foreach (PassengerData BookingPassenger in listPassengerDataDelete)
                        {
                            strSQL = "DELETE BK_PASSENGERLIST WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, BookingPassenger.TransID) + "' AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, BookingPassenger.RecordLocator) + "' AND PassengerID = " + BookingPassenger.PassengerID + "";
                            lstSQL.Add(strSQL);
                        }
                    }
                }
                if (HttpContext.Current.Session["listPassengerDataDeleteAll"] != null)
                {
                    List<PassengerData> listPassengerDataDeleteAll = (List<PassengerData>)HttpContext.Current.Session["listPassengerDataDeleteAll"];
                    if (listPassengerDataDeleteAll.Count > 0)
                    {
                        foreach (PassengerData BookingPassenger in listPassengerDataDeleteAll)
                        {
                            strSQL = "DELETE BK_PASSENGERLIST WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, BookingPassenger.TransID) + "' AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, BookingPassenger.RecordLocator) + "'";
                            lstSQL.Add(strSQL);
                        }
                    }
                }

                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        //added by diana 20130923
        public Boolean UpdateFlightDetails(BookingTransactionMain BookingTransMain, List<BookingTransactionDetail> lstBookingTransDetail, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            int transTotalPax = 0;
            ArrayList recordLocatorCollection = new ArrayList();

            try
            {
                if (BookingTransMain != null)
                {
                    objSQL.AddField("TransID", BookingTransMain.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Currency", BookingTransMain.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CurrencyPaid", BookingTransMain.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ExchgRate", BookingTransMain.ExchangeRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("STDDate", BookingTransMain.STDDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDateEx1", BookingTransMain.PaymentDateEx1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentAmtEx1", BookingTransMain.PaymentAmtEx1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDateEx2", BookingTransMain.PaymentDateEx2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentAmtEx2", BookingTransMain.PaymentAmtEx2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDateEx3", BookingTransMain.PaymentDateEx3, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentAmtEx3", BookingTransMain.PaymentAmtEx3, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ExpiryDate", BookingTransMain.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CurReminderDate", BookingTransMain.CurReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SchemeCode", BookingTransMain.PayScheme, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PromoCode", BookingTransMain.PromoCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                    if (transTotalPax > 0)
                    {
                        //transTotalPax = transTotalPax / 2;
                        objSQL.AddField("TransTotalPax", transTotalPax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    }
                    switch (saveType)
                    {
                        case EnumSaveType.Insert:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSMAIN", string.Empty);
                            break;
                        case EnumSaveType.Update:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSMAIN", "BK_TRANSMAIN.TransID='" + BookingTransMain.TransID + "'");
                            break;
                    }
                    lstSQL.Add(strSQL);
                }

                if (lstBookingTransDetail != null)
                {
                    foreach (BookingTransactionDetail pBookingTransDetail in lstBookingTransDetail)
                    {
                        //added by diana 20131029 - update transvoid to 1 if booking status is cancel
                        pBookingTransDetail.TransVoid = 0;
                        if (BookingTransMain != null)
                        {
                            if (BookingTransMain.TransStatus >= 4) pBookingTransDetail.TransVoid = 1;
                        }
                        //end added by diana 20131029
                        objSQL.AddField("RecordLocator", pBookingTransDetail.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransID", pBookingTransDetail.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SeqNo", pBookingTransDetail.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CarrierCode", pBookingTransDetail.CarrierCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightNo", pBookingTransDetail.FlightNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DepartureDate", pBookingTransDetail.DepatureDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DepartureDate2", pBookingTransDetail.DepatureDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightDura", pBookingTransDetail.FlightDura, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightDura2", pBookingTransDetail.FlightDura2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Origin", pBookingTransDetail.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Transit", pBookingTransDetail.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Destination", pBookingTransDetail.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ArrivalDate", pBookingTransDetail.ArrivalDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ArrivalDate2", pBookingTransDetail.ArrivalDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FareClass", pBookingTransDetail.FareClass, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FarePerPax", pBookingTransDetail.FarePerPax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineTotal", pBookingTransDetail.LineTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineTax", pBookingTransDetail.LineTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LinePaxFee", pBookingTransDetail.LinePaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineFee", pBookingTransDetail.LineFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineVAT", pBookingTransDetail.LineVAT, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineCharge", pBookingTransDetail.LineCharge, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineOth", pBookingTransDetail.LineOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineProcess", pBookingTransDetail.LineProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineSSR", pBookingTransDetail.LineSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineSeat", pBookingTransDetail.LineSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineNameChange", pBookingTransDetail.LineNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineInsureFee", pBookingTransDetail.LineInsureFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);//added by romy for insure
                        objSQL.AddField("LineInfant", pBookingTransDetail.LineInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineDisc", pBookingTransDetail.LineDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LinePromoDisc", pBookingTransDetail.LinePromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("AttemptCount", pBookingTransDetail.AttemptCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Currency", pBookingTransDetail.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaxAdult", pBookingTransDetail.PaxAdult, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaxChild", pBookingTransDetail.PaxChild, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FareSellKey", pBookingTransDetail.SellKey, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("OverridedFareSellKey", pBookingTransDetail.OverridedSellKey, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                        objSQL.AddField("TransVoid", pBookingTransDetail.TransVoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        //objSQL.AddField("CreateBy", pBookingTransDetail.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        //objSQL.AddField("SyncCreate", pBookingTransDetail.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        //objSQL.AddField("SyncLastUpd", pBookingTransDetail.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        //objSQL.AddField("LastSyncBy", pBookingTransDetail.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        //objSQL.AddField("SellKey", pBookingTransDetail.Signature, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                        //amended by diana 20131103 - to add only approved record locator
                        if (pBookingTransDetail.RecordLocator.ToString().Trim().Length >= 6)
                        {
                            if (recordLocatorCollection.Contains(pBookingTransDetail.RecordLocator.ToString().Trim()))
                            {
                                recordLocatorCollection.Add(pBookingTransDetail.RecordLocator.ToString().Trim());
                                //added by diana 20131031
                                transTotalPax += pBookingTransDetail.PaxAdult;
                                transTotalPax += pBookingTransDetail.PaxChild;
                            }
                        }

                        if (pBookingTransDetail.CommandType == "insert")
                        {
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSDTL", string.Empty);
                        }
                        else
                        {
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "TransID='" + pBookingTransDetail.TransID + "' AND SeqNo=" + pBookingTransDetail.SeqNo + " AND RecordLocator='" + pBookingTransDetail.RecordLocator + "'");
                        }
                        lstSQL.Add(strSQL);
                    }
                }


                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);

                log.Info(this, "Updating Booking Journey : " + BookingTransMain.TransID + " with value of " + rValue);
                if (rValue == false)
                {
                    return false;
                }
                //return GetSingleBK_TRANSMAIN(BookingTransMain.TransID, BookingTransMain.TransType, BookingTransMain.AgentID, BookingTransMain.AgentCatgID, BookingTransMain.BookingDate);
                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        //added by ketee, get all booking status and update to db
        public Boolean UpdateTransactionHistory(string TransID, string SessionID, string PNR, ref string ErrMsg)
        {
            //requested items

            if (TransID != "")
            {
                GetBookingByPNR_InSess(SessionID);
            }
            return true;
        }

        //added by diana 20130922, update the latest flight details
        public Boolean UpdateBookingJourneyDetails(string TransID, string AgentName, string AgentID, Boolean VerifyDetails = false)
        {
            try
            {
                string PNR;
                string currencyCode = "";
                decimal exchangeRate = 1;
                DateTime stdDate = DateTime.Now;
                bool change = false;

                List<BookingJourneyContainer> listBookingJourneyContainers = new List<BookingJourneyContainer>();
                List<BookingTransactionDetail> listBookingJourney = new List<BookingTransactionDetail>();
                BookingTransactionDetail lstBooking = new BookingTransactionDetail();

                BookingTransactionDetail bookDTLInfo = new BookingTransactionDetail();
                BookingTransactionMain bookHDRInfo = new BookingTransactionMain();

                //List<PaymentContainer> listPaymentContainers = new List<PaymentContainer>();
                //List<BookingTransTender> listBookTransTenderInfo = new List<BookingTransTender>();
                //BookingTransTender bookTransTenderInfo = new BookingTransTender();
                //List<PassengerData> lstPassenger = new List<PassengerData>();

                LoadData(TransID);

                if (HttpContext.Current.Session["TransMain"] != null && HttpContext.Current.Session["TransDetail"] != null)
                {
                    DataTable dtTransMain = this.dtTransMain();
                    if (HttpContext.Current.Session["TransMain"] != null)
                        dtTransMain = (DataTable)HttpContext.Current.Session["TransMain"];
                    DataTable dtTransDetail = this.dtTransDetail();
                    if (HttpContext.Current.Session["TransDetail"] != null)
                        dtTransDetail = (DataTable)HttpContext.Current.Session["TransDetail"];

                    List<BookingTransactionDetail> listBookingDetail = new List<BookingTransactionDetail>();
                    listBookingDetail = GetAllBK_TRANSDTLFilterAll(TransID, 0); //amended by diana 20140127 - change from GetAllBK_TRANSDTLFilter to GetAllBK_TRANSDTLFilterAll

                    List<BookingTransactionDetail> lstbookDTLInfo = new List<BookingTransactionDetail>();
                    lstbookDTLInfo = new List<BookingTransactionDetail>();

                    int rowBookingJourneySeqNo = 1;

                    //update transmain
                    DataTable dtKeyFieldMain = GetKeyFieldMainByTransID(TransID);

                    for (int i = 0; i < dtTransDetail.Rows.Count; i++)
                    {
                        PNR = dtTransDetail.Rows[i]["RecordLocator"].ToString();
                        log.Info(this, "Entering GetBookingJourneyDetailsByPNR - PNR : " + PNR);
                        //amended by diana 20140526, execute only if PNR Length is >= 6
                        if (PNR.ToString().Trim().Length >= 6 && GetBookingJourneyDetailsByPNR(PNR, TransID))
                        {
                            log.Info(this, "End Retrieve GetBookingJourneyDetailsByPNR - succeed - PNR : " + PNR);
                            //load all available record in 1 transaction id
                            //if (VerifyDetails)
                            //{
                            //    totalPax += Convert.ToInt16(dtTransDetail.Rows[i]["PaxAdult"].ToString()) + Convert.ToInt16(dtTransDetail.Rows[i]["PaxChild"].ToString());
                            //    totalTransAmount += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());
                            //    totalTransTotalFee += Convert.ToDecimal(dtTransDetail.Rows[i]["LineFee"].ToString());
                            //    totalTransTotalOth += Convert.ToDecimal(dtTransDetail.Rows[i]["LineOth"].ToString());
                            //    totalTransTotalTax += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTax"].ToString());
                            //    totalTransSubTotal += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());
                            //}
                            //totalTransAmountAll += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());
                            if (HttpContext.Current.Session["BookingJourneyContainers"] != null)
                            {
                                listBookingJourneyContainers = (List<BookingJourneyContainer>)HttpContext.Current.Session["BookingJourneyContainers"];
                                DataTable dtKeyField = new DataTable();
                                dtKeyField = GetKeyFieldDetailByPNR(PNR);
                                decimal paymentAmount = 0, leftPayDetail = 0, totalPNRAmount = 0, currencyRate = 0;

                                foreach (BookingJourneyContainer rowBookingJourney in listBookingJourneyContainers)
                                {
                                    //paymentExtensionDate = rowBookingJourney.HoldDateTime;
                                    currencyCode = rowBookingJourney.CurrencyCode;
                                    exchangeRate = rowBookingJourney.ExchangeRate;
                                    if (rowBookingJourneySeqNo % 2 == 1) { stdDate = rowBookingJourney.STD; change = true; }

                                    //added by diana 20140516, differentiate oneWay and ReturnWay
                                    int cnt = 0;
                                    foreach (BookingTransactionDetail bkDetail in listBookingDetail)
                                    {
                                        if (bkDetail.RecordLocator == rowBookingJourney.RecordLocator)
                                        {
                                            cnt += 1;
                                        }
                                    }

                                    int iIndex = -1;
                                    if (cnt >= 2)
                                        iIndex = listBookingDetail.FindIndex(p => p.SeqNo % 2 == rowBookingJourneySeqNo % 2 && p.RecordLocator == rowBookingJourney.RecordLocator);
                                    else
                                        iIndex = listBookingDetail.FindIndex(p => p.RecordLocator == rowBookingJourney.RecordLocator);

                                    //int iIndex = listBookingDetail.FindIndex(p => p.SeqNo % 2 == rowBookingJourneySeqNo % 2 && p.RecordLocator == rowBookingJourney.RecordLocator);

                                    if (iIndex >= 0)
                                    {
                                        BookingTransactionDetail bookingJourney = listBookingDetail[iIndex];
                                        AssignBookingJourneyList(TransID, Convert.ToByte(bookingJourney.SeqNo), rowBookingJourney, PNR, "update", ref listBookingJourney);
                                    }
                                    else
                                    {
                                        //need to be checked - if get new pnr
                                        AssignBookingJourneyList(TransID, Convert.ToByte(rowBookingJourneySeqNo), rowBookingJourney, PNR, "insert", ref listBookingJourney);
                                    }
                                    rowBookingJourneySeqNo++;
                                }
                            }
                            else
                            {
                                return false;
                            }
                        }
                        else
                        {
                            log.Info(this, "End Retrieve GetBookingJourneyDetailsByPNR - no journey - PNR : " + PNR);
                        }
                    }
                    //if (dtKeyFieldMain.Rows.Count > 0)
                    if (dtKeyFieldMain.Rows.Count > 0 && dtTransDetail.Rows.Count > 0)
                    {
                        bookHDRInfo = GetSingleBK_TRANSMAIN(TransID, Convert.ToByte(dtKeyFieldMain.Rows[0]["TransType"]), dtKeyFieldMain.Rows[0]["AgentID"].ToString(), dtKeyFieldMain.Rows[0]["AgentCatgID"].ToString(), Convert.ToDateTime(dtKeyFieldMain.Rows[0]["BookingDate"]));
                        bookHDRInfo.Currency = currencyCode;
                        bookHDRInfo.CurrencyPaid = currencyCode;
                        bookHDRInfo.ExchangeRate = exchangeRate;

                        if (change == true) bookHDRInfo.STDDate = stdDate;

                        //string GroupName = "AA"; //remarked by diana 20140121
                        GeneralControl objGeneral = new GeneralControl();
                        string GroupName = objGeneral.getOPTGroupByCarrierCode(listBookingDetail[0].CarrierCode);

                        //remark by ketee 20131112
                        PaymentControl objPayment = new PaymentControl();
                        string Scheme = objPayment.GetScheme(bookHDRInfo.STDDate, bookHDRInfo.BookingDate, GroupName, TransID);

                        bookHDRInfo.PayScheme = Scheme;

                        PaymentInfo paymentInfo = new PaymentInfo();
                        paymentInfo = objPayment.GetPaymentScheme(Scheme, GroupName, TransID);

                        if (paymentInfo.Code_1 == "DOB")
                        {
                            bookHDRInfo.PaymentDateEx1 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_1);
                            bookHDRInfo.ExpiryDate = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_1);
                        }
                        else if (paymentInfo.Code_1 == "STD")
                        {
                            bookHDRInfo.PaymentDateEx1 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_1);
                            bookHDRInfo.ExpiryDate = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_1);
                        }
                        if (paymentInfo.Code_2 == "DOB")
                        {
                            bookHDRInfo.PaymentDateEx2 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_2);
                        }
                        else if (paymentInfo.Code_2 == "STD")
                        {
                            bookHDRInfo.PaymentDateEx2 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_2);
                        }
                        if (paymentInfo.Code_3 == "DOB")
                        {
                            bookHDRInfo.PaymentDateEx3 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_3);
                        }
                        else if (paymentInfo.Code_3 == "STD")
                        {
                            bookHDRInfo.PaymentDateEx3 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_3);
                        }
                        //added by diana 20131112 - to check hold date time
                        //if (bookHDRInfo.PaymentDateEx1 != null)
                        //{
                        //    if (bookHDRInfo.PaymentDateEx1 < paymentExtensionDate && paymentExtensionDate < timeNow) bookHDRInfo.PaymentDateEx1 = paymentExtensionDate;
                        //}
                        //if (bookHDRInfo.PaymentDateEx2 != null)
                        //{
                        //    if (bookHDRInfo.PaymentDateEx2 < paymentExtensionDate && paymentExtensionDate < timeNow) bookHDRInfo.PaymentDateEx2 = paymentExtensionDate;
                        //}
                        //if (bookHDRInfo.PaymentDateEx3 != null)
                        //{
                        //    if (bookHDRInfo.PaymentDateEx3 < paymentExtensionDate && paymentExtensionDate < timeNow) bookHDRInfo.PaymentDateEx3 = paymentExtensionDate;
                        //}
                        //if (bookHDRInfo.ExpiryDate < paymentExtensionDate && paymentExtensionDate < timeNow)
                        //{
                        //    bookHDRInfo.ExpiryDate = paymentExtensionDate;
                        //}
                        //end added by diana 20131112 - to check hold date time
                        bookHDRInfo.CurReminderDate = bookHDRInfo.ExpiryDate.Date.AddDays(-5);
                    }
                    if (listBookingDetail != null)
                    {
                        if (UpdateFlightDetails(bookHDRInfo, listBookingJourney, ABS.Logic.GroupBooking.Booking.BookingControl.EnumSaveType.Update) == false)
                        {
                            return false; // transaction failed
                        }
                        else
                        {
                            return true;
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        //added by diana 20130923, update the latest passenger details
        public Boolean UpdatePassengerDetails(string TransID, string AgentName, string AgentID, Boolean VerifyDetails = false)
        {
            //added by romy, performance monitoring
            var profiler = MiniProfiler.Current;
            try
            {
                string PNR;

                List<PassengerContainer> listPassengerContainers = new List<PassengerContainer>();
                List<PassengerData> listPassengerData = new List<PassengerData>();
                List<PassengerData> listPassengerDataDelete = new List<PassengerData>();
                PassengerData passengerData = new PassengerData();
                BookingTransactionDetail bookDTLInfo = new BookingTransactionDetail();
                BookingTransactionMain bookHDRInfo = new BookingTransactionMain();

                using (profiler.Step("LoadData"))
                {
                    LoadData(TransID);
                }

                if (HttpContext.Current.Session["TransMain"] != null && HttpContext.Current.Session["TransDetail"] != null)
                {
                    DataTable dtTransMain = this.dtTransMain();
                    if (HttpContext.Current.Session["TransMain"] != null)
                        dtTransMain = (DataTable)HttpContext.Current.Session["TransMain"];
                    DataTable dtTransDetail = this.dtTransDetail();
                    if (HttpContext.Current.Session["TransDetail"] != null)
                        dtTransDetail = (DataTable)HttpContext.Current.Session["TransDetail"];

                    List<PassengerData> listPassenger = new List<PassengerData>();
                    using (profiler.Step("GetAllBK_PASSENGERLIST"))
                    {
                        listPassenger = GetAllBK_PASSENGERLIST(TransID);
                    }

                    //List<Bk_transssr> listSSR = new List<Bk_transssr>();
                    List<Bk_transssr> listSSRContainer = new List<Bk_transssr>();


                    List<BookingTransactionDetail> lstbookDTLInfo = new List<BookingTransactionDetail>();
                    lstbookDTLInfo = new List<BookingTransactionDetail>();

                    //update transmain
                    DataTable dtKeyFieldMain;// = GetKeyFieldMainByTransID(TransID);
                    using (profiler.Step("GetKeyFieldMainByTransID"))
                    {
                        dtKeyFieldMain = GetKeyFieldMainByTransID(TransID);
                    }

                    for (int i = 0; i < dtTransDetail.Rows.Count; i++)
                    {
                        PNR = dtTransDetail.Rows[i]["RecordLocator"].ToString();
                        //listSSR = GetAllBK_TRANSSSR(TransID, PNR);

                        //amended by diana 20140526, execute only if PNR Length is >= 6
                        using (profiler.Step("GetPassengerDetailsByPNR"))
                        {
                            if (PNR.ToString().Trim().Length >= 6 && GetPassengerDetailsByPNR(PNR, TransID))
                            {
                                if (HttpContext.Current.Session["PassengerContainers"] != null)
                                {
                                    listPassengerContainers = (List<PassengerContainer>)HttpContext.Current.Session["PassengerContainers"];
                                    DataTable dtKeyField = new DataTable();
                                    using (profiler.Step("GetKeyFieldDetailByPNR"))
                                    {
                                        dtKeyField = GetKeyFieldDetailByPNR(PNR);
                                    }

                                    foreach (PassengerContainer rowPassenger in listPassengerContainers)
                                    {
                                        int iIndex = -1;

                                        if (listPassenger != null && listPassenger.Count > 0)
                                        {
                                            iIndex = listPassenger.FindIndex(p => p.PassengerID == rowPassenger.PassengerID.ToString() && p.RecordLocator == rowPassenger.RecordLocator);
                                        }

                                        if (iIndex >= 0)
                                        {
                                            PassengerData bookingPassenger = listPassenger[iIndex];
                                            using (profiler.Step("AssignPassengerList"))
                                            {
                                                AssignPassengerList(TransID, bookingPassenger.PassengerID, rowPassenger.Title, rowPassenger.Gender, rowPassenger.FirstName,
                                                rowPassenger.LastName, bookingPassenger.PrevFirstName1, bookingPassenger.PrevLastName1, bookingPassenger.PrevFirstName2,
                                                bookingPassenger.PrevLastName2, rowPassenger.Nationality, rowPassenger.DOB, rowPassenger.PassportNo,
                                                rowPassenger.IssuingCountry, bookingPassenger.ChangeFee, bookingPassenger.ChangeDate, bookingPassenger.ChangeFee2,
                                                bookingPassenger.ChangeDate2, rowPassenger.ExpiryDate, PNR, "update", bookingPassenger.ChangeCount,
                                                bookingPassenger.MaxChange, bookingPassenger.MaxPax1, bookingPassenger.MaxPax2,
                                                rowPassenger.DepartSeat, rowPassenger.DepartConnectingSeat, rowPassenger.ReturnSeat, rowPassenger.ReturnConnectingSeat, ref listPassengerData);
                                            }
                                        }
                                        else
                                        {
                                            List<BookingTransactionDetail> bkdtl;// = GetAllBK_TRANSDTLFilterByPNR(TransID, PNR);
                                            using (profiler.Step("GetAllBK_TRANSDTLFilterByPNR"))
                                            {
                                                bkdtl = GetAllBK_TRANSDTLFilterByPNR(TransID, PNR);
                                            }
                                            if (bkdtl != null && (bkdtl[0].CarrierCode.Trim() == "D7" || bkdtl[0].CarrierCode.Trim() == "XJ" || bkdtl[0].CarrierCode.Trim() == "ST"))
                                            {
                                                rowPassenger.MaxChange = 1;
                                                rowPassenger.MaxPax1 = Convert.ToInt16(dtKeyFieldMain.Rows[0]["TransTotalPax"]);
                                                rowPassenger.MaxPax2 = 0;
                                            }
                                            else
                                            {
                                                rowPassenger.MaxChange = 1;
                                                rowPassenger.MaxPax1 = (int)(0.3 * (Convert.ToInt16(dtKeyFieldMain.Rows[0]["TransTotalPax"])));
                                                rowPassenger.MaxPax2 = 0;
                                            }
                                            using (profiler.Step("AssignPassengerList"))
                                            {
                                                AssignPassengerList(TransID, rowPassenger.PassengerID.ToString(), rowPassenger.Title, rowPassenger.Gender, rowPassenger.FirstName,
                                                rowPassenger.LastName, rowPassenger.PrevFirstName1, rowPassenger.PrevLastName1, rowPassenger.PrevFirstName2, rowPassenger.PrevLastName2,
                                                rowPassenger.Nationality, rowPassenger.DOB, rowPassenger.PassportNo, rowPassenger.IssuingCountry, rowPassenger.ChangeFee,
                                                rowPassenger.ChangeDate, rowPassenger.ChangeFee2, rowPassenger.ChangeDate2, rowPassenger.ExpiryDate, PNR, "insert",
                                                rowPassenger.ChangeCount, rowPassenger.MaxChange, rowPassenger.MaxPax1, rowPassenger.MaxPax2,
                                                rowPassenger.DepartSeat, rowPassenger.DepartConnectingSeat, rowPassenger.ReturnSeat, rowPassenger.ReturnConnectingSeat, ref listPassengerData);
                                            }
                                        }
                                    }

                                    //var x = listPassenger.Except(listPassengerContainers);
                                    if (listPassenger != null)
                                    {
                                        listPassengerDataDelete = listPassenger.Where(p => !listPassengerContainers.Any(p2 => p2.PassengerID.ToString() == p.PassengerID) && p.RecordLocator == PNR && p.FirstName == "TBA" && p.LastName == "TBA").ToList();
                                        if (listPassengerDataDelete != null && listPassengerDataDelete.Count > 0)
                                        {
                                            HttpContext.Current.Session["listPassengerDataDelete"] = listPassengerDataDelete;
                                        }
                                    }
                                }
                                else
                                {
                                    return false;
                                }

                            }
                            else
                            {
                                if (listPassenger != null)
                                {
                                    List<PassengerData> listPassengerDataDeleteAll = listPassenger.Where(p => p.RecordLocator == PNR && p.FirstName == "TBA" && p.LastName == "TBA").ToList();
                                    if (listPassengerDataDeleteAll != null && listPassengerDataDeleteAll.Count > 0)
                                    {
                                        HttpContext.Current.Session["listPassengerDataDeleteAll"] = listPassengerDataDeleteAll;
                                    }
                                }
                            }
                        }
                    }
                    //var table = dtTransDetail.AsEnumerable().Select(r => r.Field<string>("RecordLocator")).ToList();
                    //var result = listPassenger.Where(p => !table.Any(t => StringComparer.OrdinalIgnoreCase.Equals(t, p.RecordLocator)));

                    if (passengerData != null)
                    {
                        using (profiler.Step("UpdatePassengerFlight"))
                        {
                            if (UpdatePassengerFlight(listPassengerData, ABS.Logic.GroupBooking.Booking.BookingControl.EnumSaveType.Update) == false)
                            {
                                return false; // transaction failed
                            }
                            else
                            {
                                return true;
                            }
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        //added by ketee
        public Boolean UpdatePaymentDetails(string TransID, string AgentName, string AgentID, Boolean VerifyDetails = false)
        {
            try
            {
                string PNR;
                Decimal totalPaid = 0;
                int totalPax = 0;
                decimal totalTransAmountAll = 0;
                decimal totalTransAmount = 0;
                decimal totalAmountGoing = 0;
                decimal totalAmountReturn = 0;
                decimal totalTransSubTotal = 0;
                decimal totalTransTotalFee = 0;
                decimal totalTransTotalTax = 0;
                decimal totalTransTotalPaxFee = 0;
                decimal totalTransTotalOth = 0;
                decimal totalTransTotalProcess = 0;
                decimal totalTransTotalSSR = 0;
                decimal totalTransTotalSeat = 0;
                decimal totalTransTotalNameChange = 0;
                decimal totalTransTotalInfant = 0;
                decimal totalTransTotalDisc = 0;
                decimal totalTransTotalPromoDisc = 0;
                decimal AverageFare = 0;

                List<PaymentContainer> listPaymentContainers = new List<PaymentContainer>();
                List<BookingTransTender> listBookTransTenderInfo = new List<BookingTransTender>();
                BookingTransactionDetail bookDTLInfo = new BookingTransactionDetail();
                BookingTransactionMain bookHDRInfo = new BookingTransactionMain();
                BookingTransTender bookTransTenderInfo = new BookingTransTender();
                List<PassengerData> lstPassenger = new List<PassengerData>();

                LoadData(TransID);

                if (HttpContext.Current.Session["TransMain"] != null && HttpContext.Current.Session["TransDetail"] != null)
                {
                    DataTable dtTransMain = this.dtTransMain();
                    if (HttpContext.Current.Session["TransMain"] != null)
                        dtTransMain = (DataTable)HttpContext.Current.Session["TransMain"];
                    DataTable dtTransDetail = this.dtTransDetail();
                    if (HttpContext.Current.Session["TransDetail"] != null)
                        dtTransDetail = (DataTable)HttpContext.Current.Session["TransDetail"];

                    List<BookingTransTender> listTransTender = new List<BookingTransTender>();
                    listTransTender = GetAllBK_TRANSTENDERFilter(TransID);

                    List<BookingTransactionDetail> lstbookDTLInfo = new List<BookingTransactionDetail>();
                    lstbookDTLInfo = new List<BookingTransactionDetail>();

                    //update transmain
                    DataTable dtKeyFieldMain = GetKeyFieldMainByTransID(TransID);

                    for (int i = 0; i < dtTransDetail.Rows.Count; i++)
                    {
                        PNR = dtTransDetail.Rows[i]["RecordLocator"].ToString();
                        ////added by ketee, verify from daataclasstrans
                        //if (PNR.Length < 6)
                        //{
                        //    if (HttpContext.Current.Session["dataClassTrans"] != null)
                        //    {
                        //        DataTable dataClass = objBooking.dtClassTrans();
                        //        dataClass = (DataTable)HttpContext.Current.Session["dataClassTrans"];
                        //        for (int k = 0; i < dataClass.Rows.Count; i++)
                        //        {
                        //            string sellSignature = dataClass.Rows[k]["SellSignature"].ToString();
                        //            if (sellSignature == dtTransDetail.Rows[i]["SellKey"].ToString())
                        //            {

                        //            }
                        //        }
                        //    }
                        //}

                        //amended by diana 20140526, execute only if PNR Length is >= 6
                        if (PNR.ToString().Trim().Length >= 6 && GetPaymentDetailsByPNR(PNR, TransID))
                        {
                            //load all available record in 1 transaction id
                            if (VerifyDetails)
                            {
                                totalPax += Convert.ToInt16(dtTransDetail.Rows[i]["PaxAdult"].ToString()) + Convert.ToInt16(dtTransDetail.Rows[i]["PaxChild"].ToString());
                                totalTransAmount += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());
                                totalTransTotalFee += Convert.ToDecimal(dtTransDetail.Rows[i]["LineFee"].ToString());
                                totalTransTotalOth += Convert.ToDecimal(dtTransDetail.Rows[i]["LineOth"].ToString());
                                totalTransTotalProcess += Convert.ToDecimal(dtTransDetail.Rows[i]["LineProcess"].ToString());
                                totalTransTotalSSR += Convert.ToDecimal(dtTransDetail.Rows[i]["LineSSR"].ToString());
                                totalTransTotalSeat += Convert.ToDecimal(dtTransDetail.Rows[i]["LineSeat"].ToString());
                                totalTransTotalNameChange += Convert.ToDecimal(dtTransDetail.Rows[i]["LineNameChange"].ToString());
                                totalTransTotalInfant += Convert.ToDecimal(dtTransDetail.Rows[i]["LineInfant"].ToString());
                                totalTransTotalDisc += Convert.ToDecimal(dtTransDetail.Rows[i]["LineDisc"].ToString());
                                totalTransTotalPromoDisc += Convert.ToDecimal(dtTransDetail.Rows[i]["LinePromoDisc"].ToString());
                                totalTransTotalTax += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTax"].ToString());
                                totalTransTotalPaxFee += Convert.ToDecimal(dtTransDetail.Rows[i]["LinePaxFee"].ToString());
                                totalTransSubTotal += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());
                            }
                            totalTransAmountAll += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());
                            if (HttpContext.Current.Session["PaymentContainers"] != null)
                            {
                                listPaymentContainers = (List<PaymentContainer>)HttpContext.Current.Session["PaymentContainers"];
                                DataTable dtKeyField = new DataTable();
                                dtKeyField = GetKeyFieldDetailByPNR(PNR);
                                decimal paymentAmount = 0, feeAmount = 0, totPaymentAmount = 0, leftPayDetail = 0, totalPNRAmount = 0, currencyRate = 0;

                                foreach (PaymentContainer rowPayment in listPaymentContainers)
                                {
                                    int paymentStatus = 0;
                                    string authorizationcode = "";
                                    string accountNumber = "";
                                    string merchantID = "";
                                    long accountNumberID = 0;
                                    byte transVoid = 1;
                                    paymentAmount = rowPayment.CollectedAmount;
                                    paymentStatus = rowPayment.PaymentStatus;
                                    authorizationcode = rowPayment.AuthorizationCode;
                                    accountNumber = rowPayment.AccountNumber;
                                    merchantID = rowPayment.MerchantID;
                                    accountNumberID = rowPayment.AccountNumberID;
                                    currencyRate = rowPayment.CurrencyRate;

                                    //totalPaid += paymentAmount;
                                    if (rowPayment.PaymentStatus == 3)
                                    {
                                        transVoid = 0;
                                        totalPaid += paymentAmount;
                                        totalPNRAmount += paymentAmount;
                                    }

                                    //amended by diana 20140408, findindex only if transtender is not null
                                    int iIndex = -1;
                                    if (listTransTender != null)
                                    {
                                        if (listTransTender.Count > 0)
                                        {
                                            iIndex = listTransTender.FindIndex(p => p.SeqNo == Convert.ToInt32(rowPayment.PaymentNumber) && p.RecordLocator == rowPayment.RecordLocator);
                                        }
                                    }

                                    if (iIndex >= 0)
                                    {
                                        BookingTransTender bookingTender = listTransTender[iIndex];
                                        AssignPaymentList(TransID, Convert.ToByte(bookingTender.SeqNo), paymentAmount, feeAmount, totPaymentAmount, rowPayment.CurrencyCode, rowPayment.CurrencyCode, bookingTender.TenderID, rowPayment.PaymentText, rowPayment.AccountNumber, rowPayment.AuthorizationCode, rowPayment.MerchantID, bookingTender.CreateBy, PNR, transVoid, "update", rowPayment.PaymentDate, ref listBookTransTenderInfo, currencyRate);
                                    }
                                    else
                                    {
                                        AssignPaymentList(TransID, Convert.ToByte(rowPayment.PaymentNumber), paymentAmount, feeAmount, totPaymentAmount, rowPayment.CurrencyCode, rowPayment.CurrencyCode, getTenderIDbyDesc(rowPayment.PaymentMethodCode), rowPayment.PaymentText, rowPayment.AccountNumber, rowPayment.AuthorizationCode, rowPayment.MerchantID, AgentName, PNR, transVoid, "insert", rowPayment.PaymentDate, ref listBookTransTenderInfo, currencyRate);
                                    }
                                }

                                if (dtKeyField.Rows.Count > 0)
                                {
                                    //to log columns
                                    string colName = "";
                                    foreach (DataColumn col in dtKeyField.Columns)
                                    {
                                        colName += col.ColumnName + ";";
                                    }
                                    log.Info(this, colName);
                                    //to log columns
                                }

                                int goingreturn = 0;
                                string strOrigin = "";
                                for (int ctrDetail = 0; ctrDetail < dtKeyField.Rows.Count; ctrDetail++)
                                {
                                    string RecordLocator = dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString();
                                    //TransID = dtKeyField.Rows[ctrDetail]["TransID"].ToString();
                                    byte SeqNo = Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]);

                                    bookDTLInfo = new BookingTransactionDetail();
                                    bookDTLInfo = GetSingleBK_TRANSDTL(RecordLocator, TransID, SeqNo);

                                    if (totalPNRAmount > bookDTLInfo.LineTotal)
                                    {
                                        leftPayDetail = totalPNRAmount - bookDTLInfo.LineTotal;
                                        totalPNRAmount = bookDTLInfo.LineTotal;
                                        AssignTransDetail(ref lstbookDTLInfo, dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString(), dtKeyField.Rows[ctrDetail]["TransID"].ToString(), Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]), AgentName, totalPNRAmount, PNR);
                                        //totalPaid += paymentAmount;
                                        totalPNRAmount = leftPayDetail;
                                    }
                                    else
                                    {
                                        AssignTransDetail(ref lstbookDTLInfo, dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString(), dtKeyField.Rows[ctrDetail]["TransID"].ToString(),
                                            Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]), AgentName, totalPNRAmount, PNR);
                                        //totalPaid += paymentAmount;
                                        totalPNRAmount = 0;
                                    }

                                    //total up total going and total return
                                    //start added by Agus
                                    if (strOrigin == "") strOrigin = bookDTLInfo.Origin;
                                    if (bookDTLInfo.Origin == strOrigin) goingreturn = 0;
                                    else goingreturn = 1;
                                    //end added by Agus
                                    if (VerifyDetails)
                                    {
                                        if (goingreturn == 0)
                                        {
                                            totalAmountGoing += bookDTLInfo.LineTotal;
                                        }
                                        else
                                        {
                                            totalAmountReturn += bookDTLInfo.LineTotal;
                                        }
                                    }

                                }
                            }
                            else
                            {
                                return false;
                            }
                        }
                        else
                        {
                            totalTransAmountAll += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());

                            if (VerifyDetails)
                            {
                                DataTable dtKeyField = new DataTable();
                                dtKeyField = GetKeyFieldDetailBySignature(dtTransDetail.Rows[i]["SellKey"].ToString());
                                //decimal paymentAmount = 0, leftPayDetail = 0, totalPNRAmount = 0;
                                for (int ctrDetail = 0; ctrDetail < dtKeyField.Rows.Count; ctrDetail++)
                                {
                                    string RecordLocator = dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString();
                                    //TransID = dtKeyField.Rows[ctrDetail]["TransID"].ToString();
                                    byte SeqNo = Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]);

                                    bookDTLInfo = new BookingTransactionDetail();
                                    bookDTLInfo = GetSingleBK_TRANSDTL(RecordLocator, TransID, SeqNo);

                                    //cancel PNR
                                    //CancelTransactionByPNR(TransID, RecordLocator, AgentID); //remarked by diana 20140109 - avoid cancelling if return nothing
                                    AssignTransDetail(ref lstbookDTLInfo, dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString(), dtKeyField.Rows[ctrDetail]["TransID"].ToString(), Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]), AgentName, bookDTLInfo.CollectedAmount, PNR, 1);

                                    totalPaid += bookDTLInfo.CollectedAmount;
                                    //totalPaid += paymentAmount;
                                    //totalPNRAmount = 0;


                                }
                            }
                        }
                    }

                    //decimal TotalTrans = Convert.ToDecimal(dtTransMain.Rows[0]["TotalTrans"]);
                    byte TransStatus = 1;
                    if (totalTransAmount > 0 && totalPaid >= totalTransAmount)
                    {
                        TransStatus = 2;
                    }
                    else
                    {
                        if (totalTransAmount == 0 && totalTransAmountAll > 0 && totalPaid >= totalTransAmountAll)
                        {
                            TransStatus = 2;
                        }
                    }
                    //if (totalPaid == TotalTrans)
                    //{
                    //    TransStatus = 2;
                    //}
                    if (dtKeyFieldMain.Rows.Count > 0)
                    {
                        AssignTransMain(ref bookHDRInfo, TransID, dtKeyFieldMain.Rows[0]["AgentID"].ToString(), dtKeyFieldMain.Rows[0]["AgentCatgID"].ToString(),
                            Convert.ToByte(dtKeyFieldMain.Rows[0]["TransType"]), Convert.ToDateTime(dtKeyFieldMain.Rows[0]["BookingDate"]), TransStatus,
                            AgentName, 2, totalPaid, "", "",
                            totalPax, totalTransAmount, totalTransTotalFee, totalTransTotalTax, totalTransTotalOth, totalTransTotalSSR,
                            totalTransTotalSeat, totalTransTotalNameChange, totalTransTotalInfant, totalTransTotalDisc, totalTransTotalPromoDisc, totalTransTotalProcess, totalTransSubTotal, totalAmountGoing, totalAmountReturn);
                    }

                    //for email purpose
                    HttpContext.Current.Session.Remove("TransStatus");
                    HttpContext.Current.Session.Add("TransStatus", TransStatus);
                    HttpContext.Current.Session.Remove("TotalPaid");
                    HttpContext.Current.Session.Add("TotalPaid", totalPaid);


                    if (lstbookDTLInfo.Count > 0 && bookHDRInfo != null && bookTransTenderInfo != null)
                    {
                        if (UpdateHeaderDetailTrans(bookHDRInfo, lstbookDTLInfo, listBookTransTenderInfo, ABS.Logic.GroupBooking.Booking.BookingControl.EnumSaveType.Update) == false)
                        {
                            return false; // transaction failed
                        }
                        else
                        {
                            return true;
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        public Boolean UpdatePaymentDetailsForView(string TransID, string AgentName, string AgentID, Boolean VerifyDetails = false)
        {
            try
            {
                string PNR;
                Decimal totalPaid = 0;
                int totalPax = 0;
                decimal totalTransAmountAll = 0;
                decimal totalTransAmount = 0;
                decimal totalAmountGoing = 0;
                decimal totalAmountReturn = 0;
                decimal totalTransSubTotal = 0;
                decimal totalTransTotalFee = 0;
                decimal totalTransTotalTax = 0;
                decimal totalTransTotalPaxFee = 0;
                decimal totalTransTotalOth = 0;
                decimal totalTransTotalProcess = 0;
                decimal totalTransTotalSSR = 0;
                decimal totalTransTotalSeat = 0;
                decimal totalTransTotalNameChange = 0;
                decimal totalTransTotalInfant = 0;
                decimal totalTransTotalDisc = 0;
                decimal totalTransTotalPromoDisc = 0;
                decimal AverageFare = 0;

                List<PaymentContainer> listPaymentContainers = new List<PaymentContainer>();
                List<BookingTransTender> listBookTransTenderInfo = new List<BookingTransTender>();
                BookingTransactionDetail bookDTLInfo = new BookingTransactionDetail();
                BookingTransactionMain bookHDRInfo = new BookingTransactionMain();
                BookingTransTender bookTransTenderInfo = new BookingTransTender();
                List<PassengerData> lstPassenger = new List<PassengerData>();

                LoadData(TransID);

                if (HttpContext.Current.Session["TransMain"] != null && HttpContext.Current.Session["TransDetail"] != null)
                {
                    DataTable dtTransMain = this.dtTransMain();
                    if (HttpContext.Current.Session["TransMain"] != null)
                        dtTransMain = (DataTable)HttpContext.Current.Session["TransMain"];
                    DataTable dtTransDetail = this.dtTransDetail();
                    if (HttpContext.Current.Session["TransDetail"] != null)
                        dtTransDetail = (DataTable)HttpContext.Current.Session["TransDetail"];

                    List<BookingTransTender> listTransTender = new List<BookingTransTender>();
                    listTransTender = GetAllBK_TRANSTENDERFilter(TransID);

                    List<BookingTransactionDetail> lstbookDTLInfo = new List<BookingTransactionDetail>();
                    lstbookDTLInfo = new List<BookingTransactionDetail>();

                    //update transmain
                    DataTable dtKeyFieldMain = GetKeyFieldMainByTransID(TransID);

                    for (int i = 0; i < dtTransDetail.Rows.Count; i++)
                    {
                        PNR = dtTransDetail.Rows[i]["RecordLocator"].ToString();
                        ////added by ketee, verify from daataclasstrans
                        //if (PNR.Length < 6)
                        //{
                        //    if (HttpContext.Current.Session["dataClassTrans"] != null)
                        //    {
                        //        DataTable dataClass = objBooking.dtClassTrans();
                        //        dataClass = (DataTable)HttpContext.Current.Session["dataClassTrans"];
                        //        for (int k = 0; i < dataClass.Rows.Count; i++)
                        //        {
                        //            string sellSignature = dataClass.Rows[k]["SellSignature"].ToString();
                        //            if (sellSignature == dtTransDetail.Rows[i]["SellKey"].ToString())
                        //            {

                        //            }
                        //        }
                        //    }
                        //}

                        if (GetPaymentDetailsByPNR(PNR, TransID))
                        {
                            //load all available record in 1 transaction id
                            if (VerifyDetails)
                            {
                                totalPax += Convert.ToInt16(dtTransDetail.Rows[i]["PaxAdult"].ToString()) + Convert.ToInt16(dtTransDetail.Rows[i]["PaxChild"].ToString());
                                totalTransAmount += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());
                                totalTransTotalFee += Convert.ToDecimal(dtTransDetail.Rows[i]["LineFee"].ToString());
                                totalTransTotalOth += Convert.ToDecimal(dtTransDetail.Rows[i]["LineOth"].ToString());
                                totalTransTotalProcess += Convert.ToDecimal(dtTransDetail.Rows[i]["LineProcess"].ToString());
                                totalTransTotalSSR += Convert.ToDecimal(dtTransDetail.Rows[i]["LineSSR"].ToString());
                                totalTransTotalSeat += Convert.ToDecimal(dtTransDetail.Rows[i]["LineSeat"].ToString());
                                totalTransTotalNameChange += Convert.ToDecimal(dtTransDetail.Rows[i]["LineNameChange"].ToString());
                                totalTransTotalInfant += Convert.ToDecimal(dtTransDetail.Rows[i]["LineInfant"].ToString());
                                totalTransTotalDisc += Convert.ToDecimal(dtTransDetail.Rows[i]["LineDisc"].ToString());
                                totalTransTotalPromoDisc += Convert.ToDecimal(dtTransDetail.Rows[i]["LinePromoDisc"].ToString());
                                totalTransTotalTax += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTax"].ToString());
                                totalTransTotalPaxFee += Convert.ToDecimal(dtTransDetail.Rows[i]["LinePaxFee"].ToString());
                                totalTransSubTotal += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());
                            }
                            totalTransAmountAll += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());
                            if (HttpContext.Current.Session["PaymentContainers"] != null)
                            {
                                listPaymentContainers = (List<PaymentContainer>)HttpContext.Current.Session["PaymentContainers"];
                                DataTable dtKeyField = new DataTable();
                                dtKeyField = GetKeyFieldDetailByPNR(PNR);
                                decimal paymentAmount = 0, feeAmount = 0, totPaymentAmount = 0, leftPayDetail = 0, totalPNRAmount = 0, currencyRate = 0;

                                foreach (PaymentContainer rowPayment in listPaymentContainers)
                                {
                                    int paymentStatus = 0;
                                    string authorizationcode = "";
                                    string accountNumber = "";
                                    string merchantID = "";
                                    long accountNumberID = 0;
                                    byte transVoid = 1;
                                    paymentAmount = rowPayment.CollectedAmount;
                                    paymentStatus = rowPayment.PaymentStatus;
                                    authorizationcode = rowPayment.AuthorizationCode;
                                    accountNumber = rowPayment.AccountNumber;
                                    merchantID = rowPayment.MerchantID;
                                    accountNumberID = rowPayment.AccountNumberID;
                                    currencyRate = rowPayment.CurrencyRate;

                                    //totalPaid += paymentAmount;
                                    if (rowPayment.PaymentStatus == 3)
                                    {
                                        transVoid = 0;
                                        totalPaid += paymentAmount;
                                        totalPNRAmount += paymentAmount;
                                    }

                                    int iIndex = listTransTender.FindIndex(p => p.SeqNo == Convert.ToInt32(rowPayment.PaymentNumber) && p.RecordLocator == rowPayment.RecordLocator);
                                    if (iIndex >= 0)
                                    {
                                        BookingTransTender bookingTender = listTransTender[iIndex];
                                        AssignPaymentList(TransID, Convert.ToByte(bookingTender.SeqNo), paymentAmount, feeAmount, totPaymentAmount, rowPayment.CurrencyCode, rowPayment.CurrencyCode, bookingTender.TenderID, rowPayment.PaymentText, rowPayment.AccountNumber, rowPayment.AuthorizationCode, rowPayment.MerchantID, bookingTender.CreateBy, PNR, transVoid, "update", rowPayment.PaymentDate, ref listBookTransTenderInfo, currencyRate);
                                    }
                                    else
                                    {
                                        AssignPaymentList(TransID, Convert.ToByte(rowPayment.PaymentNumber), paymentAmount, feeAmount, totPaymentAmount, rowPayment.CurrencyCode, rowPayment.CurrencyCode, getTenderIDbyDesc(rowPayment.PaymentMethodCode), rowPayment.PaymentText, rowPayment.AccountNumber, rowPayment.AuthorizationCode, rowPayment.MerchantID, AgentName, PNR, transVoid, "insert", rowPayment.PaymentDate, ref listBookTransTenderInfo, currencyRate);
                                    }
                                }

                                int goingreturn = 0;
                                string strOrigin = "";
                                for (int ctrDetail = 0; ctrDetail < dtKeyField.Rows.Count; ctrDetail++)
                                {
                                    string RecordLocator = dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString();
                                    //TransID = dtKeyField.Rows[ctrDetail]["TransID"].ToString();
                                    byte SeqNo = Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]);

                                    bookDTLInfo = new BookingTransactionDetail();
                                    bookDTLInfo = GetSingleBK_TRANSDTL(RecordLocator, TransID, SeqNo);

                                    if (totalPNRAmount > bookDTLInfo.LineTotal)
                                    {
                                        leftPayDetail = totalPNRAmount - bookDTLInfo.LineTotal;
                                        totalPNRAmount = bookDTLInfo.LineTotal;
                                        AssignTransDetail(ref lstbookDTLInfo, dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString(), dtKeyField.Rows[ctrDetail]["TransID"].ToString(), Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]), AgentName, totalPNRAmount, PNR);
                                        //totalPaid += paymentAmount;
                                        totalPNRAmount = leftPayDetail;
                                    }
                                    else
                                    {
                                        AssignTransDetail(ref lstbookDTLInfo, dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString(), dtKeyField.Rows[ctrDetail]["TransID"].ToString(), Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]), AgentName, totalPNRAmount, PNR);
                                        //totalPaid += paymentAmount;
                                        totalPNRAmount = 0;
                                    }

                                    //total up total going and total return
                                    //start added by Agus
                                    if (strOrigin == "") strOrigin = bookDTLInfo.Origin;
                                    if (bookDTLInfo.Origin == strOrigin) goingreturn = 0;
                                    else goingreturn = 1;
                                    //end added by Agus
                                    if (VerifyDetails)
                                    {
                                        if (goingreturn == 0)
                                        {
                                            totalAmountGoing += bookDTLInfo.LineTotal;
                                        }
                                        else
                                        {
                                            totalAmountReturn += bookDTLInfo.LineTotal;
                                        }
                                    }

                                }
                            }
                            else
                            {
                                return false;
                            }
                        }
                        else
                        {
                            totalTransAmountAll += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());
                            if (VerifyDetails)
                            {
                                DataTable dtKeyField = new DataTable();
                                dtKeyField = GetKeyFieldDetailBySignature(dtTransDetail.Rows[i]["SellKey"].ToString());
                                //decimal paymentAmount = 0, leftPayDetail = 0, totalPNRAmount = 0;
                                for (int ctrDetail = 0; ctrDetail < dtKeyField.Rows.Count; ctrDetail++)
                                {
                                    string RecordLocator = dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString();
                                    //TransID = dtKeyField.Rows[ctrDetail]["TransID"].ToString();
                                    byte SeqNo = Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]);

                                    bookDTLInfo = new BookingTransactionDetail();
                                    bookDTLInfo = GetSingleBK_TRANSDTL(RecordLocator, TransID, SeqNo);

                                    //cancel PNR
                                    CancelTransactionByPNR(TransID, RecordLocator, AgentID);
                                    AssignTransDetail(ref lstbookDTLInfo, dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString(), dtKeyField.Rows[ctrDetail]["TransID"].ToString(), Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]), AgentName, bookDTLInfo.CollectedAmount, PNR, 1);

                                    totalPaid += bookDTLInfo.CollectedAmount;
                                    //totalPaid += paymentAmount;
                                    //totalPNRAmount = 0;


                                }
                            }
                        }
                    }

                    //decimal TotalTrans = Convert.ToDecimal(dtTransMain.Rows[0]["TotalTrans"]);
                    byte TransStatus = 1;
                    if (totalTransAmount > 0 && totalPaid >= totalTransAmount)
                    {
                        TransStatus = 2;
                    }
                    else
                    {
                        if (totalTransAmount == 0 && totalTransAmountAll > 0 && totalPaid >= totalTransAmountAll)
                        {
                            TransStatus = 2;
                        }
                    }
                    //if (totalPaid == TotalTrans)
                    //{
                    //    TransStatus = 2;
                    //}
                    if (dtKeyFieldMain.Rows.Count > 0)
                    {
                        AssignTransMain(ref bookHDRInfo, TransID, dtKeyFieldMain.Rows[0]["AgentID"].ToString(), dtKeyFieldMain.Rows[0]["AgentCatgID"].ToString(), Convert.ToByte(dtKeyFieldMain.Rows[0]["TransType"]), Convert.ToDateTime(dtKeyFieldMain.Rows[0]["BookingDate"]), TransStatus, AgentName, 2, totalPaid, "", "", totalPax, totalTransAmount, totalTransTotalFee, totalTransTotalTax, totalTransTotalPaxFee, totalTransTotalOth, totalTransTotalSSR, totalTransTotalSeat, totalTransTotalNameChange, totalTransTotalInfant, totalTransTotalDisc, totalTransTotalPromoDisc, totalTransTotalProcess, totalTransSubTotal, totalAmountGoing, totalAmountReturn);
                    }

                    if (lstbookDTLInfo.Count > 0 && bookHDRInfo != null && bookTransTenderInfo != null)
                    {
                        if (UpdateHeaderDetailTransForView(bookHDRInfo, lstbookDTLInfo, listBookTransTenderInfo, ABS.Logic.GroupBooking.Booking.BookingControl.EnumSaveType.Update) == false)
                        {
                            return false; // transaction failed
                        }
                        else
                        {
                            return true;
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        protected void LoadData(string TransID, Boolean Devide = false)
        {
            //added by romy, performance monitoring
            var profiler = MiniProfiler.Current;

            List<BookingTransactionDetail> lstbookDTLInfo = new List<BookingTransactionDetail>();
            List<BookingTransactionDetail> listDetailCombinePNR = new List<BookingTransactionDetail>();
            BookingTransactionMain bookHDRInfo = new BookingTransactionMain();

            using (profiler.Step("GetSingleBK_TRANSMAIN"))
            {
                bookHDRInfo = GetSingleBK_TRANSMAIN(TransID);
            }
            FillDataTableTransMain(bookHDRInfo);

            using (profiler.Step("GetAllBK_TRANSDTLCombinePNR"))
            {
                listDetailCombinePNR = GetAllBK_TRANSDTLCombinePNR(TransID);
            }
            FillDataTableTransDetail(listDetailCombinePNR);
        }

        protected void LoadDataDevide(string TransID, Boolean Devide = false)
        {
            List<BookingTransactionDetail> lstbookDTLInfo = new List<BookingTransactionDetail>();
            List<BookingTransactionDetail> listDetailCombinePNR = new List<BookingTransactionDetail>();
            BookingTransactionMain bookHDRInfo = new BookingTransactionMain();

            bookHDRInfo = GetSingleBK_TRANSMAIN(TransID);
            FillDataTableTransMain(bookHDRInfo);

            listDetailCombinePNR = GetAllBK_TRANSDTLCombinePNRDevide(TransID, true);
            FillDataTableTransDetail(listDetailCombinePNR);
        }

        public void AssignTransMain(ref BookingTransactionMain bookHDRInfo, string transID, string agentID, string agentCatgID, byte TransType, DateTime bookingDate, byte transStatus, string agentName, byte reminderType, decimal collectAmt, string currency, string currencyPaid, int totalPax = 0, decimal totalTransAmount = 0, decimal totalTransFee = 0, decimal totalTransTax = 0, decimal totalTransPaxFee = 0, decimal totalTransOth = 0, decimal totalTransSSR = 0, decimal totalTransSeat = 0, decimal totalTransNameChange = 0, decimal totalTransInfant = 0, decimal totalTransDisc = 0, decimal totalTransPromoDisc = 0, decimal totalTransProcess = 0, decimal totalTransSub = 0, decimal totalAmountGoing = 0, decimal totalAmountReturn = 0)
        {
            bookHDRInfo = GetSingleBK_TRANSMAIN(transID, TransType, agentID, agentCatgID, bookingDate);
            if (totalPax > 0)
                bookHDRInfo.TransTotalPAX = totalPax;
            if (totalTransAmount > 0)
                bookHDRInfo.TransTotalAmt = totalTransAmount;
            if (totalTransFee > 0)
                bookHDRInfo.TransTotalFee = totalTransFee;
            if (totalTransTax > 0)
                bookHDRInfo.TransTotalTax = totalTransTax;
            if (totalTransPaxFee > 0)
                bookHDRInfo.TransTotalPaxFee = totalTransPaxFee;
            if (totalTransOth > 0)
                bookHDRInfo.TransTotalOth = totalTransOth;
            if (totalTransSSR > 0)
                bookHDRInfo.TransTotalSSR = totalTransSSR;
            if (totalTransSeat > 0)
                bookHDRInfo.TransTotalSeat = totalTransSeat;
            if (totalTransNameChange > 0)
                bookHDRInfo.TransTotalNameChange = totalTransNameChange;
            if (totalTransInfant > 0)
                bookHDRInfo.TransTotalInfant = totalTransInfant;
            if (totalTransDisc > 0)
                bookHDRInfo.TransTotalDisc = totalTransDisc;
            if (totalTransPromoDisc > 0)
                bookHDRInfo.TransTotalPromoDisc = totalTransPromoDisc;
            if (totalTransProcess > 0)
                bookHDRInfo.TransTotalProcess = totalTransProcess;
            if (totalTransSub > 0)
                bookHDRInfo.TransSubTotal = totalTransSub;
            if (totalTransAmount > 0 && totalPax > 0)
                bookHDRInfo.TotalAmtAVG = Convert.ToDecimal((Math.Round(totalTransAmount / totalPax, 2)).ToString());
            if (totalAmountGoing > 0)
                bookHDRInfo.TotalAmtGoing = totalAmountGoing;
            if (totalAmountReturn > 0)
                bookHDRInfo.TotalAmtReturn = totalAmountReturn;

            bookHDRInfo.CollectedAmt = collectAmt;

            //previous code
            //if (bookHDRInfo.TransStatus != 4 && bookHDRInfo.TransStatus != 3)
            //{
            //    bookHDRInfo.TransStatus = transStatus;
            //}

            //amended by diana 20140108 - if status <= 1, then change status, else change needpaymentstatus
            if (bookHDRInfo.TransStatus <= 1) //if (bookHDRInfo.TransStatus <= 2)
            {
                bookHDRInfo.TransStatus = transStatus;
                if (transStatus >= 2 && transStatus <= 3) //added by diana 20140109 - add condition to change needpaymentstatus
                {
                    bookHDRInfo.NeedPaymentStatus = 0;
                }
                else
                {
                    bookHDRInfo.NeedPaymentStatus = 1;
                }
            }
            else if (transStatus >= 2 && transStatus <= 3) //amended by ketee, check bookHDRInfo.TransStatus
            //else if (bookHDRInfo.TransStatus >= 2 && bookHDRInfo.TransStatus <= 3)
            {
                bookHDRInfo.NeedPaymentStatus = 0;
                if (bookHDRInfo.TransStatus < transStatus)
                {
                    bookHDRInfo.TransStatus = transStatus;
                }
            }
            else
            {
                if (bookHDRInfo.TransTotalAmt > bookHDRInfo.CollectedAmt) //amended by diana 20140104 - only if amount > collected
                    bookHDRInfo.NeedPaymentStatus = 1;
                else
                    bookHDRInfo.NeedPaymentStatus = 0;
            }
            bookHDRInfo.SyncLastUpd = DateTime.Now;
            bookHDRInfo.LastSyncBy = agentName;
            bookHDRInfo.ReminderType = reminderType;




            //bookHDRInfo.Currency = currency;
            //bookHDRInfo.CurrencyPaid = currencyPaid;
            bookHDRInfo.PaymentDate = DateTime.Now;
        }

        //added by diana 20130922
        public void AssignBookingJourneyList(string transID, byte seqNo, BookingJourneyContainer bookingJourney, string PNR, string commandType, ref List<BookingTransactionDetail> listTransDetail, byte IsLatest = 0)
        {
            BookingTransactionDetail bookDTLInfo = new BookingTransactionDetail();
            bookDTLInfo.TransID = transID;
            bookDTLInfo.RecordLocator = PNR;
            bookDTLInfo.SeqNo = seqNo;
            bookDTLInfo.CarrierCode = bookingJourney.CarrierCode;
            bookDTLInfo.FareClass = bookingJourney.FareClass;
            bookDTLInfo.FlightNo = bookingJourney.FlightNumber;
            bookDTLInfo.Origin = bookingJourney.DepartureStation;
            bookDTLInfo.Transit = bookingJourney.OverridedDepartureStation;
            bookDTLInfo.Destination = bookingJourney.ArrivalStation;
            bookDTLInfo.DepatureDate = bookingJourney.STD;
            bookDTLInfo.ArrivalDate = bookingJourney.STA;
            bookDTLInfo.DepatureDate2 = bookingJourney.OverridedSTD;
            bookDTLInfo.ArrivalDate2 = bookingJourney.OverridedSTA;
            bookDTLInfo.FlightDura = bookingJourney.FlightDura;
            bookDTLInfo.FlightDura2 = bookingJourney.FlightDura2;
            bookDTLInfo.SellKey = bookingJourney.FareSellKey;
            bookDTLInfo.OverridedSellKey = bookingJourney.OverridedFareSellKey;
            bookDTLInfo.Signature = bookingJourney.JourneySellKey;

            if (bookDTLInfo.Transit != null && bookDTLInfo.Transit != "")
            {
                bookDTLInfo.Destination = bookingJourney.OverridedArrivalStation;
                bookDTLInfo.Transit = bookingJourney.OverridedDepartureStation;
            }

            bookDTLInfo.PaxAdult = bookingJourney.AdtPax;
            bookDTLInfo.PaxChild = bookingJourney.ChdPax;
            if (bookingJourney.AdtFarePrice != 0)
                bookDTLInfo.FarePerPax = bookingJourney.AdtFarePrice;
            else
                bookDTLInfo.FarePerPax = bookingJourney.ChdFarePrice;

            bookDTLInfo.LineTax = (bookingJourney.AdtTaxChrg + bookingJourney.AdtFuelChrg) * bookingJourney.AdtPax + (bookingJourney.ChdTaxChrg + bookingJourney.ChdFuelChrg) * bookingJourney.ChdPax;
            bookDTLInfo.LineOth = bookingJourney.AdtServChrg * bookingJourney.AdtPax + bookingJourney.ChdServChrg * bookingJourney.ChdPax;
            bookDTLInfo.LineOth = bookingJourney.AdtServChrg * bookingJourney.AdtPax + bookingJourney.ChdServChrg * bookingJourney.ChdPax;
            bookDTLInfo.LineDisc = bookingJourney.AdtDiscChrg * bookingJourney.AdtPax + bookingJourney.ChdDiscChrg * bookingJourney.ChdPax;
            bookDTLInfo.LinePromoDisc = bookingJourney.AdtPromoDiscChrg * bookingJourney.AdtPax + bookingJourney.ChdPromoDiscChrg * bookingJourney.ChdPax;
            bookDTLInfo.LinePaxFee = bookingJourney.PaxFeeChrg * bookingJourney.AdtPax + bookingJourney.PaxFeeChrg * bookingJourney.ChdPax;
            bookDTLInfo.LineSSR = bookingJourney.SSRChrg;
            bookDTLInfo.LineSeat = bookingJourney.SeatChrg;
            bookDTLInfo.LineNameChange = bookingJourney.NameChangeChrg;
            bookDTLInfo.LineInfant = bookingJourney.InfantChrg;
            bookDTLInfo.LineInsureFee = bookingJourney.InsureChrg;
            //bookDTLInfo.LineFee = bookingJourney.ServiceFee * (bookDTLInfo.PaxAdult + bookDTLInfo.PaxChild);
            //bookDTLInfo.LineVAT = bookingJourney.VATFee * (bookDTLInfo.PaxAdult + bookDTLInfo.PaxChild);
            //bookDTLInfo.LineCharge = bookingJourney.ChargeFee * (bookDTLInfo.PaxAdult + bookDTLInfo.PaxChild);
            //bookDTLInfo.LineOth += bookingJourney.OtherFee * (bookDTLInfo.PaxAdult + bookDTLInfo.PaxChild);
            //bookDTLInfo.LineOth += bookingJourney.SPLFee;

            bookDTLInfo.LineFee = bookingJourney.ServiceFee;
            bookDTLInfo.LineVAT = bookingJourney.VATFee;
            bookDTLInfo.LineCharge = bookingJourney.ChargeFee;
            bookDTLInfo.LineOth += bookingJourney.OtherFee;
            bookDTLInfo.LineOth += bookingJourney.SPLFee;
            bookDTLInfo.LineProcess += bookingJourney.ProcessFee;
            bookDTLInfo.LineDisc += bookingJourney.DiscFee;
            bookDTLInfo.LinePromoDisc += bookingJourney.PromoDiscFee;

            bookDTLInfo.LineTotal = bookDTLInfo.FarePerPax * (bookDTLInfo.PaxAdult + bookDTLInfo.PaxChild) + bookDTLInfo.LineTax + bookDTLInfo.LinePaxFee + bookDTLInfo.LineOth + bookDTLInfo.LineProcess + bookDTLInfo.LineDisc + bookDTLInfo.LinePromoDisc + bookDTLInfo.LineFee + bookDTLInfo.LineInsureFee + bookDTLInfo.LineVAT + bookDTLInfo.LineCharge + bookDTLInfo.LineSSR + bookDTLInfo.LineSeat + bookDTLInfo.LineNameChange + bookDTLInfo.LineInfant;

            bookDTLInfo.Currency = bookingJourney.CurrencyCode;
            bookDTLInfo.CommandType = commandType;

            bookDTLInfo.AttemptCount = 0;
            bookDTLInfo.TransVoid = 0;
            bookDTLInfo.IsLatest = IsLatest;
            bookDTLInfo.IsInitVoid = bookDTLInfo.TransVoid;


            listTransDetail.Add(bookDTLInfo);
        }

        //added by diana 20130923
        public void AssignPassengerList(string transID, string passengerID, string title, string gender, string firstName, string lastName, string prevFirstName1, string prevLastName1, string prevFirstName2, string prevLastName2, string nationality, DateTime dob, string passportNo, string issuingCountry, decimal changeFee, DateTime changeDate, decimal changeFee2, DateTime changeDate2, DateTime expiryDate, string PNR, string commandType, int changeCount, int maxChange, int maxPax1, int maxPax2, string departSeat, string departConnectingSeat, string returnSeat, string returnConnectingSeat, ref List<PassengerData> listPassengerData)
        {
            PassengerData bookPassengerData = new PassengerData();

            bookPassengerData.TransID = transID;
            bookPassengerData.PassengerID = passengerID;
            bookPassengerData.Title = title;
            bookPassengerData.Gender = gender;
            bookPassengerData.FirstName = firstName;
            bookPassengerData.LastName = lastName;
            bookPassengerData.PrevFirstName1 = prevFirstName1;
            bookPassengerData.PrevLastName1 = prevLastName1;
            bookPassengerData.PrevFirstName2 = prevFirstName2;
            bookPassengerData.PrevLastName2 = prevLastName2;
            bookPassengerData.Nationality = nationality;
            bookPassengerData.DOB = dob;
            bookPassengerData.PassportNo = passportNo;
            bookPassengerData.IssuingCountry = issuingCountry;
            bookPassengerData.ChangeFee = changeFee;
            bookPassengerData.ChangeDate = changeDate;
            bookPassengerData.ChangeFee2 = changeFee2;
            bookPassengerData.ChangeDate2 = changeDate2;
            bookPassengerData.ExpiryDate = expiryDate;
            bookPassengerData.RecordLocator = PNR;
            bookPassengerData.CommandType = commandType;
            bookPassengerData.ChangeCount = changeCount;
            //change by Tyas to 1
            //bookPassengerData.MaxChange = 1;
            bookPassengerData.MaxChange = maxChange;
            bookPassengerData.MaxPax1 = maxPax1;
            bookPassengerData.MaxPax2 = maxPax2;
            bookPassengerData.DepartSeat = departSeat;
            bookPassengerData.DepartConnectingSeat = departConnectingSeat;
            bookPassengerData.ReturnSeat = returnSeat;
            bookPassengerData.ReturnConnectingSeat = returnConnectingSeat;
            listPassengerData.Add(bookPassengerData);
        }

        public void AssignPaymentList(string transID, byte seqNo, decimal payAmt, decimal feeAmt, decimal totPayAmt, string currency, string currencyPaid, string tenderID, string feeType,
                string cardNumber, string authorizationCode, string merchantID, string agentName, string PNR, byte transVoid, string commandType, DateTime payDate, ref List<BookingTransTender> listTransTender, decimal currencyRate = 1)
        {

            BookingTransTender bookTransTenderInfos = new BookingTransTender();
            bookTransTenderInfos.TransID = transID;
            bookTransTenderInfos.SeqNo = seqNo;
            //bookTransTenderInfos.SyncCreate = DateTime.Now;
            bookTransTenderInfos.TenderAmt = payAmt;
            bookTransTenderInfos.TenderDue = payAmt;
            bookTransTenderInfos.FeeAmt = feeAmt;
            bookTransTenderInfos.PayAmt = totPayAmt;
            bookTransTenderInfos.TransDate = payDate;
            bookTransTenderInfos.Transvoid = transVoid;
            bookTransTenderInfos.Currency = currency;
            bookTransTenderInfos.CurrencyPaid = currencyPaid;
            bookTransTenderInfos.TenderID = tenderID;

            string FeeTypeVal = "";
            if (feeType.Contains("#"))
            {
                string[] payText = feeType.Split('#');
                FeeTypeVal = payText[payText.Length - 1];
            }
            bookTransTenderInfos.FeeType = FeeTypeVal;

            bookTransTenderInfos.RefNo = cardNumber;
            bookTransTenderInfos.AuthorizationCode = authorizationCode;
            bookTransTenderInfos.MerchantID = merchantID;
            bookTransTenderInfos.CreateBy = agentName;
            bookTransTenderInfos.RecordLocator = PNR;
            bookTransTenderInfos.CommandType = commandType;
            //added by ketee
            bookTransTenderInfos.ExchgRate = currencyRate;
            listTransTender.Add(bookTransTenderInfos);
        }

        public void AssignTransDetail(ref List<BookingTransactionDetail> lstbookDTLInfo, string recordlocatordb, string transID, byte seqNo, string agentName, decimal collectedAmt, string pnr, byte transVoid = 0)
        {
            BookingTransactionDetail bookDTLInfo = new BookingTransactionDetail();
            bookDTLInfo = GetSingleBK_TRANSDTL(recordlocatordb, transID, seqNo);
            bookDTLInfo.TransVoid = transVoid;
            bookDTLInfo.LastSyncBy = agentName;
            bookDTLInfo.SyncLastUpd = DateTime.Now;
            bookDTLInfo.CollectedAmount = collectedAmt;
            bookDTLInfo.RecordLocator = pnr;


            lstbookDTLInfo.Add(bookDTLInfo);
        }

        //added by ketee
        public Boolean UpdateBookingDueDate(string AgentName, string GroupName, string PayScheme, string PNR, string TransID, decimal CurrencyRate, ref DateTime ExpiryDate, ref decimal NextDueAmount)
        {
            try
            {
                BookingTransactionMain BookingHeader = new BookingTransactionMain();
                BookingHeader = GetSingleBK_TRANSMAIN(TransID);
                BookingTransactionDetail BookingDetail = new BookingTransactionDetail();
                BookingDetail = GetSingleBK_TRANSDTLCombinePNR(TransID, PNR);
                List<BookingTransactionDetail> lstbookDTLInfo = new List<BookingTransactionDetail>();
                BookingTransactionDetail bookDTLInfo = new BookingTransactionDetail();

                if (BookingHeader != null && BookingDetail != null)
                {
                    DateTime STD = BookingHeader.STDDate;
                    DateTime BookingDate = BookingHeader.BookingDate;
                    DataTable dtDetails = GetKeyFieldDetailByPNR(PNR);
                    NextDueAmount = 0;

                    NextDueAmount = GetNextAmount_Date_Due(TransID, PNR, GroupName, PayScheme, CurrencyRate, BookingDetail.CollectedAmount, BookingDetail.LineTotal - BookingDetail.CollectedAmount, BookingDetail.LineFee, BookingDetail.LineTotal, STD, BookingDate, ref ExpiryDate);
                    if (NextDueAmount > 0 && ExpiryDate != null && dtDetails != null)
                    {
                        for (int i = 0; i < dtDetails.Rows.Count; i++)
                        {
                            byte SeqNo = Convert.ToByte(dtDetails.Rows[i]["SeqNo"]);
                            bookDTLInfo = new BookingTransactionDetail();
                            bookDTLInfo = GetSingleBK_TRANSDTL(PNR, TransID, SeqNo);
                            bookDTLInfo.LastSyncBy = AgentName;
                            bookDTLInfo.SyncLastUpd = DateTime.Now;
                            bookDTLInfo.NextDueAmount = NextDueAmount;
                            //added by ketee, check original expiry date, 20160222
                            if (ExpiryDate > bookDTLInfo.NextDueDate)
                            {
                                bookDTLInfo.NextDueDate = ExpiryDate;
                            }
                            lstbookDTLInfo.Add(bookDTLInfo);
                        }
                        if (lstbookDTLInfo != null)
                        {
                            if (SaveDetailBatch(lstbookDTLInfo, null, EnumSaveType.Update) == false)
                            {
                                throw new ApplicationException("Update Booking Due Date - Save Detail Batch Failed.");
                            }
                            else
                            {
                                //added by ketee, check orifinal expirydate , 20160222
                                if (ExpiryDate > BookingHeader.ExpiryDate)
                                {
                                    BookingHeader.ExpiryDate = ExpiryDate;
                                }
                                BookingHeader.CurReminderDate = ExpiryDate.AddDays(-5);
                                if (UpdatePaymentExpiry(BookingHeader, EnumSaveType.Update) == false)
                                {
                                    throw new ApplicationException("Update Payment Expiry - Update Payment Expiry Failed.");
                                }
                            }
                        }
                    }
                }
                else
                {
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
        }

        //public Decimal GetNextAmount_Date_Due(string PayScheme, Decimal CollectedAmount, Decimal AmountDue, Decimal ServiceChg, Decimal FullPrice, DateTime STD, DateTime BookingDate, ref DateTime ExpiryDate)
        //{
        //    PaymentInfo paymentInfo = new PaymentInfo();
        //    PaymentControl objPay = new PaymentControl();
        //    paymentInfo = objPay.GetPaymentScheme(PayScheme, "AA");

        //    DateTime todays = DateTime.Now;

        //    double remainingHrs = (STD.Subtract(todays).TotalHours);
        //    double BookingHrs = todays.Subtract(BookingDate).TotalHours;
        //    decimal paymentIn48HR = 0;
        //    decimal PaymentIn2ndAtp = 0;
        //    decimal PaymentIn3rdAtp = 0;

        //    switch (PayScheme)
        //    {
        //        case "B2M":
        //            paymentIn48HR = ((FullPrice * paymentInfo.Percentage_1) / 100);
        //            PaymentIn2ndAtp = ((FullPrice * paymentInfo.Percentage_2) / 100) + paymentIn48HR;
        //            PaymentIn3rdAtp = ((FullPrice * paymentInfo.Percentage_3) / 100) + PaymentIn2ndAtp;
        //            if (BookingHrs <= 48)
        //            {
        //                if (paymentIn48HR > CollectedAmount)
        //                {
        //                    ExpiryDate = BookingDate.AddHours(48);
        //                    return paymentIn48HR - CollectedAmount;
        //                }
        //                else
        //                {
        //                    ExpiryDate = BookingDate.AddHours(720);
        //                    return PaymentIn2ndAtp - CollectedAmount;
        //                }
        //            }
        //            else if (BookingHrs <= 720 && BookingHrs > 48)
        //            {
        //                if (CollectedAmount < paymentIn48HR)
        //                {
        //                    //booking cancel
        //                }

        //                if (PaymentIn2ndAtp > CollectedAmount)
        //                {
        //                    ExpiryDate = BookingDate.AddHours(720);
        //                    return PaymentIn2ndAtp - CollectedAmount;
        //                }
        //                else
        //                {
        //                    ExpiryDate = STD.AddHours(-720);
        //                    return PaymentIn3rdAtp - CollectedAmount;
        //                }
        //            }
        //            else if (remainingHrs >= 720)
        //            {
        //                if (CollectedAmount < PaymentIn2ndAtp)
        //                {
        //                    //booking cancel
        //                }

        //                if (PaymentIn3rdAtp > CollectedAmount)
        //                {
        //                    ExpiryDate = STD.AddHours(-720);
        //                    return PaymentIn3rdAtp - CollectedAmount;
        //                }
        //            }
        //            break;
        //        case "W2M":
        //            paymentIn48HR = ((FullPrice * paymentInfo.Percentage_1) / 100);
        //            PaymentIn2ndAtp = FullPrice;

        //            if (BookingHrs <= 48)
        //            {
        //                if (paymentIn48HR > CollectedAmount)
        //                {
        //                    ExpiryDate = BookingDate.AddHours(48);
        //                    return paymentIn48HR - CollectedAmount;
        //                }
        //                else
        //                {
        //                    ExpiryDate = BookingDate.AddHours(720);
        //                    return PaymentIn2ndAtp - CollectedAmount;
        //                }
        //            }
        //            else if (remainingHrs >= 720)
        //            {
        //                if (CollectedAmount < paymentIn48HR)
        //                {
        //                    //booking cancel
        //                }

        //                if (PaymentIn2ndAtp > CollectedAmount)
        //                {
        //                    ExpiryDate = STD.AddHours(-720);
        //                    return PaymentIn2ndAtp - CollectedAmount;
        //                }
        //            }

        //            break;
        //        case "W1M":
        //            paymentIn48HR = FullPrice;

        //            if (BookingHrs <= 48)
        //            {
        //                if (paymentIn48HR > CollectedAmount)
        //                {
        //                    ExpiryDate = BookingDate.AddHours(48);
        //                    return paymentIn48HR - CollectedAmount;
        //                }
        //            }
        //            else
        //            {
        //                if (CollectedAmount < paymentIn48HR)
        //                {
        //                    //booking cancel
        //                }
        //            }

        //            break;
        //        case "W1W":
        //            if (CollectedAmount < paymentIn48HR)
        //            {
        //                //booking cancel
        //            }
        //            return FullPrice;

        //    }
        //    return 0;
        //}

        //Added by ketee, old payment scheme
        public Decimal GetNextAmount_Date_Due(string PNR, string GroupName, string PayScheme, Decimal CollectedAmount, Decimal AmountDue, Decimal ServiceChg, Decimal FullPrice, DateTime STD, DateTime BookingDate, ref DateTime ExpiryDate)
        {
            PaymentInfo paymentInfo = new PaymentInfo();
            PaymentControl objPay = new PaymentControl();
            paymentInfo = objPay.GetPaymentScheme(PayScheme, GroupName);

            DateTime todays = DateTime.Now;

            double remainingHrs = (STD.Subtract(todays).TotalHours);
            double BookingHrs = todays.Subtract(BookingDate).TotalHours;

            /// amended by diana 20130913
            decimal paymentAttempt1 = 0;
            decimal paymentAttempt2 = 0;
            decimal paymentAttempt3 = 0;

            //added by diana 20140121 - retrieve currency, origin, transit for deposit purpose
            BookingControl objBooking = new BookingControl();
            BookingTransactionDetail objBK_TRANSDTL_Info = new BookingTransactionDetail();
            objBK_TRANSDTL_Info = objBooking.GetBK_TRANSDTLFlightByPNR(PNR);
            Decimal deposit = 0;

            //paymentAttempt1 = ((FullPrice - ServiceChg) * paymentInfo.Percentage_1) / 100 + ServiceChg;
            //paymentAttempt2 = ((FullPrice - ServiceChg) * paymentInfo.Percentage_2) / 100 + paymentAttempt1;
            //paymentAttempt3 = ((FullPrice - ServiceChg) * paymentInfo.Percentage_3) / 100 + paymentAttempt2;

            paymentAttempt1 = getRounding(Math.Round((FullPrice * paymentInfo.Percentage_1) / 100, 2));
            if (paymentInfo.Deposit_1 != 0)
            {
                if (deposit == 0)
                {
                    deposit = objGeneral.getDeposit(objBK_TRANSDTL_Info.TotalPax, objBK_TRANSDTL_Info.Currency, objBK_TRANSDTL_Info.Origin, objBK_TRANSDTL_Info.Transit);
                }
                paymentAttempt1 = deposit + ServiceChg;
            }

            //amended by diana 20140121 - add condition to differentiate deposit and non deposit
            if (paymentInfo.Deposit_1 != 0)
                paymentAttempt2 = getRounding(Math.Round((FullPrice * paymentInfo.Percentage_2) / 100, 2));
            else
                paymentAttempt2 = getRounding(Math.Round((FullPrice * paymentInfo.Percentage_2) / 100, 2) + paymentAttempt1);

            if (paymentInfo.Deposit_2 != 0)
            {
                if (deposit == 0)
                {
                    deposit = objGeneral.getDeposit(objBK_TRANSDTL_Info.TotalPax, objBK_TRANSDTL_Info.Currency, objBK_TRANSDTL_Info.Origin, objBK_TRANSDTL_Info.Transit);
                }
                paymentAttempt2 = deposit + paymentAttempt1;
            }

            //amended by diana 20140121 - add condition to differentiate deposit and non deposit
            if (paymentInfo.Deposit_2 != 0)
                paymentAttempt3 = Math.Round((FullPrice * paymentInfo.Percentage_3) / 100, 2);
            else
                paymentAttempt3 = Math.Round((FullPrice * paymentInfo.Percentage_3) / 100, 2) + paymentAttempt2;
            if (paymentInfo.Deposit_3 != 0)
            {
                if (deposit == 0)
                {
                    deposit = objGeneral.getDeposit(objBK_TRANSDTL_Info.TotalPax, objBK_TRANSDTL_Info.Currency, objBK_TRANSDTL_Info.Origin, objBK_TRANSDTL_Info.Transit);
                }
                paymentAttempt3 = deposit + paymentAttempt2;
            }


            bool doneattempt1 = true;
            bool doneattempt2 = true;
            bool doneattempt3 = true;

            if (paymentInfo.Code_1 == "DOB")
            {
                //if (BookingHrs <= paymentInfo.Attempt_1)
                //{
                if (paymentAttempt1 > CollectedAmount)
                {
                    //added by ketee to check expirydate
                    if (ExpiryDate <= BookingDate.AddHours(paymentInfo.Attempt_1))
                    {
                        ExpiryDate = BookingDate.AddHours(paymentInfo.Attempt_1);
                        doneattempt1 = false;
                    }
                }
                //}
            }
            else if (paymentInfo.Code_1 == "STD")
            {
                //if (remainingHrs <= paymentInfo.Attempt_1)
                //{
                if (paymentAttempt1 > CollectedAmount)
                {
                    if (ExpiryDate <= STD.AddHours(-paymentInfo.Attempt_1))
                    {
                        ExpiryDate = STD.AddHours(-paymentInfo.Attempt_1);
                        doneattempt1 = false;
                    }
                }
                //}
            }
            if (doneattempt1 == true)
            {
                if (paymentInfo.Code_2 == "DOB")
                {
                    //if (BookingHrs <= paymentInfo.Attempt_2)
                    //{
                    if (paymentAttempt2 > CollectedAmount)
                    {
                        if (ExpiryDate <= BookingDate.AddHours(paymentInfo.Attempt_2))
                        {
                            ExpiryDate = BookingDate.AddHours(paymentInfo.Attempt_2);
                            doneattempt2 = false;
                        }
                    }
                    //}
                }
                else if (paymentInfo.Code_2 == "STD")
                {
                    //if (remainingHrs <= paymentInfo.Attempt_2)
                    //{
                    if (paymentAttempt2 > CollectedAmount)
                    {
                        if (ExpiryDate <= STD.AddHours(-paymentInfo.Attempt_2))
                        {
                            ExpiryDate = STD.AddHours(-paymentInfo.Attempt_2);
                            doneattempt2 = false;
                        }
                    }
                    //}
                }

                if (doneattempt2 == true)
                {
                    if (paymentInfo.Code_3 == "DOB")
                    {
                        //if (BookingHrs <= paymentInfo.Attempt_3)
                        //{
                        if (paymentAttempt3 > CollectedAmount)
                        {
                            if (ExpiryDate <= BookingDate.AddHours(paymentInfo.Attempt_3))
                            {
                                ExpiryDate = BookingDate.AddHours(paymentInfo.Attempt_3);
                                doneattempt3 = false;
                            }
                        }
                        //}
                    }
                    else if (paymentInfo.Code_3 == "STD")
                    {
                        //if (remainingHrs <= paymentInfo.Attempt_3)
                        //{
                        if (paymentAttempt3 > CollectedAmount)
                        {
                            if (ExpiryDate <= STD.AddHours(-paymentInfo.Attempt_3))
                            {
                                ExpiryDate = STD.AddHours(-paymentInfo.Attempt_3);
                                doneattempt3 = false;
                            }
                        }
                        //}
                    }
                    if (doneattempt3 == true)
                    {
                        if (PayScheme == "W1W")
                            ExpiryDate = STD.AddDays(-1);
                        else
                            ExpiryDate = STD.AddDays(-7);
                    }
                }
            }

            //added by get rounding if not immediate payment or last payment
            if (doneattempt1 == false)
                return getRounding(paymentAttempt1 - CollectedAmount);
            else if (doneattempt2 == false)
                return getRounding(paymentAttempt2 - CollectedAmount);
            else if (doneattempt3 == false)
                return paymentAttempt3 - CollectedAmount;
            else if (PayScheme == "W1W")
            {
                return FullPrice - CollectedAmount;
            }

            return 0;
            /// end here

        }

        public decimal getRounding(decimal value)
        {
            decimal rounding = decimal.Zero;
            if (value.ToString().Split('.').Length > 1)
            {
                switch (value.ToString().Split('.')[1].Substring(1, 1))
                {
                    case "1":
                    case "6":
                        rounding = value + (decimal)-0.01;
                        break;
                    case "2":
                    case "7":
                        rounding = value + (decimal)-0.02;
                        break;
                    case "3":
                    case "8":
                        rounding = value + (decimal)0.02;
                        break;
                    case "4":
                    case "9":
                        rounding = value + (decimal)0.01;
                        break;
                    default:
                        return value;
                }
            }
            return rounding;

        }

        //End Previous getNextAmount_Date_Due

        //amended by diana 20140121 - add parameter GroupName, change AA to var GroupName, add checking for deposit
        public Decimal GetNextAmount_Date_Due(string TransID, string PNR, string GroupName, string PayScheme, decimal CurrencyRate, Decimal CollectedAmount, Decimal AmountDue, Decimal ServiceChg, Decimal FullPrice, DateTime STD, DateTime BookingDate, ref DateTime ExpiryDate) //, ref DateTime PayDueDate1, ref decimal PayDueAmount1, ref DateTime PayDueDate2, ref decimal PayDueAmount2, ref DateTime PayDueDate3, ref decimal PayDueAmount3)
        {
            PaymentInfo paymentInfo = new PaymentInfo();
            PaymentControl objPay = new PaymentControl();
            paymentInfo = objPay.GetPaymentScheme(PayScheme, GroupName, TransID);

            DateTime todays = DateTime.Now;

            double remainingHrs = (STD.Subtract(todays).TotalHours);
            double BookingHrs = todays.Subtract(BookingDate).TotalHours;

            /// amended by diana 20130913
            decimal paymentAttempt1 = 0;
            decimal paymentAttempt2 = 0;
            decimal paymentAttempt3 = 0;

            decimal FirstDeposit = 0;

            //added by diana 20140121 - retrieve currency, origin, transit for deposit purpose
            BookingControl objBooking = new BookingControl();
            BookingTransactionDetail objBK_TRANSDTL_Info = new BookingTransactionDetail();
            objBK_TRANSDTL_Info = objBooking.GetBK_TRANSDTLFlightByPNR(PNR);
            Decimal deposit = 0;

            if (paymentInfo.PaymentType == "SVCF")
            {
                FirstDeposit = paymentInfo.FirstDeposit;
                if (CurrencyRate > 0) FirstDeposit = FirstDeposit / CurrencyRate;
                FirstDeposit = FirstDeposit * objBK_TRANSDTL_Info.TotalPax;
                //PayDueAmount1 = FirstDeposit;
            }
            else
            {
                //PayDueAmount1 = objBK_TRANSDTL_Info.LineTotal;
            }
            //PayDueDate1 = BookingDate;

            //paymentAttempt1 = ((FullPrice - ServiceChg) * paymentInfo.Percentage_1) / 100 + ServiceChg;
            //paymentAttempt2 = ((FullPrice - ServiceChg) * paymentInfo.Percentage_2) / 100 + paymentAttempt1;
            //paymentAttempt3 = ((FullPrice - ServiceChg) * paymentInfo.Percentage_3) / 100 + paymentAttempt2;

            paymentAttempt1 = Math.Round((FullPrice * paymentInfo.Percentage_1) / 100, 2);
            if (paymentInfo.IsNominal_1 == 1)
            {
                if (deposit == 0)
                {
                    //objBK_TRANSDTL_Info.Currency
                    deposit = objGeneral.getDepositByDuration(objBK_TRANSDTL_Info.TransID, FullPrice, objBK_TRANSDTL_Info.TotalPax, objBK_TRANSDTL_Info.Currency, objBK_TRANSDTL_Info.Origin, GroupName, objBK_TRANSDTL_Info.FlightDuration, objBK_TRANSDTL_Info.SellKey, objBK_TRANSDTL_Info.Transit);
                    //if (CurrencyRate > 0) deposit = deposit / CurrencyRate;
                }
                paymentAttempt1 = deposit + ServiceChg;
                //PayDueAmount2 = deposit;
            }
            else if (paymentInfo.Deposit_1 != 0)
            {
                if (deposit == 0)
                {
                    deposit = objGeneral.getDeposit(objBK_TRANSDTL_Info.TransID, objBK_TRANSDTL_Info.TotalPax, objBK_TRANSDTL_Info.Currency, objBK_TRANSDTL_Info.Origin, objBK_TRANSDTL_Info.Transit);
                }
                paymentAttempt1 = deposit + ServiceChg;
                //PayDueAmount2 = deposit;
            }

            if (paymentInfo.Code_1 == "DOB")
            {
                //PayDueDate2 = BookingDate.AddHours(paymentInfo.Attempt_1);
            }
            else if (paymentInfo.Code_1 == "STD")
            {
                //PayDueDate2 = STD.AddHours(-paymentInfo.Attempt_1);
            }

            //amended by diana 20140121 - add condition to differentiate deposit and non deposit
            if (paymentInfo.IsNominal_1 == 1)
                paymentAttempt2 = Math.Round((FullPrice * paymentInfo.Percentage_2) / 100, 2);
            else if (paymentInfo.Deposit_1 != 0)
                paymentAttempt2 = Math.Round((FullPrice * paymentInfo.Percentage_2) / 100, 2);
            else
                paymentAttempt2 = Math.Round((FullPrice * paymentInfo.Percentage_2) / 100, 2) + paymentAttempt1;

            //PayDueAmount3 = objBK_TRANSDTL_Info.LineTotal - PayDueAmount1 - PayDueAmount2;

            if (paymentInfo.Code_2 == "DOB")
            {
                ///PayDueDate3 = BookingDate.AddHours(paymentInfo.Attempt_2);
            }
            else if (paymentInfo.Code_2 == "STD")
            {
                //PayDueDate3 = STD.AddHours(-paymentInfo.Attempt_2);
            }

            //paymentAttempt1 = Math.Round((FullPrice * paymentInfo.Percentage_1) / 100, 2);
            //if (paymentInfo.Deposit_1 != 0)
            //{
            //    if (deposit == 0)
            //    {
            //        deposit = objGeneral.getDeposit(objBK_TRANSDTL_Info.TotalPax, objBK_TRANSDTL_Info.Currency, objBK_TRANSDTL_Info.Origin, objBK_TRANSDTL_Info.Transit);
            //    }
            //    paymentAttempt1 = deposit + ServiceChg;
            //}

            ////amended by diana 20140121 - add condition to differentiate deposit and non deposit
            //if (paymentInfo.Deposit_1 != 0)
            //    paymentAttempt2 = Math.Round((FullPrice * paymentInfo.Percentage_2) / 100, 2);
            //else
            //    paymentAttempt2 = Math.Round((FullPrice * paymentInfo.Percentage_2) / 100, 2) + paymentAttempt1;

            if (paymentInfo.Deposit_2 != 0)
            {
                if (deposit == 0)
                {
                    deposit = objGeneral.getDeposit(objBK_TRANSDTL_Info.TransID, objBK_TRANSDTL_Info.TotalPax, objBK_TRANSDTL_Info.Currency, objBK_TRANSDTL_Info.Origin, objBK_TRANSDTL_Info.Transit);
                }
                paymentAttempt2 = deposit + paymentAttempt1;
            }

            //amended by diana 20140121 - add condition to differentiate deposit and non deposit
            if (paymentInfo.Deposit_2 != 0)
                paymentAttempt3 = Math.Round((FullPrice * paymentInfo.Percentage_3) / 100, 2);
            else
                paymentAttempt3 = Math.Round((FullPrice * paymentInfo.Percentage_3) / 100, 2) + paymentAttempt2;
            if (paymentInfo.Deposit_3 != 0)
            {
                if (deposit == 0)
                {
                    deposit = objGeneral.getDeposit(objBK_TRANSDTL_Info.TransID, objBK_TRANSDTL_Info.TotalPax, objBK_TRANSDTL_Info.Currency, objBK_TRANSDTL_Info.Origin, objBK_TRANSDTL_Info.Transit);
                }
                paymentAttempt3 = deposit + paymentAttempt2;
            }


            bool doneattempt1 = true;
            bool doneattempt2 = true;
            bool doneattempt3 = true;

            if (paymentInfo.Code_1 == "DOB")
            {
                //if (BookingHrs <= paymentInfo.Attempt_1)
                //{
                if (paymentInfo.IsNominal_1 == 1)
                {
                    paymentAttempt1 = paymentAttempt1 - CollectedAmount;
                }
                if (paymentAttempt1 > CollectedAmount)
                {
                    //added by ketee to check expirydate
                    if (ExpiryDate <= BookingDate.AddHours(paymentInfo.Attempt_1))
                    {
                        ExpiryDate = BookingDate.AddHours(paymentInfo.Attempt_1);
                        doneattempt1 = false;
                    }
                }
                //}
            }
            else if (paymentInfo.Code_1 == "STD")
            {
                if (paymentInfo.IsNominal_1 == 1)
                {
                    paymentAttempt1 = paymentAttempt1 - CollectedAmount;
                }
                //if (remainingHrs <= paymentInfo.Attempt_1)
                //{
                if (paymentAttempt1 > CollectedAmount)
                {
                    if (ExpiryDate <= STD.AddHours(-paymentInfo.Attempt_1))
                    {
                        ExpiryDate = STD.AddHours(-paymentInfo.Attempt_1);
                        doneattempt1 = false;
                    }
                }
                //}
            }
            if (doneattempt1 == true)
            {
                if (paymentInfo.Code_2 == "DOB")
                {
                    //if (BookingHrs <= paymentInfo.Attempt_2)
                    //{
                    if (paymentAttempt2 > CollectedAmount)
                    {
                        if (ExpiryDate <= BookingDate.AddHours(paymentInfo.Attempt_2))
                        {
                            ExpiryDate = BookingDate.AddHours(paymentInfo.Attempt_2);
                            doneattempt2 = false;
                        }
                    }
                    //}
                }
                else if (paymentInfo.Code_2 == "STD")
                {
                    //if (remainingHrs <= paymentInfo.Attempt_2)
                    //{
                    if (paymentAttempt2 > CollectedAmount)
                    {
                        if (ExpiryDate <= STD.AddHours(-paymentInfo.Attempt_2))
                        {
                            ExpiryDate = STD.AddHours(-paymentInfo.Attempt_2);
                            doneattempt2 = false;
                        }
                    }
                    //}
                }

                if (doneattempt2 == true)
                {
                    if (paymentInfo.Code_3 == "DOB")
                    {
                        //if (BookingHrs <= paymentInfo.Attempt_3)
                        //{
                        if (paymentAttempt3 > CollectedAmount)
                        {
                            if (ExpiryDate <= BookingDate.AddHours(paymentInfo.Attempt_3))
                            {
                                ExpiryDate = BookingDate.AddHours(paymentInfo.Attempt_3);
                                doneattempt3 = false;
                            }
                        }
                        //}
                    }
                    else if (paymentInfo.Code_3 == "STD")
                    {
                        //if (remainingHrs <= paymentInfo.Attempt_3)
                        //{
                        if (paymentAttempt3 > CollectedAmount)
                        {
                            if (ExpiryDate <= STD.AddHours(-paymentInfo.Attempt_3))
                            {
                                ExpiryDate = STD.AddHours(-paymentInfo.Attempt_3);
                                doneattempt3 = false;
                            }
                        }
                        //}
                    }
                    if (doneattempt3 == true)
                    {
                        if (PayScheme == "W1W")
                            ExpiryDate = STD.AddDays(-1);
                        else
                            ExpiryDate = STD.AddDays(-7);
                    }
                }
            }

            if (doneattempt1 == false)
                return paymentAttempt1 - CollectedAmount;
            else if (doneattempt2 == false)
                return paymentAttempt2 - CollectedAmount;
            else if (doneattempt3 == false)
                return paymentAttempt3 - CollectedAmount;
            else if (PayScheme == "W1W")
            {
                return FullPrice - CollectedAmount;
            }

            return 0;
            /// end here

            //decimal paymentIn48HR = 0;
            //decimal PaymentIn2ndAtp = 0;
            //decimal PaymentIn3rdAtp = 0;

            //switch (PayScheme)
            //{
            //    case "B2M":
            //        paymentIn48HR = ((FullPrice * paymentInfo.Percentage_1) / 100);
            //        PaymentIn2ndAtp = ((FullPrice * paymentInfo.Percentage_2) / 100) + paymentIn48HR;
            //        PaymentIn3rdAtp = ((FullPrice * paymentInfo.Percentage_3) / 100) + PaymentIn2ndAtp;
            //        if (BookingHrs <= 48)
            //        {
            //            if (paymentIn48HR > CollectedAmount)
            //            {
            //                ExpiryDate = BookingDate.AddHours(48);
            //                return paymentIn48HR - CollectedAmount;
            //            }
            //            else
            //            {
            //                ExpiryDate = BookingDate.AddHours(720);
            //                return PaymentIn2ndAtp - CollectedAmount;
            //            }
            //        }
            //        else if (BookingHrs <= 720 && BookingHrs > 48)
            //        {
            //            if (CollectedAmount < paymentIn48HR)
            //            {
            //                //booking cancel
            //            }

            //            if (PaymentIn2ndAtp > CollectedAmount)
            //            {
            //                ExpiryDate = BookingDate.AddHours(720);
            //                return PaymentIn2ndAtp - CollectedAmount;
            //            }
            //            else
            //            {
            //                ExpiryDate = STD.AddHours(-720);
            //                return PaymentIn3rdAtp - CollectedAmount;
            //            }
            //        }
            //        else if (remainingHrs >= 720)
            //        {
            //            if (CollectedAmount < PaymentIn2ndAtp)
            //            {
            //                //booking cancel
            //            }

            //            if (PaymentIn3rdAtp > CollectedAmount)
            //            {
            //                ExpiryDate = STD.AddHours(-720);
            //                return PaymentIn3rdAtp - CollectedAmount;
            //            }
            //        }
            //        break;
            //    case "W2M":
            //        paymentIn48HR = ((FullPrice * paymentInfo.Percentage_1) / 100);
            //        PaymentIn2ndAtp = FullPrice;

            //        if (BookingHrs <= 48)
            //        {
            //            if (paymentIn48HR > CollectedAmount)
            //            {
            //                ExpiryDate = BookingDate.AddHours(48);
            //                return paymentIn48HR - CollectedAmount;
            //            }
            //            else
            //            {
            //                ExpiryDate = BookingDate.AddHours(720);
            //                return PaymentIn2ndAtp - CollectedAmount;
            //            }
            //        }
            //        else if (remainingHrs >= 720)
            //        {
            //            if (CollectedAmount < paymentIn48HR)
            //            {
            //                //booking cancel
            //            }

            //            if (PaymentIn2ndAtp > CollectedAmount)
            //            {
            //                ExpiryDate = STD.AddHours(-720);
            //                return PaymentIn2ndAtp - CollectedAmount;
            //            }
            //        }

            //        break;
            //    case "W1M":
            //        paymentIn48HR = FullPrice;

            //        if (BookingHrs <= 48)
            //        {
            //            if (paymentIn48HR > CollectedAmount)
            //            {
            //                ExpiryDate = BookingDate.AddHours(48);
            //                return paymentIn48HR - CollectedAmount;
            //            }
            //        }
            //        else
            //        {
            //            if (CollectedAmount < paymentIn48HR)
            //            {
            //                //booking cancel
            //            }
            //        }

            //        break;
            //    case "W1W":
            //        if (CollectedAmount < paymentIn48HR)
            //        {
            //            //booking cancel
            //        }
            //        return FullPrice;

            //}
            //return 0;
        }

        public bool BookingCommitByPNR(string RecordLocator, string Signature, ref string errMessage)
        {
            Navitaire.APIBooking apiBooking = new Navitaire.APIBooking("");
            return apiBooking.BookingCommit(RecordLocator, Signature, ref errMessage);
        }


        //amend by ketee 20130625
        public string BookingCommit(ABS.Logic.GroupBooking.Agent.AgentProfile agent, int paxNum, decimal cost, string psSellSignature, ref string errMsg, string contactTitle = "", string contactFirstName = "", string contactLastName = "", string contactEmail = "", string contactPhone = "", string contactAddress = "", string contactTown = "", string contactCountry = "", string contactState = "", string contactZipCode = "", string organizationName = "", string OrganizationID = "")
        {
            log.Info(this, "Entering BookingCommit:" + agent.AgentID + "," + paxNum + "," + cost + "," + psSellSignature + "," + errMsg + "," + contactTitle + "," + contactFirstName + "," + contactLastName + "," + contactEmail + "," + contactPhone + "," + contactAddress + "," + contactTown + "," + contactCountry + "," + contactState + "," + contactZipCode);

            ////test to get booking response
            //Navitaire.APIBooking api = new Navitaire.APIBooking("");
            //Navitaire.BookingManager.Booking booking = new Navitaire.BookingManager.Booking();
            //booking = api.GetBookingFromState(psSellSignature);
            //string strxml = GetXMLString(booking);
            ////end test to get booking reponse

            BookingCommitRequest request = new BookingCommitRequest();
            BookingCommitRequestData requestData = new BookingCommitRequestData();

            ////try only

            //PaymentAddress[] ccAddress = new PaymentAddress[1];
            //ccAddress[0] = new PaymentAddress();

            //ccAddress[0].AddressLine1 = strCCAddres;
            //ccAddress[0].City = strCCCity;
            //ccAddress[0].CountryCode = strCCCountry;
            //ccAddress[0].ProvinceState = strCCState;
            //ccAddress[0].PostalCode = strCCZipCode;
            //request.addPaymentToBookingReqData.PaymentAddresses = ccAddress;
            ////end try only

            //booking comments
            if (organizationName == "")
            {
                organizationName = agent.AgentID;
            }
            requestData.BookingComments = new BookingComment[1];
            requestData.BookingComments[0] = new BookingComment();
            requestData.BookingComments[0].CommentText = organizationName;

            #region BookingContacts

            requestData.BookingContacts = new BookingContact[1];
            requestData.BookingContacts[0] = new BookingContact();
            requestData.BookingContacts[0].AddressLine1 = contactAddress;// "KLIA";

            if (agent.Address2 != null) requestData.BookingContacts[0].AddressLine2 = agent.Address2; else requestData.BookingContacts[0].AddressLine2 = "-";
            if (agent.Address3 != null) requestData.BookingContacts[0].AddressLine3 = agent.Address3; else requestData.BookingContacts[0].AddressLine3 = "-";

            requestData.BookingContacts[0].City = contactTown;// "";
            requestData.BookingContacts[0].CompanyName = organizationName;// "VanceInfo";
            requestData.BookingContacts[0].ProvinceState = contactState;// "MY";
            requestData.BookingContacts[0].PostalCode = contactZipCode;// "MY";
            requestData.BookingContacts[0].CountryCode = contactCountry;// "MY";
            requestData.BookingContacts[0].CultureCode = "";
            requestData.BookingContacts[0].CustomerNumber = "";
            requestData.BookingContacts[0].DistributionOption = DistributionOption.Email;
            requestData.BookingContacts[0].EmailAddress = contactEmail;// "chen_yongqing-cyq@Vanceinfo.com";
            requestData.BookingContacts[0].SourceOrganization = OrganizationID;

            if (agent.Fax != null) requestData.BookingContacts[0].Fax = agent.Fax; else requestData.BookingContacts[0].Fax = "-";
            //if (agent.PhoneNo != null)
            //{
            //    if (agent.PhoneNo.ToString() != "") requestData.BookingContacts[0].HomePhone = agent.PhoneNo; else requestData.BookingContacts[0].HomePhone = contactPhone;
            //}
            //else
            //{
            //    requestData.BookingContacts[0].HomePhone = contactPhone;
            //}

            requestData.BookingContacts[0].HomePhone = contactPhone;

            requestData.BookingContacts[0].Names = new BookingName[1];
            requestData.BookingContacts[0].Names[0] = new BookingName();
            requestData.BookingContacts[0].Names[0].FirstName = contactFirstName;// "Charis";
            requestData.BookingContacts[0].Names[0].LastName = contactLastName;// "Chen";
            requestData.BookingContacts[0].Names[0].Title = contactTitle;// "MS";
            requestData.BookingContacts[0].Names[0].State = MessageState.New;
            requestData.BookingContacts[0].NotificationPreference = NotificationPreference.None;

            if (agent.MobileNo != null)
            {
                if (agent.MobileNo.ToString() != "")
                {
                    requestData.BookingContacts[0].OtherPhone = agent.MobileNo;
                    requestData.BookingContacts[0].WorkPhone = agent.MobileNo;
                }
                else
                {
                    requestData.BookingContacts[0].OtherPhone = contactPhone;
                    requestData.BookingContacts[0].WorkPhone = contactPhone;
                }
            }
            else
            {
                requestData.BookingContacts[0].OtherPhone = contactPhone;
                requestData.BookingContacts[0].WorkPhone = contactPhone;
            }

            requestData.BookingContacts[0].State = MessageState.New;
            requestData.BookingContacts[0].TypeCode = "P";

            ////requestData.BookingContacts = new BookingContact[1];
            ////requestData.BookingContacts[0] = new BookingContact();
            ////requestData.BookingContacts[0].AddressLine1 = agent.Address1;// "KLIA";
            ////requestData.BookingContacts[0].AddressLine2 = agent.Address2;// "LCCT";
            ////requestData.BookingContacts[0].AddressLine3 = agent.Address3;// "";
            ////requestData.BookingContacts[0].City = agent.City;// "";
            ////requestData.BookingContacts[0].CompanyName = "";// "VanceInfo";
            ////requestData.BookingContacts[0].CountryCode = agent.Country;// "MY";
            ////requestData.BookingContacts[0].CultureCode = "";
            ////requestData.BookingContacts[0].CustomerNumber = "";
            ////requestData.BookingContacts[0].DistributionOption = DistributionOption.Email;
            ////requestData.BookingContacts[0].EmailAddress = agent.Email;// "chen_yongqing-cyq@Vanceinfo.com";
            ////requestData.BookingContacts[0].Fax = agent.Fax;
            ////requestData.BookingContacts[0].HomePhone = agent.PhoneNo;// "075584512346";
            ////requestData.BookingContacts[0].Names = new BookingName[1];
            ////requestData.BookingContacts[0].Names[0] = new BookingName();
            ////requestData.BookingContacts[0].Names[0].FirstName = agent.ContactFirstName;// "Charis";
            ////requestData.BookingContacts[0].Names[0].LastName = agent.ContactLastName;// "Chen";
            ////requestData.BookingContacts[0].Names[0].Title = agent.Title;// "MS";
            ////requestData.BookingContacts[0].Names[0].State = MessageState.New;
            ////requestData.BookingContacts[0].NotificationPreference = NotificationPreference.None;

            //////requestData.BookingContacts[0].OtherPhone = agent.MobileNo;// "075512345678";
            ////requestData.BookingContacts[0].OtherPhone = agent.MobileNo;

            ////requestData.BookingContacts[0].PostalCode = agent.Postcode;// "64000";

            ////requestData.BookingContacts[0].State = MessageState.New;
            ////requestData.BookingContacts[0].TypeCode = "P";

            //////requestData.BookingContacts[0].WorkPhone = agent.MobileNo;
            ////requestData.BookingContacts[0].WorkPhone = agent.MobileNo;

            ////requestData.BookingContacts[0].ProvinceState = ""; //add jhn

            #endregion

            //added by ketee, check child pax
            string strPaxType = "ADT";
            BookingTransactionDetail bookdtlInfo = new BookingTransactionDetail();
            bookdtlInfo = GetSingle_TRANSDTLBySellKey(psSellSignature);
            if (bookdtlInfo == null)
            {
                errMsg = "Transaction fail to commit.";
                return "";
            }
            //else
            //{
            //    if (bookdtlInfo.PaxChild > 0 && (bookdtlInfo.Origin.ToUpper() == "HKG" || bookdtlInfo.Destination.ToUpper() == "HKG"))
            //    {
            //        strPaxType = "CHD";
            //    }
            //}

            int adultpax = bookdtlInfo.PaxAdult;
            int childpax = bookdtlInfo.PaxChild;

            requestData.Passengers = new Passenger[paxNum];
            for (int i = 0; i < paxNum; i++)
            {
                //if ((bookdtlInfo.Origin.ToUpper() == "HKG" || bookdtlInfo.Destination.ToUpper() == "HKG"))
                //{
                if (adultpax > 0)
                {
                    strPaxType = "ADT";
                    adultpax--;
                }
                else
                {
                    if (childpax > 0)
                    {
                        strPaxType = "CHD";
                        childpax--;
                    }
                }
                //}

                requestData.Passengers[i] = new Passenger();
                requestData.Passengers[i].PassengerNumber = Convert.ToInt16(i);
                requestData.Passengers[i].State = MessageState.Clean;
                requestData.Passengers[i].Names = new BookingName[1];
                requestData.Passengers[i].Names[0] = new BookingName();
                requestData.Passengers[i].Names[0].State = MessageState.New;
                //requestData.Passengers[i].Names[0].FirstName = "TBA" + SessionManager.GenerateRandom(6);// "Charis";
                requestData.Passengers[i].Names[0].FirstName = "TBA" + objGeneral.GenerateRandom(6);
                //requestData.Passengers[i].Names[0].LastName = "TBA" + SessionManager.GenerateRandom(4);// "chen"+ i.ToString();
                requestData.Passengers[i].Names[0].LastName = "TBA" + objGeneral.GenerateRandom(4);
                requestData.Passengers[i].Names[0].Title = "Mr";

                requestData.Passengers[i].PseudoPassenger = false;

                requestData.Passengers[i].PassengerTypeInfos = new PassengerTypeInfo[1];
                requestData.Passengers[i].PassengerTypeInfos[0] = new PassengerTypeInfo();
                requestData.Passengers[i].PassengerTypeInfos[0].State = MessageState.New;

                //amended by diana 20140624, check if CHD then age is 0
                DateTime DOB = DateTime.Parse("1994-1-1");
                if (strPaxType == "CHD")
                {
                    DateTime dtTime = DateTime.Now.AddYears(-5);
                    DOB = DateTime.Parse(dtTime.Year + "-1-1");
                    requestData.Passengers[i].Names[0].Title = "CHD";
                }
                else
                {
                    requestData.Passengers[i].Names[0].Title = "MR";

                }

                requestData.Passengers[i].PassengerTypeInfos[0].DOB = DOB;
                requestData.Passengers[i].PassengerTypeInfos[0].PaxType = strPaxType;

                requestData.Passengers[i].PassengerInfos = new PassengerInfo[1];
                requestData.Passengers[i].PassengerInfos[0] = new PassengerInfo();
                requestData.Passengers[i].PassengerInfos[0].State = MessageState.New;
                requestData.Passengers[i].PassengerInfos[0].BalanceDue = 0;
                requestData.Passengers[i].PassengerInfos[0].Gender = Gender.Male;
                requestData.Passengers[i].PassengerInfos[0].Nationality = "MY";
                requestData.Passengers[i].PassengerInfos[0].ResidentCountry = "MY";
                requestData.Passengers[i].PassengerInfos[0].TotalCost = cost;// 5940;
                requestData.Passengers[i].PassengerInfos[0].WeightCategory = WeightCategory.Male;

                Thread.Sleep(50);

            }
            requestData.SourcePOS = new PointOfSale();
            requestData.SourcePOS.State = MessageState.New;
            requestData.SourcePOS.OrganizationCode = OrganizationID;

            requestData.PaxCount = Convert.ToInt16(paxNum);
            requestData.State = MessageState.New;
            requestData.RestrictionOverride = true;
            requestData.ChangeHoldDateTime = false;
            requestData.WaiveNameChangeFee = false;
            requestData.WaivePenaltyFee = false;
            requestData.WaiveSpoilageFee = false;
            requestData.DistributeToContacts = true;



            request.BookingCommitRequestData = requestData;
            request.Signature = psSellSignature;
            request.ContractVersion = 3413;

            BookingCommitResponse response = new BookingCommitResponse();
            IBookingManager bookingAPI = new BookingManagerClient();
            //added by romy, performance monitoring
            var profiler = MiniProfiler.Current;
            try
            {
                //string str = GetXMLString(request);
                using (profiler.Step("BookingCommit"))
                {
                    response = bookingAPI.BookingCommit(request);
                }
                //string requeststring = GetXMLString(response);

                ////testing to get booking response
                Navitaire.APIBooking ApiBook = new Navitaire.APIBooking("");
                Navitaire.BookingManager.GetBookingResponse resp = new Navitaire.BookingManager.GetBookingResponse();
                resp = ApiBook.GetBookingResponseByPNR(response.BookingUpdateResponseData.Success.RecordLocator);
                string str = GetXMLString(resp);
                ////end testing to get booking response

                return response.BookingUpdateResponseData.Success.RecordLocator;
            }
            //amended by diana 20131210 - try catch to check for valid booking
            catch (TimeoutException ex) { log.Error(this, ex, "TimeoutException BookingCommit(" + psSellSignature + ")"); errMsg = ex.Message.ToString(); CheckJourneyExist(ex.Message.ToString(), psSellSignature); return ""; }
            catch (OutOfMemoryException ex) { log.Error(this, ex, "OutOfMemoryException BookingCommit(" + psSellSignature + ")"); errMsg = ex.Message.ToString(); CheckJourneyExist(ex.Message.ToString(), psSellSignature); return ""; }
            catch (IndexOutOfRangeException ex) { log.Error(this, ex, "IndexOutOfRangeException BookingCommit(" + psSellSignature + ")"); errMsg = ex.Message.ToString(); CheckJourneyExist(ex.Message.ToString(), psSellSignature); return ""; }
            catch (ThreadInterruptedException ex) { log.Error(this, ex, "ThreadInterruptedException BookingCommit(" + psSellSignature + ")"); errMsg = ex.Message.ToString(); CheckJourneyExist(ex.Message.ToString(), psSellSignature); return ""; }
            catch (NullReferenceException ex) { log.Error(this, ex, "NullReferenceException BookingCommit(" + psSellSignature + ")"); errMsg = ex.Message.ToString(); CheckJourneyExist(ex.Message.ToString(), psSellSignature); return ""; }
            catch (StackOverflowException ex) { log.Error(this, ex, "StackOverflowException BookingCommit(" + psSellSignature + ")"); errMsg = ex.Message.ToString(); CheckJourneyExist(ex.Message.ToString(), psSellSignature); return ""; }
            catch (ApplicationException ex) { log.Error(this, ex, "ApplicationException BookingCommit(" + psSellSignature + ")"); errMsg = ex.Message.ToString(); CheckJourneyExist(ex.Message.ToString(), psSellSignature); return ""; }
            catch (Exception ex) { log.Error(this, ex, "Exception BookingCommit(" + psSellSignature + ")"); errMsg = ex.Message.ToString(); CheckJourneyExist(ex.Message.ToString(), psSellSignature); return ""; }

            //SessionManager.Logout(SessionManager._signature);
        }

        public string BookingCommitAddInfant(Navitaire.BookingManager.Booking booking, int InfantNum, ABS.Logic.GroupBooking.Agent.AgentProfile agent, int paxNum, decimal cost, string psSellSignature, ref string errMsg, string contactTitle = "", string contactFirstName = "", string contactLastName = "", string contactEmail = "", string contactPhone = "", string contactAddress = "", string contactTown = "", string contactCountry = "", string contactState = "", string contactZipCode = "", string organizationName = "", string OrganizationID = "")
        //public string BookingCommitAddInfant(Navitaire.BookingManager.Booking booking, ABS.Logic.GroupBooking.Agent.AgentProfile agent, int paxNum, decimal cost, string psSellSignature, ref string errMsg, string contactTitle = "", string contactFirstName = "", string contactLastName = "", string contactEmail = "", string contactPhone = "", string contactAddress = "", string contactTown = "", string contactCountry = "", string contactState = "", string contactZipCode = "", string organizationName = "", string OrganizationID = "")//edited by romy for optimize
        {
            log.Info(this, "Entering BookingCommit:" + agent.AgentID + "," + paxNum + "," + cost + "," + psSellSignature + "," + errMsg + "," + contactTitle + "," + contactFirstName + "," + contactLastName + "," + contactEmail + "," + contactPhone + "," + contactAddress + "," + contactTown + "," + contactCountry + "," + contactState + "," + contactZipCode);

            ////test to get booking response
            //Navitaire.APIBooking api = new Navitaire.APIBooking("");
            //Navitaire.BookingManager.Booking booking = new Navitaire.BookingManager.Booking();
            //booking = api.GetBookingFromState(psSellSignature);
            //string strxml = GetXMLString(booking);
            ////end test to get booking reponse

            BookingCommitRequest request = new BookingCommitRequest();
            BookingCommitRequestData requestData = new BookingCommitRequestData();

            ////try only

            //PaymentAddress[] ccAddress = new PaymentAddress[1];
            //ccAddress[0] = new PaymentAddress();

            //ccAddress[0].AddressLine1 = strCCAddres;
            //ccAddress[0].City = strCCCity;
            //ccAddress[0].CountryCode = strCCCountry;
            //ccAddress[0].ProvinceState = strCCState;
            //ccAddress[0].PostalCode = strCCZipCode;
            //request.addPaymentToBookingReqData.PaymentAddresses = ccAddress;
            ////end try only

            //booking comments
            if (organizationName == "")
            {
                organizationName = agent.AgentID;
            }
            requestData.BookingComments = new BookingComment[1];
            requestData.BookingComments[0] = new BookingComment();
            requestData.BookingComments[0].CommentText = organizationName + "/" + agent.AgentID;

            #region BookingContacts

            requestData.BookingContacts = new BookingContact[1];
            requestData.BookingContacts[0] = new BookingContact();
            requestData.BookingContacts[0].AddressLine1 = contactAddress;// "KLIA";

            if (agent.Address2 != null) requestData.BookingContacts[0].AddressLine2 = agent.Address2; else requestData.BookingContacts[0].AddressLine2 = "-";
            if (agent.Address3 != null) requestData.BookingContacts[0].AddressLine3 = agent.Address3; else requestData.BookingContacts[0].AddressLine3 = "-";

            requestData.BookingContacts[0].City = contactTown;// "";
            //requestData.BookingContacts[0].CompanyName = organizationName;// "VanceInfo";
            requestData.BookingContacts[0].ProvinceState = contactState;// "MY";
            requestData.BookingContacts[0].PostalCode = contactZipCode;// "MY";
            requestData.BookingContacts[0].CountryCode = contactCountry;// "MY";
            requestData.BookingContacts[0].CultureCode = "";
            requestData.BookingContacts[0].CustomerNumber = "";
            requestData.BookingContacts[0].DistributionOption = DistributionOption.Email;
            requestData.BookingContacts[0].EmailAddress = contactEmail;// "chen_yongqing-cyq@Vanceinfo.com";
            requestData.BookingContacts[0].SourceOrganization = OrganizationID;

            if (agent.Fax != null) requestData.BookingContacts[0].Fax = agent.Fax; else requestData.BookingContacts[0].Fax = "-";
            //if (agent.PhoneNo != null)
            //{
            //    if (agent.PhoneNo.ToString() != "") requestData.BookingContacts[0].HomePhone = agent.PhoneNo; else requestData.BookingContacts[0].HomePhone = contactPhone;
            //}
            //else
            //{
            //    requestData.BookingContacts[0].HomePhone = contactPhone;
            //}

            requestData.BookingContacts[0].HomePhone = contactPhone;

            requestData.BookingContacts[0].Names = new BookingName[1];
            requestData.BookingContacts[0].Names[0] = new BookingName();
            requestData.BookingContacts[0].Names[0].FirstName = contactFirstName;// "Charis";
            requestData.BookingContacts[0].Names[0].LastName = contactLastName;// "Chen";
            requestData.BookingContacts[0].Names[0].Title = contactTitle;// "MS";
            requestData.BookingContacts[0].Names[0].State = MessageState.New;
            requestData.BookingContacts[0].NotificationPreference = NotificationPreference.None;

            if (agent.MobileNo != null)
            {
                if (agent.MobileNo.ToString() != "")
                {
                    requestData.BookingContacts[0].OtherPhone = agent.MobileNo;
                    requestData.BookingContacts[0].WorkPhone = agent.MobileNo;
                }
                else
                {
                    requestData.BookingContacts[0].OtherPhone = contactPhone;
                    requestData.BookingContacts[0].WorkPhone = contactPhone;
                }
            }
            else
            {
                requestData.BookingContacts[0].OtherPhone = contactPhone;
                requestData.BookingContacts[0].WorkPhone = contactPhone;
            }

            requestData.BookingContacts[0].State = MessageState.New;
            requestData.BookingContacts[0].TypeCode = "P";

            ////requestData.BookingContacts = new BookingContact[1];
            ////requestData.BookingContacts[0] = new BookingContact();
            ////requestData.BookingContacts[0].AddressLine1 = agent.Address1;// "KLIA";
            ////requestData.BookingContacts[0].AddressLine2 = agent.Address2;// "LCCT";
            ////requestData.BookingContacts[0].AddressLine3 = agent.Address3;// "";
            ////requestData.BookingContacts[0].City = agent.City;// "";
            ////requestData.BookingContacts[0].CompanyName = "";// "VanceInfo";
            ////requestData.BookingContacts[0].CountryCode = agent.Country;// "MY";
            ////requestData.BookingContacts[0].CultureCode = "";
            ////requestData.BookingContacts[0].CustomerNumber = "";
            ////requestData.BookingContacts[0].DistributionOption = DistributionOption.Email;
            ////requestData.BookingContacts[0].EmailAddress = agent.Email;// "chen_yongqing-cyq@Vanceinfo.com";
            ////requestData.BookingContacts[0].Fax = agent.Fax;
            ////requestData.BookingContacts[0].HomePhone = agent.PhoneNo;// "075584512346";
            ////requestData.BookingContacts[0].Names = new BookingName[1];
            ////requestData.BookingContacts[0].Names[0] = new BookingName();
            ////requestData.BookingContacts[0].Names[0].FirstName = agent.ContactFirstName;// "Charis";
            ////requestData.BookingContacts[0].Names[0].LastName = agent.ContactLastName;// "Chen";
            ////requestData.BookingContacts[0].Names[0].Title = agent.Title;// "MS";
            ////requestData.BookingContacts[0].Names[0].State = MessageState.New;
            ////requestData.BookingContacts[0].NotificationPreference = NotificationPreference.None;

            //////requestData.BookingContacts[0].OtherPhone = agent.MobileNo;// "075512345678";
            ////requestData.BookingContacts[0].OtherPhone = agent.MobileNo;

            ////requestData.BookingContacts[0].PostalCode = agent.Postcode;// "64000";

            ////requestData.BookingContacts[0].State = MessageState.New;
            ////requestData.BookingContacts[0].TypeCode = "P";

            //////requestData.BookingContacts[0].WorkPhone = agent.MobileNo;
            ////requestData.BookingContacts[0].WorkPhone = agent.MobileNo;

            ////requestData.BookingContacts[0].ProvinceState = ""; //add jhn

            #endregion

            //added by ketee, check child pax
            string strPaxType = "ADT";
            BookingTransactionDetail bookdtlInfo = new BookingTransactionDetail();
            bookdtlInfo = GetSingle_TRANSDTLBySellKey(psSellSignature);
            if (bookdtlInfo == null)
            {
                errMsg = "Transaction fail to commit.";
                return "";
            }
            //else
            //{
            //    if (bookdtlInfo.PaxChild > 0 && (bookdtlInfo.Origin.ToUpper() == "HKG" || bookdtlInfo.Destination.ToUpper() == "HKG"))
            //    {
            //        strPaxType = "CHD";
            //    }
            //}

            int adultpax = bookdtlInfo.PaxAdult;
            int childpax = bookdtlInfo.PaxChild;

            requestData.Passengers = new Passenger[paxNum];
            for (int i = 0; i < booking.Passengers.Length; i++)
            {
                //if ((bookdtlInfo.Origin.ToUpper() == "HKG" || bookdtlInfo.Destination.ToUpper() == "HKG"))
                //{
                if (adultpax > 0)
                {
                    strPaxType = "ADT";
                    adultpax--;
                }
                else
                {
                    if (childpax > 0)
                    {
                        strPaxType = "CHD";
                        childpax--;
                    }
                }
                //}

                requestData.Passengers[i] = new Passenger();
                requestData.Passengers[i].PassengerNumber = Convert.ToInt16(i);
                requestData.Passengers[i].State = MessageState.Clean;
                requestData.Passengers[i].Names = new BookingName[1];
                requestData.Passengers[i].Names[0] = new BookingName();
                requestData.Passengers[i].Names[0].State = MessageState.New;
                //requestData.Passengers[i].Names[0].FirstName = "TBA" + SessionManager.GenerateRandom(6);// "Charis";
                requestData.Passengers[i].Names[0].FirstName = "TBA" + objGeneral.GenerateRandom(6);
                //requestData.Passengers[i].Names[0].LastName = "TBA" + SessionManager.GenerateRandom(4);// "chen"+ i.ToString();
                requestData.Passengers[i].Names[0].LastName = "TBA" + objGeneral.GenerateRandom(4);
                requestData.Passengers[i].Names[0].Title = "Mr";

                requestData.Passengers[i].PseudoPassenger = false;

                requestData.Passengers[i].PassengerTypeInfos = new PassengerTypeInfo[1];
                requestData.Passengers[i].PassengerTypeInfos[0] = new PassengerTypeInfo();
                requestData.Passengers[i].PassengerTypeInfos[0].State = MessageState.New;

                //amended by diana 20140624, check if CHD then age is 0
                DateTime DOB = DateTime.Parse("1994-1-1");
                if (strPaxType == "CHD")
                {
                    DateTime dtTime = DateTime.Now.AddYears(-5);
                    DOB = DateTime.Parse(dtTime.Year + "-1-1");
                    requestData.Passengers[i].Names[0].Title = "Chd";
                }

                requestData.Passengers[i].PassengerTypeInfos[0].DOB = DOB;
                requestData.Passengers[i].PassengerTypeInfos[0].PaxType = strPaxType;

                requestData.Passengers[i].PassengerInfos = new PassengerInfo[1];
                requestData.Passengers[i].PassengerInfos[0] = new PassengerInfo();
                requestData.Passengers[i].PassengerInfos[0].State = MessageState.New;
                requestData.Passengers[i].PassengerInfos[0].BalanceDue = 0;
                requestData.Passengers[i].PassengerInfos[0].Gender = Gender.Male;
                requestData.Passengers[i].PassengerInfos[0].Nationality = "MY";
                requestData.Passengers[i].PassengerInfos[0].ResidentCountry = "MY";
                requestData.Passengers[i].PassengerInfos[0].TotalCost = cost;// 5940;
                requestData.Passengers[i].PassengerInfos[0].WeightCategory = WeightCategory.Male;

                int InfantCount = booking.Passengers[i].PassengerFees.Count(item => item.FeeCode.ToString() == "INFT");
                if (InfantCount > 0)
                {
                    requestData.Passengers[i].State = MessageState.Modified;
                    requestData.Passengers[i].Infant = new PassengerInfant();
                    requestData.Passengers[i].Infant.State = MessageState.New;
                    requestData.Passengers[i].Infant.Names = new BookingName[1];
                    requestData.Passengers[i].Infant.Names[0] = new BookingName();
                    requestData.Passengers[i].Infant.Names[0].FirstName = "TBA";
                    //requestData.Passengers[0].Infant.Names[0].MiddleName = "T";
                    requestData.Passengers[i].Infant.Names[0].LastName = "TBA";
                    requestData.Passengers[i].Infant.Gender = Gender.Male;
                    requestData.Passengers[i].Infant.DOB = DateTime.Today.AddMonths(-5);
                }

                Thread.Sleep(50);

            }

            requestData.SourcePOS = new PointOfSale();
            requestData.SourcePOS.State = MessageState.New;
            requestData.SourcePOS.OrganizationCode = OrganizationID;

            requestData.PaxCount = Convert.ToInt16(paxNum);
            requestData.State = MessageState.New;
            requestData.RestrictionOverride = true;
            requestData.ChangeHoldDateTime = false;
            requestData.WaiveNameChangeFee = false;
            requestData.WaivePenaltyFee = false;
            requestData.WaiveSpoilageFee = false;
            requestData.DistributeToContacts = true;



            request.BookingCommitRequestData = requestData;
            request.Signature = psSellSignature;
            request.ContractVersion = 3413;

            BookingCommitResponse response = new BookingCommitResponse();
            IBookingManager bookingAPI = new BookingManagerClient();
            //added by romy, performance monitoring
            var profiler = MiniProfiler.Current;
            try
            {
                //string str = GetXMLString(request);
                using (profiler.Step("BookingCommit"))
                {
                    response = bookingAPI.BookingCommit(request);
                }
                //string requeststring = GetXMLString(response);

                ////testing to get booking response
                //Navitaire.APIBooking ApiBook = new Navitaire.APIBooking("");
                //Navitaire.BookingManager.GetBookingResponse resp = new Navitaire.BookingManager.GetBookingResponse();
                //resp = ApiBook.GetBookingResponseByPNR(response.BookingUpdateResponseData.Success.RecordLocator);
                //string str = GetXMLString(resp);
                ////end testing to get booking response

                return response.BookingUpdateResponseData.Success.RecordLocator;
            }
            //amended by diana 20131210 - try catch to check for valid booking
            catch (TimeoutException ex) { log.Error(this, ex, "BookingCommit()"); errMsg = ex.Message.ToString(); CheckJourneyExist(ex.Message.ToString(), psSellSignature); return ""; }
            catch (OutOfMemoryException ex) { log.Error(this, ex, "BookingCommit()"); errMsg = ex.Message.ToString(); CheckJourneyExist(ex.Message.ToString(), psSellSignature); return ""; }
            catch (IndexOutOfRangeException ex) { log.Error(this, ex, "BookingCommit()"); errMsg = ex.Message.ToString(); CheckJourneyExist(ex.Message.ToString(), psSellSignature); return ""; }
            catch (ThreadInterruptedException ex) { log.Error(this, ex, "BookingCommit()"); errMsg = ex.Message.ToString(); CheckJourneyExist(ex.Message.ToString(), psSellSignature); return ""; }
            catch (NullReferenceException ex) { log.Error(this, ex, "BookingCommit()"); errMsg = ex.Message.ToString(); CheckJourneyExist(ex.Message.ToString(), psSellSignature); return ""; }
            catch (StackOverflowException ex) { log.Error(this, ex, "BookingCommit()"); errMsg = ex.Message.ToString(); CheckJourneyExist(ex.Message.ToString(), psSellSignature); return ""; }
            catch (ApplicationException ex) { log.Error(this, ex, "BookingCommit()"); errMsg = ex.Message.ToString(); CheckJourneyExist(ex.Message.ToString(), psSellSignature); return ""; }
            catch (Exception ex) { log.Error(this, ex, "BookingCommit()"); errMsg = ex.Message.ToString(); CheckJourneyExist(ex.Message.ToString(), psSellSignature); return ""; }

            //SessionManager.Logout(SessionManager._signature);
        }

        public GetBookingResponse GetBookingByPNR(string PNR, string SessionID)
        {
            //added by romy, performance monitoring
            var profiler = MiniProfiler.Current;

            IBookingManager bookingAPI = new BookingManagerClient();
            GetBookingRequest request = new GetBookingRequest();
            request.ContractVersion = 3413;
            request.Signature = SessionID;
            request.GetBookingReqData = new GetBookingRequestData();
            request.GetBookingReqData.GetBookingBy = GetBookingBy.RecordLocator;
            request.GetBookingReqData.GetByRecordLocator = new GetByRecordLocator();
            request.GetBookingReqData.GetByRecordLocator.RecordLocator = PNR;
            GetBookingResponse response;// = bookingAPI.GetBooking(request);
            using (profiler.Step("GetBooking"))
            {
                response = bookingAPI.GetBooking(request);
            }
            return response;
        }

        //added by ketee
        public Boolean GetBookingByPNR_InSess(string PNR)
        {
            Navitaire.APIBooking ApiBook = new Navitaire.APIBooking("");
            Navitaire.BookingManager.GetBookingResponse Response = new Navitaire.BookingManager.GetBookingResponse();
            PassengerContainer objPassengerContainer = new PassengerContainer();
            List<PassengerContainer> lstPassengerContainer = new List<PassengerContainer>();
            BookingContainer objBookingContainer = new BookingContainer();
            PassengerInfantContainer objPassengerInfantModel = new PassengerInfantContainer();
            List<PassengerInfantContainer> lstPassengerInfantModel = new List<PassengerInfantContainer>();
            BookingJourneyContainer objBookingJourneyContainer = new BookingJourneyContainer();
            List<BookingJourneyContainer> lstBookingJourneyContainer = new List<BookingJourneyContainer>();
            List<PaymentContainer> lstPaymentContainer = new List<PaymentContainer>();
            try
            {
                string errMsg = "";
                Response = ApiBook.GetBookingResponseByPNR(PNR);
                if (Response != null)
                {
                    //if (Response.Booking..BookingStatus.ToString().ToLower() != "confirmed")
                    //{
                    //    log.Info(this,"Booking Status: " + Response.Booking.BookingContainer.BookingStatus.ToString());
                    //    return false;
                    //}
                    if (Response.Booking.Journeys.Length <= 0)
                    {
                        log.Info(this, "GetBookingByPNR_InSess - Booking status is pending.");
                        return false;
                    }

                    //load passenger info
                    int i = 0;
                    foreach (Navitaire.BookingManager.Passenger rowpassenger in Response.Booking.Passengers)
                    {
                        objPassengerContainer = new PassengerContainer();
                        objPassengerContainer.BookingID = Response.Booking.BookingID;
                        objPassengerContainer.Passengers = Response.Booking.Passengers;
                        objPassengerContainer.PassengerID = rowpassenger.PassengerID;
                        objPassengerContainer.PassengerNumber = rowpassenger.PassengerNumber;
                        objPassengerContainer.FirstName = rowpassenger.Names[0].FirstName;
                        objPassengerContainer.MiddleName = rowpassenger.Names[0].MiddleName;
                        objPassengerContainer.LastName = rowpassenger.Names[0].LastName;
                        objPassengerContainer.Title = rowpassenger.Names[0].Title;
                        objPassengerContainer.DOB = rowpassenger.PassengerTypeInfos[0].DOB;
                        objPassengerContainer.PaxType = rowpassenger.PassengerTypeInfos[0].PaxType;
                        //if (Response.Booking.Journeys[0].Segments[0].PaxSSRs 

                        for (int x = 0; x < Response.Booking.Journeys[0].Segments[0].PaxSSRs.Length; x++)
                        {
                            if (Response.Booking.Journeys[0].Segments[0].PaxSSRs[x].PassengerNumber == rowpassenger.PassengerNumber)
                            {
                                if (Response.Booking.Journeys[0].Segments[0].PaxSSRs[x].SSRCode == "INFT")
                                    objPassengerContainer.INFT = 1;
                                if (Response.Booking.Journeys[0].Segments[0].PaxSSRs[x].SSRCode == "WCHR")
                                    objPassengerContainer.WCHR = 1;
                            }

                        }

                        for (int j = 0; j < Response.Booking.Journeys.Length; j++)
                        {
                            objBookingJourneyContainer = new BookingJourneyContainer();
                            for (int k = 0; k < Response.Booking.Journeys[j].Segments.Length; k++)
                            {
                                switch (j)
                                {
                                    case 0:
                                        if (k == 0)
                                        {
                                            objPassengerContainer.setLiftStatus(Response.Booking.Journeys[j].Segments[k].PaxSegments[i].LiftStatus.ToString(), PassengerContainer.FlightType.Depart);
                                            objPassengerContainer.setSegment("1", PassengerContainer.FlightType.Depart);
                                            if (Response.Booking.Journeys[j].Segments[k].PaxSeats.Length > 0)
                                            {
                                                for (int h = 0; h < Response.Booking.Journeys[j].Segments[k].PaxSeats.Length; h++)
                                                {
                                                    if (Response.Booking.Journeys[j].Segments[k].PaxSeats[h].PassengerNumber == rowpassenger.PassengerNumber)
                                                    {
                                                        objPassengerContainer.setUnitDesignator(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].UnitDesignator.ToString(), PassengerContainer.FlightType.Depart);
                                                        objPassengerContainer.setDeck(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].PaxSeatInfo.Deck.ToString(), PassengerContainer.FlightType.Depart);
                                                        objPassengerContainer.setCompartmentDesignator(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].CompartmentDesignator.ToString(), PassengerContainer.FlightType.Depart);

                                                    }
                                                }

                                            }
                                            objBookingJourneyContainer.CarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                            objBookingJourneyContainer.FlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                            objBookingJourneyContainer.STA = Response.Booking.Journeys[j].Segments[k].STA;
                                            objBookingJourneyContainer.STD = Response.Booking.Journeys[j].Segments[k].STD;
                                            objBookingJourneyContainer.FareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                            objBookingJourneyContainer.ArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                            objBookingJourneyContainer.DepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                            objBookingJourneyContainer.OpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                            objBookingJourneyContainer.EquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType;
                                            objBookingJourneyContainer.FlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                        }
                                        if (k == 1)
                                        {
                                            objPassengerContainer.setLiftStatus(Response.Booking.Journeys[j].Segments[k].PaxSegments[i].LiftStatus.ToString(), PassengerContainer.FlightType.ConnectingDepart);
                                            objPassengerContainer.setSegment("1", PassengerContainer.FlightType.ConnectingDepart);
                                            if (Response.Booking.Journeys[j].Segments[k].PaxSeats.Length > 0)
                                            {
                                                for (int h = 0; h < Response.Booking.Journeys[j].Segments[k].PaxSeats.Length; h++)
                                                {
                                                    if (Response.Booking.Journeys[j].Segments[k].PaxSeats[h].PassengerNumber == rowpassenger.PassengerNumber)
                                                    {
                                                        objPassengerContainer.setUnitDesignator(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].UnitDesignator.ToString(), PassengerContainer.FlightType.ConnectingDepart);
                                                        objPassengerContainer.setDeck(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].PaxSeatInfo.Deck.ToString(), PassengerContainer.FlightType.ConnectingDepart);
                                                        objPassengerContainer.setCompartmentDesignator(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].CompartmentDesignator.ToString(), PassengerContainer.FlightType.ConnectingDepart);
                                                    }
                                                }
                                            }
                                            objBookingJourneyContainer.OverridedCarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                            objBookingJourneyContainer.OverridedFlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                            objBookingJourneyContainer.OverridedSTA = Response.Booking.Journeys[j].Segments[k].STA;
                                            objBookingJourneyContainer.OverridedSTD = Response.Booking.Journeys[j].Segments[k].STD;
                                            objBookingJourneyContainer.OverridedFareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                            objBookingJourneyContainer.OverridedArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                            objBookingJourneyContainer.OverridedDepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                            objBookingJourneyContainer.OverridedOpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                            objBookingJourneyContainer.OverridedEquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType;
                                            objBookingJourneyContainer.OverridedFlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                        }
                                        break;
                                    case 1:
                                        if (k == 0)
                                        {
                                            objPassengerContainer.setLiftStatus(Response.Booking.Journeys[j].Segments[k].PaxSegments[i].LiftStatus.ToString(), PassengerContainer.FlightType.Return);
                                            objPassengerContainer.setSegment("1", PassengerContainer.FlightType.Return);
                                            if (Response.Booking.Journeys[j].Segments[k].PaxSeats.Length > 0)
                                            {
                                                for (int h = 0; h < Response.Booking.Journeys[j].Segments[k].PaxSeats.Length; h++)
                                                {
                                                    if (Response.Booking.Journeys[j].Segments[k].PaxSeats[h].PassengerNumber == rowpassenger.PassengerNumber)
                                                    {
                                                        objPassengerContainer.setUnitDesignator(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].UnitDesignator.ToString(), PassengerContainer.FlightType.Return);
                                                        objPassengerContainer.setDeck(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].PaxSeatInfo.Deck.ToString(), PassengerContainer.FlightType.Return);
                                                        objPassengerContainer.setCompartmentDesignator(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].CompartmentDesignator.ToString(), PassengerContainer.FlightType.Return);
                                                    }
                                                }
                                            }
                                            objBookingJourneyContainer.CarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                            objBookingJourneyContainer.FlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                            objBookingJourneyContainer.STA = Response.Booking.Journeys[j].Segments[k].STA;
                                            objBookingJourneyContainer.STD = Response.Booking.Journeys[j].Segments[k].STD;
                                            objBookingJourneyContainer.FareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                            objBookingJourneyContainer.ArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                            objBookingJourneyContainer.DepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                            objBookingJourneyContainer.OpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                            objBookingJourneyContainer.EquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType;
                                            objBookingJourneyContainer.FlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                        }
                                        if (k == 1)
                                        {
                                            objPassengerContainer.setLiftStatus(Response.Booking.Journeys[j].Segments[k].PaxSegments[i].LiftStatus.ToString(), PassengerContainer.FlightType.ConnectingReturn);
                                            objPassengerContainer.setSegment("1", PassengerContainer.FlightType.ConnectingReturn);
                                            if (Response.Booking.Journeys[j].Segments[k].PaxSeats.Length > 0)
                                            {
                                                for (int h = 0; h < Response.Booking.Journeys[j].Segments[k].PaxSeats.Length; h++)
                                                {
                                                    if (Response.Booking.Journeys[j].Segments[k].PaxSeats[h].PassengerNumber == rowpassenger.PassengerNumber)
                                                    {
                                                        objPassengerContainer.setUnitDesignator(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].UnitDesignator.ToString(), PassengerContainer.FlightType.ConnectingReturn);
                                                        objPassengerContainer.setDeck(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].PaxSeatInfo.Deck.ToString(), PassengerContainer.FlightType.ConnectingReturn);
                                                        objPassengerContainer.setCompartmentDesignator(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].CompartmentDesignator.ToString(), PassengerContainer.FlightType.ConnectingReturn);
                                                    }
                                                }
                                            }
                                            objBookingJourneyContainer.OverridedCarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                            objBookingJourneyContainer.OverridedFlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                            objBookingJourneyContainer.OverridedSTA = Response.Booking.Journeys[j].Segments[k].STA;
                                            objBookingJourneyContainer.OverridedSTD = Response.Booking.Journeys[j].Segments[k].STD;
                                            objBookingJourneyContainer.OverridedFareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                            objBookingJourneyContainer.OverridedArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                            objBookingJourneyContainer.OverridedDepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                            objBookingJourneyContainer.OverridedOpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                            objBookingJourneyContainer.OverridedEquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType;
                                            objBookingJourneyContainer.OverridedFlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                        }
                                        break;
                                }
                            }
                            //load booking Journey
                            objBookingJourneyContainer.RecordLocator = Response.Booking.RecordLocator;
                            objBookingJourneyContainer.BookingID = Response.Booking.BookingID;
                            objBookingJourneyContainer.JourneySellKey = Response.Booking.Journeys[j].JourneySellKey;

                            //begin, retrieve flight duration
                            decimal FlightDura = 0, FlightDura2 = 0, departzone1 = 0, returnzone1 = 0, departzone2 = 0, returnzone2 = 0, diffsegment1 = 0, diffsegment2 = 0;
                            string depart1 = "", return1 = "", depart2 = "", return2 = "";

                            depart1 = objBookingJourneyContainer.DepartureStation;
                            if (objBookingJourneyContainer.OverridedDepartureStation.Trim() == "")
                            {
                                return1 = objBookingJourneyContainer.ArrivalStation;
                            }
                            else
                            {
                                return1 = objBookingJourneyContainer.ArrivalStation;
                                depart2 = objBookingJourneyContainer.DepartureStation;
                                return2 = objBookingJourneyContainer.ArrivalStation;
                            }

                            string StationCode = depart1;
                            if (depart1 != "" && return1 != "")
                            {
                                ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");
                                ACE.SessionManager.SessionServiceClient aceSession = new ACE.SessionManager.SessionServiceClient();
                                ACE.LookUpManager.LookupServiceClient aceLookup = new ACE.LookUpManager.LookupServiceClient();
                                ACE.SessionManager.LogonRequest LogonReq = new ACE.SessionManager.LogonRequest();
                                LogonReq.Username = apiBooking.Username;
                                LogonReq.Password = apiBooking.Password;

                                ACE.SessionManager.LogonResponse resp = aceSession.Logon(LogonReq);
                                ACE.LookUpManager.StationTimeZone TimeZoneResp = new ACE.LookUpManager.StationTimeZone();

                                if (resp != null)
                                {
                                    diffsegment1 = RetrieveTimeZone(aceLookup, resp, TimeZoneResp, depart1) - RetrieveTimeZone(aceLookup, resp, TimeZoneResp, return1);
                                    FlightDura = diffsegment1 * 60 + (decimal)(Convert.ToDateTime(objBookingJourneyContainer.STA) - Convert.ToDateTime(objBookingJourneyContainer.STD)).TotalMinutes;
                                    if (depart2 != "" && return2 != "")
                                    {
                                        diffsegment2 = RetrieveTimeZone(aceLookup, resp, TimeZoneResp, depart2) - RetrieveTimeZone(aceLookup, resp, TimeZoneResp, return2);
                                        FlightDura2 = diffsegment2 * 60 + (decimal)(Convert.ToDateTime(objBookingJourneyContainer.OverridedSTA) - Convert.ToDateTime(objBookingJourneyContainer.OverridedSTD)).TotalMinutes;
                                    }
                                }
                            }
                            //end, retrieve flight duration

                            if (lstBookingJourneyContainer.FindIndex(item => item.JourneySellKey == objBookingJourneyContainer.JourneySellKey) < 0)
                                lstBookingJourneyContainer.Add(objBookingJourneyContainer);
                        }
                        //add passengers
                        lstPassengerContainer.Add(objPassengerContainer);

                        //load passenger infant info
                        objPassengerInfantModel.BookingID = Response.Booking.BookingID;
                        objPassengerInfantModel.PassengerID = rowpassenger.PassengerID;
                        if (rowpassenger.PassengerInfants.Length > 0)
                        {
                            objPassengerInfantModel.LastName = rowpassenger.Infant.Names[0].LastName;
                            objPassengerInfantModel.FirstName = rowpassenger.Infant.Names[0].FirstName;
                            objPassengerInfantModel.DOB = rowpassenger.Infant.DOB;
                        }
                        lstPassengerInfantModel.Add(objPassengerInfantModel);
                        i++;
                    }

                    //load payment
                    PaymentContainer paymentContainer = new PaymentContainer();
                    for (int p = 0; p < Response.Booking.Payments.Length; p++)
                    {
                        paymentContainer = new PaymentContainer();
                        paymentContainer.AuthorizationCode = Response.Booking.Payments[p].AuthorizationCode;
                        paymentContainer.AccountNumber = Response.Booking.Payments[p].AccountNumber;
                        paymentContainer.MerchantID = Response.Booking.Payments[p].PaymentID.ToString();
                        paymentContainer.AccountNumberID = Response.Booking.Payments[p].AccountNumberID;
                        paymentContainer.CollectedAmount = Response.Booking.Payments[p].CollectedAmount;
                        paymentContainer.CurrencyCode = Response.Booking.Payments[p].CurrencyCode;
                        paymentContainer.PaymentAmount = Response.Booking.Payments[p].PaymentAmount;
                        paymentContainer.PaymentMethodCode = Response.Booking.Payments[p].PaymentMethodCode;
                        paymentContainer.PaymentMethodType = Convert.ToInt32(Response.Booking.Payments[p].PaymentMethodType);
                        paymentContainer.PaymentNumber = Response.Booking.Payments[p].PaymentNumber;
                        paymentContainer.PaymentStatus = Convert.ToInt32(Response.Booking.Payments[p].Status);
                        paymentContainer.PaymentText = Response.Booking.Payments[p].PaymentText; //aded by diana 20170404, to retrieve fee type

                        lstPaymentContainer.Add(paymentContainer);
                    }

                    if (lstPassengerContainer != null)
                    {
                        HttpContext.Current.Session.Remove("PassengerContainers");
                        HttpContext.Current.Session.Add("PassengerContainers", lstPassengerContainer);
                    }

                    if (lstBookingJourneyContainer != null)
                    {
                        HttpContext.Current.Session.Remove("BookingJourneyContainers");
                        HttpContext.Current.Session.Add("BookingJourneyContainers", lstBookingJourneyContainer);
                    }

                    if (lstPassengerInfantModel != null)
                    {
                        HttpContext.Current.Session.Remove("PassengerInfantContainers");
                        HttpContext.Current.Session.Add("PassengerInfantContainers", lstPassengerInfantModel);
                    }

                    if (lstPaymentContainer != null)
                    {
                        HttpContext.Current.Session.Remove("PaymentContainers");
                        HttpContext.Current.Session.Add("PaymentContainers", lstPaymentContainer);
                    }

                    //load booking info
                    objBookingContainer.BookingID = Response.Booking.BookingID;
                    objBookingContainer.RecordLocator = Response.Booking.RecordLocator;
                    objBookingContainer.CurrencyCode = Response.Booking.CurrencyCode;
                    objBookingContainer.ReceivedBy = Response.Booking.ReceivedBy.ReceivedBy;
                    if (objBookingContainer != null)
                    {
                        HttpContext.Current.Session.Remove("BookingContainer");
                        HttpContext.Current.Session.Add("BookingContainer", objBookingContainer);
                    }



                    return true;

                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                ApiBook.Dispose();
            }


        }

        //added by ketee, 20170117
        public Boolean GetBookingByPNR(string PNR, Navitaire.BookingManager.GetBookingResponse GetResponse)
        {
            Navitaire.APIBooking ApiBook = new Navitaire.APIBooking("");
            Navitaire.BookingManager.GetBookingResponse Response = new Navitaire.BookingManager.GetBookingResponse();
            PassengerContainer objPassengerContainer = new PassengerContainer();
            List<PassengerContainer> lstPassengerContainer = new List<PassengerContainer>();
            BookingContainer objBookingContainer = new BookingContainer();
            PassengerInfantContainer objPassengerInfantModel = new PassengerInfantContainer();
            List<PassengerInfantContainer> lstPassengerInfantModel = new List<PassengerInfantContainer>();
            BookingJourneyContainer objBookingJourneyContainer = new BookingJourneyContainer();
            List<BookingJourneyContainer> lstBookingJourneyContainer = new List<BookingJourneyContainer>();
            List<PaymentContainer> lstPaymentContainer = new List<PaymentContainer>();
            //added by romy, performance monitoring
            var profiler = MiniProfiler.Current;
            try
            {
                string errMsg = "";
                using (profiler.Step("GetBookingResponseByPNR"))
                {
                    Response = ApiBook.GetBookingResponseByPNR(PNR);
                }
                if (Response != null)
                {
                    //if (Response.Booking..BookingStatus.ToString().ToLower() != "confirmed")
                    //{
                    //    log.Info(this,"Booking Status: " + Response.Booking.BookingContainer.BookingStatus.ToString());
                    //    return false;
                    //}
                    if (Response.Booking.Journeys.Length <= 0)
                    {
                        log.Info(this, "GetBookingByPNR_InSess - Booking status is pending.");
                        return false;
                    }

                    using (profiler.Step("load_passenger_info"))
                    {
                        //load passenger info
                        int i = 0;
                        foreach (Navitaire.BookingManager.Passenger rowpassenger in Response.Booking.Passengers)
                        {
                            objPassengerContainer = new PassengerContainer();
                            objPassengerContainer.BookingID = Response.Booking.BookingID;
                            objPassengerContainer.Passengers = Response.Booking.Passengers;
                            objPassengerContainer.PassengerID = rowpassenger.PassengerID;
                            objPassengerContainer.PassengerNumber = rowpassenger.PassengerNumber;
                            objPassengerContainer.FirstName = rowpassenger.Names[0].FirstName;
                            objPassengerContainer.MiddleName = rowpassenger.Names[0].MiddleName;
                            objPassengerContainer.LastName = rowpassenger.Names[0].LastName;
                            objPassengerContainer.Title = rowpassenger.Names[0].Title;
                            objPassengerContainer.DOB = rowpassenger.PassengerTypeInfos[0].DOB;
                            objPassengerContainer.PaxType = rowpassenger.PassengerTypeInfos[0].PaxType;
                            objPassengerContainer.Gender = rowpassenger.PassengerInfo.Gender.ToString();
                            objPassengerContainer.Nationality = rowpassenger.PassengerInfo.Nationality;
                            objPassengerContainer.ResidentCountry = rowpassenger.PassengerInfo.ResidentCountry;
                            objPassengerContainer.WeightCategory = rowpassenger.PassengerInfo.WeightCategory;
                            objPassengerContainer.BalanceDue = rowpassenger.PassengerInfo.BalanceDue;
                            //if (Response.Booking.Journeys[0].Segments[0].PaxSSRs 

                            for (int x = 0; x < Response.Booking.Journeys[0].Segments[0].PaxSSRs.Length; x++)
                            {
                                if (Response.Booking.Journeys[0].Segments[0].PaxSSRs[x].PassengerNumber == rowpassenger.PassengerNumber)
                                {
                                    if (Response.Booking.Journeys[0].Segments[0].PaxSSRs[x].SSRCode == "INFT")
                                        objPassengerContainer.INFT = 1;
                                    if (Response.Booking.Journeys[0].Segments[0].PaxSSRs[x].SSRCode == "WCHR")
                                        objPassengerContainer.WCHR = 1;
                                }

                            }

                            for (int j = 0; j < Response.Booking.Journeys.Length; j++)
                            {
                                objBookingJourneyContainer = new BookingJourneyContainer();
                                for (int k = 0; k < Response.Booking.Journeys[j].Segments.Length; k++)
                                {
                                    switch (j)
                                    {
                                        case 0:
                                            if (k == 0)
                                            {
                                                objPassengerContainer.setLiftStatus(Response.Booking.Journeys[j].Segments[k].PaxSegments[i].LiftStatus.ToString(), PassengerContainer.FlightType.Depart);
                                                objPassengerContainer.setSegment("1", PassengerContainer.FlightType.Depart);
                                                if (Response.Booking.Journeys[j].Segments[k].PaxSeats.Length > 0)
                                                {
                                                    for (int h = 0; h < Response.Booking.Journeys[j].Segments[k].PaxSeats.Length; h++)
                                                    {
                                                        if (Response.Booking.Journeys[j].Segments[k].PaxSeats[h].PassengerNumber == rowpassenger.PassengerNumber)
                                                        {
                                                            objPassengerContainer.setUnitDesignator(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].UnitDesignator.ToString(), PassengerContainer.FlightType.Depart);
                                                            objPassengerContainer.setDeck(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].PaxSeatInfo.Deck.ToString(), PassengerContainer.FlightType.Depart);
                                                            objPassengerContainer.setCompartmentDesignator(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].CompartmentDesignator.ToString(), PassengerContainer.FlightType.Depart);

                                                        }
                                                    }

                                                }
                                                //added checking by ketee, to improve performance
                                                if (lstBookingJourneyContainer.FindIndex(item => item.JourneySellKey == objBookingJourneyContainer.JourneySellKey) < 0)
                                                {
                                                    objBookingJourneyContainer.CarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                                    objBookingJourneyContainer.FlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                                    objBookingJourneyContainer.STA = Response.Booking.Journeys[j].Segments[k].STA;
                                                    objBookingJourneyContainer.STD = Response.Booking.Journeys[j].Segments[k].STD;
                                                    objBookingJourneyContainer.FareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                                    objBookingJourneyContainer.FareClass = Response.Booking.Journeys[j].Segments[k].Fares[0].FareClassOfService;
                                                    objBookingJourneyContainer.ArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                                    objBookingJourneyContainer.DepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                                    objBookingJourneyContainer.OpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                                    objBookingJourneyContainer.EquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType.ToString();
                                                    objBookingJourneyContainer.FlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                                }

                                                //added by ketee
                                                //if (AllowAddInfantCheckD == false)
                                                //{
                                                //    GetSSRAvailabilityforBooking(Response.Booking.CurrencyCode, rowpassenger.PassengerNumber,
                                                //                        Response.Booking.Journeys[j].Segments[k].DepartureStation,
                                                //                        Response.Booking.Journeys[j].Segments[k].ArrivalStation,
                                                //                        Response.Booking.Journeys[j].Segments[k].STD,
                                                //                        Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode.Trim(),
                                                //                        Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber.Trim(),
                                                //                        Response.Booking.Journeys[j].Segments[k].FlightDesignator.OpSuffix.Trim(), "INFT");
                                                //    AllowAddInfantCheckD = true;
                                                //}
                                            }
                                            if (k == 1)
                                            {
                                                objPassengerContainer.setLiftStatus(Response.Booking.Journeys[j].Segments[k].PaxSegments[i].LiftStatus.ToString(), PassengerContainer.FlightType.ConnectingDepart);
                                                objPassengerContainer.setSegment("1", PassengerContainer.FlightType.ConnectingDepart);
                                                if (Response.Booking.Journeys[j].Segments[k].PaxSeats.Length > 0)
                                                {
                                                    for (int h = 0; h < Response.Booking.Journeys[j].Segments[k].PaxSeats.Length; h++)
                                                    {
                                                        if (Response.Booking.Journeys[j].Segments[k].PaxSeats[h].PassengerNumber == rowpassenger.PassengerNumber)
                                                        {
                                                            objPassengerContainer.setUnitDesignator(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].UnitDesignator.ToString(), PassengerContainer.FlightType.ConnectingDepart);
                                                            objPassengerContainer.setDeck(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].PaxSeatInfo.Deck.ToString(), PassengerContainer.FlightType.ConnectingDepart);
                                                            objPassengerContainer.setCompartmentDesignator(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].CompartmentDesignator.ToString(), PassengerContainer.FlightType.ConnectingDepart);
                                                        }
                                                    }
                                                }
                                                //added checking by ketee, to improve performance
                                                if (lstBookingJourneyContainer.FindIndex(item => item.JourneySellKey == objBookingJourneyContainer.JourneySellKey) < 0)
                                                {
                                                    objBookingJourneyContainer.OverridedCarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                                    objBookingJourneyContainer.OverridedFlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                                    objBookingJourneyContainer.OverridedSTA = Response.Booking.Journeys[j].Segments[k].STA;
                                                    objBookingJourneyContainer.OverridedSTD = Response.Booking.Journeys[j].Segments[k].STD;
                                                    objBookingJourneyContainer.OverridedFareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                                    objBookingJourneyContainer.OverridedFareClass = Response.Booking.Journeys[j].Segments[k].Fares[0].FareClassOfService;
                                                    objBookingJourneyContainer.OverridedArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                                    objBookingJourneyContainer.OverridedDepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                                    objBookingJourneyContainer.OverridedOpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                                    objBookingJourneyContainer.OverridedEquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType.ToString();
                                                    objBookingJourneyContainer.OverridedFlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                                }

                                                //added by ketee
                                                //if (AllowAddInfantCheckCD == false)
                                                //{
                                                //    GetSSRAvailabilityforBooking(Response.Booking.CurrencyCode, rowpassenger.PassengerNumber,
                                                //                        Response.Booking.Journeys[j].Segments[k].DepartureStation,
                                                //                        Response.Booking.Journeys[j].Segments[k].ArrivalStation,
                                                //                        Response.Booking.Journeys[j].Segments[k].STD,
                                                //                        Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode.Trim(),
                                                //                        Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber.Trim(),
                                                //                        Response.Booking.Journeys[j].Segments[k].FlightDesignator.OpSuffix.Trim(), "INFT");
                                                //    AllowAddInfantCheckCD = true;
                                                //}
                                            }
                                            break;
                                        case 1:
                                            if (k == 0)
                                            {
                                                objPassengerContainer.setLiftStatus(Response.Booking.Journeys[j].Segments[k].PaxSegments[i].LiftStatus.ToString(), PassengerContainer.FlightType.Return);
                                                objPassengerContainer.setSegment("1", PassengerContainer.FlightType.Return);
                                                if (Response.Booking.Journeys[j].Segments[k].PaxSeats.Length > 0)
                                                {
                                                    for (int h = 0; h < Response.Booking.Journeys[j].Segments[k].PaxSeats.Length; h++)
                                                    {
                                                        if (Response.Booking.Journeys[j].Segments[k].PaxSeats[h].PassengerNumber == rowpassenger.PassengerNumber)
                                                        {
                                                            objPassengerContainer.setUnitDesignator(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].UnitDesignator.ToString(), PassengerContainer.FlightType.Return);
                                                            objPassengerContainer.setDeck(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].PaxSeatInfo.Deck.ToString(), PassengerContainer.FlightType.Return);
                                                            objPassengerContainer.setCompartmentDesignator(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].CompartmentDesignator.ToString(), PassengerContainer.FlightType.Return);
                                                        }
                                                    }
                                                }
                                                //added checking by ketee, to improve performance
                                                if (lstBookingJourneyContainer.FindIndex(item => item.JourneySellKey == objBookingJourneyContainer.JourneySellKey) < 0)
                                                {
                                                    objBookingJourneyContainer.CarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                                    objBookingJourneyContainer.FlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                                    objBookingJourneyContainer.STA = Response.Booking.Journeys[j].Segments[k].STA;
                                                    objBookingJourneyContainer.STD = Response.Booking.Journeys[j].Segments[k].STD;
                                                    objBookingJourneyContainer.FareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                                    objBookingJourneyContainer.FareClass = Response.Booking.Journeys[j].Segments[k].Fares[0].FareClassOfService;
                                                    objBookingJourneyContainer.ArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                                    objBookingJourneyContainer.DepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                                    objBookingJourneyContainer.OpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                                    objBookingJourneyContainer.EquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType.ToString();
                                                    objBookingJourneyContainer.FlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                                }

                                                //added by ketee
                                                //if (AllowAddInfantCheckR == false)
                                                //{
                                                //    GetSSRAvailabilityforBooking(Response.Booking.CurrencyCode, rowpassenger.PassengerNumber,
                                                //                        Response.Booking.Journeys[j].Segments[k].DepartureStation,
                                                //                        Response.Booking.Journeys[j].Segments[k].ArrivalStation,
                                                //                        Response.Booking.Journeys[j].Segments[k].STD,
                                                //                        Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode.Trim(),
                                                //                        Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber.Trim(),
                                                //                        Response.Booking.Journeys[j].Segments[k].FlightDesignator.OpSuffix.Trim(), "INFT");
                                                //    AllowAddInfantCheckR = true;
                                                //}
                                            }
                                            if (k == 1)
                                            {
                                                objPassengerContainer.setLiftStatus(Response.Booking.Journeys[j].Segments[k].PaxSegments[i].LiftStatus.ToString(), PassengerContainer.FlightType.ConnectingReturn);
                                                objPassengerContainer.setSegment("1", PassengerContainer.FlightType.ConnectingReturn);
                                                if (Response.Booking.Journeys[j].Segments[k].PaxSeats.Length > 0)
                                                {
                                                    for (int h = 0; h < Response.Booking.Journeys[j].Segments[k].PaxSeats.Length; h++)
                                                    {
                                                        if (Response.Booking.Journeys[j].Segments[k].PaxSeats[h].PassengerNumber == rowpassenger.PassengerNumber)
                                                        {
                                                            objPassengerContainer.setUnitDesignator(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].UnitDesignator.ToString(), PassengerContainer.FlightType.ConnectingReturn);
                                                            objPassengerContainer.setDeck(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].PaxSeatInfo.Deck.ToString(), PassengerContainer.FlightType.ConnectingReturn);
                                                            objPassengerContainer.setCompartmentDesignator(Response.Booking.Journeys[j].Segments[k].PaxSeats[h].CompartmentDesignator.ToString(), PassengerContainer.FlightType.ConnectingReturn);
                                                        }
                                                    }
                                                }
                                                //added checking by ketee, to improve performance
                                                if (lstBookingJourneyContainer.FindIndex(item => item.JourneySellKey == objBookingJourneyContainer.JourneySellKey) < 0)
                                                {
                                                    objBookingJourneyContainer.OverridedCarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                                    objBookingJourneyContainer.OverridedFlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                                    objBookingJourneyContainer.OverridedSTA = Response.Booking.Journeys[j].Segments[k].STA;
                                                    objBookingJourneyContainer.OverridedSTD = Response.Booking.Journeys[j].Segments[k].STD;
                                                    objBookingJourneyContainer.OverridedFareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                                    objBookingJourneyContainer.OverridedFareClass = Response.Booking.Journeys[j].Segments[k].Fares[0].FareClassOfService;
                                                    objBookingJourneyContainer.OverridedArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                                    objBookingJourneyContainer.OverridedDepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                                    objBookingJourneyContainer.OverridedOpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                                    objBookingJourneyContainer.OverridedEquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType.ToString();
                                                    objBookingJourneyContainer.OverridedFlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                                }

                                                //added by ketee
                                                //if (AllowAddInfantCheckCR == false)
                                                //{
                                                //    GetSSRAvailabilityforBooking(Response.Booking.CurrencyCode, rowpassenger.PassengerNumber,
                                                //                        Response.Booking.Journeys[j].Segments[k].DepartureStation,
                                                //                        Response.Booking.Journeys[j].Segments[k].ArrivalStation,
                                                //                        Response.Booking.Journeys[j].Segments[k].STD,
                                                //                        Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode.Trim(),
                                                //                        Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber.Trim(),
                                                //                        Response.Booking.Journeys[j].Segments[k].FlightDesignator.OpSuffix.Trim(), "INFT");
                                                //    AllowAddInfantCheckCR = true;
                                                //}
                                            }
                                            break;
                                    }
                                }
                                //load booking Journey
                                objBookingJourneyContainer.RecordLocator = Response.Booking.RecordLocator;
                                objBookingJourneyContainer.BookingID = Response.Booking.BookingID;
                                objBookingJourneyContainer.JourneySellKey = Response.Booking.Journeys[j].JourneySellKey;

                                //begin, retrieve flight duration
                                decimal FlightDura = 0, FlightDura2 = 0, departzone1 = 0, returnzone1 = 0, departzone2 = 0, returnzone2 = 0, diffsegment1 = 0, diffsegment2 = 0;
                                string depart1 = "", return1 = "", depart2 = "", return2 = "";

                                depart1 = objBookingJourneyContainer.DepartureStation;
                                if (objBookingJourneyContainer.OverridedDepartureStation.Trim() == "")
                                {
                                    return1 = objBookingJourneyContainer.ArrivalStation;
                                }
                                else
                                {
                                    return1 = objBookingJourneyContainer.ArrivalStation;
                                    depart2 = objBookingJourneyContainer.DepartureStation;
                                    return2 = objBookingJourneyContainer.ArrivalStation;
                                }

                                string StationCode = depart1;
                                if (depart1 != "" && return1 != "")
                                {
                                    ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");
                                    ACE.SessionManager.SessionServiceClient aceSession = new ACE.SessionManager.SessionServiceClient();
                                    ACE.LookUpManager.LookupServiceClient aceLookup = new ACE.LookUpManager.LookupServiceClient();
                                    ACE.SessionManager.LogonRequest LogonReq = new ACE.SessionManager.LogonRequest();
                                    LogonReq.Username = apiBooking.Username;
                                    LogonReq.Password = apiBooking.Password;

                                    ACE.SessionManager.LogonResponse resp;// = aceSession.Logon(LogonReq);
                                    using (profiler.Step("ACELogon"))
                                    {
                                        resp = aceSession.Logon(LogonReq);
                                    }
                                    ACE.LookUpManager.StationTimeZone TimeZoneResp = new ACE.LookUpManager.StationTimeZone();

                                    if (resp != null)
                                    {
                                        diffsegment1 = RetrieveTimeZone(aceLookup, resp, TimeZoneResp, depart1) - RetrieveTimeZone(aceLookup, resp, TimeZoneResp, return1);
                                        FlightDura = diffsegment1 * 60 + (decimal)(Convert.ToDateTime(objBookingJourneyContainer.STA) - Convert.ToDateTime(objBookingJourneyContainer.STD)).TotalMinutes;
                                        if (depart2 != "" && return2 != "")
                                        {
                                            diffsegment2 = RetrieveTimeZone(aceLookup, resp, TimeZoneResp, depart2) - RetrieveTimeZone(aceLookup, resp, TimeZoneResp, return2);
                                            FlightDura2 = diffsegment2 * 60 + (decimal)(Convert.ToDateTime(objBookingJourneyContainer.OverridedSTA) - Convert.ToDateTime(objBookingJourneyContainer.OverridedSTD)).TotalMinutes;
                                        }
                                    }
                                }
                                //end, retrieve flight duration

                                if (lstBookingJourneyContainer.FindIndex(item => item.JourneySellKey == objBookingJourneyContainer.JourneySellKey) < 0)
                                    lstBookingJourneyContainer.Add(objBookingJourneyContainer);
                            }
                            //add passengers
                            lstPassengerContainer.Add(objPassengerContainer);

                            //load passenger infant info
                            objPassengerInfantModel.BookingID = Response.Booking.BookingID;
                            objPassengerInfantModel.PassengerID = rowpassenger.PassengerID;
                            if (rowpassenger.PassengerInfants.Length > 0)
                            {
                                objPassengerInfantModel.LastName = rowpassenger.Infant.Names[0].LastName;
                                objPassengerInfantModel.FirstName = rowpassenger.Infant.Names[0].FirstName;
                                objPassengerInfantModel.DOB = rowpassenger.Infant.DOB;
                            }
                            lstPassengerInfantModel.Add(objPassengerInfantModel);
                            i++;
                        }
                    }

                    using (profiler.Step("load_payment"))
                    {
                        //load payment
                        PaymentContainer paymentContainer = new PaymentContainer();
                        for (int p = 0; p < Response.Booking.Payments.Length; p++)
                        {
                            paymentContainer = new PaymentContainer();
                            paymentContainer.AuthorizationCode = Response.Booking.Payments[p].AuthorizationCode;
                            paymentContainer.AccountNumber = Response.Booking.Payments[p].AccountNumber;
                            paymentContainer.MerchantID = Response.Booking.Payments[p].PaymentID.ToString();
                            paymentContainer.AccountNumberID = Response.Booking.Payments[p].AccountNumberID;
                            paymentContainer.CollectedAmount = Response.Booking.Payments[p].CollectedAmount;
                            paymentContainer.CurrencyCode = Response.Booking.Payments[p].CurrencyCode;
                            paymentContainer.PaymentAmount = Response.Booking.Payments[p].PaymentAmount;
                            paymentContainer.PaymentMethodCode = Response.Booking.Payments[p].PaymentMethodCode;
                            paymentContainer.PaymentMethodType = Convert.ToInt32(Response.Booking.Payments[p].PaymentMethodType);
                            paymentContainer.PaymentNumber = Response.Booking.Payments[p].PaymentNumber;
                            paymentContainer.PaymentStatus = Convert.ToInt32(Response.Booking.Payments[p].Status);
                            paymentContainer.PaymentText = Response.Booking.Payments[p].PaymentText; //aded by diana 20170404, to retrieve fee type

                            lstPaymentContainer.Add(paymentContainer);
                        }
                    }
                    if (lstPassengerContainer != null)
                    {
                        sesscon.SetPassengerContainer(lstPassengerContainer);
                        //HttpContext.Current.Session.Remove("PassengerContainers");
                        //HttpContext.Current.Session.Add("PassengerContainers", lstPassengerContainer);
                    }

                    if (lstBookingJourneyContainer != null)
                    {
                        sesscon.setBookingJourneyContainer(lstBookingJourneyContainer);
                        //HttpContext.Current.Session.Remove("BookingJourneyContainers");
                        //HttpContext.Current.Session.Add("BookingJourneyContainers", lstBookingJourneyContainer);
                    }

                    if (lstPassengerInfantModel != null)
                    {
                        sesscon.SetPassengerInfantModel(lstPassengerInfantModel);
                        //HttpContext.Current.Session.Remove("PassengerInfantContainers");
                        //HttpContext.Current.Session.Add("PassengerInfantContainers", lstPassengerInfantModel);
                    }

                    if (lstPaymentContainer != null)
                    {
                        sesscon.SetPaymentContainer(lstPaymentContainer);
                        //HttpContext.Current.Session.Remove("PaymentContainers");
                        //HttpContext.Current.Session.Add("PaymentContainers", lstPaymentContainer);
                    }

                    //load booking info
                    objBookingContainer.BookingID = Response.Booking.BookingID;
                    objBookingContainer.RecordLocator = Response.Booking.RecordLocator;
                    objBookingContainer.CurrencyCode = Response.Booking.CurrencyCode;
                    objBookingContainer.ReceivedBy = Response.Booking.ReceivedBy.ReceivedBy;
                    if (objBookingContainer != null)
                    {
                        HttpContext.Current.Session.Remove("BookingContainer");
                        HttpContext.Current.Session.Add("BookingContainer", objBookingContainer);
                    }



                    return true;

                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                ApiBook.Dispose();
            }


        }

        public Boolean GetBookingPayment(string RecordLocator)
        {
            try
            {
                SessionContext sesscon = new SessionContext();
                Navitaire.APIBooking bookingAPI = new Navitaire.APIBooking(sesscon.GetSessionID());
                Navitaire.BookingManager.GetBookingPaymentsResponse resp = new Navitaire.BookingManager.GetBookingPaymentsResponse();
                resp = bookingAPI.GetBookingPayment(RecordLocator);
                if (resp != null && resp.getBookingPaymentRespData.Payments.Length > 0)
                {
                    for (int i = 0; i < resp.getBookingPaymentRespData.Payments.Length; i++)
                    {
                        if (resp.getBookingPaymentRespData.Payments[i].Status.ToString().ToLower() == "approved")
                            return true;
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
        }

        public List<LocationContainer> getLocation()
        {
            LocationControl locationbase = new LocationControl();
            try
            {
                return locationbase.GetAllLocation();
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return null;
            }
        }

        //added by ketee
        public Boolean GetPaymentDetailsByPNR(string PNR, string TransID)
        {
            //return false;//testing
            List<PaymentContainer> lstPaymentContainer = new List<PaymentContainer>();
            try
            {
                string errMsg = "";
                Navitaire.APIBooking ApiBook = new Navitaire.APIBooking("");
                Navitaire.BookingManager.GetBookingResponse Response = new Navitaire.BookingManager.GetBookingResponse();
                Response = ApiBook.GetBookingResponseByPNR(PNR, 3);
                if (Response != null)
                {
                    if (Response.Booking == null || Response.Booking.Journeys.Length <= 0)
                    {
                        log.Info(this, "GetPaymentDetailsByPNR - Booking status is pending. PNR:" + PNR + ", TransactionID:" + TransID);
                        return false;
                    }



                    if (Response.Booking.BookingContacts.Length > 0)
                    {
                        HttpContext.Current.Session.Remove("Title_" + PNR);
                        HttpContext.Current.Session.Remove("FirstName_" + PNR);
                        HttpContext.Current.Session.Remove("LastName_" + PNR);

                        if (Response.Booking.BookingContacts[0].Names.Length > 0)
                        {
                            HttpContext.Current.Session.Add("Title_" + PNR, Response.Booking.BookingContacts[0].Names[0].Title);
                            HttpContext.Current.Session.Add("FirstName_" + PNR, Response.Booking.BookingContacts[0].Names[0].FirstName);
                            HttpContext.Current.Session.Add("LastName_" + PNR, Response.Booking.BookingContacts[0].Names[0].LastName);
                        }
                        else
                        {
                            HttpContext.Current.Session.Add("Title_" + PNR, "");
                            HttpContext.Current.Session.Add("FirstName_" + PNR, "");
                            HttpContext.Current.Session.Add("LastName_" + PNR, "");
                        }

                        HttpContext.Current.Session.Remove("Email_" + PNR);
                        HttpContext.Current.Session.Add("Email_" + PNR, Response.Booking.BookingContacts[0].EmailAddress);

                        HttpContext.Current.Session.Remove("PhoneNo_" + PNR);
                        HttpContext.Current.Session.Add("PhoneNo_" + PNR, Response.Booking.BookingContacts[0].HomePhone);

                        HttpContext.Current.Session.Remove("Address_" + PNR);
                        HttpContext.Current.Session.Add("Address_" + PNR, Response.Booking.BookingContacts[0].AddressLine1);

                        HttpContext.Current.Session.Remove("Town_" + PNR);
                        HttpContext.Current.Session.Add("Town_" + PNR, Response.Booking.BookingContacts[0].City);

                        HttpContext.Current.Session.Remove("Country_" + PNR);
                        HttpContext.Current.Session.Add("Country_" + PNR, Response.Booking.BookingContacts[0].CountryCode);

                        HttpContext.Current.Session.Remove("State_" + PNR);
                        HttpContext.Current.Session.Add("State_" + PNR, Response.Booking.BookingContacts[0].ProvinceState);

                        HttpContext.Current.Session.Remove("ZipCode_" + PNR);
                        HttpContext.Current.Session.Add("ZipCode_" + PNR, Response.Booking.BookingContacts[0].PostalCode);
                    }
                    //load payment
                    PaymentContainer paymentContainer = new PaymentContainer();
                    for (int i = 0; i < Response.Booking.Payments.Length; i++)
                    {
                        paymentContainer = new PaymentContainer();
                        paymentContainer.AuthorizationCode = Response.Booking.Payments[i].AuthorizationCode;
                        paymentContainer.AccountNumber = Response.Booking.Payments[i].AccountNumber;
                        paymentContainer.MerchantID = Response.Booking.Payments[i].PaymentID.ToString();
                        paymentContainer.AccountNumberID = Response.Booking.Payments[i].AccountNumberID;
                        //paymentContainer.CollectedAmount = Response.Booking.Payments[i].CollectedAmount;
                        paymentContainer.CollectedAmount = Response.Booking.Payments[i].PaymentAmount;
                        paymentContainer.CurrencyCode = Response.Booking.Payments[i].CurrencyCode;
                        paymentContainer.PaymentAmount = Response.Booking.Payments[i].PaymentAmount;
                        paymentContainer.PaymentMethodCode = Response.Booking.Payments[i].PaymentMethodCode;
                        paymentContainer.PaymentMethodType = Convert.ToInt32(Response.Booking.Payments[i].PaymentMethodType);
                        paymentContainer.PaymentNumber = Response.Booking.Payments[i].PaymentNumber;
                        paymentContainer.PaymentStatus = Convert.ToInt32(Response.Booking.Payments[i].Status);
                        paymentContainer.PaymentText = Response.Booking.Payments[i].PaymentText; //aded by diana 20170404, to retrieve fee type
                        paymentContainer.PaymentDate = Response.Booking.Payments[i].ApprovalDate;
                        paymentContainer.RecordLocator = PNR;
                        //added by ketee 20130625
                        //Get Currecy Rate List 20130625
                        Navitaire.UtilitiesManager.GetExternalRatesListResponseData RateResponse = ApiBook.GetExternalRateList("");
                        decimal currRate = 1;
                        if (paymentContainer.CurrencyCode != "MYR")
                        {
                            for (int k = 0; k < RateResponse.ExternalRateList.Length; k++)
                            {
                                if (RateResponse.ExternalRateList[k].QuotedCurrency == paymentContainer.CurrencyCode && RateResponse.ExternalRateList[k].CollectedCurrency == "MYR")
                                {
                                    currRate = RateResponse.ExternalRateList[k].ExchangeRate;
                                }
                            }
                        }
                        paymentContainer.CurrencyRate = currRate;

                        //DateTime bookingHoldTime = DateTime.Now.AddYears(10);
                        //DateTime dateValue;
                        //if (DateTime.TryParse(Response.Booking.BookingHold.HoldDateTime.ToString(), out dateValue)) paymentContainer.HoldDateTime = (DateTime)Response.Booking.BookingHold.HoldDateTime;

                        lstPaymentContainer.Add(paymentContainer);
                    }

                    if (lstPaymentContainer != null)
                    {
                        HttpContext.Current.Session.Remove("PaymentContainers");
                        HttpContext.Current.Session.Add("PaymentContainers", lstPaymentContainer);
                        return true;
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
        }

        //Added by ketee, get the booking payment amount by PNR, 20170303
        public Boolean GetPaymentAmountByPNR(string PNR, string TransID, ref decimal collectedAmount)
        {
            List<PaymentContainer> lstPaymentContainer = new List<PaymentContainer>();
            try
            {
                string errMsg = "";
                Navitaire.APIBooking ApiBook = new Navitaire.APIBooking("");
                Navitaire.BookingManager.GetBookingResponse Response = new Navitaire.BookingManager.GetBookingResponse();
                Response = ApiBook.GetBookingResponseByPNR(PNR, 3);
                if (Response != null)
                {
                    if (Response.Booking == null || Response.Booking.Journeys.Length <= 0)
                    {
                        log.Info(this, "GetPaymentDetailsByPNR - Booking status is pending. PNR:" + PNR + ", TransactionID:" + TransID);
                        return false;
                    }

                    if (Response.Booking.BookingContacts.Length > 0)
                    {
                        HttpContext.Current.Session.Remove("Title_" + PNR);
                        HttpContext.Current.Session.Remove("FirstName_" + PNR);
                        HttpContext.Current.Session.Remove("LastName_" + PNR);

                        if (Response.Booking.BookingContacts[0].Names.Length > 0)
                        {
                            HttpContext.Current.Session.Add("Title_" + PNR, Response.Booking.BookingContacts[0].Names[0].Title);
                            HttpContext.Current.Session.Add("FirstName_" + PNR, Response.Booking.BookingContacts[0].Names[0].FirstName);
                            HttpContext.Current.Session.Add("LastName_" + PNR, Response.Booking.BookingContacts[0].Names[0].LastName);
                        }
                        else
                        {
                            HttpContext.Current.Session.Add("Title_" + PNR, "");
                            HttpContext.Current.Session.Add("FirstName_" + PNR, "");
                            HttpContext.Current.Session.Add("LastName_" + PNR, "");
                        }

                        HttpContext.Current.Session.Remove("Email_" + PNR);
                        HttpContext.Current.Session.Add("Email_" + PNR, Response.Booking.BookingContacts[0].EmailAddress);

                        HttpContext.Current.Session.Remove("PhoneNo_" + PNR);
                        HttpContext.Current.Session.Add("PhoneNo_" + PNR, Response.Booking.BookingContacts[0].HomePhone);

                        HttpContext.Current.Session.Remove("Address_" + PNR);
                        HttpContext.Current.Session.Add("Address_" + PNR, Response.Booking.BookingContacts[0].AddressLine1);

                        HttpContext.Current.Session.Remove("Town_" + PNR);
                        HttpContext.Current.Session.Add("Town_" + PNR, Response.Booking.BookingContacts[0].City);

                        HttpContext.Current.Session.Remove("Country_" + PNR);
                        HttpContext.Current.Session.Add("Country_" + PNR, Response.Booking.BookingContacts[0].CountryCode);

                        HttpContext.Current.Session.Remove("State_" + PNR);
                        HttpContext.Current.Session.Add("State_" + PNR, Response.Booking.BookingContacts[0].ProvinceState);

                        HttpContext.Current.Session.Remove("ZipCode_" + PNR);
                        HttpContext.Current.Session.Add("ZipCode_" + PNR, Response.Booking.BookingContacts[0].PostalCode);
                    }
                    //load payment
                    PaymentContainer paymentContainer = new PaymentContainer();
                    for (int i = 0; i < Response.Booking.Payments.Length; i++)
                    {
                        paymentContainer = new PaymentContainer();
                        paymentContainer.AuthorizationCode = Response.Booking.Payments[i].AuthorizationCode;
                        paymentContainer.AccountNumber = Response.Booking.Payments[i].AccountNumber;
                        paymentContainer.MerchantID = Response.Booking.Payments[i].PaymentID.ToString();
                        paymentContainer.AccountNumberID = Response.Booking.Payments[i].AccountNumberID;
                        //paymentContainer.CollectedAmount = Response.Booking.Payments[i].CollectedAmount;
                        paymentContainer.CollectedAmount = Response.Booking.Payments[i].PaymentAmount;
                        paymentContainer.CurrencyCode = Response.Booking.Payments[i].CurrencyCode;
                        paymentContainer.PaymentAmount = Response.Booking.Payments[i].PaymentAmount;
                        paymentContainer.PaymentMethodCode = Response.Booking.Payments[i].PaymentMethodCode;
                        paymentContainer.PaymentMethodType = Convert.ToInt32(Response.Booking.Payments[i].PaymentMethodType);
                        paymentContainer.PaymentNumber = Response.Booking.Payments[i].PaymentNumber;
                        paymentContainer.PaymentStatus = Convert.ToInt32(Response.Booking.Payments[i].Status);
                        paymentContainer.PaymentText = Response.Booking.Payments[i].PaymentText; //aded by diana 20170404, to retrieve fee type
                        paymentContainer.PaymentDate = Response.Booking.Payments[i].ApprovalDate;
                        paymentContainer.RecordLocator = PNR;
                        //added by ketee 20130625
                        //Get Currecy Rate List 20130625
                        Navitaire.UtilitiesManager.GetExternalRatesListResponseData RateResponse = ApiBook.GetExternalRateList("");
                        decimal currRate = 1;
                        if (paymentContainer.CurrencyCode != "MYR")
                        {
                            for (int k = 0; k < RateResponse.ExternalRateList.Length; k++)
                            {
                                if (RateResponse.ExternalRateList[k].QuotedCurrency == paymentContainer.CurrencyCode && RateResponse.ExternalRateList[k].CollectedCurrency == "MYR")
                                {
                                    currRate = RateResponse.ExternalRateList[k].ExchangeRate;
                                }
                            }
                        }
                        paymentContainer.CurrencyRate = currRate;

                        //DateTime bookingHoldTime = DateTime.Now.AddYears(10);
                        //DateTime dateValue;
                        //if (DateTime.TryParse(Response.Booking.BookingHold.HoldDateTime.ToString(), out dateValue)) paymentContainer.HoldDateTime = (DateTime)Response.Booking.BookingHold.HoldDateTime;

                        lstPaymentContainer.Add(paymentContainer);
                    }

                    if (lstPaymentContainer != null)
                    {
                        HttpContext.Current.Session.Remove("PaymentContainers");
                        HttpContext.Current.Session.Add("PaymentContainers", lstPaymentContainer);
                        return true;
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
        }

        //added by diana 20130923, get passenger by pnr
        public Boolean GetPassengerDetailsByPNR(string PNR, string TransID)
        {
            //added by romy, performance monitoring
            var profiler = MiniProfiler.Current;

            List<PassengerContainer> lstPassengerContainer = new List<PassengerContainer>();
            try
            {
                string errMsg = "";
                Navitaire.APIBooking ApiBook = new Navitaire.APIBooking("");
                Navitaire.BookingManager.GetBookingResponse Response = new Navitaire.BookingManager.GetBookingResponse();
                using (profiler.Step("GetBookingResponseByPNR"))
                {
                    Response = ApiBook.GetBookingResponseByPNR(PNR);
                }
                if (Response != null)
                {
                    //string xml = GetXMLString(Response);
                    if (Response.Booking == null || Response.Booking.Journeys.Length <= 0)
                    {
                        log.Info(this, "GetPassengerDetailsByPNR - Booking status is pending. PNR:" + PNR + ", TransactionID:" + TransID);
                        return false;
                    }

                    //load passenger
                    PassengerContainer passengerContainer = new PassengerContainer();
                    for (int i = 0; i < Response.Booking.Passengers.Length; i++)
                    {

                        passengerContainer = new PassengerContainer();
                        passengerContainer.RecordLocator = PNR;
                        passengerContainer.PassengerID = Response.Booking.Passengers[i].PassengerNumber;

                        //if (Response.Booking.Passengers[i].Names[0].FirstName.ToString().StartsWith("TBA"))
                        //    passengerContainer.FirstName = "TBA";
                        //else
                        //    passengerContainer.FirstName = Response.Booking.Passengers[i].Names[0].FirstName;

                        //if (Response.Booking.Passengers[i].Names[0].LastName.ToString().StartsWith("TBA"))
                        //    passengerContainer.LastName = "TBA";
                        //else
                        //    passengerContainer.LastName = Response.Booking.Passengers[i].Names[0].LastName;

                        //amended by ketee, set changecount for those pax already updated in navitaire
                        if (Response.Booking.Passengers[i].Names[0].FirstName.ToString().StartsWith("TBA"))
                            passengerContainer.FirstName = "TBA";
                        else
                        {
                            passengerContainer.FirstName = Response.Booking.Passengers[i].Names[0].FirstName;
                            passengerContainer.ChangeCount = 0;
                            //passengerContainer.MaxChange = 1;
                        }

                        if (Response.Booking.Passengers[i].Names[0].LastName.ToString().StartsWith("TBA"))
                            passengerContainer.LastName = "TBA";
                        else
                        {
                            passengerContainer.LastName = Response.Booking.Passengers[i].Names[0].LastName;
                            passengerContainer.ChangeCount = 0;
                            //passengerContainer.MaxChange = 1;
                        }

                        passengerContainer.Title = Response.Booking.Passengers[i].Names[0].Title;

                        passengerContainer.Gender = Response.Booking.Passengers[i].PassengerInfo.Gender.ToString();
                        passengerContainer.Nationality = Response.Booking.Passengers[i].PassengerInfo.Nationality;
                        passengerContainer.IssuingCountry = Response.Booking.Passengers[i].PassengerInfo.ResidentCountry;

                        passengerContainer.DOB = Response.Booking.Passengers[i].PassengerTypeInfos[0].DOB;

                        if (Response.Booking.Passengers[i].PassengerTravelDocuments.Length > 0)
                        {
                            passengerContainer.PassportNo = Response.Booking.Passengers[i].PassengerTravelDocuments[0].DocNumber;
                            passengerContainer.ExpiryDate = Response.Booking.Passengers[i].PassengerTravelDocuments[0].ExpirationDate;
                        }

                        //added by ketee, add seats from Navitaire PNR
                        for (int j = 0; j < Response.Booking.Journeys.Length; j++)
                        {
                            for (int k = 0; k < Response.Booking.Journeys[j].Segments.Length; k++)
                            {
                                switch (j)
                                {
                                    case 0:
                                        if (k == 0)
                                        {
                                            if (Response.Booking.Journeys[j].Segments[k].PaxSeats.Length > 0)
                                            {
                                                int iIndex = Response.Booking.Journeys[j].Segments[k].PaxSeats.FindIndex(x => x.PassengerNumber == Convert.ToInt16(passengerContainer.PassengerID));
                                                if (iIndex >= 0)
                                                {
                                                    passengerContainer.DepartSeat = "0_" + Response.Booking.Journeys[j].Segments[k].PaxSeats[iIndex].CompartmentDesignator +
                                                                                     "_" + Response.Booking.Journeys[j].Segments[k].PaxSeats[iIndex].PaxSeatInfo.Deck +
                                                                                     "_" + Response.Booking.Journeys[j].Segments[k].PaxSeats[iIndex].UnitDesignator;
                                                }
                                            }

                                        }
                                        else if (k == 1)
                                        {
                                            if (Response.Booking.Journeys[j].Segments[k].PaxSeats.Length > 0)
                                            {
                                                int iIndex = Response.Booking.Journeys[j].Segments[k].PaxSeats.FindIndex(x => x.PassengerNumber == Convert.ToInt16(passengerContainer.PassengerID));
                                                if (iIndex >= 0)
                                                {
                                                    passengerContainer.DepartConnectingSeat = "0_" + Response.Booking.Journeys[j].Segments[k].PaxSeats[iIndex].CompartmentDesignator +
                                                                                     "_" + Response.Booking.Journeys[j].Segments[k].PaxSeats[iIndex].PaxSeatInfo.Deck +
                                                                                     "_" + Response.Booking.Journeys[j].Segments[k].PaxSeats[iIndex].UnitDesignator;
                                                }
                                            }
                                        }
                                        break;
                                    case 1:
                                        if (k == 0)
                                        {
                                            if (Response.Booking.Journeys[j].Segments[k].PaxSeats.Length > 0)
                                            {
                                                int iIndex = Response.Booking.Journeys[j].Segments[k].PaxSeats.FindIndex(x => x.PassengerNumber == Convert.ToInt16(passengerContainer.PassengerID));
                                                if (iIndex >= 0)
                                                {
                                                    passengerContainer.ReturnSeat = "0_" + Response.Booking.Journeys[j].Segments[k].PaxSeats[iIndex].CompartmentDesignator +
                                                                                     "_" + Response.Booking.Journeys[j].Segments[k].PaxSeats[iIndex].PaxSeatInfo.Deck +
                                                                                     "_" + Response.Booking.Journeys[j].Segments[k].PaxSeats[iIndex].UnitDesignator;
                                                }
                                            }
                                        }
                                        else if (k == 1)
                                        {
                                            if (Response.Booking.Journeys[j].Segments[k].PaxSeats.Length > 0)
                                            {
                                                int iIndex = Response.Booking.Journeys[j].Segments[k].PaxSeats.FindIndex(x => x.PassengerNumber == Convert.ToInt16(passengerContainer.PassengerID));
                                                if (iIndex >= 0)
                                                {
                                                    passengerContainer.ReturnConnectingSeat = "0_" + Response.Booking.Journeys[j].Segments[k].PaxSeats[iIndex].CompartmentDesignator +
                                                                                     "_" + Response.Booking.Journeys[j].Segments[k].PaxSeats[iIndex].PaxSeatInfo.Deck +
                                                                                     "_" + Response.Booking.Journeys[j].Segments[k].PaxSeats[iIndex].UnitDesignator;
                                                }
                                            }
                                        }
                                        break;
                                    default:
                                        break;

                                }
                            }
                        }

                        lstPassengerContainer.Add(passengerContainer);
                        //listbk_transssrinfo.Add(BK_TRANSSSRInfo);
                    }

                    //if (listbk_transssrinfo != null)
                    //{
                    //    HttpContext.Current.Session.Remove("SSRContainers");
                    //    HttpContext.Current.Session.Add("SSRContainers", listbk_transssrinfo);
                    //}

                    if (lstPassengerContainer != null)
                    {
                        HttpContext.Current.Session.Remove("PassengerContainers");
                        HttpContext.Current.Session.Add("PassengerContainers", lstPassengerContainer);
                        return true;
                    }


                }
                return false;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
        }

        //added by diana 20130922, get flight details
        public Boolean GetBookingJourneyDetailsByPNR(string PNR, string TransID)
        {
            List<BookingJourneyContainer> lstBookingJourneyContainer = new List<BookingJourneyContainer>();
            try
            {
                string errMsg = "";

                Navitaire.APIBooking ApiBook = new Navitaire.APIBooking("");
                Navitaire.BookingManager.GetBookingResponse Response = new Navitaire.BookingManager.GetBookingResponse();
                //log.Info(this,"Object ApiBook created - PNR : " + PNR);
                Response = ApiBook.GetBookingResponseByPNR(PNR);
                //string resp = GetXMLString(Response);
                //log.Info(this,"Response retrieve - PNR : " + PNR);
                if (Response != null)
                {
                    if (Response.Booking == null || Response.Booking.Journeys.Length <= 0)
                    {
                        log.Info(this, "GetBookingJourneyDetailsByPNR - Booking status is pending. PNR:" + PNR + ", TransactionID:" + TransID);
                        return false;
                    }

                    int paxADT = 0, paxCHD = 0;
                    decimal serviceFee = 0;
                    decimal vatFee = 0;
                    decimal chargeFee = 0;
                    decimal otherFee = 0;
                    decimal processFee = 0;
                    decimal nameChangeFee = 0;
                    decimal splFee = 0;
                    decimal ssrFee1 = 0; //going
                    decimal ssrFee2 = 0; //return
                    decimal seatFee1 = 0; //going
                    decimal seatFee2 = 0; //return
                    decimal infantFee1 = 0; //going
                    decimal infantFee2 = 0; //return
                    string feeCode = "";
                    decimal feeAmount = 0;
                    decimal discFee = 0;
                    decimal promoDiscFee = 0;
                    string feeChargeType = "";

                    //if (Response.Booking.Passengers.Length > 0)
                    //{
                    //    foreach (PassengerFee itemPassengerFee in Response.Booking.Passengers[0].PassengerFees)
                    //    {
                    //        foreach (BookingServiceCharge itemServiceCharge in itemPassengerFee.ServiceCharges)
                    //        {
                    //            feeCode = itemServiceCharge.ChargeCode;
                    //            feeAmount = itemServiceCharge.Amount;
                    //            switch (feeCode)
                    //            {
                    //                case "SVCF":
                    //                    serviceFee += feeAmount;
                    //                    break;
                    //                case "VAT":
                    //                    vatFee += feeAmount;
                    //                    break;
                    //                case "CHG":
                    //                    chargeFee += feeAmount;
                    //                    break;
                    //                case "SPL":
                    //                    splFee += feeAmount;
                    //                    break;
                    //                default:
                    //                    otherFee += feeAmount;
                    //                    break;
                    //            }
                    //        }
                    //    }
                    //}

                    //retrieve arrival, departure
                    string Departure = "", Arrival = "", TransitDepart = "", TransitReturn = "";
                    for (int j = 0; j < Response.Booking.Journeys.Length; j++)
                    {
                        for (int k = 0; k < Response.Booking.Journeys[j].Segments.Length; k++)
                        {
                            switch (j)
                            {
                                case 0:
                                    if (k == 0)
                                    {
                                        Departure = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        Arrival = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                    }
                                    else if (k == 1)
                                    {
                                        TransitDepart = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        Arrival = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                    }
                                    break;
                                case 1:
                                    if (k == 0)
                                    {
                                        Arrival = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                    }
                                    else if (k == 1)
                                    {
                                        TransitReturn = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                    }
                                    break;
                                default:
                                    break;

                            }
                        }
                    }

                    foreach (Passenger itemPassenger in Response.Booking.Passengers)
                    {
                        if (itemPassenger.PassengerTypeInfos[0].PaxType == "ADT")
                        {
                            paxADT++;
                        }
                        else
                        {
                            paxCHD++;
                        }

                        foreach (PassengerFee itemPassengerFee in itemPassenger.PassengerFees)
                        {
                            foreach (BookingServiceCharge itemServiceCharge in itemPassengerFee.ServiceCharges)
                            {
                                feeCode = itemServiceCharge.ChargeCode;
                                feeAmount = itemServiceCharge.Amount;
                                feeChargeType = itemServiceCharge.ChargeType.ToString();

                                if (itemPassengerFee.FeeType == FeeType.SSRFee)
                                {
                                    if (feeChargeType.ToUpper() == "DISCOUNT")
                                    {
                                        feeAmount = 0 - feeAmount;
                                    }
                                    if (itemPassengerFee.FlightReference != "")
                                    {
                                        if (itemPassengerFee.FlightReference.Substring(16, 6) == Departure + Arrival || itemPassengerFee.FlightReference.Substring(16, 6) == Departure + TransitDepart || itemPassengerFee.FlightReference.Substring(16, 6) == TransitDepart + Arrival)
                                        {
                                            if (feeCode == "INFT")
                                                infantFee1 += feeAmount;
                                            else
                                                ssrFee1 += feeAmount;
                                        }
                                        else if (itemPassengerFee.FlightReference.Substring(16, 6) == Arrival + Departure || itemPassengerFee.FlightReference.Substring(16, 6) == TransitReturn + Departure || itemPassengerFee.FlightReference.Substring(16, 6) == Arrival + TransitReturn)
                                        {
                                            if (feeCode == "INFT")
                                                infantFee2 += feeAmount;
                                            else
                                                ssrFee2 += feeAmount;
                                        }
                                    }
                                }
                                else if (itemPassengerFee.FeeType == FeeType.SeatFee)
                                {
                                    if (feeChargeType.ToUpper() == "DISCOUNT")
                                    {
                                        feeAmount = 0 - feeAmount;
                                    }
                                    if (itemPassengerFee.FlightReference != "")
                                    {
                                        if (itemPassengerFee.FlightReference.Substring(16, 6) == Departure + Arrival || itemPassengerFee.FlightReference.Substring(16, 6) == Departure + TransitDepart || itemPassengerFee.FlightReference.Substring(16, 6) == TransitDepart + Arrival)
                                            seatFee1 += feeAmount;
                                        else if (itemPassengerFee.FlightReference.Substring(16, 6) == Arrival + Departure || itemPassengerFee.FlightReference.Substring(16, 6) == TransitReturn + Departure || itemPassengerFee.FlightReference.Substring(16, 6) == Arrival + TransitReturn)
                                            seatFee2 += feeAmount;
                                    }
                                }
                                else if (itemPassengerFee.FeeType == FeeType.PaymentFee)
                                {
                                    if (feeChargeType.ToUpper() == "DISCOUNT")
                                    {
                                        feeAmount = 0 - feeAmount;
                                    }
                                    processFee += feeAmount;
                                }
                                else if (itemPassengerFee.FeeCode == "NCF")
                                {
                                    if (feeChargeType.ToUpper() == "DISCOUNT")
                                    {
                                        feeAmount = 0 - feeAmount;
                                    }
                                    nameChangeFee += feeAmount;
                                }
                                else if (feeChargeType.ToUpper() == "DISCOUNT")
                                {
                                    discFee -= feeAmount;
                                }
                                else if (feeChargeType.ToUpper() == "PROMOTIONDISCOUNT")
                                {
                                    promoDiscFee -= feeAmount;
                                }
                                else
                                {
                                    switch (feeCode)
                                    {
                                        case "SVCF":
                                            serviceFee += feeAmount;
                                            break;
                                        case "VAT":
                                            vatFee += feeAmount;
                                            break;
                                        case "CHG":
                                            chargeFee += feeAmount;
                                            break;
                                        case "SPL":
                                            splFee += feeAmount;
                                            break;
                                        //case "NCF":
                                        //    nameChangeFee += feeAmount;
                                        //    break;
                                        //case "CONA":
                                        //    processFee += feeAmount;
                                        //    break;
                                        default:
                                            otherFee += feeAmount;
                                            break;
                                    }
                                }
                            }
                        }
                    }

                    //load journey
                    BookingJourneyContainer bookingJourneyContainer = new BookingJourneyContainer();
                    for (int j = 0; j < Response.Booking.Journeys.Length; j++)
                    {
                        bookingJourneyContainer = new BookingJourneyContainer();
                        for (int k = 0; k < Response.Booking.Journeys[j].Segments.Length; k++)
                        {
                            switch (j)
                            {
                                case 0:
                                    if (k == 0)
                                    {
                                        for (int m = 0; m < Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares.Length; m++)
                                        {
                                            if (Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].PaxType == "ADT")
                                            {

                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.AdtFarePrice = charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.AdtDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.AdtPromoDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.AdtTaxChrg = charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.AdtFuelChrg = charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg = charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.AdtFarePrice = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.AdtTaxChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.AdtFuelChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.AdtServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}

                                            }
                                            else
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.ChdFarePrice = charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.ChdDiscChrg = charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.ChdPromoDiscChrg = charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.ChdTaxChrg = charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.ChdFuelChrg = charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg = charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.ChdServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.ChdServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.ChdFarePrice = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.ChdTaxChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.ChdFuelChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.ChdServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                        }
                                        //int serviceCharge = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges.Length; // 1
                                        //string paxType = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].PaxType; // ADT
                                        //string currencyCode = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges[0].CurrencyCode; // MYR
                                        //decimal amount = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges[0].Amount; // 90
                                        //string chargeDetail = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges[0].ChargeDetail; // blank
                                        //string foreignCurrencyCode = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges[0].ForeignCurrencyCode; // MYR
                                        //decimal foreignAmount = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges[0].ForeignAmount; // 90

                                        bookingJourneyContainer.CarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                        bookingJourneyContainer.FlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                        bookingJourneyContainer.STA = Response.Booking.Journeys[j].Segments[k].STA;
                                        bookingJourneyContainer.STD = Response.Booking.Journeys[j].Segments[k].STD;
                                        bookingJourneyContainer.Flag = (byte)Response.Booking.Journeys[j].Segments[k].Fares[0].FareSequence;
                                        bookingJourneyContainer.FareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                        bookingJourneyContainer.FareClass = Response.Booking.Journeys[j].Segments[k].Fares[0].FareClassOfService;
                                        bookingJourneyContainer.ArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                        bookingJourneyContainer.DepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        bookingJourneyContainer.OpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                        bookingJourneyContainer.EquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType;
                                        bookingJourneyContainer.FlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                        bookingJourneyContainer.ServiceFee = serviceFee;
                                        bookingJourneyContainer.VATFee = vatFee;
                                        bookingJourneyContainer.ChargeFee = chargeFee;
                                        bookingJourneyContainer.SPLFee = splFee;
                                        bookingJourneyContainer.SSRChrg = ssrFee1;
                                        bookingJourneyContainer.SeatChrg = seatFee1;
                                        bookingJourneyContainer.InfantChrg = infantFee1;
                                        bookingJourneyContainer.OtherFee = otherFee;
                                        bookingJourneyContainer.ProcessFee = processFee;
                                        bookingJourneyContainer.DiscFee = discFee;
                                        bookingJourneyContainer.PromoDiscFee = promoDiscFee;
                                        bookingJourneyContainer.NameChangeChrg = nameChangeFee;
                                    }
                                    if (k == 1)
                                    {
                                        for (int m = 0; m < Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares.Length; m++)
                                        {
                                            if (Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].PaxType == "ADT")
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.AdtFarePrice += charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.AdtDiscChrg -= charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.AdtPromoDiscChrg -= charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.AdtTaxChrg += charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.AdtFuelChrg += charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg += charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.AdtFarePrice += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.AdtTaxChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.AdtFuelChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.AdtServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                            else
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.ChdFarePrice += charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.ChdDiscChrg -= charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.ChdPromoDiscChrg -= charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.ChdTaxChrg += charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.ChdFuelChrg += charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg += charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.ChdServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.ChdServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.ChdFarePrice += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.ChdTaxChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.ChdFuelChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.ChdServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                        }
                                        bookingJourneyContainer.OverridedCarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                        bookingJourneyContainer.OverridedFlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                        bookingJourneyContainer.OverridedSTA = Response.Booking.Journeys[j].Segments[k].STA;
                                        bookingJourneyContainer.OverridedSTD = Response.Booking.Journeys[j].Segments[k].STD;
                                        bookingJourneyContainer.OverridedFareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                        bookingJourneyContainer.OverridedFareClass = Response.Booking.Journeys[j].Segments[k].Fares[0].FareClassOfService;
                                        bookingJourneyContainer.OverridedArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                        bookingJourneyContainer.OverridedDepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        bookingJourneyContainer.OverridedOpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                        bookingJourneyContainer.OverridedEquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType;
                                        bookingJourneyContainer.OverridedFlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                    }
                                    break;
                                case 1:
                                    if (k == 0)
                                    {
                                        for (int m = 0; m < Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares.Length; m++)
                                        {
                                            if (Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].PaxType == "ADT")
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.AdtFarePrice = charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.AdtDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.AdtPromoDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.AdtTaxChrg = charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.AdtFuelChrg = charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg = charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.AdtFarePrice = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.AdtTaxChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.AdtFuelChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.AdtServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                            else
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.ChdFarePrice = charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.ChdDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.ChdPromoDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.ChdTaxChrg = charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.ChdFuelChrg = charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg = charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.ChdServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.ChdServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.ChdFarePrice = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.ChdTaxChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.ChdFuelChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.ChdServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                        }

                                        //int cntPaxFare = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares.Length; // 1
                                        //int serviceCharge = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges.Length; // 1
                                        //string paxType = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].PaxType; // ADT
                                        //string currencyCode = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges[0].CurrencyCode; // MYR
                                        //decimal amount = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges[0].Amount; // 90
                                        //string chargeDetail = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges[0].ChargeDetail; // blank
                                        //string foreignCurrencyCode = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges[0].ForeignCurrencyCode; // MYR
                                        //decimal foreignAmount = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges[0].ForeignAmount; // 90

                                        bookingJourneyContainer.CarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                        bookingJourneyContainer.FlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                        bookingJourneyContainer.STA = Response.Booking.Journeys[j].Segments[k].STA;
                                        bookingJourneyContainer.STD = Response.Booking.Journeys[j].Segments[k].STD;
                                        bookingJourneyContainer.Flag = (byte)Response.Booking.Journeys[j].Segments[k].Fares[0].FareSequence;
                                        bookingJourneyContainer.FareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                        bookingJourneyContainer.FareClass = Response.Booking.Journeys[j].Segments[k].Fares[0].FareClassOfService;
                                        bookingJourneyContainer.ArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                        bookingJourneyContainer.DepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        bookingJourneyContainer.OpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                        bookingJourneyContainer.EquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType;
                                        bookingJourneyContainer.FlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                        bookingJourneyContainer.ServiceFee = 0;
                                        bookingJourneyContainer.VATFee = 0;
                                        bookingJourneyContainer.ChargeFee = 0;
                                        bookingJourneyContainer.SPLFee = 0;
                                        bookingJourneyContainer.OtherFee = 0;
                                        bookingJourneyContainer.SSRChrg = ssrFee2;
                                        bookingJourneyContainer.SeatChrg = seatFee2;
                                        bookingJourneyContainer.InfantChrg = infantFee2;
                                        bookingJourneyContainer.ProcessFee = 0;
                                        bookingJourneyContainer.DiscFee = 0;
                                        bookingJourneyContainer.PromoDiscFee = 0;
                                        bookingJourneyContainer.NameChangeChrg = 0;
                                    }
                                    if (k == 1)
                                    {
                                        for (int m = 0; m < Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares.Length; m++)
                                        {
                                            if (Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].PaxType == "ADT")
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.AdtFarePrice += charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.AdtDiscChrg -= charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.AdtPromoDiscChrg -= charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.AdtTaxChrg += charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.AdtFuelChrg += charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg += charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.AdtFarePrice += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.AdtTaxChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.AdtFuelChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3) bookingJourneyContainer.AdtServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[3].Amount;
                                            }
                                            else
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.ChdFarePrice += charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.ChdDiscChrg -= charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.ChdPromoDiscChrg -= charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.ChdTaxChrg += charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.ChdFuelChrg += charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg += charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.ChdServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.ChdServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.ChdFarePrice += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.ChdTaxChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.ChdFuelChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3) bookingJourneyContainer.ChdServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[3].Amount;
                                            }
                                        }
                                        bookingJourneyContainer.OverridedCarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                        bookingJourneyContainer.OverridedFlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                        bookingJourneyContainer.OverridedSTA = Response.Booking.Journeys[j].Segments[k].STA;
                                        bookingJourneyContainer.OverridedSTD = Response.Booking.Journeys[j].Segments[k].STD;
                                        bookingJourneyContainer.OverridedFareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                        bookingJourneyContainer.OverridedFareClass = Response.Booking.Journeys[j].Segments[k].Fares[0].FareClassOfService;
                                        bookingJourneyContainer.OverridedArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                        bookingJourneyContainer.OverridedDepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        bookingJourneyContainer.OverridedOpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                        bookingJourneyContainer.OverridedEquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType;
                                        bookingJourneyContainer.OverridedFlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                    }
                                    break;
                            }
                        }
                        //load booking Journey
                        bookingJourneyContainer.RecordLocator = Response.Booking.RecordLocator;
                        bookingJourneyContainer.BookingID = Response.Booking.BookingID;
                        bookingJourneyContainer.JourneySellKey = Response.Booking.Journeys[j].JourneySellKey;

                        //check duration


                        bookingJourneyContainer.CurrencyCode = Response.Booking.CurrencyCode;
                        ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");

                        string SellSessionID = apiBooking.AgentLogon();

                        Navitaire.UtilitiesManager.GetExternalRatesListResponseData RateResponse = apiBooking.GetExternalRateList(SellSessionID);
                        //string req = GetXMLString(RateResponse);
                        string curr = bookingJourneyContainer.CurrencyCode;
                        decimal currRate = 1;
                        if (curr != "MYR")
                        {
                            for (int i = 0; i < RateResponse.ExternalRateList.Length; i++)
                            {
                                if (RateResponse.ExternalRateList[i].QuotedCurrency == curr && RateResponse.ExternalRateList[i].CollectedCurrency == "MYR")
                                {
                                    currRate = RateResponse.ExternalRateList[i].ExchangeRate;
                                }
                            }
                        }
                        bookingJourneyContainer.ExchangeRate = currRate;
                        bookingJourneyContainer.AdtPax = paxADT;
                        bookingJourneyContainer.ChdPax = paxCHD;

                        //DateTime bookingHoldTime = DateTime.Now.AddYears(10);
                        //DateTime dateValue;
                        //if (DateTime.TryParse(Response.Booking.BookingHold.HoldDateTime.ToString(), out dateValue)) bookingJourneyContainer.HoldDateTime = (DateTime)Response.Booking.BookingHold.HoldDateTime;

                        if (lstBookingJourneyContainer.FindIndex(item => item.JourneySellKey == bookingJourneyContainer.JourneySellKey) < 0)
                            lstBookingJourneyContainer.Add(bookingJourneyContainer);

                        //int a = lstBookingJourneyContainer.FindIndex(item => item.JourneySellKey == bookingJourneyContainer.JourneySellKey);
                        //    lstBookingJourneyContainer.Add(bookingJourneyContainer);
                    }

                    if (lstBookingJourneyContainer != null)
                    {
                        HttpContext.Current.Session.Remove("BookingJourneyContainers");
                        HttpContext.Current.Session.Add("BookingJourneyContainers", lstBookingJourneyContainer);
                        return true;
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
        }

        public DataTable GetBK_AllPNR(string TransID)
        {
            DataTable dt;
            String strSQL = string.Empty;
            try
            {
                strSQL = "SELECT RecordLocator, PNR FROM (select 'ALL' as RecordLocator, 'ALL (' + str(count(RecordLocator)) + ' PAX)' as PNR from BK_PASSENGERLIST where Transid='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND Title <> 'INFT' AND LEN(RecordLocator)>=6 union";
                strSQL += " select RecordLocator, RecordLocator + ' (' + str(count(RecordLocator)) + ' PAX)' as PNR from BK_PASSENGERLIST where Transid='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND Title <> 'INFT' AND LEN(RecordLocator)>=6";
                strSQL += " group by RecordLocator) a ORDER BY CASE WHEN (RecordLocator='ALL') THEN 0 ELSE 1 END, RecordLocator";

                dt = objDCom.Execute(strSQL, CommandType.Text, true);
                if (dt != null && dt.Rows.Count > 0)
                {
                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("PNR does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        //20170421 - Sienny (add info total pax)
        public DataTable GetBK_TotalPax(string TransID)
        {
            DataTable dt;
            String strSQL = string.Empty;
            try
            {
                strSQL = "select transid, count(recordlocator) as 'TotalPax' from bk_passengerlist where Title <> 'INFT' AND len(recordlocator)>=6 AND TransID = '" + TransID + "' group by transid order by transid";

                dt = objDCom.Execute(strSQL, CommandType.Text, true);
                if (dt != null && dt.Rows.Count > 0)
                {
                    return dt;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        //added by ketee
        //remarked by diana 20170201, no more service fee
        //public bool AddServiceFees(string sessionID, string cur, int passengerNo)
        //{
        //    //Create an instance of BookingManagerClient
        //    IBookingManager bookingAPI = new BookingManagerClient();
        //    SellRequest feeRequest = new SellRequest();
        //    try
        //    {
        //        feeRequest.SellRequestData = new SellRequestData();
        //        feeRequest.SellRequestData.SellBy = SellBy.Fee;
        //        feeRequest.SellRequestData.SellFee = new SellFee();
        //        feeRequest.SellRequestData.SellFee.SellFeeRequestData = new SellFeeRequestData();
        //        feeRequest.SellRequestData.SellFee.SellFeeRequestData.PassengerNumber = passengerNo;
        //        feeRequest.SellRequestData.SellFee.SellFeeRequestData.FeeCode = "SVCF";
        //        feeRequest.SellRequestData.SellFee.SellFeeRequestData.CollectedCurrencyCode = cur;
        //        feeRequest.SellRequestData.SellFee.SellFeeRequestData.Note = "API added Service Fee";
        //        feeRequest.Signature = sessionID;

        //        feeRequest.ContractVersion = 3413;
        //        string xml = GetXMLString(feeRequest);
        //        SellResponse resp = bookingAPI.Sell(feeRequest);
        //        string respxml = GetXMLString(resp);

        //        if (resp.BookingUpdateResponseData.Warning != null)
        //        {
        //            log.Warning(this, resp.BookingUpdateResponseData.Warning.WarningText);
        //            return false;
        //        }
        //        return true;
        //    }
        //    catch (Exception ex)
        //    {
        //        log.Error(this, ex);
        //        return false;
        //    }

        //}

        //added by diana 20140122 - add change fee
        public bool AddChangeFees(string sessionID, string cur, int passengerNo)
        {
            //Create an instance of BookingManagerClient
            IBookingManager bookingAPI = new BookingManagerClient();
            SellRequest feeRequest = new SellRequest();
            try
            {
                feeRequest.SellRequestData = new SellRequestData();
                feeRequest.SellRequestData.SellBy = SellBy.Fee;
                feeRequest.SellRequestData.SellFee = new SellFee();
                feeRequest.SellRequestData.SellFee.SellFeeRequestData = new SellFeeRequestData();
                feeRequest.SellRequestData.SellFee.SellFeeRequestData.PassengerNumber = passengerNo;
                feeRequest.SellRequestData.SellFee.SellFeeRequestData.FeeCode = "CHG";
                feeRequest.SellRequestData.SellFee.SellFeeRequestData.SellFeeType = SellFeeType.PenaltyFee;
                feeRequest.SellRequestData.SellFee.SellFeeRequestData.CollectedCurrencyCode = cur;
                feeRequest.SellRequestData.SellFee.SellFeeRequestData.Note = "API Added Change Fee";
                feeRequest.Signature = sessionID;

                feeRequest.ContractVersion = 3413;
                SellResponse resp = bookingAPI.Sell(feeRequest);

                if (resp.BookingUpdateResponseData.Warning != null)
                {
                    log.Warning(this, resp.BookingUpdateResponseData.Warning.WarningText);
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }

        }

        //added by diana 20161225 - add name change fee
        public SellResponse AddNameChangeFees(string sessionID, string cur, int passengerNo, string PNR)
        {
            //Create an instance of BookingManagerClient
            IBookingManager bookingAPI = new BookingManagerClient();
            SellRequest feeRequest = new SellRequest();
            ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");
            BookingTransactionDetail objBK_TRANSDTL_Infos;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Infos = new List<BookingTransactionDetail>();
            try
            {
                string SellSessionID = "";
                if (HttpContext.Current.Session["SellSessionID"] == null)
                {
                    SellSessionID = apiBooking.AgentLogon();
                    GetBookingResponse response = GetBookingByPNR(PNR, SellSessionID);
                    objBK_TRANSDTL_Infos = new BookingTransactionDetail();
                    objBK_TRANSDTL_Infos.RecordLocator = PNR;
                    objBK_TRANSDTL_Infos.Signature = SellSessionID;
                    objListBK_TRANSDTL_Infos.Add(objBK_TRANSDTL_Infos);
                    HttpContext.Current.Session["objListBK_TRANSDTL_Infos"] = objListBK_TRANSDTL_Infos;
                    HttpContext.Current.Session["SellSessionID"] = SellSessionID;
                }
                else
                {
                    int count = 0;
                    objListBK_TRANSDTL_Infos = (List<BookingTransactionDetail>)HttpContext.Current.Session["objListBK_TRANSDTL_Infos"];
                    foreach (BookingTransactionDetail a in objListBK_TRANSDTL_Infos)
                    {
                        if (PNR == a.RecordLocator)
                        {
                            SellSessionID = a.Signature;
                            break;
                        }
                        else
                        {
                            count += 1;

                        }
                    }

                    if (count == objListBK_TRANSDTL_Infos.Count)
                    {
                        SellSessionID = apiBooking.AgentLogon();
                        GetBookingResponse response = GetBookingByPNR(PNR, SellSessionID);
                        objBK_TRANSDTL_Infos = new BookingTransactionDetail();
                        objBK_TRANSDTL_Infos.RecordLocator = PNR;
                        objBK_TRANSDTL_Infos.Signature = SellSessionID;
                        objListBK_TRANSDTL_Infos.Add(objBK_TRANSDTL_Infos);
                        HttpContext.Current.Session["objListBK_TRANSDTL_Infos"] = objListBK_TRANSDTL_Infos;
                    }
                    //SellSessionID = HttpContext.Current.Session["SellSessionID"].ToString();

                    //GetBookingResponse response = GetBookingByPNR(PNR, SellSessionID);
                    //HttpContext.Current.Session["SellSessionID"] = SellSessionID;
                }

                feeRequest.SellRequestData = new SellRequestData();
                feeRequest.SellRequestData.SellBy = SellBy.Fee;
                feeRequest.SellRequestData.SellFee = new SellFee();
                feeRequest.SellRequestData.SellFee.SellFeeRequestData = new SellFeeRequestData();
                feeRequest.SellRequestData.SellFee.SellFeeRequestData.PassengerNumber = passengerNo;
                feeRequest.SellRequestData.SellFee.SellFeeRequestData.FeeCode = "NCF";
                feeRequest.SellRequestData.SellFee.SellFeeRequestData.SellFeeType = SellFeeType.ServiceFee;
                feeRequest.SellRequestData.SellFee.SellFeeRequestData.CollectedCurrencyCode = cur;
                feeRequest.SellRequestData.SellFee.SellFeeRequestData.Note = "API Added Name Change Fee";
                feeRequest.Signature = SellSessionID;

                feeRequest.ContractVersion = 340;
                SellResponse resp = bookingAPI.Sell(feeRequest);

                if (resp.BookingUpdateResponseData.Warning != null)
                {
                    log.Warning(this, resp.BookingUpdateResponseData.Warning.WarningText);
                    return null;
                }
                return resp;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return null;
            }

        }

        public string CancelSellRequest(string SellSessionID)
        {
            //Create an instance of BookingManagerClient
            IBookingManager bookingAPI = new BookingManagerClient();
            SellRequest feeRequest = new SellRequest();
            ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");

            string errMessage = "";

            try
            {
                ABS.Navitaire.APIBooking absNavitaire = new ABS.Navitaire.APIBooking("");
                absNavitaire.ClearJourney(SellSessionID, ref errMessage);

                return errMessage;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return null;
            }

        }

        public bool GetPaymentFee(string cur, decimal amount, string PNR)
        {
            //Create an instance of BookingManagerClient
            IBookingManager bookingAPI = new BookingManagerClient();
            GetPaymentFeePriceRequest request = new GetPaymentFeePriceRequest();
            //PaymentFeePriceRequest data = new PaymentFeePriceRequest();
            ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");
            try
            {
                string SellSessionID;
                SellSessionID = apiBooking.AgentLogon();

                GetBookingResponse resp = GetBookingByPNR(PNR, SellSessionID);

                //request.ContractVersion = this.ContractVersion;
                request.Signature = SellSessionID;

                request.paymentFeePriceReqData = new PaymentFeePriceRequest();
                request.paymentFeePriceReqData.CurrencyCode = cur;
                request.paymentFeePriceReqData.PaymentAmount = amount;
                request.paymentFeePriceReqData.FeeCode = "NCF";

                //string Xml = GetXMLString(request);

                GetPaymentFeePriceResponse response = bookingAPI.GetPaymentFeePrice(request);

                //string Xml2 = GetXMLString(response);

                //GetPaymentFeePriceResponse resp = bookingAPI.GetPaymentFeePrice(feeRequest);

                //if (resp.BookingUpdateResponseData.Warning != null)
                //{
                //    log.Warning(this, resp.BookingUpdateResponseData.Warning.WarningText);
                //    return false;
                //}
                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }

        }


        //backup by ketee 20130625
        //public Boolean SellJourney(TemFlight temFlight, TemFlight temFlight2, string LoginType, string LoginName, string LoginPWD, string LoginDomain, string SellSessionID)
        //{
        //    IBookingManager bookingAPI = new BookingManagerClient();
        //    ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");

        //    DataTable dataClass = dtClass();
        //    DataTable dtTempClass = dtClass();
        //    DataTable dtTempClass2 = dtClass();

        //    DataTable dataClassTrans = dtClassTrans();

        //    int quantityDepart = 0, quantityReturn = 0;
        //    decimal farePriceDepart = 0, farePriceReturn = 0;
        //    string signatureDepart = "", signatureReturn = "";
        //    decimal fullPriceDepart = 0, fullPriceReturn = 0;
        //    int ctrEnum = 0, qtychild = 0, qtyadult = 0;
        //    //added by anton 12 oct
        //    decimal bdchAPT = 0, bdFare = 0, bdAPT = 0, bdFuel = 0, bdOth = 0, bdSvc = 0, bdFull = 0, bdFullReturn = 0, bdVAT = 0; // for breakdownfee
        //    decimal bdchAPTReturn = 0, bdFareReturn = 0, bdAPTReturn = 0, bdFuelReturn = 0, bdOthReturn = 0, bdSvcReturn = 0, bdVATReturn = 0; // for breakdownfee

        //    dtTempClass = GetTemClassList(temFlight.TemFlightFlightNumber);
        //    dtTempClass2 = GetTemClassList(temFlight2.TemFlightFlightNumber);
        //    IEnumerable<TemClassofService> temClasslist = ConvertToIEnum(dtTempClass);
        //    IEnumerable<TemClassofService> temClasslist2 = ConvertToIEnum(dtTempClass2);
        //    int id = 0;

        //    //added by ketee,
        //    List<PassengerData> lstPassenger = new List<PassengerData>();
        //    PassengerData rowPassenger;

        //    //added by ketee, add sell service fees
        //    string cur = string.Empty;
        //    bool bError = false;

        //    int passengerno = 0;
        //    int prevPNR = 1;

        //    SellRequest sellrequest = new SellRequest();
        //    SellJourneyRequestData sjrd = new SellJourneyRequestData();

        //    if (temClasslist.Count() == temClasslist2.Count())
        //    {
        //        foreach (TemClassofService temClass in temClasslist)
        //        {
        //            //prevPNR += 1;
        //            if (LoginType == "SkyAgent")
        //            {

        //                SellSessionID = apiBooking.AgentLogon("SkyAgent", LoginDomain, LoginName, LoginPWD);
        //            }
        //            else
        //            {
        //                SellSessionID = apiBooking.AgentLogon();
        //            }

        //            temClass.TemClassSellSignature = SellSessionID;
        //            UpdateTemClass(temClass);

        //            sellrequest.Signature = SellSessionID;
        //            sellrequest.ContractVersion = 342;
        //            sellrequest.SellRequestData = new SellRequestData();
        //            sellrequest.SellRequestData.SellBy = SellBy.Journey;
        //            sellrequest.SellRequestData.SellJourneyRequest = new SellJourneyRequest();

        //            sjrd.PaxCount = Convert.ToInt16(temClass.TemClassPersonNumber);
        //            sjrd.CurrencyCode = temFlight.TemFlightCurrencyCode.Trim();
        //            //added by ketee
        //            cur = temFlight.TemFlightCurrencyCode.Trim();
        //            sjrd.Passengers = new Passenger[temClass.TemClassPersonNumber];

        //            //check child
        //            string adultType = "ADT";
        //            if (temClass.TemClassChildNumber > 0)
        //            {
        //                adultType = "CHD";
        //                qtychild++;
        //            }
        //            else
        //                qtyadult++;


        //            for (int i = 0; i < temClass.TemClassPersonNumber; i++)
        //            {
        //                sjrd.Passengers[i] = new Passenger();

        //                //sjrd.Passengers[i].PassengerNumber = Convert.ToInt16(passengerno);
        //                sjrd.Passengers[i].PassengerNumber = Convert.ToInt16(i);

        //                sjrd.Passengers[i].State = MessageState.New;
        //                sjrd.Passengers[i].PassengerID = passengerno;
        //                sjrd.Passengers[i].PassengerTypeInfos = new PassengerTypeInfo[1];
        //                sjrd.Passengers[i].PassengerTypeInfos[0] = new PassengerTypeInfo();
        //                sjrd.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse("1994-1-1");
        //                sjrd.Passengers[i].PassengerTypeInfos[0].PaxType = adultType;
        //                sjrd.Passengers[i].PassengerTypeInfos[0].State = MessageState.New;
        //                sjrd.Passengers[i].PseudoPassenger = false;

        //                //added by ketee
        //                rowPassenger = new PassengerData();

        //                //rowPassenger.PassengerID = passengerno.ToString();
        //                rowPassenger.PassengerID = i.ToString();

        //                rowPassenger.FirstName = "TBA";
        //                rowPassenger.LastName = "TBA";
        //                rowPassenger.PassportNo = "TBA";
        //                rowPassenger.DOB = DateTime.Parse("1900-01-01");
        //                rowPassenger.SyncCreate = DateTime.Now;
        //                rowPassenger.LastSyncBy = "System";

        //                rowPassenger.RecordLocator = prevPNR.ToString();

        //                lstPassenger.Add(rowPassenger);

        //                passengerno++;
        //            }
        //            //added by ketee
        //            if (lstPassenger != null)
        //            {
        //                HttpContext.Current.Session.Remove("listPassengers");
        //                HttpContext.Current.Session.Add("listPassengers", lstPassenger);
        //            }

        //            prevPNR += 2;

        //            sjrd.Journeys = new SellJourney[2];
        //            sjrd.Journeys[0] = new SellJourney();
        //            sjrd.Journeys[0].State = MessageState.New;
        //            sjrd.Journeys[0].NotForGeneralUse = false;
        //            if (temFlight.TemFlightTransit != "")
        //            { sjrd.Journeys[0].Segments = new SellSegment[2]; }
        //            else { sjrd.Journeys[0].Segments = new SellSegment[1]; }
        //            SellSegment srSegment = new SellSegment();
        //            srSegment.State = MessageState.New;
        //            srSegment.DepartureStation = temFlight.TemFlightDeparture.Trim();

        //            if (temFlight.TemFlightTransit != "")
        //            {
        //                srSegment.ArrivalStation = temFlight.TemFlightTransit.Trim();
        //            }
        //            else
        //            {
        //                srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
        //            }

        //            srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd);
        //            srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta);
        //            srSegment.FlightDesignator = new FlightDesignator();
        //            srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber.Trim().PadLeft(4, ' ');
        //            srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
        //            srSegment.Fare = new SellFare();
        //            srSegment.Fare.State = MessageState.New;
        //            srSegment.Fare.ClassOfService = temClass.TemClassClass.Trim();
        //            srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
        //            srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey.Split('~')[4].ToString();
        //            srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey.Split('~')[3].ToString();

        //            srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey.Split('~')[6]);
        //            srSegment.Fare.FareClassOfService = temClass.TemClassClass.Trim();
        //            srSegment.Fare.IsAllotmentMarketFare = false;

        //            switch (temClass.TempFareApplicationType.ToString().ToLower())
        //            {
        //                case "route":
        //                    srSegment.Fare.FareApplicationType = FareApplicationType.Route;
        //                    break;
        //                case "sector":
        //                    srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
        //                    break;
        //                case "governing":
        //                    srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
        //                    break;
        //                default:
        //                    srSegment.Fare.FareApplicationType = FareApplicationType.Route;
        //                    //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
        //                    break;
        //            }
        //            sjrd.Journeys[0].Segments[0] = srSegment;

        //            if (temFlight.TemFlightTransit != "")
        //            {
        //                srSegment = new SellSegment();
        //                srSegment.State = MessageState.New;
        //                srSegment.DepartureStation = temFlight.TemFlightTransit.Trim();
        //                srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
        //                srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd2);
        //                srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta2);
        //                srSegment.FlightDesignator = new FlightDesignator();

        //                srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber2.Trim();
        //                srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();

        //                srSegment.Fare = new SellFare();
        //                srSegment.Fare.State = MessageState.New;
        //                srSegment.Fare.ClassOfService = temClass.TemClassClass2.Trim();
        //                srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();
        //                srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey2.Split('~')[4].ToString();
        //                srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey2.Split('~')[3].ToString();

        //                srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey2.Split('~')[6]);
        //                srSegment.Fare.FareClassOfService = temClass.TemClassClass2.Trim();
        //                srSegment.Fare.IsAllotmentMarketFare = false;

        //                switch (temClass.TempFareApplicationType2.ToString().ToLower())
        //                {
        //                    case "route":
        //                        srSegment.Fare.FareApplicationType = FareApplicationType.Route;
        //                        break;
        //                    case "sector":
        //                        srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
        //                        break;
        //                    case "governing":
        //                        srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
        //                        break;
        //                    default:
        //                        srSegment.Fare.FareApplicationType = FareApplicationType.Route;
        //                        //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
        //                        break;
        //                }
        //                sjrd.Journeys[0].Segments[1] = srSegment;

        //            }

        //            //fill data for new dataClass
        //            quantityDepart = temClass.TemClassPersonNumber;
        //            farePriceDepart = Convert.ToDecimal(temClass.TemClassClassPrice);
        //            fullPriceDepart = Convert.ToDecimal(temClass.TemClassFullPrice);
        //            signatureDepart = SellSessionID;

        //            TemClassofService temClass2 = temClasslist2.ElementAt(ctrEnum);

        //            temClass2.TemClassSellSignature = SellSessionID;// SessionManager._signature;
        //            UpdateTemClass(temClass2);

        //            sjrd.Journeys[1] = new SellJourney();
        //            sjrd.Journeys[1].State = MessageState.New;
        //            sjrd.Journeys[1].NotForGeneralUse = false;
        //            if (temFlight2.TemFlightTransit != "")
        //            { sjrd.Journeys[1].Segments = new SellSegment[2]; }
        //            else { sjrd.Journeys[1].Segments = new SellSegment[1]; }
        //            SellSegment srSegment1 = new SellSegment();
        //            srSegment1.State = MessageState.New;
        //            srSegment1.DepartureStation = temFlight2.TemFlightDeparture.Trim();

        //            if (temFlight2.TemFlightTransit != "")
        //            {
        //                srSegment1.ArrivalStation = temFlight2.TemFlightTransit.Trim();
        //            }
        //            else
        //            {
        //                srSegment1.ArrivalStation = temFlight2.TemFlightArrival.Trim();
        //            }

        //            srSegment1.STD = Convert.ToDateTime(temFlight2.TemFlightStd);
        //            srSegment1.STA = Convert.ToDateTime(temFlight2.TemFlightSta);
        //            srSegment1.FlightDesignator = new FlightDesignator();
        //            srSegment1.FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber.Trim().PadLeft(4, ' ');
        //            srSegment1.FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode.Trim();
        //            srSegment1.Fare = new SellFare();
        //            srSegment1.Fare.State = MessageState.New;
        //            srSegment1.Fare.ClassOfService = temClass2.TemClassClass.Trim();
        //            srSegment1.Fare.CarrierCode = temFlight2.TemFlightCarrierCode.Trim();
        //            srSegment1.Fare.RuleNumber = temClass2.TemClassFareSellKey.Split('~')[4].ToString();// "AAB1";
        //            srSegment1.Fare.FareBasisCode = temClass2.TemClassFareSellKey.Split('~')[3].ToString();// "A00H00";

        //            srSegment1.Fare.FareSequence = Convert.ToInt16(temClass2.TemClassFareSellKey.Split('~')[6]);
        //            srSegment1.Fare.FareClassOfService = temClass2.TemClassClass.Trim();
        //            srSegment1.Fare.IsAllotmentMarketFare = false;

        //            switch (temClass2.TempFareApplicationType.ToString().ToLower())
        //            {
        //                case "route":
        //                    srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
        //                    break;
        //                case "sector":
        //                    srSegment1.Fare.FareApplicationType = FareApplicationType.Sector;
        //                    break;
        //                case "governing":
        //                    srSegment1.Fare.FareApplicationType = FareApplicationType.Governing;
        //                    break;
        //                default:
        //                    srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
        //                    //srSegment1.Fare.FareApplicationType = FareApplicationType.Unmapped;
        //                    break;
        //            }
        //            sjrd.Journeys[1].Segments[0] = srSegment1;

        //            if (temFlight2.TemFlightTransit != "")
        //            {
        //                srSegment1 = new SellSegment();
        //                srSegment1.State = MessageState.New;
        //                srSegment1.DepartureStation = temFlight2.TemFlightTransit.Trim();
        //                srSegment1.ArrivalStation = temFlight2.TemFlightArrival.Trim();
        //                srSegment1.STD = Convert.ToDateTime(temFlight2.TemFlightStd2);
        //                srSegment1.STA = Convert.ToDateTime(temFlight2.TemFlightSta2);
        //                srSegment1.FlightDesignator = new FlightDesignator();

        //                srSegment1.FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber2.Trim();
        //                srSegment1.FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode2.Trim();

        //                srSegment1.Fare = new SellFare();
        //                srSegment1.Fare.State = MessageState.New;
        //                srSegment1.Fare.ClassOfService = temClass2.TemClassClass2.Trim();
        //                srSegment1.Fare.CarrierCode = temFlight2.TemFlightCarrierCode2.Trim();
        //                srSegment1.Fare.RuleNumber = temClass2.TemClassFareSellKey2.Split('~')[4].ToString();
        //                srSegment1.Fare.FareBasisCode = temClass2.TemClassFareSellKey2.Split('~')[3].ToString();

        //                srSegment1.Fare.FareSequence = Convert.ToInt16(temClass2.TemClassFareSellKey2.Split('~')[6]);
        //                srSegment1.Fare.FareClassOfService = temClass2.TemClassClass2.Trim();
        //                srSegment1.Fare.IsAllotmentMarketFare = false;

        //                switch (temClass2.TempFareApplicationType2.ToString().ToLower())
        //                {
        //                    case "route":
        //                        srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
        //                        break;
        //                    case "sector":
        //                        srSegment1.Fare.FareApplicationType = FareApplicationType.Sector;
        //                        break;
        //                    case "governing":
        //                        srSegment1.Fare.FareApplicationType = FareApplicationType.Governing;
        //                        break;
        //                    default:
        //                        srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
        //                        //srSegment1.Fare.FareApplicationType = FareApplicationType.Unmapped;
        //                        break;
        //                }
        //                sjrd.Journeys[1].Segments[1] = srSegment1;

        //            }

        //            //fill data for new dataClass
        //            quantityReturn = temClass2.TemClassPersonNumber;
        //            farePriceReturn = Convert.ToDecimal(temClass2.TemClassClassPrice);
        //            fullPriceReturn = Convert.ToDecimal(temClass2.TemClassFullPrice);
        //            signatureReturn = SellSessionID;

        //            ctrEnum += 1;

        //            if (sjrd != null)
        //            {
        //                try
        //                {
        //                    sellrequest.SellRequestData.SellJourneyRequest.SellJourneyRequestData = sjrd;
        //                    string requeststring = GetXMLString(sellrequest);
        //                    SellResponse response = bookingAPI.Sell(sellrequest);

        //                    //added by ketee, add service fees
        //                    //foreach (PassengerData rowpassenger in lstPassenger)
        //                    //{
        //                    if (AddServiceFees(SellSessionID, cur, 0) == false)
        //                    {
        //                        bError = true;
        //                        log.Error("Add fees failed: " + SellSessionID);
        //                        break;
        //                    }
        //                    //}

        //                    //fill breakdown fee
        //                    Navitaire.BookingManager.Booking book = GetBookingFromState(SellSessionID);
        //                    string boolxml = GetXMLString(book);
        //                    //depart
        //                    int segCount = book.Journeys[0].Segments.Length;
        //                    //renew temClass
        //                    ClassPrice classPriceDepart = new ClassPrice();

        //                    for (int iDepart = 0; iDepart < segCount; iDepart++)
        //                    {
        //                        PaxFare paxFare = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];
        //                        for (int i = 0; i < paxFare.ServiceCharges.Length; i++)
        //                        {
        //                            switch (paxFare.ServiceCharges[i].ChargeType.ToString().ToUpper())
        //                            {
        //                                case "FAREPRICE":
        //                                    bdFare += paxFare.ServiceCharges[i].Amount;
        //                                    classPriceDepart.FullPrice = classPriceDepart.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                    classPriceDepart.FarePrice = classPriceDepart.FarePrice + paxFare.ServiceCharges[i].Amount;
        //                                    break;
        //                                case "TRAVELFEE":
        //                                    switch (paxFare.ServiceCharges[i].ChargeCode.ToString().ToUpper())
        //                                    {
        //                                        case "APT":
        //                                        case "ATF":
        //                                        case "APTF":
        //                                            //case AirportTaxCode.Contains(paxFare.ServiceCharges[i].ChargeCode.ToString().ToUpper()):
        //                                            if (paxFare.PaxType == "ADT")
        //                                            {
        //                                                bdAPT += paxFare.ServiceCharges[i].Amount;
        //                                            }
        //                                            else
        //                                            {
        //                                                bdchAPT += paxFare.ServiceCharges[i].Amount;
        //                                            }
        //                                            classPriceDepart.FullPrice = classPriceDepart.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                            classPriceDepart.TaxChrg = classPriceDepart.TaxChrg + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                            break;
        //                                        case "FUEL":
        //                                            //case FuelTaxCode.Contains(paxFare.ServiceCharges[i].ChargeCode.ToString().ToUpper()):
        //                                            bdFuel += paxFare.ServiceCharges[i].Amount;
        //                                            classPriceDepart.FullPrice = classPriceDepart.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                            classPriceDepart.FuelChrg = classPriceDepart.FuelChrg + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                            break;
        //                                        default:
        //                                            bdOth += paxFare.ServiceCharges[i].Amount;
        //                                            classPriceDepart.FullPrice = classPriceDepart.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                            classPriceDepart.OthChrg = classPriceDepart.OthChrg + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                            break;
        //                                    }
        //                                    break;
        //                                default:
        //                                    bdOth += paxFare.ServiceCharges[i].Amount;
        //                                    classPriceDepart.FullPrice = classPriceDepart.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                    classPriceDepart.OthChrg = classPriceDepart.OthChrg + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                                    break;
        //                            }
        //                            //switch (i)
        //                            //{
        //                            //    case 0:                                            
        //                            //        bdFare += paxFare.ServiceCharges[i].Amount;                                                                                              
        //                            //        classPriceDepart.FullPrice = classPriceDepart.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                            //        classPriceDepart.FarePrice = classPriceDepart.FarePrice + paxFare.ServiceCharges[i].Amount;
        //                            //        break;
        //                            //    case 1:
        //                            //        if (paxFare.PaxType == "ADT")
        //                            //        {
        //                            //            bdAPT += paxFare.ServiceCharges[i].Amount;
        //                            //        }
        //                            //        else
        //                            //        {
        //                            //            bdchAPT += paxFare.ServiceCharges[i].Amount;                                               
        //                            //        }
        //                            //        classPriceDepart.FullPrice = classPriceDepart.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                            //        classPriceDepart.TaxChrg = classPriceDepart.TaxChrg + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                            //        break;
        //                            //    case 2:
        //                            //        bdFuel += paxFare.ServiceCharges[i].Amount;
        //                            //        classPriceDepart.FullPrice = classPriceDepart.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                            //        classPriceDepart.FuelChrg = classPriceDepart.FuelChrg + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                            //        break;
        //                            //    default:
        //                            //        bdOth += paxFare.ServiceCharges[i].Amount;
        //                            //        classPriceDepart.FullPrice = classPriceDepart.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                            //        classPriceDepart.OthChrg = classPriceDepart.OthChrg + (paxFare.ServiceCharges[i].Amount * temClass.TemClassPersonNumber);
        //                            //        break;
        //                            //}
        //                        }
        //                    }
        //                    //remove divide by 2 as service fees apply to 1st booking only
        //                    //bdSvc += book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2;
        //                    //classPriceDepart.ServChrg = (book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2) * temClass.TemClassPersonNumber;

        //                    //load service charges passenger
        //                    if (book.Passengers[0].PassengerFees[0].ServiceCharges.Length > 0)
        //                    {
        //                        for (int i = 0; i < book.Passengers[0].PassengerFees[0].ServiceCharges.Length; i++)
        //                        {
        //                            switch (book.Passengers[0].PassengerFees[0].ServiceCharges[i].ChargeCode.ToString().ToUpper())
        //                            {
        //                                case "SVCF":
        //                                    //case ServiceFeeCode.Contains(book.Passengers[0].PassengerFees[0].ServiceCharges[i].ChargeCode.ToString().ToUpper()):
        //                                    bdSvc += book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount;
        //                                    classPriceDepart.ServChrg = (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
        //                                    classPriceDepart.FullPrice += classPriceDepart.ServChrg;
        //                                    break;
        //                                case "VAT":
        //                                    //case VATCode.Contains(book.Passengers[0].PassengerFees[0].ServiceCharges[i].ChargeCode.ToString().ToUpper()):
        //                                    bdVAT += book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount;
        //                                    classPriceDepart.ServVAT = (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
        //                                    classPriceDepart.FullPrice += classPriceDepart.ServVAT;
        //                                    break;
        //                            }
        //                        }
        //                    }



        //                    bdFull = bdFull + classPriceDepart.FullPrice;

        //                    classPriceDepart.ClassID = temClass.TemClassId;

        //                    //return breakdown fee
        //                    ClassPrice classPriceReturn = new ClassPrice();

        //                    segCount = book.Journeys[1].Segments.Length;
        //                    classPriceReturn.ClassID = temClass2.TemClassId;

        //                    for (int iReturn = 0; iReturn < segCount; iReturn++)
        //                    {
        //                        PaxFare paxFare = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[0];
        //                        for (int i = 0; i < paxFare.ServiceCharges.Length; i++)
        //                        {
        //                            switch (paxFare.ServiceCharges[i].ChargeType.ToString().ToUpper())
        //                            {
        //                                case "FAREPRICE":
        //                                    bdFareReturn += paxFare.ServiceCharges[i].Amount;
        //                                    classPriceReturn.FullPrice = classPriceReturn.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass2.TemClassPersonNumber);
        //                                    classPriceReturn.FarePrice = classPriceReturn.FarePrice + paxFare.ServiceCharges[i].Amount;
        //                                    break;
        //                                case "TRAVELFEE":
        //                                    switch (paxFare.ServiceCharges[i].ChargeCode.ToString().ToUpper())
        //                                    {
        //                                        case "APT":
        //                                        case "ATF":
        //                                        case "APTF":
        //                                            //case AirportTaxCode.Contains(paxFare.ServiceCharges[i].ChargeType.ToString().ToUpper()):
        //                                            if (paxFare.PaxType == "ADT")
        //                                            {
        //                                                bdAPTReturn += paxFare.ServiceCharges[i].Amount;
        //                                            }
        //                                            if (paxFare.PaxType == "CHD")
        //                                            {
        //                                                bdchAPTReturn += paxFare.ServiceCharges[i].Amount;
        //                                            }
        //                                            //bdAPTReturn += paxFare.ServiceCharges[i].Amount;
        //                                            classPriceReturn.FullPrice = classPriceReturn.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass2.TemClassPersonNumber);
        //                                            classPriceReturn.TaxChrg = classPriceReturn.TaxChrg + (paxFare.ServiceCharges[i].Amount * temClass2.TemClassPersonNumber);
        //                                            break;
        //                                        case "FUEL":
        //                                            //case FuelTaxCode.Contains(paxFare.ServiceCharges[i].ChargeCode.ToString().ToUpper()):
        //                                            bdFuelReturn += paxFare.ServiceCharges[i].Amount;
        //                                            classPriceReturn.FullPrice = classPriceReturn.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass2.TemClassPersonNumber);
        //                                            classPriceReturn.FuelChrg = classPriceReturn.FuelChrg + (paxFare.ServiceCharges[i].Amount * temClass2.TemClassPersonNumber);
        //                                            break;
        //                                        default:
        //                                            bdOthReturn += paxFare.ServiceCharges[i].Amount;
        //                                            classPriceReturn.FullPrice = classPriceReturn.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass2.TemClassPersonNumber);
        //                                            classPriceReturn.OthChrg = classPriceReturn.OthChrg + (paxFare.ServiceCharges[i].Amount * temClass2.TemClassPersonNumber);
        //                                            break;
        //                                    }
        //                                    break;
        //                                default:
        //                                    bdOthReturn += paxFare.ServiceCharges[i].Amount;
        //                                    classPriceReturn.FullPrice = classPriceReturn.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass2.TemClassPersonNumber);
        //                                    classPriceReturn.OthChrg = classPriceReturn.OthChrg + (paxFare.ServiceCharges[i].Amount * temClass2.TemClassPersonNumber);
        //                                    break;
        //                            }

        //                            //switch (i)
        //                            //{
        //                            //    case 0:
        //                            //        bdFareReturn += paxFare.ServiceCharges[i].Amount;                                               
        //                            //        classPriceReturn.FullPrice = classPriceReturn.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass2.TemClassPersonNumber);
        //                            //        classPriceReturn.FarePrice = classPriceReturn.FarePrice + paxFare.ServiceCharges[i].Amount;
        //                            //        break;
        //                            //    case 1:
        //                            //        if (paxFare.PaxType == "ADT")
        //                            //        {
        //                            //            bdAPTReturn += paxFare.ServiceCharges[i].Amount;                                    
        //                            //        }
        //                            //        if (paxFare.PaxType == "CHD")
        //                            //        {
        //                            //            bdchAPTReturn += paxFare.ServiceCharges[i].Amount;                                                
        //                            //        }
        //                            //        //bdAPTReturn += paxFare.ServiceCharges[i].Amount;
        //                            //        classPriceReturn.FullPrice = classPriceReturn.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass2.TemClassPersonNumber);
        //                            //        classPriceReturn.TaxChrg = classPriceReturn.TaxChrg + (paxFare.ServiceCharges[i].Amount * temClass2.TemClassPersonNumber);
        //                            //        break;
        //                            //    case 2:
        //                            //        bdFuelReturn += paxFare.ServiceCharges[i].Amount;
        //                            //        classPriceReturn.FullPrice = classPriceReturn.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass2.TemClassPersonNumber);
        //                            //        classPriceReturn.FuelChrg = classPriceReturn.FuelChrg + (paxFare.ServiceCharges[i].Amount * temClass2.TemClassPersonNumber);
        //                            //        break;
        //                            //    default:
        //                            //        bdOthReturn += paxFare.ServiceCharges[i].Amount;
        //                            //        classPriceReturn.FullPrice = classPriceReturn.FullPrice + (paxFare.ServiceCharges[i].Amount * temClass2.TemClassPersonNumber);
        //                            //        classPriceReturn.OthChrg = classPriceReturn.OthChrg + (paxFare.ServiceCharges[i].Amount * temClass2.TemClassPersonNumber);
        //                            //        break;
        //                            //}
        //                        }
        //                    }

        //                    //remark, as service charge only apply to 1st segment
        //                    //bdSvcReturn += book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2;
        //                    //classPriceReturn.ServChrg = (book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2) * temClass2.TemClassPersonNumber;
        //                    bdSvcReturn += 0;
        //                    classPriceReturn.ServChrg = 0;
        //                    classPriceReturn.FullPrice += classPriceReturn.ServChrg;

        //                    bdFullReturn = bdFullReturn + classPriceReturn.FullPrice;

        //                    UpdateClassPrice(classPriceDepart);
        //                    UpdateClassPrice(classPriceReturn);

        //                    DataRow row;
        //                    row = dataClassTrans.NewRow();
        //                    row["Quantity"] = quantityDepart;
        //                    row["FarePrice"] = (classPriceDepart.FarePrice + classPriceReturn.FarePrice) / temClass.TemClassPersonNumber;
        //                    row["FullPrice"] = (classPriceDepart.FullPrice + classPriceReturn.FullPrice);
        //                    row["SellSignature"] = signatureDepart;
        //                    //added by ketee, 20121016
        //                    row["ServChrg"] = classPriceDepart.ServChrg + classPriceReturn.ServChrg;
        //                    //added by ketee, VAT
        //                    row["ServVAT"] = classPriceDepart.ServVAT;
        //                    row["DetailCollectedAmt"] = 0;
        //                    row["RecordLocator"] = "";
        //                    dataClassTrans.Rows.Add(row);

        //                    //save new data class into session
        //                    if (dataClassTrans.Rows.Count > 0)
        //                    {
        //                        HttpContext.Current.Session.Remove("dataClassTrans");
        //                        HttpContext.Current.Session.Add("dataClassTrans", dataClassTrans);
        //                    }
        //                }
        //                catch (Exception ex)
        //                {
        //                    bError = true;
        //                    log.Error(this,ex);
        //                }
        //            }
        //        }
        //        if (bError)
        //        {
        //            log.Error("Sell Journey failed.");
        //            return false;
        //        }
        //    }
        //    else
        //    {
        //        //fares not equal
        //    }

        //    //save new data class into session
        //    if (dataClassTrans.Rows.Count > 0)
        //    {
        //        HttpContext.Current.Session.Remove("dataClassTrans");
        //        HttpContext.Current.Session.Add("dataClassTrans", dataClassTrans);

        //        //depart breakdown

        //        DataTable dataBreakdownFee = dtBreakdownFee();
        //        DataRow rowBD;
        //        rowBD = dataBreakdownFee.NewRow();
        //        //added child fare 
        //        rowBD["Fare"] = bdFare / dataClassTrans.Rows.Count;
        //        if (qtychild > 0)
        //        {
        //            rowBD["ChApt"] = bdchAPT / qtychild;
        //        }
        //        else
        //        {
        //            rowBD["ChApt"] = bdAPT / qtyadult;
        //        }
        //        rowBD["Apt"] = bdAPT / qtyadult;
        //        rowBD["Fuel"] = bdFuel / dataClassTrans.Rows.Count;
        //        rowBD["Svc"] = bdSvc / dataClassTrans.Rows.Count;
        //        //added by ketee , VAT
        //        rowBD["VAT"] = bdVAT / dataClassTrans.Rows.Count;
        //        rowBD["Oth"] = bdOth / dataClassTrans.Rows.Count;
        //        rowBD["Qty"] = qtyadult + " Adult " + "/" + qtychild + " Child";
        //        dataBreakdownFee.Rows.Add(rowBD);

        //        HttpContext.Current.Session.Remove("dataBDFeeDepart");
        //        HttpContext.Current.Session.Add("dataBDFeeDepart", dataBreakdownFee);

        //        //return                

        //        DataTable dataBreakdownFeeReturn = dtBreakdownFee();
        //        DataRow rowBDReturn;
        //        rowBDReturn = dataBreakdownFeeReturn.NewRow();

        //        rowBDReturn["Fare"] = bdFareReturn / dataClassTrans.Rows.Count;
        //        if (qtychild > 0)
        //        {
        //            rowBDReturn["ChApt"] = bdchAPTReturn / qtychild;
        //        }
        //        else
        //        {
        //            rowBDReturn["ChApt"] = bdAPTReturn / qtyadult;
        //        }
        //        rowBDReturn["Apt"] = bdAPTReturn / qtyadult;
        //        rowBDReturn["Fuel"] = bdFuelReturn / dataClassTrans.Rows.Count;
        //        rowBDReturn["Svc"] = bdSvcReturn / dataClassTrans.Rows.Count;
        //        //added by ketee, VAT
        //        rowBDReturn["VAT"] = 0;
        //        rowBDReturn["Oth"] = bdOthReturn / dataClassTrans.Rows.Count;
        //        rowBDReturn["Qty"] = qtyadult + "Adult" + ":" + qtychild + "Child";
        //        dataBreakdownFeeReturn.Rows.Add(rowBDReturn);

        //        HttpContext.Current.Session.Remove("dataBDFeeReturn");
        //        HttpContext.Current.Session.Add("dataBDFeeReturn", dataBreakdownFeeReturn);

        //        UpdateFlightPrice(temFlight.TemFlightId, bdFare, bdFull, bdAPT, bdFuel, bdSvc, bdOth, bdFull / temFlight.TemFlightPaxNum, bdVAT);
        //        UpdateFlightPrice(temFlight2.TemFlightId, bdFareReturn, bdFullReturn, bdAPTReturn, bdFuelReturn, bdSvcReturn, bdOthReturn, bdFullReturn / temFlight.TemFlightPaxNum, bdVAT);
        //    }
        //    return true;
        //}

        //amnded by ketee 20130625, MainFunction
        public Boolean SellJourneyReturn(TemFlight temFlight, TemFlight temFlight2, string LoginType, string LoginName, string LoginPWD, string LoginDomain, string SellSessionID, bool moveJourney = false, bool ReturnOnly = false)//amended by diana 20140211, add parameter for moveJourney true/false
        {
            IBookingManager bookingAPI = new BookingManagerClient();
            ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");

            DataTable dataClass = dtClass();
            DataTable dtTempClass = dtClass();
            DataTable dtTempClass2 = dtClass();

            DataTable dataClassTrans = dtClassTrans();

            int quantityDepart = 0, quantityReturn = 0, totalPaxADT = 0, totalPaxCHD = 0; //amended by diana 20131103 - add pax for adt and chd

            decimal farePriceDepart = 0, farePriceReturn = 0;
            string signatureDepart = "", signatureReturn = "";
            decimal fullPriceDepart = 0, fullPriceReturn = 0;
            int ctrEnum = 0, qtychild = 0, qtyadult = 0;
            //added by anton 12 oct
            decimal bdchAPT = 0, bdFare = 0, bdAPT = 0, bdPaxFee = 0, bdFuel = 0, bdOth = 0, bdDisc = 0, bdPromoDisc = 0, bdSvc = 0, bdSSR = 0, bdBaggage = 0, bdMeal = 0, bdSport = 0, bdComfort = 0, bdSeat = 0, bdInfant = 0, bdFull = 0, bdFullReturn = 0, bdVAT = 0; // for breakdownfee
            decimal bdchAPTReturn = 0, bdFareReturn = 0, bdAPTReturn = 0, bdPaxFeeReturn = 0, bdFuelReturn = 0, bdOthReturn = 0, bdDiscReturn = 0, bdPromoDiscReturn = 0, bdSvcReturn = 0, bdSSRReturn = 0, bdBaggageReturn = 0, bdMealReturn = 0, bdComfortReturn = 0, bdSportReturn = 0, bdSeatReturn = 0, bdInfantReturn = 0, bdVATReturn = 0; // for breakdownfee

            dtTempClass = GetTemClassList(temFlight.TemFlightFlightNumber);
            dtTempClass2 = GetTemClassList(temFlight2.TemFlightFlightNumber);
            IEnumerable<TemClassofService> temClasslist = ConvertToIEnum(dtTempClass);
            IEnumerable<TemClassofService> temClasslist2 = ConvertToIEnum(dtTempClass2);
            int id = 0;

            //added by ketee,
            List<PassengerData> lstPassenger = new List<PassengerData>();
            PassengerData rowPassenger;

            //added by ketee, add sell service fees
            string cur = string.Empty;
            bool bError = false;

            int passengerno = 0;
            int prevPNR = 1;

            SellRequest sellrequest = new SellRequest();
            SellJourneyRequestData sjrd = new SellJourneyRequestData();

            log.Info(this, "Tem Class 1 = " + temClasslist.Count() + "; Tem Class 2 =" + temClasslist2.Count());

            if (ReturnOnly == true)//ongoing, for return only change, in order to continue
            {
                temClasslist = temClasslist2;
            }

            if (temClasslist.Count() == temClasslist2.Count())
            {
                foreach (TemClassofService temClass in temClasslist)
                {
                    //prevPNR += 1;
                    if (moveJourney == false) //not for moving Journey
                    {
                        if (LoginType == "SkyAgent")
                        {

                            SellSessionID = apiBooking.AgentLogon("SkyAgent", LoginDomain, LoginName, LoginPWD);
                        }
                        else
                        {
                            SellSessionID = apiBooking.AgentLogon();
                        }
                    }
                    temClass.TemClassSellSignature = SellSessionID;
                    UpdateTemClass(temClass);

                    sellrequest.Signature = SellSessionID;
                    sellrequest.ContractVersion = 3413;
                    sellrequest.SellRequestData = new SellRequestData();
                    sellrequest.SellRequestData.SellBy = SellBy.Journey;
                    sellrequest.SellRequestData.SellJourneyRequest = new SellJourneyRequest();

                    sjrd.PaxCount = Convert.ToInt16(temClass.TemClassPersonNumber);
                    sjrd.CurrencyCode = temFlight.TemFlightCurrencyCode.Trim();
                    //added by ketee
                    cur = temFlight.TemFlightCurrencyCode.Trim();
                    sjrd.Passengers = new Passenger[temClass.TemClassPersonNumber];

                    //check child
                    string adultType = "ADT";

                    //check child and adult
                    int childpax = temClass.TemClassChildNumber;
                    qtychild = childpax;
                    int adultpax = temClass.TemClassAdultNumber;
                    qtyadult = adultpax;

                    //added by diana 20131103 - add numofpax
                    totalPaxADT += qtyadult;
                    totalPaxCHD += qtychild;

                    for (int i = 0; i < temClass.TemClassPersonNumber; i++)
                    {
                        //check adult type

                        if (adultpax > 0)
                        {
                            adultType = "ADT";
                        }
                        else
                        {
                            adultType = "CHD";
                        }

                        sjrd.Passengers[i] = new Passenger();

                        //sjrd.Passengers[i].PassengerNumber = Convert.ToInt16(passengerno);
                        sjrd.Passengers[i].PassengerNumber = Convert.ToInt16(i);

                        sjrd.Passengers[i].State = MessageState.New;
                        sjrd.Passengers[i].PassengerID = passengerno;
                        sjrd.Passengers[i].PassengerTypeInfos = new PassengerTypeInfo[1];
                        sjrd.Passengers[i].PassengerTypeInfos[0] = new PassengerTypeInfo();

                        if (adultType == "ADT")
                            sjrd.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse("1994-1-1");
                        else if (adultType == "CHD")
                        {
                            DateTime dtTime = DateTime.Now.AddYears(-5);
                            sjrd.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse(dtTime.Year + "-1-1");
                        }

                        sjrd.Passengers[i].PassengerTypeInfos[0].PaxType = adultType;
                        sjrd.Passengers[i].PassengerTypeInfos[0].State = MessageState.New;
                        sjrd.Passengers[i].PseudoPassenger = false;

                        //added by ketee
                        rowPassenger = new PassengerData();

                        //rowPassenger.PassengerID = passengerno.ToString();
                        rowPassenger.PassengerID = i.ToString();

                        rowPassenger.FirstName = "TBA";
                        rowPassenger.LastName = "TBA";
                        rowPassenger.PassportNo = "TBA";
                        rowPassenger.DOB = DateTime.Parse("1900-01-01");
                        rowPassenger.SyncCreate = DateTime.Now;
                        rowPassenger.LastSyncBy = "System";

                        //ongoing, added by diana, 20161225
                        if (temFlight.TemFlightCarrierCode == "D7" || temFlight.TemFlightCarrierCode == "XJ" || temFlight.TemFlightCarrierCode == "ST")
                        {
                            rowPassenger.MaxChange = 1;
                            rowPassenger.MaxPax1 = qtyadult + qtychild;
                            rowPassenger.MaxPax2 = 0;
                        }
                        else
                        {
                            rowPassenger.MaxChange = 1;
                            rowPassenger.MaxPax1 = (int)(0.3 * (qtyadult + qtychild));
                            rowPassenger.MaxPax2 = 0;
                        }


                        rowPassenger.RecordLocator = prevPNR.ToString();

                        lstPassenger.Add(rowPassenger);

                        passengerno++;
                        //count adultpax --
                        adultpax--;
                    }
                    //added by ketee
                    if (lstPassenger != null)
                    {
                        HttpContext.Current.Session.Remove("listPassengers");
                        HttpContext.Current.Session.Add("listPassengers", lstPassenger);
                    }

                    prevPNR += 2;

                    //added by diana 20140424, create var for selling return only journey purpose
                    int totaljourney = 2, index = 0, ind = 0;

                    if (ReturnOnly == true)
                    {
                        totaljourney = 1;
                    }

                    sjrd.Journeys = new SellJourney[totaljourney];

                    if (ReturnOnly == false)
                    {
                        //start going flight
                        sjrd.Journeys[index] = new SellJourney();
                        sjrd.Journeys[index].State = MessageState.New;
                        sjrd.Journeys[index].NotForGeneralUse = false;
                        if (temFlight.TemFlightTransit != "")
                        { sjrd.Journeys[index].Segments = new SellSegment[2]; }
                        else { sjrd.Journeys[index].Segments = new SellSegment[1]; }
                        SellSegment srSegment = new SellSegment();
                        srSegment.State = MessageState.New;
                        srSegment.DepartureStation = temFlight.TemFlightDeparture.Trim();

                        if (temFlight.TemFlightTransit != "")
                        {
                            srSegment.ArrivalStation = temFlight.TemFlightTransit.Trim();
                        }
                        else
                        {
                            srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                        }

                        srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd);
                        srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta);
                        srSegment.FlightDesignator = new FlightDesignator();
                        srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber.Trim().PadLeft(4, ' ');
                        srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
                        srSegment.Fare = new SellFare();
                        srSegment.Fare.State = MessageState.New;
                        srSegment.Fare.ClassOfService = temClass.TemClassClass.Trim();
                        srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode.Trim();

                        ////added by diana 20140408, reduce ~~ to ~
                        //String[] FareSellKey = temClass.TemClassFareSellKey.Split('~');
                        //string NewFareSellKey = "";
                        //foreach (string sellKey in FareSellKey)
                        //{
                        //    if (sellKey != "")
                        //    {
                        //        if (NewFareSellKey != "")
                        //        {
                        //            NewFareSellKey += "~";
                        //        }
                        //        NewFareSellKey += sellKey;
                        //    }
                        //}

                        srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey.Split('~')[4].ToString();
                        srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey.Split('~')[3].ToString();

                        srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey.Split('~')[6]);
                        srSegment.Fare.FareClassOfService = temClass.TemClassClass.Trim();
                        srSegment.Fare.IsAllotmentMarketFare = false;

                        switch (temClass.TempFareApplicationType.ToString().ToLower())
                        {
                            case "route":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                break;
                            case "sector":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                                break;
                            case "governing":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                                break;
                            default:
                                srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                                break;
                        }
                        sjrd.Journeys[index].Segments[0] = srSegment;

                        if (temFlight.TemFlightTransit != "")
                        {
                            srSegment = new SellSegment();
                            srSegment.State = MessageState.New;
                            srSegment.DepartureStation = temFlight.TemFlightTransit.Trim();
                            srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                            srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd2);
                            srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta2);
                            srSegment.FlightDesignator = new FlightDesignator();

                            srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber2.Trim();
                            srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();

                            srSegment.Fare = new SellFare();
                            srSegment.Fare.State = MessageState.New;
                            srSegment.Fare.ClassOfService = temClass.TemClassClass2.Trim();
                            srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();
                            srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey2.Split('~')[4].ToString();
                            srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey2.Split('~')[3].ToString();

                            srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey2.Split('~')[6]);
                            srSegment.Fare.FareClassOfService = temClass.TemClassClass2.Trim();
                            srSegment.Fare.IsAllotmentMarketFare = false;

                            switch (temClass.TempFareApplicationType2.ToString().ToLower())
                            {
                                case "route":
                                    srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                    break;
                                case "sector":
                                    srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                                    break;
                                case "governing":
                                    srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                                    break;
                                default:
                                    srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                    //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                                    break;
                            }
                            sjrd.Journeys[index].Segments[1] = srSegment;

                        }

                        //fill data for new dataClass
                        quantityDepart = temClass.TemClassPersonNumber;
                        farePriceDepart = Convert.ToDecimal(temClass.TemClassClassPrice);
                        fullPriceDepart = Convert.ToDecimal(temClass.TemClassFullPrice);
                        signatureDepart = SellSessionID;

                        index += 1; //add index of journey for return journey
                    }
                    //end for going flight

                    //start of return flight
                    TemClassofService temClass2 = temClasslist2.ElementAt(ctrEnum);

                    temClass2.TemClassSellSignature = SellSessionID;// SessionManager._signature;
                    UpdateTemClass(temClass2);

                    sjrd.Journeys[index] = new SellJourney();
                    sjrd.Journeys[index].State = MessageState.New;
                    sjrd.Journeys[index].NotForGeneralUse = false;
                    if (temFlight2.TemFlightTransit != "")
                    { sjrd.Journeys[index].Segments = new SellSegment[2]; }
                    else { sjrd.Journeys[index].Segments = new SellSegment[1]; }
                    SellSegment srSegment1 = new SellSegment();
                    srSegment1.State = MessageState.New;
                    srSegment1.DepartureStation = temFlight2.TemFlightDeparture.Trim();

                    if (temFlight2.TemFlightTransit != "")
                    {
                        srSegment1.ArrivalStation = temFlight2.TemFlightTransit.Trim();
                    }
                    else
                    {
                        srSegment1.ArrivalStation = temFlight2.TemFlightArrival.Trim();
                    }

                    srSegment1.STD = Convert.ToDateTime(temFlight2.TemFlightStd);
                    srSegment1.STA = Convert.ToDateTime(temFlight2.TemFlightSta);
                    srSegment1.FlightDesignator = new FlightDesignator();
                    srSegment1.FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber.Trim().PadLeft(4, ' ');
                    srSegment1.FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode.Trim();
                    srSegment1.Fare = new SellFare();
                    srSegment1.Fare.State = MessageState.New;
                    srSegment1.Fare.ClassOfService = temClass2.TemClassClass.Trim();
                    srSegment1.Fare.CarrierCode = temFlight2.TemFlightCarrierCode.Trim();
                    srSegment1.Fare.RuleNumber = temClass2.TemClassFareSellKey.Split('~')[4].ToString();// "AAB1";
                    srSegment1.Fare.FareBasisCode = temClass2.TemClassFareSellKey.Split('~')[3].ToString();// "A00H00";

                    srSegment1.Fare.FareSequence = Convert.ToInt16(temClass2.TemClassFareSellKey.Split('~')[6]);
                    srSegment1.Fare.FareClassOfService = temClass2.TemClassClass.Trim();
                    srSegment1.Fare.IsAllotmentMarketFare = false;

                    switch (temClass2.TempFareApplicationType.ToString().ToLower())
                    {
                        case "route":
                            srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                            break;
                        case "sector":
                            srSegment1.Fare.FareApplicationType = FareApplicationType.Sector;
                            break;
                        case "governing":
                            srSegment1.Fare.FareApplicationType = FareApplicationType.Governing;
                            break;
                        default:
                            srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                            //srSegment1.Fare.FareApplicationType = FareApplicationType.Unmapped;
                            break;
                    }
                    sjrd.Journeys[index].Segments[0] = srSegment1;

                    if (temFlight2.TemFlightTransit != "")
                    {
                        srSegment1 = new SellSegment();
                        srSegment1.State = MessageState.New;
                        srSegment1.DepartureStation = temFlight2.TemFlightTransit.Trim();
                        srSegment1.ArrivalStation = temFlight2.TemFlightArrival.Trim();
                        srSegment1.STD = Convert.ToDateTime(temFlight2.TemFlightStd2);
                        srSegment1.STA = Convert.ToDateTime(temFlight2.TemFlightSta2);
                        srSegment1.FlightDesignator = new FlightDesignator();

                        srSegment1.FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber2.Trim();
                        srSegment1.FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode2.Trim();

                        srSegment1.Fare = new SellFare();
                        srSegment1.Fare.State = MessageState.New;
                        srSegment1.Fare.ClassOfService = temClass2.TemClassClass2.Trim();
                        srSegment1.Fare.CarrierCode = temFlight2.TemFlightCarrierCode2.Trim();
                        srSegment1.Fare.RuleNumber = temClass2.TemClassFareSellKey2.Split('~')[4].ToString();
                        srSegment1.Fare.FareBasisCode = temClass2.TemClassFareSellKey2.Split('~')[3].ToString();

                        srSegment1.Fare.FareSequence = Convert.ToInt16(temClass2.TemClassFareSellKey2.Split('~')[6]);
                        srSegment1.Fare.FareClassOfService = temClass2.TemClassClass2.Trim();
                        srSegment1.Fare.IsAllotmentMarketFare = false;

                        switch (temClass2.TempFareApplicationType2.ToString().ToLower())
                        {
                            case "route":
                                srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                                break;
                            case "sector":
                                srSegment1.Fare.FareApplicationType = FareApplicationType.Sector;
                                break;
                            case "governing":
                                srSegment1.Fare.FareApplicationType = FareApplicationType.Governing;
                                break;
                            default:
                                srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                                //srSegment1.Fare.FareApplicationType = FareApplicationType.Unmapped;
                                break;
                        }
                        sjrd.Journeys[index].Segments[1] = srSegment1;

                    }

                    //fill data for new dataClass
                    quantityReturn = temClass2.TemClassPersonNumber;
                    farePriceReturn = Convert.ToDecimal(temClass2.TemClassClassPrice);
                    fullPriceReturn = Convert.ToDecimal(temClass2.TemClassFullPrice);
                    signatureReturn = SellSessionID;
                    //end of return flight

                    ctrEnum += 1;

                    if (sjrd != null)
                    {
                        try
                        {
                            sellrequest.SellRequestData.SellJourneyRequest.SellJourneyRequestData = sjrd;
                            //string requeststring = GetXMLString(sellrequest);
                            SellResponse response = bookingAPI.Sell(sellrequest);
                            //string xml = GetXMLString(response);
                            //added by ketee, add service fees
                            //foreach (PassengerData rowpassenger in lstPassenger)
                            //{


                            //remarked by diana 20170201, no more service fee
                            //if (moveJourney == false)
                            //{
                            //    if (AddServiceFees(SellSessionID, cur, 0) == false)
                            //    {
                            //        bError = true;
                            //        log.Warning(this, "Add fees failed: " + SellSessionID);
                            //        break;
                            //    }
                            //}

                            //}

                            //fill breakdown fee
                            Navitaire.BookingManager.Booking book = GetBookingFromState(SellSessionID);
                            //string boolxml = GetXMLString(book);

                            //Get Currecy Rate List 20130625
                            Navitaire.UtilitiesManager.GetExternalRatesListResponseData RateResponse = apiBooking.GetExternalRateList(SellSessionID);
                            string curr = book.CurrencyCode;
                            //string req = GetXMLString(RateResponse);
                            decimal currRate = 1;
                            if (curr != "MYR")
                            {
                                for (int i = 0; i < RateResponse.ExternalRateList.Length; i++)
                                {
                                    if (RateResponse.ExternalRateList[i].QuotedCurrency == curr && RateResponse.ExternalRateList[i].CollectedCurrency == "MYR")
                                    {
                                        currRate = RateResponse.ExternalRateList[i].ExchangeRate;
                                    }
                                }
                            }

                            ind = 0;
                            int segCount = 0;
                            ClassPrice classPriceDepart = new ClassPrice();
                            if (ReturnOnly == false)
                            {
                                //depart
                                segCount = book.Journeys[ind].Segments.Length;
                                //renew temClass

                                for (int iDepart = 0; iDepart < segCount; iDepart++)
                                {
                                    //added by diana 20131031 - added condition if paxfare length is more than 0
                                    if (book.Journeys[ind].Segments[iDepart].Fares[0].PaxFares.Length > 0)
                                    {
                                        PaxFare paxFare = book.Journeys[ind].Segments[iDepart].Fares[0].PaxFares[0];
                                        PaxFare paxFareChd;
                                        if (temClass.TemClassAdultNumber > 0)
                                        {
                                            AddFarePrice(paxFare, temClass, ref classPriceDepart, "ADT");
                                        }

                                        if (temClass.TemClassChildNumber > 0)
                                        {
                                            if (book.Journeys[ind].Segments[iDepart].Fares[0].PaxFares.Length > 1)
                                                paxFareChd = book.Journeys[ind].Segments[iDepart].Fares[0].PaxFares[1];
                                            else
                                                paxFareChd = book.Journeys[ind].Segments[iDepart].Fares[0].PaxFares[0];

                                            //if (temFlight.TemFlightDeparture.ToString().ToUpper() != "HKG" && temFlight.TemFlightArrival.ToString().ToUpper() != "HKG")
                                            //{
                                            //    paxFareChd = book.Journeys[ind].Segments[iDepart].Fares[0].PaxFares[0];
                                            //}
                                            AddFarePrice(paxFareChd, temClass, ref classPriceDepart, "CHD");
                                        }
                                    }
                                }
                                //remove divide by 2 as service fees apply to 1st booking only
                                //bdSvc += book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2;
                                //classPriceDepart.ServChrg = (book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2) * temClass.TemClassPersonNumber;


                                //amended by diana 20140121 - add initial value to 0, then add it
                                classPriceDepart.ServChrg = 0;
                                classPriceDepart.SSRChrg = 0;
                                classPriceDepart.BaggageChrg = 0;
                                classPriceDepart.MealChrg = 0;
                                classPriceDepart.SportChrg = 0;
                                classPriceDepart.ComfortChrg = 0;
                                classPriceDepart.SeatChrg = 0;
                                classPriceDepart.InfantChrg = 0;
                                classPriceDepart.ServVAT = 0;

                                //load service charges passenger
                                if (book.Passengers[0].PassengerFees.Length > 0 && book.Passengers[0].PassengerFees[0].ServiceCharges.Length > 0)
                                {
                                    for (int i = 0; i < book.Passengers[0].PassengerFees[0].ServiceCharges.Length; i++)
                                    {
                                        switch (book.Passengers[0].PassengerFees[0].ServiceCharges[i].ChargeCode.ToString().ToUpper())
                                        {
                                            case "SVCF":
                                                classPriceDepart.ServChrg += (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                                //classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                                                break;
                                            case "VAT":
                                                classPriceDepart.ServVAT += (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                                //classPriceDepart.FullPrice += classPriceDepart.ServVAT;
                                                break;
                                            default:
                                                classPriceDepart.ServChrg += (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                                //classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                                                break;
                                        }
                                    }
                                }
                                classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                                classPriceDepart.FullPrice += classPriceDepart.SSRChrg;
                                classPriceDepart.FullPrice += classPriceDepart.SeatChrg;
                                classPriceDepart.FullPrice += classPriceDepart.InfantChrg;
                                classPriceDepart.FullPrice += classPriceDepart.ServVAT;


                                //bdFull = bdFull + classPriceDepart.FullPrice;

                                classPriceDepart.ClassID = temClass.TemClassId;

                            }

                            ind += 1;

                            //return breakdown fee
                            ClassPrice classPriceReturn = new ClassPrice();

                            segCount = book.Journeys[ind].Segments.Length;
                            classPriceReturn.ClassID = temClass2.TemClassId;

                            for (int iReturn = 0; iReturn < segCount; iReturn++)
                            {
                                //added by diana 20131031 - added condition if paxfare length is more than 0
                                if (book.Journeys[ind].Segments[iReturn].Fares[0].PaxFares.Length > 0)
                                {
                                    PaxFare paxFare = book.Journeys[ind].Segments[iReturn].Fares[0].PaxFares[0];
                                    PaxFare paxFareChd;

                                    if (temClass2.TemClassAdultNumber > 0)
                                    {
                                        AddFarePrice(paxFare, temClass2, ref classPriceReturn, "ADT");
                                    }

                                    if (temClass2.TemClassChildNumber > 0)
                                    {
                                        if (book.Journeys[ind].Segments[iReturn].Fares[0].PaxFares.Length > 1)
                                            paxFareChd = book.Journeys[ind].Segments[iReturn].Fares[0].PaxFares[1];
                                        else
                                            paxFareChd = book.Journeys[ind].Segments[iReturn].Fares[0].PaxFares[0];

                                        //if (temFlight.TemFlightDeparture.ToString().ToUpper() != "HKG" && temFlight.TemFlightArrival.ToString().ToUpper() != "HKG")
                                        //{
                                        //    paxFareChd = book.Journeys[ind].Segments[iReturn].Fares[0].PaxFares[0];
                                        //}
                                        AddFarePrice(paxFareChd, temClass2, ref classPriceReturn, "CHD");
                                    }
                                }
                            }

                            //remark, as service charge only apply to 1st segment
                            //bdSvcReturn += book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2;
                            //classPriceReturn.ServChrg = (book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2) * temClass2.TemClassPersonNumber;
                            //bdSvcReturn += 0;
                            classPriceReturn.ServChrg = 0;
                            classPriceReturn.SSRChrg = 0;
                            classPriceReturn.SeatChrg = 0;
                            classPriceReturn.InfantChrg = 0;
                            classPriceReturn.FullPrice += classPriceReturn.ServChrg + classPriceReturn.SSRChrg + classPriceReturn.SeatChrg + classPriceReturn.InfantChrg;

                            //bdFullReturn = bdFullReturn + classPriceReturn.FullPrice;

                            //added by ketee , curr rate 20130625
                            classPriceDepart.CurrencyRate = currRate;
                            classPriceReturn.CurrencyRate = currRate;

                            if (ReturnOnly == false)//added by diana 20140424, update only if two way
                            {
                                UpdateClassPrice(classPriceDepart);
                            }
                            UpdateClassPrice(classPriceReturn);

                            DataRow row;
                            row = dataClassTrans.NewRow();
                            row["Quantity"] = quantityDepart;
                            row["FarePrice"] = (classPriceDepart.FarePrice + classPriceReturn.FarePrice);
                            //commented by diana 20131104
                            //private void ProcessPairedFareJhn(ClassFare[] GoingFare, ClassFare[] ReturnFare,row["FarePrice"] = (classPriceDepart.FarePrice + classPriceReturn.FarePrice) / temClass.TemClassPersonNumber;
                            row["FullPrice"] = (classPriceDepart.FullPrice + classPriceReturn.FullPrice);
                            row["SellSignature"] = signatureDepart;
                            //added by ketee, 20121016
                            row["ServChrg"] = classPriceDepart.ServChrg + classPriceReturn.ServChrg;

                            row["SSRChrg"] = classPriceDepart.SSRChrg + classPriceReturn.SSRChrg;
                            row["SeatChrg"] = classPriceDepart.SeatChrg + classPriceReturn.SeatChrg;
                            row["InfantChrg"] = classPriceDepart.InfantChrg + classPriceReturn.InfantChrg;
                            //added by ketee, VAT
                            row["ServVAT"] = classPriceDepart.ServVAT;
                            row["DetailCollectedAmt"] = 0;
                            row["RecordLocator"] = "";
                            //added by ketee 20130625 currrate
                            row["CurrencyRate"] = classPriceDepart.CurrencyRate;

                            //added by ketee, breakdown fees 20130625
                            bdPaxFee += classPriceDepart.PaxFeeChrg;
                            bdAPT += classPriceDepart.TaxChrg;
                            bdchAPT += classPriceDepart.TAxChrgChd;
                            bdFare += classPriceDepart.FarePrice;
                            bdFuel += classPriceDepart.FuelChrg;
                            bdFull += classPriceDepart.FullPrice;
                            bdOth += classPriceDepart.OthChrg;
                            bdDisc += classPriceDepart.DiscChrg;
                            bdPromoDisc += classPriceDepart.PromoDiscChrg;
                            bdSvc += classPriceDepart.ServChrg;
                            bdSSR += classPriceDepart.SSRChrg;
                            bdSeat += classPriceDepart.SeatChrg;
                            bdInfant += classPriceDepart.InfantChrg;
                            bdVAT += classPriceDepart.ServVAT;

                            bdPaxFeeReturn += classPriceReturn.PaxFeeChrg;
                            bdAPTReturn += classPriceReturn.TaxChrg;
                            bdchAPTReturn += classPriceReturn.TAxChrgChd;
                            bdFareReturn += classPriceReturn.FarePrice;
                            bdFuelReturn += classPriceReturn.FuelChrg;
                            bdFullReturn += classPriceReturn.FullPrice;
                            bdOthReturn += classPriceReturn.OthChrg;
                            bdDiscReturn += classPriceReturn.DiscChrg;
                            bdPromoDiscReturn += classPriceReturn.PromoDiscChrg;
                            bdSvcReturn += classPriceReturn.ServChrg;
                            bdSSRReturn += classPriceReturn.SSRChrg;
                            bdSeatReturn += classPriceReturn.SeatChrg;
                            bdInfantReturn += classPriceReturn.InfantChrg;
                            bdVAT += classPriceReturn.ServVAT;

                            dataClassTrans.Rows.Add(row);

                            //save new data class into session
                            if (dataClassTrans.Rows.Count > 0)
                            {
                                HttpContext.Current.Session.Remove("dataClassTrans");
                                HttpContext.Current.Session.Add("dataClassTrans", dataClassTrans);
                            }
                        }
                        catch (Exception ex)
                        {
                            bError = true;
                            log.Error(this, ex);
                        }
                    }
                }
                if (bError)
                {
                    log.Warning(this, "Sell Journey failed.");
                    return false;
                }
            }
            else
            {
                //fares not equal
            }

            //save new data class into session
            if (dataClassTrans.Rows.Count > 0)
            {
                HttpContext.Current.Session.Remove("dataClassTrans");
                HttpContext.Current.Session.Add("dataClassTrans", dataClassTrans);

                //depart breakdown

                DataTable dataBreakdownFee = dtBreakdownFee();
                DataRow rowBD;
                rowBD = dataBreakdownFee.NewRow();
                //added child fare 
                rowBD["Fare"] = bdFare / (totalPaxADT + totalPaxCHD);
                if (totalPaxCHD > 0)
                {
                    rowBD["ChApt"] = bdchAPT / totalPaxCHD;
                }
                else
                {
                    rowBD["ChApt"] = 0;
                }

                rowBD["Apt"] = bdAPT / totalPaxADT;
                rowBD["PaxFee"] = bdPaxFee;
                rowBD["Fuel"] = bdFuel;
                rowBD["Svc"] = bdSvc;
                rowBD["SSR"] = bdSSR;
                rowBD["Baggage"] = bdBaggage;
                rowBD["Meal"] = bdMeal;
                rowBD["Sport"] = bdSport;
                rowBD["Comfort"] = bdComfort;
                rowBD["Seat"] = bdSeat;
                //added by ketee , VAT
                rowBD["VAT"] = bdVAT;
                rowBD["Oth"] = bdOth;
                rowBD["Disc"] = bdDisc;
                rowBD["PromoDisc"] = bdPromoDisc;
                rowBD["Qty"] = qtyadult + " Adult " + "/" + qtychild + " Child";
                dataBreakdownFee.Rows.Add(rowBD);

                HttpContext.Current.Session.Remove("dataBDFeeDepart");
                HttpContext.Current.Session.Add("dataBDFeeDepart", dataBreakdownFee);

                //return                

                DataTable dataBreakdownFeeReturn = dtBreakdownFee();
                DataRow rowBDReturn;
                rowBDReturn = dataBreakdownFeeReturn.NewRow();

                rowBDReturn["Fare"] = bdFareReturn / (totalPaxADT + totalPaxCHD);
                if (totalPaxCHD > 0)
                {
                    rowBDReturn["ChApt"] = bdchAPTReturn / totalPaxCHD;
                }
                else
                {
                    rowBDReturn["ChApt"] = 0;
                }

                rowBDReturn["Apt"] = bdAPTReturn / totalPaxADT;
                rowBDReturn["PaxFee"] = bdPaxFeeReturn;
                rowBDReturn["Fuel"] = bdFuelReturn;
                rowBDReturn["Svc"] = bdSvcReturn;
                rowBDReturn["SSR"] = bdSSRReturn;
                rowBDReturn["Baggage"] = bdBaggageReturn;
                rowBDReturn["Meal"] = bdMealReturn;
                rowBDReturn["Sport"] = bdSportReturn;
                rowBDReturn["Comfort"] = bdComfortReturn;
                rowBDReturn["Seat"] = bdSeatReturn;
                //added by ketee, VAT
                rowBDReturn["VAT"] = 0;
                rowBDReturn["Oth"] = bdOthReturn;
                rowBDReturn["Disc"] = bdDiscReturn;
                rowBDReturn["PromoDisc"] = bdPromoDiscReturn;
                rowBDReturn["Qty"] = qtyadult + "Adult" + ":" + qtychild + "Child";
                dataBreakdownFeeReturn.Rows.Add(rowBDReturn);

                HttpContext.Current.Session.Remove("dataBDFeeReturn");
                HttpContext.Current.Session.Add("dataBDFeeReturn", dataBreakdownFeeReturn);

                UpdateFlightPrice(temFlight.TemFlightId, decimal.Parse(rowBD["Fare"].ToString()), bdFull, bdAPT, bdPaxFee, bdchAPT, bdFuel, bdSvc, bdSSR, bdSeat, bdOth, bdDisc, bdPromoDisc, bdFull / temFlight.TemFlightPaxNum, bdVAT);
                UpdateFlightPrice(temFlight2.TemFlightId, decimal.Parse(rowBDReturn["Fare"].ToString()), bdFullReturn, bdAPTReturn, bdPaxFeeReturn, bdchAPTReturn, bdFuelReturn, bdSvcReturn, bdSSRReturn, bdSeatReturn, bdOthReturn, bdDiscReturn, bdPromoDiscReturn, bdFullReturn / temFlight.TemFlightPaxNum, bdVAT);
            }
            return true;
        }

        public Boolean MoveJourney(string PNR, TemFlight temFlight, TemFlight temFlight2, string LoginType, string LoginName, string LoginPWD, string LoginDomain, string SellSessionID)//amended by diana 20140211, add parameter for moveJourney true/false
        {
            IBookingManager bookingAPI = new BookingManagerClient();
            ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");

            DataTable dataClass = dtClass();
            DataTable dtTempClass = dtClass();
            DataTable dtTempClass2 = dtClass();

            DataTable dataClassTrans = dtClassTrans();

            int quantityDepart = 0, quantityReturn = 0, totalPaxADT = 0, totalPaxCHD = 0; //amended by diana 20131103 - add pax for adt and chd

            decimal farePriceDepart = 0, farePriceReturn = 0;
            string signatureDepart = "", signatureReturn = "";
            decimal fullPriceDepart = 0, fullPriceReturn = 0;
            int ctrEnum = 0, qtychild = 0, qtyadult = 0;
            //added by anton 12 oct
            decimal bdchAPT = 0, bdFare = 0, bdAPT = 0, bdPaxFee = 0, bdFuel = 0, bdOth = 0, bdDisc = 0, bdPromoDisc = 0, bdSvc = 0, bdSSR = 0, bdSport = 0, bdMeal = 0, bdBaggage = 0, bdComfort = 0, bdSeat = 0, bdInfant = 0, bdFull = 0, bdFullReturn = 0, bdVAT = 0; // for breakdownfee
            decimal bdchAPTReturn = 0, bdFareReturn = 0, bdAPTReturn = 0, bdPaxFeeReturn = 0, bdFuelReturn = 0, bdOthReturn = 0, bdDiscReturn = 0, bdPromoDiscReturn = 0, bdSvcReturn = 0, bdSSRReturn = 0, bdBaggageReturn = 0, bdSportReturn = 0, bdMealReturn = 0, bdComfortReturn = 0, bdSeatReturn = 0, bdInfantReturn = 0, bdVATReturn = 0; // for breakdownfee

            dtTempClass = GetTemClassList(temFlight.TemFlightFlightNumber);
            dtTempClass2 = GetTemClassList(temFlight2.TemFlightFlightNumber);
            IEnumerable<TemClassofService> temClasslist = ConvertToIEnum(dtTempClass);
            IEnumerable<TemClassofService> temClasslist2 = ConvertToIEnum(dtTempClass2);

            int id = 0;

            //added by ketee,
            List<PassengerData> lstPassenger = new List<PassengerData>();
            PassengerData rowPassenger;

            //added by ketee, add sell service fees
            string cur = string.Empty;
            bool bError = false;

            int passengerno = 0;
            int prevPNR = 1;

            if (temClasslist.Count() == temClasslist2.Count())
            {
                foreach (TemClassofService temClass in temClasslist)
                {
                    if (SellSessionID == "")
                    {

                        SellSessionID = apiBooking.AgentLogon();
                    }

                    GetBookingResponse resp = GetBookingByPNR(PNR, SellSessionID);
                    if (resp != null)
                    {
                        //GetMoveAvailabilityRequest request = new GetMoveAvailabilityRequest();

                        //    MoveAvailabilityRequest data = new MoveAvailabilityRequest();
                        //    data.BeginDate = Convert.ToDateTime(temFlight.TemFlightStd);
                        //    data.EndDate = Convert.ToDateTime(temFlight.TemFlightSta);
                        //    data.DepartureStation = temFlight.TemFlightDeparture.Trim();
                        //    data.ArrivalStation = temFlight.TemFlightArrival.Trim();
                        //    data.FlightType = FlightType.All;
                        //    data.AvailabilityFilter = AvailabilityFilter.ExcludeUnavailable;
                        //    data.AvailabilityType = AvailabilityType.NoPricing;

                        //    data.MovePassengerJourneyType = MovePassengerJourneyType.IROP;
                        //    data.Dow = DOW.Daily;

                        //    data.SSRCollectionsMode = SSRCollectionsMode.All;

                        //    data.FromJourney = resp.Booking.Journeys[0];

                        //    data.PassengerNumberList = new short[temClass.TemClassPersonNumber];

                        //    for (short i = 0; i < data.PassengerNumberList.Length; i++)
                        //    {
                        //        data.PassengerNumberList[i] = i;
                        //    }

                        //    data.MaximumConnectingFlights = 0;

                        //    request.MoveAvailabilityRequest = data;
                        //    request.Signature = SellSessionID;
                        //    request.ContractVersion = 3413;
                        //    GetMoveAvailabilityResponse response;
                        //    response = bookingAPI.GetMoveAvailability(request);


                        //GetMoveAvailabilityRequest request = new GetMoveAvailabilityRequest();

                        //MoveAvailabilityRequest data = new MoveAvailabilityRequest();
                        //if (resp.Booking.Journeys[0].Segments.Length == 1)
                        //{
                        //    data.BeginDate = resp.Booking.Journeys[0].Segments[0].STD;
                        //    data.EndDate = resp.Booking.Journeys[0].Segments[0].STA;
                        //    data.DepartureStation = temFlight.TemFlightDeparture.Trim();
                        //    data.ArrivalStation = temFlight.TemFlightArrival.Trim();
                        //    data.FlightType = FlightType.All;
                        //    data.AvailabilityFilter = AvailabilityFilter.ExcludeUnavailable;
                        //    data.AvailabilityType = AvailabilityType.NoPricing;

                        //    data.MovePassengerJourneyType = MovePassengerJourneyType.IROP;
                        //    data.Dow = DOW.Daily;

                        //    data.SSRCollectionsMode = SSRCollectionsMode.All;

                        //    data.FromJourney = resp.Booking.Journeys[0];

                        //    data.PassengerNumberList = new short[temClass.TemClassPersonNumber];

                        //    for (short i = 0; i < data.PassengerNumberList.Length; i++)
                        //    {
                        //        data.PassengerNumberList[i] = i;
                        //    }

                        //    data.MaximumConnectingFlights = 0;
                        //}
                        //else
                        //{
                        //        data.BeginDate = resp.Booking.Journeys[0].Segments[0].STD;
                        //        data.EndDate = resp.Booking.Journeys[0].Segments[1].STA;
                        //        data.DepartureStation = temFlight.TemFlightDeparture.Trim();
                        //        data.ArrivalStation = temFlight.TemFlightArrival.Trim();
                        //        data.FlightType = FlightType.All;
                        //        data.AvailabilityFilter = AvailabilityFilter.ExcludeUnavailable;
                        //        data.AvailabilityType = AvailabilityType.NoPricing;

                        //        data.MovePassengerJourneyType = MovePassengerJourneyType.IROP;
                        //        data.Dow = DOW.Daily;

                        //        data.SSRCollectionsMode = SSRCollectionsMode.All;

                        //        data.FromJourney = resp.Booking.Journeys[0];

                        //        data.PassengerNumberList = new short[temClass.TemClassPersonNumber];

                        //        for (short i = 0; i < data.PassengerNumberList.Length; i++)
                        //        {
                        //            data.PassengerNumberList[i] = i;
                        //        }

                        //        data.MaximumConnectingFlights = 0;
                        //}
                        //request.MoveAvailabilityRequest = data;
                        //request.Signature = SellSessionID;
                        //request.ContractVersion = 3413;
                        //GetMoveAvailabilityResponse response;
                        //response = bookingAPI.GetMoveAvailability(request);


                        if (resp != null)
                        {
                            if (resp.Booking.Journeys[0].Segments.Length == 1)
                            {
                                MoveJourneyByKeyRequest requested = new MoveJourneyByKeyRequest();
                                MoveJourneyByKeyRequestData datas = new MoveJourneyByKeyRequestData();
                                datas.ChangeReasonCode = "FlyAhead";
                                datas.Commit = false;
                                datas.MoveType = MovePassengerJourneyType.FlyAhead;
                                // from journey sell keys match a journey on booking in state
                                datas.FromJourneySellKeys = new SellKeyList();
                                datas.FromJourneySellKeys.FareSellKey = temClass.TemClassFareSellKey;
                                datas.FromJourneySellKeys.JourneySellKey = temFlight.TemFlightJourneySellKey;
                                // to journey sell keys match a journey from availability
                                datas.ToJourneyActionStatusCode = "NN";
                                datas.ToJourneySellKeys = new SellKeyList();
                                datas.ToJourneySellKeys.FareSellKey = resp.Booking.Journeys[0].Segments[0].Fares[0].FareSellKey;
                                datas.ToJourneySellKeys.JourneySellKey = resp.Booking.Journeys[0].JourneySellKey;
                                datas.IgnoreClosedFlightStatus = false;
                                datas.IgnoreLiftStatus = IgnoreLiftStatus.IgnoreNotAllowed;
                                datas.KeepWaitListStatus = true;
                                datas.Oversell = false;
                                requested.ContractVersion = 3413;
                                requested.Signature = SellSessionID;
                                requested.MoveJourneyByKeyRequestData = datas;
                                MoveJourneyByKeyResponse responses;
                                responses = bookingAPI.MoveJourney(requested);
                                if (responses != null)
                                {
                                    return true;

                                }
                                else
                                {
                                    return false;

                                }

                            }
                            else
                            {
                                MoveJourneyByKeyRequest requested = new MoveJourneyByKeyRequest();
                                MoveJourneyByKeyRequestData datas = new MoveJourneyByKeyRequestData();
                                datas.ChangeReasonCode = "FlyAhead";
                                datas.Commit = false;
                                datas.MoveType = MovePassengerJourneyType.FlyAhead;
                                // from journey sell keys match a journey on booking in state
                                datas.FromJourneySellKeys = new SellKeyList();
                                datas.FromJourneySellKeys.FareSellKey = resp.Booking.Journeys[0].Segments[0].Fares[0].FareSellKey;
                                datas.FromJourneySellKeys.JourneySellKey = resp.Booking.Journeys[0].JourneySellKey;
                                // to journey sell keys match a journey from availability
                                datas.ToJourneyActionStatusCode = "NN";
                                datas.ToJourneySellKeys = new SellKeyList();
                                datas.ToJourneySellKeys.FareSellKey = resp.Booking.Journeys[0].Segments[1].Fares[0].FareSellKey;
                                datas.ToJourneySellKeys.JourneySellKey = resp.Booking.Journeys[0].JourneySellKey;
                                datas.IgnoreClosedFlightStatus = false;
                                datas.IgnoreLiftStatus = IgnoreLiftStatus.IgnoreNotAllowed;
                                datas.KeepWaitListStatus = true;
                                datas.Oversell = false;
                                requested.ContractVersion = 3413;
                                requested.Signature = SellSessionID;
                                requested.MoveJourneyByKeyRequestData = datas;
                                MoveJourneyByKeyResponse responses;
                                responses = bookingAPI.MoveJourney(requested);
                                if (responses != null)
                                {
                                    return true;

                                }
                                else
                                {
                                    return false;

                                }
                            }
                        }

                    }
                    else
                    {
                        return false;

                    }

                }
            }
            return true;
        }

        public Boolean GetItinerary(TemFlight temFlight, TemFlight temFlight2, string LoginType, string LoginName, string LoginPWD, string LoginDomain, string SellSessionID, string OrgID, bool moveJourney = false)
        {
            #region "Declaration"
            IBookingManager bookingAPI = new BookingManagerClient();
            ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");
            var profiler = MiniProfiler.Current;

            DataTable dataClass = dtClass();
            DataTable dtTempClass = dtClass();
            DataTable dtTempClass2 = dtClass();

            DataTable dataClassTrans = dtClassTrans();

            int quantityDepart = 0, quantityReturn = 0, totalPaxADT = 0, totalPaxCHD = 0; //amended by diana 20131103 - add pax for adt and chd

            decimal farePriceDepart = 0, farePriceReturn = 0;
            string signatureDepart = "", signatureReturn = "";
            decimal fullPriceDepart = 0, fullPriceReturn = 0;
            int ctrEnum = 0, qtychild = 0, qtyadult = 0;
            //added by anton 12 oct
            decimal bdchAPT = 0, bdFare = 0, bdAPT = 0, bdPaxFee = 0, bdFuel = 0, bdOth = 0, bdDisc = 0, bdPromoDisc = 0, bdSvc = 0, bdSSR = 0, bdSport = 0, bdMeal = 0, bdBaggage = 0, bdComfort = 0, bdSeat = 0, bdInfant = 0, bdFull = 0, bdFullReturn = 0, bdVAT = 0; // for breakdownfee
            decimal bdchAPTReturn = 0, bdFareReturn = 0, bdAPTReturn = 0, bdPaxFeeReturn = 0, bdFuelReturn = 0, bdOthReturn = 0, bdDiscReturn = 0, bdPromoDiscReturn = 0, bdSvcReturn = 0, bdSSRReturn = 0, bdBaggageReturn = 0, bdSportReturn = 0, bdMealReturn = 0, bdComfortReturn = 0, bdSeatReturn = 0, bdInfantReturn = 0, bdVATReturn = 0; // for breakdownfee


            int id = 0;

            //added by ketee,
            List<PassengerData> lstPassenger = new List<PassengerData>();
            PassengerData rowPassenger;

            //added by ketee, add sell service fees
            string cur = string.Empty;
            bool bError = false;

            int passengerno = 0;
            int prevPNR = 1;

            TemClassofService temClass2 = new TemClassofService();

            SellRequest sellrequest = new SellRequest();
            SellJourneyRequestData sjrd = new SellJourneyRequestData();
            #endregion




            //added by ketee, performance checking, 20170916
            using (profiler.Step("GetTemClassList"))
            {
                dtTempClass = GetTemClassList(temFlight.TemFlightFlightNumber);
                dtTempClass2 = GetTemClassList(temFlight2.TemFlightFlightNumber);
            }

            IEnumerable<TemClassofService> temClasslist = ConvertToIEnum(dtTempClass);
            IEnumerable<TemClassofService> temClasslist2 = ConvertToIEnum(dtTempClass2);

            if (temClasslist != null && temClasslist2 != null)
            {
                log.Info(this, "Tem Class 1 = " + temClasslist.Count() + "; Tem Class 2 =" + temClasslist2.Count());

                if (temClasslist.Count() == temClasslist2.Count())
                {
                    foreach (TemClassofService temClass in temClasslist)
                    {
                        //prevPNR += 1;
                        //added by ketee, performance checking, 20170916
                        using (profiler.Step("apiBooking.AgentLogon for SellSessionID"))
                        {
                            if (moveJourney == false) //not for moving Journey
                            {
                                if (LoginType == "SkyAgent")
                                {
                                    SellSessionID = apiBooking.AgentLogon("SkyAgent", LoginDomain, LoginName, LoginPWD);
                                }
                                else
                                {
                                    SellSessionID = apiBooking.AgentLogon();
                                }
                            }
                            temClass.TemClassSellSignature = SellSessionID;
                            UpdateTemClass(temClass);
                        }

                        //Added by Tyas
                        PriceItineraryRequest priceItinRequest = new PriceItineraryRequest();
                        priceItinRequest.Signature = SellSessionID;
                        priceItinRequest.ContractVersion = 3413;
                        priceItinRequest.ItineraryPriceRequest = new ItineraryPriceRequest();
                        priceItinRequest.ItineraryPriceRequest.PriceItineraryBy = PriceItineraryBy.JourneyWithLegs;
                        priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest = new PriceJourneyRequestData();
                        priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.PaxCount = Convert.ToInt16(temClass.TemClassPersonNumber);
                        priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.CurrencyCode = temFlight.TemFlightCurrencyCode.Trim();
                        priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers = new Passenger[Convert.ToInt16(temClass.TemClassPersonNumber)];
                        //check child
                        string adultType = "ADT";

                        //check child and adult
                        int childpax = temClass.TemClassChildNumber;
                        qtychild = childpax;
                        int adultpax = temClass.TemClassAdultNumber;
                        qtyadult = adultpax;

                        //added by diana 20131103 - add numofpax
                        totalPaxADT += qtyadult;
                        totalPaxCHD += qtychild;

                        //added by ketee, performance checking, 20170916
                        using (profiler.Step("Assigning Passenger Details"))
                        {
                            for (int i = 0; i < temClass.TemClassPersonNumber; i++)
                            {
                                if (adultpax > 0)
                                {
                                    adultType = "ADT";
                                }
                                else
                                {
                                    adultType = "CHD";
                                }

                                priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i] = new Passenger();
                                priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i].PassengerNumber = Convert.ToInt16(i);
                                priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i].State = MessageState.New;
                                priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i].PassengerID = passengerno;
                                priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i].PassengerTypeInfos = new PassengerTypeInfo[1];
                                priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i].PassengerTypeInfos[0] = new PassengerTypeInfo();

                                if (adultType == "ADT")
                                    priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse("1994-1-1");
                                else if (adultType == "CHD")
                                {
                                    DateTime dtTime = DateTime.Now.AddYears(-5);
                                    priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse(dtTime.Year + "-1-1");
                                }

                                priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i].PassengerTypeInfos[0].PaxType = adultType;
                                priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i].PassengerTypeInfos[0].State = MessageState.New;
                                priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.Passengers[i].PseudoPassenger = false;

                                //added by ketee
                                rowPassenger = new PassengerData();
                                rowPassenger.PassengerID = i.ToString();
                                rowPassenger.FirstName = "TBA";
                                rowPassenger.LastName = "TBA";
                                rowPassenger.PassportNo = "TBA";
                                rowPassenger.DOB = DateTime.Parse("1900-01-01");
                                rowPassenger.SyncCreate = DateTime.Now;
                                rowPassenger.LastSyncBy = "System";
                                if (adultType == "CHD")
                                {
                                    rowPassenger.Title = "Chd";
                                }

                                //ongoing, added by diana, 20161225
                                if (temFlight.TemFlightCarrierCode == "D7" || temFlight.TemFlightCarrierCode == "XJ" || temFlight.TemFlightCarrierCode == "ST")
                                {
                                    rowPassenger.MaxChange = 1;
                                    rowPassenger.MaxPax1 = qtyadult + qtychild;
                                    rowPassenger.MaxPax2 = 0;
                                }
                                else
                                {
                                    rowPassenger.MaxChange = 1;
                                    rowPassenger.MaxPax1 = (int)(0.3 * (qtyadult + qtychild));
                                    rowPassenger.MaxPax2 = 0;
                                }

                                rowPassenger.RecordLocator = prevPNR.ToString();
                                lstPassenger.Add(rowPassenger);

                                passengerno++;
                                adultpax--;
                            }
                        }

                        priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.PriceJourneys = new PriceJourney[2];
                        priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.PriceJourneys[0] = new PriceJourney();
                        if (temFlight.TemFlightTransit != "")
                        { priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.PriceJourneys[0].Segments = new PriceSegment[2]; }
                        else { priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.PriceJourneys[0].Segments = new PriceSegment[1]; }
                        PriceSegment srSegment = new PriceSegment();
                        srSegment.State = MessageState.New;
                        srSegment.DepartureStation = temFlight.TemFlightDeparture.Trim();

                        if (temFlight.TemFlightTransit != "")
                        {
                            srSegment.ArrivalStation = temFlight.TemFlightTransit.Trim();
                        }
                        else
                        {
                            srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                        }

                        srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd);
                        srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta);
                        srSegment.FlightDesignator = new FlightDesignator();
                        srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber.Trim().PadLeft(4, ' ');
                        srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
                        srSegment.Fare = new SellFare();
                        srSegment.Fare.State = MessageState.New;
                        srSegment.Fare.ClassOfService = temClass.TemClassClass.Trim();
                        srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode.Trim();

                        srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey.Split('~')[4].ToString();
                        srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey.Split('~')[3].ToString();

                        srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey.Split('~')[6]);
                        srSegment.Fare.FareClassOfService = temClass.TemClassClass.Trim();
                        srSegment.Fare.IsAllotmentMarketFare = false;

                        switch (temClass.TempFareApplicationType.ToString().ToLower())
                        {
                            case "route":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                break;
                            case "sector":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                                break;
                            case "governing":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                                break;
                            default:
                                srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                                break;
                        }
                        priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.PriceJourneys[0].Segments[0] = srSegment;

                        if (temFlight.TemFlightTransit != "")
                        {
                            srSegment = new PriceSegment();
                            srSegment.State = MessageState.New;
                            srSegment.DepartureStation = temFlight.TemFlightTransit.Trim();
                            srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                            srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd2);
                            srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta2);
                            srSegment.FlightDesignator = new FlightDesignator();

                            srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber2.Trim();
                            srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();

                            srSegment.Fare = new SellFare();
                            srSegment.Fare.State = MessageState.New;
                            srSegment.Fare.ClassOfService = temClass.TemClassClass2.Trim();
                            srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();
                            srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey2.Split('~')[4].ToString();
                            srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey2.Split('~')[3].ToString();

                            srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey2.Split('~')[6]);
                            srSegment.Fare.FareClassOfService = temClass.TemClassClass2.Trim();
                            srSegment.Fare.IsAllotmentMarketFare = false;

                            switch (temClass.TempFareApplicationType2.ToString().ToLower())
                            {
                                case "route":
                                    srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                    break;
                                case "sector":
                                    srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                                    break;
                                case "governing":
                                    srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                                    break;
                                default:
                                    srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                    //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                                    break;
                            }
                            priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.PriceJourneys[0].Segments[1] = srSegment;

                        }

                        //fill data for new dataClass
                        quantityDepart = temClass.TemClassPersonNumber;
                        farePriceDepart = Convert.ToDecimal(temClass.TemClassClassPrice);
                        fullPriceDepart = Convert.ToDecimal(temClass.TemClassFullPrice);
                        signatureDepart = SellSessionID;
                        temClass2 = temClasslist2.ElementAt(ctrEnum);
                        temClass2.TemClassSellSignature = SellSessionID;// SessionManager._signature;
                        UpdateTemClass(temClass2);

                        priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.PriceJourneys[1] = new PriceJourney();
                        if (temFlight2.TemFlightTransit != "")
                        { priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.PriceJourneys[1].Segments = new PriceSegment[2]; }
                        else { priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.PriceJourneys[1].Segments = new PriceSegment[1]; }
                        PriceSegment srSegment1 = new PriceSegment();
                        srSegment1.State = MessageState.New;
                        srSegment1.DepartureStation = temFlight2.TemFlightDeparture.Trim();

                        if (temFlight2.TemFlightTransit != "")
                        {
                            srSegment1.ArrivalStation = temFlight2.TemFlightTransit.Trim();
                        }
                        else
                        {
                            srSegment1.ArrivalStation = temFlight2.TemFlightArrival.Trim();
                        }

                        srSegment1.STD = Convert.ToDateTime(temFlight2.TemFlightStd);
                        srSegment1.STA = Convert.ToDateTime(temFlight2.TemFlightSta);
                        srSegment1.FlightDesignator = new FlightDesignator();
                        srSegment1.FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber.Trim().PadLeft(4, ' ');
                        srSegment1.FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode.Trim();
                        srSegment1.Fare = new SellFare();
                        srSegment1.Fare.State = MessageState.New;
                        srSegment1.Fare.ClassOfService = temClass2.TemClassClass.Trim();
                        srSegment1.Fare.CarrierCode = temFlight2.TemFlightCarrierCode.Trim();
                        srSegment1.Fare.RuleNumber = temClass2.TemClassFareSellKey.Split('~')[4].ToString();// "AAB1";
                        srSegment1.Fare.FareBasisCode = temClass2.TemClassFareSellKey.Split('~')[3].ToString();// "A00H00";

                        srSegment1.Fare.FareSequence = Convert.ToInt16(temClass2.TemClassFareSellKey.Split('~')[6]);
                        srSegment1.Fare.FareClassOfService = temClass2.TemClassClass.Trim();
                        srSegment1.Fare.IsAllotmentMarketFare = false;

                        switch (temClass2.TempFareApplicationType.ToString().ToLower())
                        {
                            case "route":
                                srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                                break;
                            case "sector":
                                srSegment1.Fare.FareApplicationType = FareApplicationType.Sector;
                                break;
                            case "governing":
                                srSegment1.Fare.FareApplicationType = FareApplicationType.Governing;
                                break;
                            default:
                                srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                                //srSegment1.Fare.FareApplicationType = FareApplicationType.Unmapped;
                                break;
                        }
                        priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.PriceJourneys[1].Segments[0] = srSegment1;

                        if (temFlight2.TemFlightTransit != "")
                        {
                            srSegment1 = new PriceSegment();
                            srSegment1.State = MessageState.New;
                            srSegment1.DepartureStation = temFlight2.TemFlightTransit.Trim();
                            srSegment1.ArrivalStation = temFlight2.TemFlightArrival.Trim();
                            srSegment1.STD = Convert.ToDateTime(temFlight2.TemFlightStd2);
                            srSegment1.STA = Convert.ToDateTime(temFlight2.TemFlightSta2);
                            srSegment1.FlightDesignator = new FlightDesignator();

                            srSegment1.FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber2.Trim();
                            srSegment1.FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode2.Trim();

                            srSegment1.Fare = new SellFare();
                            srSegment1.Fare.State = MessageState.New;
                            srSegment1.Fare.ClassOfService = temClass2.TemClassClass2.Trim();
                            srSegment1.Fare.CarrierCode = temFlight2.TemFlightCarrierCode2.Trim();
                            srSegment1.Fare.RuleNumber = temClass2.TemClassFareSellKey2.Split('~')[4].ToString();
                            srSegment1.Fare.FareBasisCode = temClass2.TemClassFareSellKey2.Split('~')[3].ToString();

                            srSegment1.Fare.FareSequence = Convert.ToInt16(temClass2.TemClassFareSellKey2.Split('~')[6]);
                            srSegment1.Fare.FareClassOfService = temClass2.TemClassClass2.Trim();
                            srSegment1.Fare.IsAllotmentMarketFare = false;

                            switch (temClass2.TempFareApplicationType2.ToString().ToLower())
                            {
                                case "route":
                                    srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                                    break;
                                case "sector":
                                    srSegment1.Fare.FareApplicationType = FareApplicationType.Sector;
                                    break;
                                case "governing":
                                    srSegment1.Fare.FareApplicationType = FareApplicationType.Governing;
                                    break;
                                default:
                                    srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                                    //srSegment1.Fare.FareApplicationType = FareApplicationType.Unmapped;
                                    break;
                            }
                            priceItinRequest.ItineraryPriceRequest.PriceJourneyWithLegsRequest.PriceJourneys[1].Segments[1] = srSegment1;

                        }
                        //fill data for new dataClass
                        quantityReturn = temClass2.TemClassPersonNumber;
                        farePriceReturn = Convert.ToDecimal(temClass2.TemClassClassPrice);
                        fullPriceReturn = Convert.ToDecimal(temClass2.TemClassFullPrice);
                        signatureReturn = SellSessionID;


                        priceItinRequest.ItineraryPriceRequest.TypeOfSale = new TypeOfSale();
                        priceItinRequest.ItineraryPriceRequest.TypeOfSale.FareTypes = new string[1];
                        priceItinRequest.ItineraryPriceRequest.TypeOfSale.FareTypes[0] = "R";
                        ctrEnum += 1;

                        //End here
                        if (priceItinRequest != null)
                        {
                            try
                            {
                                PriceItineraryResponse piResponse = null;
                                piResponse = bookingAPI.GetItineraryPrice(priceItinRequest);

                                //Get Currecy Rate List 20130625
                                //added by ketee, performance checking, 20170916
                                decimal currRate = 1;
                                using (profiler.Step("GetExternalRate Session:" + SellSessionID))
                                {

                                    Navitaire.UtilitiesManager.GetExternalRatesListResponseData RateResponse = apiBooking.GetExternalRateList(SellSessionID);
                                    string curr = piResponse.Booking.CurrencyCode;
                                    //string req = GetXMLString(RateResponse);
                                    if (curr != "MYR")
                                    {
                                        for (int i = 0; i < RateResponse.ExternalRateList.Length; i++)
                                        {
                                            if (RateResponse.ExternalRateList[i].QuotedCurrency == curr && RateResponse.ExternalRateList[i].CollectedCurrency == "MYR")
                                            {
                                                currRate = RateResponse.ExternalRateList[i].ExchangeRate;
                                            }
                                        }
                                    }
                                }

                                //depart
                                int segCount = piResponse.Booking.Journeys[0].Segments.Length;
                                //renew temClass
                                ClassPrice classPriceDepart = new ClassPrice();

                                //added by ketee, performance checking, 20170916
                                using (profiler.Step("Store iDepart Departure,Transit,Arrival,OtherFees,OthSellJourney Data"))
                                {
                                    for (int iDepart = 0; iDepart < segCount; iDepart++)
                                    {
                                        //added by diana 20131031 - added condition if paxfare length is more than 0
                                        if (piResponse.Booking.Journeys[0].Segments[iDepart].Fares[0].PaxFares.Length > 0)
                                        {
                                            PaxFare paxFare = piResponse.Booking.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];
                                            PaxFare paxFareChd;
                                            if (temClass.TemClassAdultNumber > 0)
                                            {
                                                HttpContext.Current.Session.Add("getFlightDepartureData", temFlight.TemFlightDeparture);
                                                HttpContext.Current.Session.Add("getFlightTransitData", temFlight.TemFlightTransit);
                                                HttpContext.Current.Session.Add("getFlightArrivalData", temFlight.TemFlightArrival);
                                                AddFarePrice(paxFare, temClass, ref classPriceDepart, "ADT");

                                                if (HttpContext.Current.Session["dataTransFeesOthers"] != null)
                                                {
                                                    DataTable dataTF = dtTransFees();
                                                    dataTF = (DataTable)HttpContext.Current.Session["dataTransFeesOthers"];

                                                    HttpContext.Current.Session.Add("dataTFOthSellJourney", dataTF);
                                                }
                                            }

                                            if (temClass.TemClassChildNumber > 0)
                                            {
                                                if (piResponse.Booking.Journeys[0].Segments[iDepart].Fares[0].PaxFares.Length > 1)
                                                    paxFareChd = piResponse.Booking.Journeys[0].Segments[iDepart].Fares[0].PaxFares[1];
                                                else
                                                    paxFareChd = piResponse.Booking.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];

                                                //if (temFlight.TemFlightDeparture.ToString().ToUpper() != "HKG" && temFlight.TemFlightArrival.ToString().ToUpper() != "HKG")
                                                //{
                                                //    paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];
                                                //}
                                                HttpContext.Current.Session.Add("getFlightDepartureData", temFlight.TemFlightDeparture);
                                                HttpContext.Current.Session.Add("getFlightTransitData", temFlight.TemFlightTransit);
                                                HttpContext.Current.Session.Add("getFlightArrivalData", temFlight.TemFlightArrival);
                                                AddFarePrice(paxFareChd, temClass, ref classPriceDepart, "CHD");

                                                if (HttpContext.Current.Session["dataTransFeesOthers"] != null)
                                                {
                                                    DataTable dataTF = dtTransFees();
                                                    dataTF = (DataTable)HttpContext.Current.Session["dataTransFeesOthers"];

                                                    HttpContext.Current.Session.Add("dataTFOthSellJourney", dataTF);
                                                }
                                            }
                                        }
                                    }
                                }

                                //remove divide by 2 as service fees apply to 1st booking only
                                //bdSvc += book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2;
                                //classPriceDepart.ServChrg = (book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2) * temClass.TemClassPersonNumber;


                                //amended by diana 20140121 - add initial value to 0, then add it
                                classPriceDepart.ServChrg = 0;
                                classPriceDepart.SSRChrg = 0;
                                classPriceDepart.SeatChrg = 0;
                                classPriceDepart.InfantChrg = 0;
                                classPriceDepart.ServVAT = 0;

                                //load service charges passenger
                                //added by ketee, performance checking, 20170916
                                using (profiler.Step("load service charges passenger"))
                                {
                                    if (piResponse.Booking.Passengers[0].PassengerFees.Length > 0 && piResponse.Booking.Passengers[0].PassengerFees[0].ServiceCharges.Length > 0)
                                    {
                                        for (int i = 0; i < piResponse.Booking.Passengers[0].PassengerFees[0].ServiceCharges.Length; i++)
                                        {
                                            switch (piResponse.Booking.Passengers[0].PassengerFees[0].ServiceCharges[i].ChargeCode.ToString().ToUpper())
                                            {
                                                case "SVCF":
                                                    classPriceDepart.ServChrg += (piResponse.Booking.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                                    //classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                                                    break;
                                                case "VAT":
                                                    classPriceDepart.ServVAT += (piResponse.Booking.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                                    //classPriceDepart.FullPrice += classPriceDepart.ServVAT;
                                                    break;
                                                default:
                                                    classPriceDepart.ServChrg += (piResponse.Booking.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                                    //classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                                                    break;
                                            }
                                        }
                                    }
                                }

                                classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                                classPriceDepart.FullPrice += classPriceDepart.SSRChrg;
                                classPriceDepart.FullPrice += classPriceDepart.SeatChrg;
                                classPriceDepart.FullPrice += classPriceDepart.InfantChrg;
                                classPriceDepart.FullPrice += classPriceDepart.ServVAT;


                                //bdFull = bdFull + classPriceDepart.FullPrice;

                                classPriceDepart.ClassID = temClass.TemClassId;

                                //return breakdown fee
                                ClassPrice classPriceReturn = new ClassPrice();

                                segCount = piResponse.Booking.Journeys[1].Segments.Length;
                                classPriceReturn.ClassID = temClass2.TemClassId;

                                //added by ketee, performance checking, 20170916
                                using (profiler.Step("Store iReturn Departure,Transit,Arrival,OtherFees,OthSellJourney Data"))
                                {
                                    for (int iReturn = 0; iReturn < segCount; iReturn++)
                                    {
                                        //added by diana 20131031 - added condition if paxfare length is more than 0
                                        if (piResponse.Booking.Journeys[1].Segments[iReturn].Fares[0].PaxFares.Length > 0)
                                        {
                                            PaxFare paxFare = piResponse.Booking.Journeys[1].Segments[iReturn].Fares[0].PaxFares[0];
                                            PaxFare paxFareChd;

                                            if (temClass2.TemClassAdultNumber > 0)
                                            {
                                                HttpContext.Current.Session.Add("getFlightDepartureData", temFlight.TemFlightArrival);
                                                HttpContext.Current.Session.Add("getFlightTransitData", temFlight.TemFlightTransit);
                                                HttpContext.Current.Session.Add("getFlightArrivalData", temFlight.TemFlightDeparture);
                                                AddFarePrice(paxFare, temClass2, ref classPriceReturn, "ADT");

                                                if (HttpContext.Current.Session["dataTransFeesOthers"] != null)
                                                {
                                                    DataTable dataTF = dtTransFees();
                                                    dataTF = (DataTable)HttpContext.Current.Session["dataTransFeesOthers"];

                                                    HttpContext.Current.Session.Add("dataTFOthSellJourney", dataTF);
                                                }
                                            }

                                            if (temClass2.TemClassChildNumber > 0)
                                            {
                                                if (piResponse.Booking.Journeys[1].Segments[iReturn].Fares[0].PaxFares.Length > 1)
                                                    paxFareChd = piResponse.Booking.Journeys[1].Segments[iReturn].Fares[0].PaxFares[1];
                                                else
                                                    paxFareChd = piResponse.Booking.Journeys[1].Segments[iReturn].Fares[0].PaxFares[0];

                                                //if (temFlight.TemFlightDeparture.ToString().ToUpper() != "HKG" && temFlight.TemFlightArrival.ToString().ToUpper() != "HKG")
                                                //{
                                                //    paxFareChd = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[0];
                                                //}
                                                HttpContext.Current.Session.Add("getFlightDepartureData", temFlight.TemFlightArrival);
                                                HttpContext.Current.Session.Add("getFlightTransitData", temFlight.TemFlightTransit);
                                                HttpContext.Current.Session.Add("getFlightArrivalData", temFlight.TemFlightDeparture);
                                                AddFarePrice(paxFareChd, temClass2, ref classPriceReturn, "CHD");

                                                if (HttpContext.Current.Session["dataTransFeesOthers"] != null)
                                                {
                                                    DataTable dataTF = dtTransFees();
                                                    dataTF = (DataTable)HttpContext.Current.Session["dataTransFeesOthers"];

                                                    HttpContext.Current.Session.Add("dataTFOthSellJourney", dataTF);
                                                }
                                            }
                                        }
                                    }
                                }

                                //added by ketee, performance checking, 20170916
                                using (profiler.Step("Store dataClassTrans"))
                                {
                                    //remark, as service charge only apply to 1st segment
                                    //bdSvcReturn += book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2;
                                    //classPriceReturn.ServChrg = (book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2) * temClass2.TemClassPersonNumber;
                                    //bdSvcReturn += 0;
                                    classPriceReturn.ServChrg = 0;
                                    classPriceReturn.SSRChrg = 0;
                                    classPriceReturn.SeatChrg = 0;
                                    classPriceReturn.InfantChrg = 0;
                                    classPriceReturn.FullPrice += classPriceReturn.ServChrg + classPriceReturn.SSRChrg + classPriceReturn.SeatChrg + classPriceReturn.InfantChrg;

                                    //bdFullReturn = bdFullReturn + classPriceReturn.FullPrice;

                                    //added by ketee , curr rate 20130625
                                    classPriceDepart.CurrencyRate = currRate;
                                    classPriceReturn.CurrencyRate = currRate;

                                    UpdateClassPrice(classPriceDepart);
                                    UpdateClassPrice(classPriceReturn);

                                    DataRow row;
                                    row = dataClassTrans.NewRow();
                                    row["Quantity"] = quantityDepart;
                                    row["FarePrice"] = (classPriceDepart.FarePrice + classPriceReturn.FarePrice);
                                    //commented by diana 20131104
                                    //private void ProcessPairedFareJhn(ClassFare[] GoingFare, ClassFare[] ReturnFare,row["FarePrice"] = (classPriceDepart.FarePrice + classPriceReturn.FarePrice) / temClass.TemClassPersonNumber;
                                    row["FullPrice"] = (classPriceDepart.FullPrice + classPriceReturn.FullPrice);
                                    row["SellSignature"] = signatureDepart;
                                    //added by ketee, 20121016
                                    row["ServChrg"] = classPriceDepart.ServChrg + classPriceReturn.ServChrg;
                                    row["SSRChrg"] = classPriceDepart.SSRChrg + classPriceReturn.SSRChrg;
                                    row["SeatChrg"] = classPriceDepart.SeatChrg + classPriceReturn.SeatChrg;
                                    row["InfantChrg"] = classPriceDepart.InfantChrg + classPriceReturn.InfantChrg;
                                    //added by ketee, VAT
                                    row["ServVAT"] = classPriceDepart.ServVAT;
                                    row["DetailCollectedAmt"] = 0;
                                    row["RecordLocator"] = "";
                                    //added by ketee 20130625 currrate
                                    row["CurrencyRate"] = classPriceDepart.CurrencyRate;

                                    //added by ketee, breakdown fees 20130625
                                    bdPaxFee += classPriceDepart.PaxFeeChrg;
                                    bdAPT += classPriceDepart.TaxChrg;
                                    bdchAPT += classPriceDepart.TAxChrgChd;
                                    bdFare += classPriceDepart.FarePrice;
                                    bdFuel += classPriceDepart.FuelChrg;
                                    bdFull += classPriceDepart.FullPrice;
                                    bdOth += classPriceDepart.OthChrg;
                                    bdDisc += classPriceDepart.DiscChrg;
                                    bdPromoDisc += classPriceDepart.PromoDiscChrg;
                                    bdSvc += classPriceDepart.ServChrg;
                                    bdSSR += classPriceDepart.SSRChrg;
                                    bdSeat += classPriceDepart.SeatChrg;
                                    bdInfant += classPriceDepart.InfantChrg;
                                    bdVAT += classPriceDepart.ServVAT;

                                    bdPaxFeeReturn += classPriceReturn.PaxFeeChrg;
                                    bdAPTReturn += classPriceReturn.TaxChrg;
                                    bdchAPTReturn += classPriceReturn.TAxChrgChd;
                                    bdFareReturn += classPriceReturn.FarePrice;
                                    bdFuelReturn += classPriceReturn.FuelChrg;
                                    bdFullReturn += classPriceReturn.FullPrice;
                                    bdOthReturn += classPriceReturn.OthChrg;
                                    bdDiscReturn += classPriceReturn.DiscChrg;
                                    bdPromoDiscReturn += classPriceReturn.PromoDiscChrg;
                                    bdSvcReturn += classPriceReturn.ServChrg;
                                    bdSSRReturn += classPriceReturn.SSRChrg;
                                    bdSeatReturn += classPriceReturn.SeatChrg;
                                    bdInfantReturn += classPriceReturn.InfantChrg;
                                    bdVAT += classPriceReturn.ServVAT;

                                    dataClassTrans.Rows.Add(row);
                                }

                                //save new data class into session
                                if (dataClassTrans.Rows.Count > 0)
                                {
                                    HttpContext.Current.Session.Remove("dataClassTrans");
                                    HttpContext.Current.Session.Add("dataClassTrans", dataClassTrans);
                                }
                            }
                            catch (Exception ex)
                            {
                                bError = true;
                                HttpContext.Current.Session["errormsg"] = ex.ToString();
                                log.Error(this, ex);
                            }
                        }
                    }
                    if (bError)
                    {
                        log.Warning(this, "Sell Journey failed.");
                        return false;
                    }
                }
                else
                {
                    //fares not equal
                }
            }

            //save new data class into session
            //added by ketee, performance checking, 20170916
            using (profiler.Step("Save new data class into session"))
            {
                if (dataClassTrans.Rows.Count > 0)
                {
                    HttpContext.Current.Session.Remove("dataClassTrans");
                    HttpContext.Current.Session.Add("dataClassTrans", dataClassTrans);

                    //depart breakdown

                    DataTable dataBreakdownFee = dtBreakdownFee();
                    DataRow rowBD;
                    rowBD = dataBreakdownFee.NewRow();
                    //added child fare 
                    rowBD["Fare"] = bdFare / (totalPaxADT + totalPaxCHD);
                    if (totalPaxCHD > 0)
                    {
                        rowBD["ChApt"] = bdchAPT / totalPaxCHD;
                    }
                    else
                    {
                        rowBD["ChApt"] = 0;
                    }

                    rowBD["Apt"] = bdAPT / totalPaxADT;
                    rowBD["PaxFee"] = bdPaxFee;
                    rowBD["Fuel"] = bdFuel;
                    rowBD["Svc"] = bdSvc;
                    rowBD["SSR"] = bdSSR;
                    rowBD["Baggage"] = bdBaggage;
                    rowBD["Meal"] = bdMeal;
                    rowBD["Sport"] = bdSport;
                    rowBD["Comfort"] = bdComfort;
                    rowBD["Seat"] = bdSeat;
                    //added by ketee , VAT
                    rowBD["VAT"] = bdVAT;
                    rowBD["Oth"] = bdOth;
                    rowBD["Disc"] = bdDisc;
                    rowBD["PromoDisc"] = bdPromoDisc;
                    rowBD["Qty"] = qtyadult + " Adult " + "/" + qtychild + " Child";
                    dataBreakdownFee.Rows.Add(rowBD);

                    HttpContext.Current.Session.Remove("dataBDFeeDepart");
                    HttpContext.Current.Session.Add("dataBDFeeDepart", dataBreakdownFee);

                    //return                

                    DataTable dataBreakdownFeeReturn = dtBreakdownFee();
                    DataRow rowBDReturn;
                    rowBDReturn = dataBreakdownFeeReturn.NewRow();

                    rowBDReturn["Fare"] = bdFareReturn / (totalPaxADT + totalPaxCHD);
                    if (totalPaxCHD > 0)
                    {
                        rowBDReturn["ChApt"] = bdchAPTReturn / totalPaxCHD;
                    }
                    else
                    {
                        rowBDReturn["ChApt"] = 0;
                    }

                    rowBDReturn["Apt"] = bdAPTReturn / totalPaxADT;
                    rowBDReturn["PaxFee"] = bdPaxFeeReturn;
                    rowBDReturn["Fuel"] = bdFuelReturn;
                    rowBDReturn["Svc"] = bdSvcReturn;
                    rowBDReturn["SSR"] = bdSSRReturn;
                    rowBD["Baggage"] = bdBaggageReturn;
                    rowBD["Meal"] = bdMealReturn;
                    rowBD["Sport"] = bdSportReturn;
                    rowBD["Comfort"] = bdComfortReturn;
                    rowBDReturn["Seat"] = bdSeatReturn;
                    //added by ketee, VAT
                    rowBDReturn["VAT"] = 0;
                    rowBDReturn["Oth"] = bdOthReturn;
                    rowBDReturn["Disc"] = bdDiscReturn;
                    rowBDReturn["PromoDisc"] = bdPromoDiscReturn;
                    rowBDReturn["Qty"] = qtyadult + "Adult" + ":" + qtychild + "Child";
                    dataBreakdownFeeReturn.Rows.Add(rowBDReturn);

                    HttpContext.Current.Session.Remove("dataBDFeeReturn");
                    HttpContext.Current.Session.Add("dataBDFeeReturn", dataBreakdownFeeReturn);

                    UpdateFlightPrice(temFlight.TemFlightId, decimal.Parse(rowBD["Fare"].ToString()), bdFull, bdAPT, bdPaxFee, bdchAPT, bdFuel, bdSvc, bdSSR, bdSeat, bdOth, bdDisc, bdPromoDisc, bdFull / temFlight.TemFlightPaxNum, bdVAT);
                    UpdateFlightPrice(temFlight2.TemFlightId, decimal.Parse(rowBDReturn["Fare"].ToString()), bdFullReturn, bdAPTReturn, bdPaxFeeReturn, bdchAPTReturn, bdFuelReturn, bdSvcReturn, bdSSRReturn, bdSeatReturn, bdOthReturn, bdDiscReturn, bdPromoDiscReturn, bdFullReturn / temFlight.TemFlightPaxNum, bdVAT);
                }
            }

            return true;
        }

        //amnded by ketee 20130625, MainFunction
        public Boolean SellJourney(TemFlight temFlight, TemFlight temFlight2, string LoginType, string LoginName, string LoginPWD, string LoginDomain, string SellSessionID, string OrgID, bool moveJourney = false)//amended by diana 20140211, add parameter for moveJourney true/false
        {
            #region "Declaration"
            IBookingManager bookingAPI = new BookingManagerClient();
            ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");
            var profiler = MiniProfiler.Current;

            DataTable dataClass = dtClass();
            DataTable dtTempClass = dtClass();
            DataTable dtTempClass2 = dtClass();

            DataTable dataClassTrans = dtClassTrans();

            int quantityDepart = 0, quantityReturn = 0, totalPaxADT = 0, totalPaxCHD = 0; //amended by diana 20131103 - add pax for adt and chd

            decimal farePriceDepart = 0, farePriceReturn = 0;
            string signatureDepart = "", signatureReturn = "";
            decimal fullPriceDepart = 0, fullPriceReturn = 0;
            int ctrEnum = 0, qtychild = 0, qtyadult = 0;
            //added by anton 12 oct
            decimal bdchAPT = 0, bdFare = 0, bdAPT = 0, bdPaxFee = 0, bdFuel = 0, bdOth = 0, bdDisc = 0, bdPromoDisc = 0, bdSvc = 0, bdSSR = 0, bdSport = 0, bdMeal = 0, bdBaggage = 0, bdComfort = 0, bdSeat = 0, bdInfant = 0, bdFull = 0, bdFullReturn = 0, bdVAT = 0; // for breakdownfee
            decimal bdchAPTReturn = 0, bdFareReturn = 0, bdAPTReturn = 0, bdPaxFeeReturn = 0, bdFuelReturn = 0, bdOthReturn = 0, bdDiscReturn = 0, bdPromoDiscReturn = 0, bdSvcReturn = 0, bdSSRReturn = 0, bdBaggageReturn = 0, bdSportReturn = 0, bdMealReturn = 0, bdComfortReturn = 0, bdSeatReturn = 0, bdInfantReturn = 0, bdVATReturn = 0; // for breakdownfee


            int id = 0;

            //added by ketee,
            List<PassengerData> lstPassenger = new List<PassengerData>();
            PassengerData rowPassenger;

            //added by ketee, add sell service fees
            string cur = string.Empty;
            bool bError = false;

            int passengerno = 0;
            int prevPNR = 1;

            TemClassofService temClass2 = new TemClassofService();

            SellRequest sellrequest = new SellRequest();
            SellJourneyRequestData sjrd = new SellJourneyRequestData();
            #endregion




            //added by ketee, performance checking, 20170916
            using (profiler.Step("GetTemClassList"))
            {
                dtTempClass = GetTemClassList(temFlight.TemFlightFlightNumber);
                dtTempClass2 = GetTemClassList(temFlight2.TemFlightFlightNumber);
            }

            IEnumerable<TemClassofService> temClasslist = ConvertToIEnum(dtTempClass);
            IEnumerable<TemClassofService> temClasslist2 = ConvertToIEnum(dtTempClass2);

            if (temClasslist != null && temClasslist2 != null)
            {
                log.Info(this, "Tem Class 1 = " + temClasslist.Count() + "; Tem Class 2 =" + temClasslist2.Count());

                if (temClasslist.Count() == temClasslist2.Count())
                {
                    foreach (TemClassofService temClass in temClasslist)
                    {
                        //prevPNR += 1;
                        //added by ketee, performance checking, 20170916
                        using (profiler.Step("apiBooking.AgentLogon for SellSessionID"))
                        {
                            if (moveJourney == false) //not for moving Journey
                            {
                                if (LoginType == "SkyAgent")
                                {
                                    SellSessionID = apiBooking.AgentLogon("SkyAgent", LoginDomain, LoginName, LoginPWD);
                                }
                                else
                                {
                                    SellSessionID = apiBooking.AgentLogon();
                                }
                            }
                            temClass.TemClassSellSignature = SellSessionID;
                            UpdateTemClass(temClass);
                        }


                        sellrequest.Signature = SellSessionID;
                        sellrequest.ContractVersion = 3413;
                        sellrequest.SellRequestData = new SellRequestData();
                        sellrequest.SellRequestData.SellBy = SellBy.Journey;
                        sellrequest.SellRequestData.SellJourneyRequest = new SellJourneyRequest();

                        if (temClass.TempPromoDiscCharge != 0)
                        {
                            sjrd.TypeOfSale = new TypeOfSale();
                            sjrd.TypeOfSale.State = MessageState.New;
                            //sjrd.TypeOfSale.PromotionCode = "AMADEUS";
                            sjrd.TypeOfSale.PromotionCode = temFlight.TemFlightPromoCode.ToUpper().Trim();
                            sjrd.TypeOfSale.FareTypes = new string[1];
                            sjrd.TypeOfSale.FareTypes[0] = "R";
                        }

                        sjrd.SourcePOS = new PointOfSale();
                        sjrd.SourcePOS.State = MessageState.New;
                        sjrd.SourcePOS.OrganizationCode = OrgID;

                        sjrd.PaxCount = Convert.ToInt16(temClass.TemClassPersonNumber);
                        sjrd.CurrencyCode = temFlight.TemFlightCurrencyCode.Trim();
                        //added by ketee
                        cur = temFlight.TemFlightCurrencyCode.Trim();
                        sjrd.Passengers = new Passenger[temClass.TemClassPersonNumber];

                        //check child
                        string adultType = "ADT";

                        //check child and adult
                        int childpax = temClass.TemClassChildNumber;
                        qtychild = childpax;
                        int adultpax = temClass.TemClassAdultNumber;
                        qtyadult = adultpax;

                        //added by diana 20131103 - add numofpax
                        totalPaxADT += qtyadult;
                        totalPaxCHD += qtychild;

                        //added by ketee, performance checking, 20170916
                        using (profiler.Step("Assigning Passenger Details"))
                        {
                            for (int i = 0; i < temClass.TemClassPersonNumber; i++)
                            {
                                //check adult type

                                if (adultpax > 0)
                                {
                                    adultType = "ADT";
                                }
                                else
                                {
                                    adultType = "CHD";
                                }

                                sjrd.Passengers[i] = new Passenger();

                                //sjrd.Passengers[i].PassengerNumber = Convert.ToInt16(passengerno);
                                sjrd.Passengers[i].PassengerNumber = Convert.ToInt16(i);

                                sjrd.Passengers[i].State = MessageState.New;
                                sjrd.Passengers[i].PassengerID = passengerno;
                                sjrd.Passengers[i].PassengerTypeInfos = new PassengerTypeInfo[1];
                                sjrd.Passengers[i].PassengerTypeInfos[0] = new PassengerTypeInfo();

                                if (adultType == "ADT")
                                    sjrd.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse("1994-1-1");
                                else if (adultType == "CHD")
                                {
                                    DateTime dtTime = DateTime.Now.AddYears(-5);
                                    sjrd.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse(dtTime.Year + "-1-1");
                                }

                                sjrd.Passengers[i].PassengerTypeInfos[0].PaxType = adultType;
                                sjrd.Passengers[i].PassengerTypeInfos[0].State = MessageState.New;
                                sjrd.Passengers[i].PseudoPassenger = false;

                                //added by ketee
                                rowPassenger = new PassengerData();

                                //rowPassenger.PassengerID = passengerno.ToString();
                                rowPassenger.PassengerID = i.ToString();

                                rowPassenger.FirstName = "TBA";
                                rowPassenger.LastName = "TBA";
                                rowPassenger.PassportNo = "TBA";
                                rowPassenger.DOB = DateTime.Parse("1900-01-01");
                                rowPassenger.SyncCreate = DateTime.Now;
                                rowPassenger.LastSyncBy = "System";
                                if (adultType == "CHD")
                                {
                                    rowPassenger.Title = "Chd";
                                }

                                //ongoing, added by diana, 20161225
                                if (temFlight.TemFlightCarrierCode == "D7" || temFlight.TemFlightCarrierCode == "XJ" || temFlight.TemFlightCarrierCode == "ST")
                                {
                                    rowPassenger.MaxChange = 1;
                                    rowPassenger.MaxPax1 = qtyadult + qtychild;
                                    rowPassenger.MaxPax2 = 0;
                                }
                                else
                                {
                                    rowPassenger.MaxChange = 1;
                                    rowPassenger.MaxPax1 = (int)(0.3 * (qtyadult + qtychild));
                                    rowPassenger.MaxPax2 = 0;
                                }

                                rowPassenger.RecordLocator = prevPNR.ToString();

                                lstPassenger.Add(rowPassenger);

                                passengerno++;
                                //count adultpax --
                                adultpax--;
                            }
                        }


                        //added by ketee
                        if (lstPassenger != null)
                        {
                            HttpContext.Current.Session.Remove("listPassengers");
                            HttpContext.Current.Session.Add("listPassengers", lstPassenger);
                        }

                        prevPNR += 2;

                        //added by ketee, performance checking, 20170916
                        using (profiler.Step("Assigning srSegment Details"))
                        {
                            sjrd.Journeys = new SellJourney[2];
                            sjrd.Journeys[0] = new SellJourney();
                            sjrd.Journeys[0].State = MessageState.New;
                            sjrd.Journeys[0].NotForGeneralUse = false;
                            if (temFlight.TemFlightTransit != "")
                            { sjrd.Journeys[0].Segments = new SellSegment[2]; }
                            else { sjrd.Journeys[0].Segments = new SellSegment[1]; }
                            SellSegment srSegment = new SellSegment();
                            srSegment.State = MessageState.New;
                            srSegment.DepartureStation = temFlight.TemFlightDeparture.Trim();

                            if (temFlight.TemFlightTransit != "")
                            {
                                srSegment.ArrivalStation = temFlight.TemFlightTransit.Trim();
                            }
                            else
                            {
                                srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                            }
                            srSegment.ActionStatusCode = "NN";
                            srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd);
                            srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta);
                            srSegment.FlightDesignator = new FlightDesignator();
                            srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber.Trim().PadLeft(4, ' ');
                            srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
                            srSegment.Fare = new SellFare();
                            srSegment.Fare.State = MessageState.New;
                            srSegment.Fare.ClassOfService = temClass.TemClassClass.Trim();
                            log.Info(this, "Class of Service I(depart) : " + temClass.TemClassClass.Trim() + "SellSessionID : " + SellSessionID);
                            srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode.Trim();

                            ////added by diana 20140408, reduce ~~ to ~
                            //String[] FareSellKey = temClass.TemClassFareSellKey.Split('~');
                            //string NewFareSellKey = "";
                            //foreach (string sellKey in FareSellKey)
                            //{
                            //    if (sellKey != "")
                            //    {
                            //        if (NewFareSellKey != "")
                            //        {
                            //            NewFareSellKey += "~";
                            //        }
                            //        NewFareSellKey += sellKey;
                            //    }
                            //}

                            srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey.Split('~')[4].ToString();
                            srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey.Split('~')[3].ToString();

                            srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey.Split('~')[6]);
                            srSegment.Fare.FareClassOfService = temClass.TemClassClass.Trim();
                            srSegment.Fare.IsAllotmentMarketFare = false;

                            switch (temClass.TempFareApplicationType.ToString().ToLower())
                            {
                                case "route":
                                    srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                    break;
                                case "sector":
                                    srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                                    break;
                                case "governing":
                                    srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                                    break;
                                default:
                                    srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                    //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                                    break;
                            }
                            sjrd.Journeys[0].Segments[0] = srSegment;

                            if (temFlight.TemFlightTransit != "")
                            {
                                srSegment = new SellSegment();
                                srSegment.State = MessageState.New;
                                srSegment.DepartureStation = temFlight.TemFlightTransit.Trim();
                                srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                                srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd2);
                                srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta2);
                                srSegment.ActionStatusCode = "NU";
                                srSegment.FlightDesignator = new FlightDesignator();

                                srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber2.Trim();
                                srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();

                                srSegment.Fare = new SellFare();
                                srSegment.Fare.State = MessageState.New;
                                srSegment.Fare.ClassOfService = temClass.TemClassClass2.Trim();
                                log.Info(this, "Class of Service II(depart) : " + temClass.TemClassClass2.Trim() + "SellSessionID : " + SellSessionID);
                                srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();
                                srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey2.Split('~')[4].ToString();
                                srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey2.Split('~')[3].ToString();

                                srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey2.Split('~')[6]);
                                srSegment.Fare.FareClassOfService = temClass.TemClassClass2.Trim();
                                srSegment.Fare.IsAllotmentMarketFare = false;

                                switch (temClass.TempFareApplicationType2.ToString().ToLower())
                                {
                                    case "route":
                                        srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                        break;
                                    case "sector":
                                        srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                                        break;
                                    case "governing":
                                        srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                                        break;
                                    default:
                                        srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                        //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                                        break;
                                }
                                sjrd.Journeys[0].Segments[1] = srSegment;

                            }

                            //fill data for new dataClass
                            quantityDepart = temClass.TemClassPersonNumber;
                            farePriceDepart = Convert.ToDecimal(temClass.TemClassClassPrice);
                            fullPriceDepart = Convert.ToDecimal(temClass.TemClassFullPrice);
                            signatureDepart = SellSessionID;

                            temClass2 = temClasslist2.ElementAt(ctrEnum);

                            temClass2.TemClassSellSignature = SellSessionID;// SessionManager._signature;
                            UpdateTemClass(temClass2);

                            sjrd.Journeys[1] = new SellJourney();
                            sjrd.Journeys[1].State = MessageState.New;
                            sjrd.Journeys[1].NotForGeneralUse = false;
                            if (temFlight2.TemFlightTransit != "")
                            { sjrd.Journeys[1].Segments = new SellSegment[2]; }
                            else { sjrd.Journeys[1].Segments = new SellSegment[1]; }
                            SellSegment srSegment1 = new SellSegment();
                            srSegment1.State = MessageState.New;
                            srSegment1.DepartureStation = temFlight2.TemFlightDeparture.Trim();

                            if (temFlight2.TemFlightTransit != "")
                            {
                                srSegment1.ArrivalStation = temFlight2.TemFlightTransit.Trim();
                            }
                            else
                            {
                                srSegment1.ArrivalStation = temFlight2.TemFlightArrival.Trim();
                            }

                            srSegment1.ActionStatusCode = "NU";
                            srSegment1.STD = Convert.ToDateTime(temFlight2.TemFlightStd);
                            srSegment1.STA = Convert.ToDateTime(temFlight2.TemFlightSta);
                            srSegment1.FlightDesignator = new FlightDesignator();
                            srSegment1.FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber.Trim().PadLeft(4, ' ');
                            srSegment1.FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode.Trim();
                            srSegment1.Fare = new SellFare();
                            srSegment1.Fare.State = MessageState.New;
                            srSegment1.Fare.ClassOfService = temClass2.TemClassClass.Trim();
                            log.Info(this, "Class of Service I(return) : " + temClass2.TemClassClass.Trim() + "SellSessionID : " + SellSessionID);
                            srSegment1.Fare.CarrierCode = temFlight2.TemFlightCarrierCode.Trim();
                            srSegment1.Fare.RuleNumber = temClass2.TemClassFareSellKey.Split('~')[4].ToString();// "AAB1";
                            srSegment1.Fare.FareBasisCode = temClass2.TemClassFareSellKey.Split('~')[3].ToString();// "A00H00";

                            srSegment1.Fare.FareSequence = Convert.ToInt16(temClass2.TemClassFareSellKey.Split('~')[6]);
                            srSegment1.Fare.FareClassOfService = temClass2.TemClassClass.Trim();
                            srSegment1.Fare.IsAllotmentMarketFare = false;

                            switch (temClass2.TempFareApplicationType.ToString().ToLower())
                            {
                                case "route":
                                    srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                                    break;
                                case "sector":
                                    srSegment1.Fare.FareApplicationType = FareApplicationType.Sector;
                                    break;
                                case "governing":
                                    srSegment1.Fare.FareApplicationType = FareApplicationType.Governing;
                                    break;
                                default:
                                    srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                                    //srSegment1.Fare.FareApplicationType = FareApplicationType.Unmapped;
                                    break;
                            }
                            sjrd.Journeys[1].Segments[0] = srSegment1;

                            if (temFlight2.TemFlightTransit != "")
                            {
                                srSegment1 = new SellSegment();
                                srSegment1.State = MessageState.New;
                                srSegment1.ActionStatusCode = "NU";
                                srSegment1.DepartureStation = temFlight2.TemFlightTransit.Trim();
                                srSegment1.ArrivalStation = temFlight2.TemFlightArrival.Trim();
                                srSegment1.STD = Convert.ToDateTime(temFlight2.TemFlightStd2);
                                srSegment1.STA = Convert.ToDateTime(temFlight2.TemFlightSta2);
                                srSegment1.FlightDesignator = new FlightDesignator();

                                srSegment1.FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber2.Trim();
                                srSegment1.FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode2.Trim();

                                srSegment1.Fare = new SellFare();
                                srSegment1.Fare.State = MessageState.New;
                                srSegment1.Fare.ClassOfService = temClass2.TemClassClass2.Trim();
                                log.Info(this, "Class of Service II(return) : " + temClass2.TemClassClass2.Trim() + "SellSessionID : " + SellSessionID);
                                srSegment1.Fare.CarrierCode = temFlight2.TemFlightCarrierCode2.Trim();
                                srSegment1.Fare.RuleNumber = temClass2.TemClassFareSellKey2.Split('~')[4].ToString();
                                srSegment1.Fare.FareBasisCode = temClass2.TemClassFareSellKey2.Split('~')[3].ToString();

                                srSegment1.Fare.FareSequence = Convert.ToInt16(temClass2.TemClassFareSellKey2.Split('~')[6]);
                                srSegment1.Fare.FareClassOfService = temClass2.TemClassClass2.Trim();
                                srSegment1.Fare.IsAllotmentMarketFare = false;

                                switch (temClass2.TempFareApplicationType2.ToString().ToLower())
                                {
                                    case "route":
                                        srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                                        break;
                                    case "sector":
                                        srSegment1.Fare.FareApplicationType = FareApplicationType.Sector;
                                        break;
                                    case "governing":
                                        srSegment1.Fare.FareApplicationType = FareApplicationType.Governing;
                                        break;
                                    default:
                                        srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                                        //srSegment1.Fare.FareApplicationType = FareApplicationType.Unmapped;
                                        break;
                                }
                                sjrd.Journeys[1].Segments[1] = srSegment1;

                            }
                            //fill data for new dataClass
                            quantityReturn = temClass2.TemClassPersonNumber;
                            farePriceReturn = Convert.ToDecimal(temClass2.TemClassClassPrice);
                            fullPriceReturn = Convert.ToDecimal(temClass2.TemClassFullPrice);
                            signatureReturn = SellSessionID;

                            ctrEnum += 1;
                        }

                        if (sjrd != null)
                        {
                            try
                            {

                                //string requeststring = GetXMLString(sellrequest);

                                using (profiler.Step("bookingAPI.Sell Journey"))
                                {
                                    sellrequest.SellRequestData.SellJourneyRequest.SellJourneyRequestData = sjrd;
                                    SellResponse response = bookingAPI.Sell(sellrequest);
                                }

                                //string xml = GetXMLString(response);
                                //added by ketee, add service fees
                                //foreach (PassengerData rowpassenger in lstPassenger)
                                //{


                                //remarked by diana 20170201, no more service fee
                                //if (moveJourney == false)
                                //{
                                //    if (AddServiceFees(SellSessionID, cur, 0) == false)
                                //    {
                                //        bError = true;
                                //        log.Warning(this, "Add fees failed: " + SellSessionID);
                                //        break;
                                //    }
                                //}

                                //}

                                //fill breakdown fee
                                Navitaire.BookingManager.Booking book = new Navitaire.BookingManager.Booking();
                                using (profiler.Step("GetBookingFromState"))
                                {
                                    book = GetBookingFromState(SellSessionID);
                                    HttpContext.Current.Session.Add("signature", SellSessionID);
                                }


                                
                                //string boolxml = GetXMLString(book);

                                //Get Currecy Rate List 20130625
                                //added by ketee, performance checking, 20170916
                                decimal currRate = 1;
                                using (profiler.Step("GetExternalRate Session:" + SellSessionID))
                                {

                                    Navitaire.UtilitiesManager.GetExternalRatesListResponseData RateResponse = apiBooking.GetExternalRateList(SellSessionID);
                                    string curr = book.CurrencyCode;
                                    //string req = GetXMLString(RateResponse);
                                    if (curr != "MYR")
                                    {
                                        for (int i = 0; i < RateResponse.ExternalRateList.Length; i++)
                                        {
                                            if (RateResponse.ExternalRateList[i].QuotedCurrency == curr && RateResponse.ExternalRateList[i].CollectedCurrency == "MYR")
                                            {
                                                currRate = RateResponse.ExternalRateList[i].ExchangeRate;
                                            }
                                        }
                                    }
                                }

                                //depart
                                int segCount = book.Journeys[0].Segments.Length;
                                //renew temClass
                                ClassPrice classPriceDepart = new ClassPrice();

                                //added by ketee, performance checking, 20170916
                                using (profiler.Step("Store iDepart Departure,Transit,Arrival,OtherFees,OthSellJourney Data"))
                                {
                                    for (int iDepart = 0; iDepart < segCount; iDepart++)
                                    {
                                        //added by diana 20131031 - added condition if paxfare length is more than 0
                                        if (book.Journeys[0].Segments[iDepart].Fares[0].PaxFares.Length > 0)
                                        {
                                            PaxFare paxFare = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];
                                            PaxFare paxFareChd;
                                            if (temClass.TemClassAdultNumber > 0)
                                            {
                                                HttpContext.Current.Session.Add("getFlightDepartureData", temFlight.TemFlightDeparture);
                                                HttpContext.Current.Session.Add("getFlightTransitData", temFlight.TemFlightTransit);
                                                HttpContext.Current.Session.Add("getFlightArrivalData", temFlight.TemFlightArrival);
                                                AddFarePrice(paxFare, temClass, ref classPriceDepart, "ADT");

                                                if (HttpContext.Current.Session["dataTransFeesOthers"] != null)
                                                {
                                                    DataTable dataTF = dtTransFees();
                                                    dataTF = (DataTable)HttpContext.Current.Session["dataTransFeesOthers"];

                                                    HttpContext.Current.Session.Add("dataTFOthSellJourney", dataTF);
                                                }
                                            }

                                            if (temClass.TemClassChildNumber > 0)
                                            {
                                                if (book.Journeys[0].Segments[iDepart].Fares[0].PaxFares.Length > 1)
                                                    paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[1];
                                                else
                                                    paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];

                                                //if (temFlight.TemFlightDeparture.ToString().ToUpper() != "HKG" && temFlight.TemFlightArrival.ToString().ToUpper() != "HKG")
                                                //{
                                                //    paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];
                                                //}
                                                HttpContext.Current.Session.Add("getFlightDepartureData", temFlight.TemFlightDeparture);
                                                HttpContext.Current.Session.Add("getFlightTransitData", temFlight.TemFlightTransit);
                                                HttpContext.Current.Session.Add("getFlightArrivalData", temFlight.TemFlightArrival);
                                                AddFarePrice(paxFareChd, temClass, ref classPriceDepart, "CHD");

                                                if (HttpContext.Current.Session["dataTransFeesOthers"] != null)
                                                {
                                                    DataTable dataTF = dtTransFees();
                                                    dataTF = (DataTable)HttpContext.Current.Session["dataTransFeesOthers"];

                                                    HttpContext.Current.Session.Add("dataTFOthSellJourney", dataTF);
                                                }
                                            }
                                        }
                                    }
                                }

                                //remove divide by 2 as service fees apply to 1st booking only
                                //bdSvc += book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2;
                                //classPriceDepart.ServChrg = (book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2) * temClass.TemClassPersonNumber;


                                //amended by diana 20140121 - add initial value to 0, then add it
                                classPriceDepart.ServChrg = 0;
                                classPriceDepart.SSRChrg = 0;
                                classPriceDepart.SeatChrg = 0;
                                classPriceDepart.InfantChrg = 0;
                                classPriceDepart.ServVAT = 0;

                                //load service charges passenger
                                //added by ketee, performance checking, 20170916
                                using (profiler.Step("load service charges passenger"))
                                {
                                    if (book.Passengers[0].PassengerFees.Length > 0 && book.Passengers[0].PassengerFees[0].ServiceCharges.Length > 0)
                                    {
                                        for (int i = 0; i < book.Passengers[0].PassengerFees[0].ServiceCharges.Length; i++)
                                        {
                                            switch (book.Passengers[0].PassengerFees[0].ServiceCharges[i].ChargeCode.ToString().ToUpper())
                                            {
                                                case "SVCF":
                                                    classPriceDepart.ServChrg += (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                                    //classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                                                    break;
                                                case "VAT":
                                                    classPriceDepart.ServVAT += (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                                    //classPriceDepart.FullPrice += classPriceDepart.ServVAT;
                                                    break;
                                                default:
                                                    classPriceDepart.ServChrg += (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                                    //classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                                                    break;
                                            }
                                        }
                                    }
                                }

                                classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                                classPriceDepart.FullPrice += classPriceDepart.SSRChrg;
                                classPriceDepart.FullPrice += classPriceDepart.SeatChrg;
                                classPriceDepart.FullPrice += classPriceDepart.InfantChrg;
                                classPriceDepart.FullPrice += classPriceDepart.ServVAT;


                                //bdFull = bdFull + classPriceDepart.FullPrice;

                                classPriceDepart.ClassID = temClass.TemClassId;

                                //return breakdown fee
                                ClassPrice classPriceReturn = new ClassPrice();

                                segCount = book.Journeys[1].Segments.Length;
                                classPriceReturn.ClassID = temClass2.TemClassId;

                                //added by ketee, performance checking, 20170916
                                using (profiler.Step("Store iReturn Departure,Transit,Arrival,OtherFees,OthSellJourney Data"))
                                {
                                    for (int iReturn = 0; iReturn < segCount; iReturn++)
                                    {
                                        //added by diana 20131031 - added condition if paxfare length is more than 0
                                        if (book.Journeys[1].Segments[iReturn].Fares[0].PaxFares.Length > 0)
                                        {
                                            PaxFare paxFare = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[0];
                                            PaxFare paxFareChd;

                                            if (temClass2.TemClassAdultNumber > 0)
                                            {
                                                HttpContext.Current.Session.Add("getFlightDepartureData", temFlight.TemFlightArrival);
                                                HttpContext.Current.Session.Add("getFlightTransitData", temFlight.TemFlightTransit);
                                                HttpContext.Current.Session.Add("getFlightArrivalData", temFlight.TemFlightDeparture);
                                                AddFarePrice(paxFare, temClass2, ref classPriceReturn, "ADT");

                                                if (HttpContext.Current.Session["dataTransFeesOthers"] != null)
                                                {
                                                    DataTable dataTF = dtTransFees();
                                                    dataTF = (DataTable)HttpContext.Current.Session["dataTransFeesOthers"];

                                                    HttpContext.Current.Session.Add("dataTFOthSellJourney", dataTF);
                                                }
                                            }

                                            if (temClass2.TemClassChildNumber > 0)
                                            {
                                                if (book.Journeys[1].Segments[iReturn].Fares[0].PaxFares.Length > 1)
                                                    paxFareChd = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[1];
                                                else
                                                    paxFareChd = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[0];

                                                //if (temFlight.TemFlightDeparture.ToString().ToUpper() != "HKG" && temFlight.TemFlightArrival.ToString().ToUpper() != "HKG")
                                                //{
                                                //    paxFareChd = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[0];
                                                //}
                                                HttpContext.Current.Session.Add("getFlightDepartureData", temFlight.TemFlightArrival);
                                                HttpContext.Current.Session.Add("getFlightTransitData", temFlight.TemFlightTransit);
                                                HttpContext.Current.Session.Add("getFlightArrivalData", temFlight.TemFlightDeparture);
                                                AddFarePrice(paxFareChd, temClass2, ref classPriceReturn, "CHD");

                                                if (HttpContext.Current.Session["dataTransFeesOthers"] != null)
                                                {
                                                    DataTable dataTF = dtTransFees();
                                                    dataTF = (DataTable)HttpContext.Current.Session["dataTransFeesOthers"];

                                                    HttpContext.Current.Session.Add("dataTFOthSellJourney", dataTF);
                                                }
                                            }
                                        }
                                    }
                                }

                                //added by ketee, performance checking, 20170916
                                using (profiler.Step("Store dataClassTrans"))
                                {
                                    //remark, as service charge only apply to 1st segment
                                    //bdSvcReturn += book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2;
                                    //classPriceReturn.ServChrg = (book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2) * temClass2.TemClassPersonNumber;
                                    //bdSvcReturn += 0;
                                    classPriceReturn.ServChrg = 0;
                                    classPriceReturn.SSRChrg = 0;
                                    classPriceReturn.SeatChrg = 0;
                                    classPriceReturn.InfantChrg = 0;
                                    classPriceReturn.FullPrice += classPriceReturn.ServChrg + classPriceReturn.SSRChrg + classPriceReturn.SeatChrg + classPriceReturn.InfantChrg;

                                    //bdFullReturn = bdFullReturn + classPriceReturn.FullPrice;

                                    //added by ketee , curr rate 20130625
                                    classPriceDepart.CurrencyRate = currRate;
                                    classPriceReturn.CurrencyRate = currRate;

                                    UpdateClassPrice(classPriceDepart);
                                    UpdateClassPrice(classPriceReturn);

                                    DataRow row;
                                    row = dataClassTrans.NewRow();
                                    row["Quantity"] = quantityDepart;
                                    row["FarePrice"] = (classPriceDepart.FarePrice + classPriceReturn.FarePrice);
                                    //commented by diana 20131104
                                    //private void ProcessPairedFareJhn(ClassFare[] GoingFare, ClassFare[] ReturnFare,row["FarePrice"] = (classPriceDepart.FarePrice + classPriceReturn.FarePrice) / temClass.TemClassPersonNumber;
                                    row["FullPrice"] = (classPriceDepart.FullPrice + classPriceReturn.FullPrice);
                                    row["SellSignature"] = signatureDepart;
                                    //added by ketee, 20121016
                                    row["ServChrg"] = classPriceDepart.ServChrg + classPriceReturn.ServChrg;
                                    row["SSRChrg"] = classPriceDepart.SSRChrg + classPriceReturn.SSRChrg;
                                    row["SeatChrg"] = classPriceDepart.SeatChrg + classPriceReturn.SeatChrg;
                                    row["InfantChrg"] = classPriceDepart.InfantChrg + classPriceReturn.InfantChrg;
                                    //added by ketee, VAT
                                    row["ServVAT"] = classPriceDepart.ServVAT;
                                    row["DetailCollectedAmt"] = 0;
                                    row["RecordLocator"] = "";
                                    //added by ketee 20130625 currrate
                                    row["CurrencyRate"] = classPriceDepart.CurrencyRate;

                                    //added by ketee, breakdown fees 20130625
                                    bdPaxFee += classPriceDepart.PaxFeeChrg;
                                    bdAPT += classPriceDepart.TaxChrg;
                                    bdchAPT += classPriceDepart.TAxChrgChd;
                                    bdFare += classPriceDepart.FarePrice;
                                    bdFuel += classPriceDepart.FuelChrg;
                                    bdFull += classPriceDepart.FullPrice;
                                    bdOth += classPriceDepart.OthChrg;
                                    bdDisc += classPriceDepart.DiscChrg;
                                    bdPromoDisc += classPriceDepart.PromoDiscChrg;
                                    bdSvc += classPriceDepart.ServChrg;
                                    bdSSR += classPriceDepart.SSRChrg;
                                    bdSeat += classPriceDepart.SeatChrg;
                                    bdInfant += classPriceDepart.InfantChrg;
                                    bdVAT += classPriceDepart.ServVAT;

                                    bdPaxFeeReturn += classPriceReturn.PaxFeeChrg;
                                    bdAPTReturn += classPriceReturn.TaxChrg;
                                    bdchAPTReturn += classPriceReturn.TAxChrgChd;
                                    bdFareReturn += classPriceReturn.FarePrice;
                                    bdFuelReturn += classPriceReturn.FuelChrg;
                                    bdFullReturn += classPriceReturn.FullPrice;
                                    bdOthReturn += classPriceReturn.OthChrg;
                                    bdDiscReturn += classPriceReturn.DiscChrg;
                                    bdPromoDiscReturn += classPriceReturn.PromoDiscChrg;
                                    bdSvcReturn += classPriceReturn.ServChrg;
                                    bdSSRReturn += classPriceReturn.SSRChrg;
                                    bdSeatReturn += classPriceReturn.SeatChrg;
                                    bdInfantReturn += classPriceReturn.InfantChrg;
                                    bdVAT += classPriceReturn.ServVAT;

                                    dataClassTrans.Rows.Add(row);
                                }

                                //save new data class into session
                                if (dataClassTrans.Rows.Count > 0)
                                {
                                    HttpContext.Current.Session.Remove("dataClassTrans");
                                    HttpContext.Current.Session.Add("dataClassTrans", dataClassTrans);
                                }
                            }
                            catch (Exception ex)
                            {
                                bError = true;
                                HttpContext.Current.Session["errormsg"] = ex.ToString();
                                log.Error(this, ex);
                            }
                        }
                    }
                    if (bError)
                    {
                        log.Warning(this, "Sell Journey failed.");
                        return false;
                    }
                }
                else
                {
                    //fares not equal
                }
            }

            //save new data class into session
            //added by ketee, performance checking, 20170916
            using (profiler.Step("Save new data class into session"))
            {
                if (dataClassTrans.Rows.Count > 0)
                {
                    HttpContext.Current.Session.Remove("dataClassTrans");
                    HttpContext.Current.Session.Add("dataClassTrans", dataClassTrans);

                    //depart breakdown

                    DataTable dataBreakdownFee = dtBreakdownFee();
                    DataRow rowBD;
                    rowBD = dataBreakdownFee.NewRow();
                    //added child fare 
                    rowBD["Fare"] = bdFare / (totalPaxADT + totalPaxCHD);
                    if (totalPaxCHD > 0)
                    {
                        rowBD["ChApt"] = bdchAPT / totalPaxCHD;
                    }
                    else
                    {
                        rowBD["ChApt"] = 0;
                    }

                    rowBD["Apt"] = bdAPT / totalPaxADT;
                    rowBD["PaxFee"] = bdPaxFee;
                    rowBD["Fuel"] = bdFuel;
                    rowBD["Svc"] = bdSvc;
                    rowBD["SSR"] = bdSSR;
                    rowBD["Baggage"] = bdBaggage;
                    rowBD["Meal"] = bdMeal;
                    rowBD["Sport"] = bdSport;
                    rowBD["Comfort"] = bdComfort;
                    rowBD["Seat"] = bdSeat;
                    //added by ketee , VAT
                    rowBD["VAT"] = bdVAT;
                    rowBD["Oth"] = bdOth;
                    rowBD["Disc"] = bdDisc;
                    rowBD["PromoDisc"] = bdPromoDisc;
                    rowBD["Qty"] = qtyadult + " Adult " + "/" + qtychild + " Child";
                    dataBreakdownFee.Rows.Add(rowBD);

                    HttpContext.Current.Session.Remove("dataBDFeeDepart");
                    HttpContext.Current.Session.Add("dataBDFeeDepart", dataBreakdownFee);

                    //return                

                    DataTable dataBreakdownFeeReturn = dtBreakdownFee();
                    DataRow rowBDReturn;
                    rowBDReturn = dataBreakdownFeeReturn.NewRow();

                    rowBDReturn["Fare"] = bdFareReturn / (totalPaxADT + totalPaxCHD);
                    if (totalPaxCHD > 0)
                    {
                        rowBDReturn["ChApt"] = bdchAPTReturn / totalPaxCHD;
                    }
                    else
                    {
                        rowBDReturn["ChApt"] = 0;
                    }

                    rowBDReturn["Apt"] = bdAPTReturn / totalPaxADT;
                    rowBDReturn["PaxFee"] = bdPaxFeeReturn;
                    rowBDReturn["Fuel"] = bdFuelReturn;
                    rowBDReturn["Svc"] = bdSvcReturn;
                    rowBDReturn["SSR"] = bdSSRReturn;
                    rowBD["Baggage"] = bdBaggageReturn;
                    rowBD["Meal"] = bdMealReturn;
                    rowBD["Sport"] = bdSportReturn;
                    rowBD["Comfort"] = bdComfortReturn;
                    rowBDReturn["Seat"] = bdSeatReturn;
                    //added by ketee, VAT
                    rowBDReturn["VAT"] = 0;
                    rowBDReturn["Oth"] = bdOthReturn;
                    rowBDReturn["Disc"] = bdDiscReturn;
                    rowBDReturn["PromoDisc"] = bdPromoDiscReturn;
                    rowBDReturn["Qty"] = qtyadult + "Adult" + ":" + qtychild + "Child";
                    dataBreakdownFeeReturn.Rows.Add(rowBDReturn);

                    HttpContext.Current.Session.Remove("dataBDFeeReturn");
                    HttpContext.Current.Session.Add("dataBDFeeReturn", dataBreakdownFeeReturn);

                    UpdateFlightPrice(temFlight.TemFlightId, decimal.Parse(rowBD["Fare"].ToString()), bdFull, bdAPT, bdPaxFee, bdchAPT, bdFuel, bdSvc, bdSSR, bdSeat, bdOth, bdDisc, bdPromoDisc, bdFull / temFlight.TemFlightPaxNum, bdVAT);
                    UpdateFlightPrice(temFlight2.TemFlightId, decimal.Parse(rowBDReturn["Fare"].ToString()), bdFullReturn, bdAPTReturn, bdPaxFeeReturn, bdchAPTReturn, bdFuelReturn, bdSvcReturn, bdSSRReturn, bdSeatReturn, bdOthReturn, bdDiscReturn, bdPromoDiscReturn, bdFullReturn / temFlight.TemFlightPaxNum, bdVAT);
                }
            }

            return true;
        }

        public Boolean SellJourneyAddInfant(int InfantNum, TemFlight temFlight, TemFlight temFlight2, string LoginType, string LoginName, string LoginPWD, string LoginDomain, string SellSessionID, bool moveJourney = false)//amended by diana 20140211, add parameter for moveJourney true/false
        {
            IBookingManager bookingAPI = new BookingManagerClient();
            ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");

            DataTable dataClass = dtClass();
            DataTable dtTempClass = dtClass();
            DataTable dtTempClass2 = dtClass();

            DataTable dataClassTrans = dtClassTrans();

            int quantityDepart = 0, quantityReturn = 0, totalPaxADT = 0, totalPaxCHD = 0; //amended by diana 20131103 - add pax for adt and chd

            decimal farePriceDepart = 0, farePriceReturn = 0;
            string signatureDepart = "", signatureReturn = "";
            decimal fullPriceDepart = 0, fullPriceReturn = 0;
            int ctrEnum = 0, qtychild = 0, qtyadult = 0;
            //added by anton 12 oct
            decimal bdchAPT = 0, bdFare = 0, bdAPT = 0, bdPaxFee = 0, bdFuel = 0, bdOth = 0, bdInfant = 0, bdDisc = 0, bdPromoDisc = 0, bdSvc = 0, bdSSR = 0, bdSport = 0, bdMeal = 0, bdBaggage = 0, bdComfort = 0, bdSeat = 0, bdFull = 0, bdFullReturn = 0, bdVAT = 0; // for breakdownfee
            decimal bdchAPTReturn = 0, bdFareReturn = 0, bdAPTReturn = 0, bdPaxFeeReturn = 0, bdInfaantReturn = 0, bdFuelReturn = 0, bdOthReturn = 0, bdDiscReturn = 0, bdPromoDiscReturn = 0, bdSvcReturn = 0, bdSSRReturn = 0, bdBaggageReturn = 0, bdSportReturn = 0, bdMealReturn = 0, bdComfortReturn = 0, bdSeatReturn = 0, bdInfantReturn = 0, bdVATReturn = 0; // for breakdownfee

            dtTempClass = GetTemClassList(temFlight.TemFlightFlightNumber);
            dtTempClass2 = GetTemClassList(temFlight2.TemFlightFlightNumber);
            IEnumerable<TemClassofService> temClasslist = ConvertToIEnum(dtTempClass);
            IEnumerable<TemClassofService> temClasslist2 = ConvertToIEnum(dtTempClass2);
            int id = 0;

            //added by ketee,
            List<PassengerData> lstPassenger = new List<PassengerData>();
            List<PassengerInfantData> lstPassengerInfant = new List<PassengerInfantData>();
            PassengerData rowPassenger;

            //added by ketee, add sell service fees
            string cur = string.Empty;
            bool bError = false;

            int passengerno = 0;
            int prevPNR = 1;
            int countinfant = 0;
            int sellalready = 0;
            if (moveJourney == false) //not for moving Journey
            {
                if (LoginType == "SkyAgent")
                {

                    SellSessionID = apiBooking.AgentLogon("SkyAgent", LoginDomain, LoginName, LoginPWD);
                }
                else
                {
                    SellSessionID = apiBooking.AgentLogon();
                }
            }

            SellRequest sellrequest = new SellRequest();
            SellJourneyRequestData sjrd = new SellJourneyRequestData();

            log.Info(this, "Tem Class 1 = " + temClasslist.Count() + "; Tem Class 2 =" + temClasslist2.Count());

            if (temClasslist.Count() == temClasslist2.Count())
            {
                foreach (TemClassofService temClass in temClasslist)
                {
                    //prevPNR += 1;
                    countinfant += 1;
                    if (moveJourney == false) //not for moving Journey
                    {
                        if (LoginType == "SkyAgent")
                        {

                            SellSessionID = apiBooking.AgentLogon("SkyAgent", LoginDomain, LoginName, LoginPWD);
                        }
                        else
                        {
                            SellSessionID = apiBooking.AgentLogon();
                        }
                    }
                    temClass.TemClassSellSignature = SellSessionID;
                    UpdateTemClass(temClass);

                    sellrequest.Signature = SellSessionID;
                    sellrequest.ContractVersion = 3413;
                    sellrequest.SellRequestData = new SellRequestData();
                    sellrequest.SellRequestData.SellBy = SellBy.Journey;
                    sellrequest.SellRequestData.SellJourneyRequest = new SellJourneyRequest();

                    if (temClass.TempPromoDiscCharge != 0)
                    {
                        sjrd.TypeOfSale = new TypeOfSale();
                        sjrd.TypeOfSale.State = MessageState.New;
                        //sjrd.TypeOfSale.PromotionCode = "AMADEUS";
                        sjrd.TypeOfSale.PromotionCode = temFlight.TemFlightPromoCode.ToUpper().Trim();
                        sjrd.TypeOfSale.FareTypes = new string[1];
                        sjrd.TypeOfSale.FareTypes[0] = "R";
                    }

                    sjrd.PaxCount = Convert.ToInt16(temClass.TemClassPersonNumber);
                    sjrd.CurrencyCode = temFlight.TemFlightCurrencyCode.Trim();
                    //added by ketee
                    cur = temFlight.TemFlightCurrencyCode.Trim();
                    sjrd.Passengers = new Passenger[temClass.TemClassPersonNumber];


                    //check child
                    string adultType = "ADT";

                    //check child and adult
                    int childpax = temClass.TemClassChildNumber;
                    qtychild = childpax;
                    int adultpax = temClass.TemClassAdultNumber;
                    qtyadult = adultpax;

                    //added by diana 20131103 - add numofpax
                    totalPaxADT += qtyadult;
                    totalPaxCHD += qtychild;

                    for (int i = 0; i < temClass.TemClassPersonNumber; i++)
                    {
                        //check adult type

                        if (adultpax > 0)
                        {
                            adultType = "ADT";
                        }
                        else
                        {
                            adultType = "CHD";
                        }

                        sjrd.Passengers[i] = new Passenger();

                        //sjrd.Passengers[i].PassengerNumber = Convert.ToInt16(passengerno);
                        sjrd.Passengers[i].PassengerNumber = Convert.ToInt16(i);

                        sjrd.Passengers[i].State = MessageState.New;
                        sjrd.Passengers[i].PassengerID = passengerno;
                        sjrd.Passengers[i].PassengerTypeInfos = new PassengerTypeInfo[1];
                        sjrd.Passengers[i].PassengerTypeInfos[0] = new PassengerTypeInfo();

                        if (adultType == "ADT")
                            sjrd.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse("1994-1-1");
                        else if (adultType == "CHD")
                        {
                            DateTime dtTime = DateTime.Now.AddYears(-5);
                            sjrd.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse(dtTime.Year + "-1-1");
                        }

                        sjrd.Passengers[i].PassengerTypeInfos[0].PaxType = adultType;
                        sjrd.Passengers[i].PassengerTypeInfos[0].State = MessageState.New;
                        sjrd.Passengers[i].PseudoPassenger = false;

                        //added by ketee
                        rowPassenger = new PassengerData();

                        //rowPassenger.PassengerID = passengerno.ToString();
                        rowPassenger.PassengerID = i.ToString();

                        rowPassenger.FirstName = "TBA";
                        rowPassenger.LastName = "TBA";
                        rowPassenger.PassportNo = "TBA";
                        rowPassenger.DOB = DateTime.Parse("1900-01-01");
                        rowPassenger.SyncCreate = DateTime.Now;
                        rowPassenger.LastSyncBy = "System";
                        if (adultType == "CHD")
                        {
                            rowPassenger.Title = "Chd";
                        }

                        //ongoing, added by diana, 20161225
                        if (temFlight.TemFlightCarrierCode == "D7" || temFlight.TemFlightCarrierCode == "XJ" || temFlight.TemFlightCarrierCode == "ST")
                        {
                            rowPassenger.MaxChange = 1;
                            rowPassenger.MaxPax1 = qtyadult + qtychild;
                            rowPassenger.MaxPax2 = 0;
                        }
                        else
                        {
                            rowPassenger.MaxChange = 1;
                            rowPassenger.MaxPax1 = (int)(0.3 * (qtyadult + qtychild));
                            rowPassenger.MaxPax2 = 0;
                        }

                        rowPassenger.RecordLocator = prevPNR.ToString();

                        lstPassenger.Add(rowPassenger);

                        passengerno++;
                        //count adultpax --
                        adultpax--;
                    }

                    //for (int i = 0; i < InfantNum; i++)
                    //{

                    //    PassengerInfant passengerInfant = new PassengerInfant();
                    //    //sjrd.Passengers[i].PassengerNumber = Convert.ToInt16(passengerno);
                    //    passengerInfant.DOB = new DateTime(2009, 4, 12);
                    //    passengerInfant.Gender = Gender.Female;
                    //    passengerInfant.State = MessageState.New;
                    //    passengerInfant.Names = new BookingName[1];
                    //    passengerInfant.Names[0] = new BookingName();
                    //    passengerInfant.Names[0].FirstName = "Joe";
                    //    passengerInfant.Names[0].LastName = "Smith";
                    //    passengerInfant.Names[0].Title = "MSTR";//master
                    //    passengerInfant.Nationality = "SG";
                    //    passengerInfant.ResidentCountry = "SG";
                    //    sjrd.Passengers[i].Infant = passengerInfant;

                    //}
                    //added by ketee
                    if (lstPassenger != null)
                    {
                        HttpContext.Current.Session.Remove("listPassengers");
                        HttpContext.Current.Session.Add("listPassengers", lstPassenger);
                    }


                    sjrd.Journeys = new SellJourney[2];
                    sjrd.Journeys[0] = new SellJourney();
                    sjrd.Journeys[0].State = MessageState.New;
                    sjrd.Journeys[0].NotForGeneralUse = false;
                    if (temFlight.TemFlightTransit != "")
                    { sjrd.Journeys[0].Segments = new SellSegment[2]; }
                    else { sjrd.Journeys[0].Segments = new SellSegment[1]; }
                    SellSegment srSegment = new SellSegment();
                    srSegment.State = MessageState.New;
                    srSegment.DepartureStation = temFlight.TemFlightDeparture.Trim();

                    if (temFlight.TemFlightTransit != "")
                    {
                        srSegment.ArrivalStation = temFlight.TemFlightTransit.Trim();
                    }
                    else
                    {
                        srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                    }

                    srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd);
                    srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta);
                    srSegment.FlightDesignator = new FlightDesignator();
                    srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber.Trim().PadLeft(4, ' ');
                    srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
                    srSegment.Fare = new SellFare();
                    srSegment.Fare.State = MessageState.New;
                    srSegment.Fare.ClassOfService = temClass.TemClassClass.Trim();
                    srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode.Trim();

                    ////added by diana 20140408, reduce ~~ to ~
                    //String[] FareSellKey = temClass.TemClassFareSellKey.Split('~');
                    //string NewFareSellKey = "";
                    //foreach (string sellKey in FareSellKey)
                    //{
                    //    if (sellKey != "")
                    //    {
                    //        if (NewFareSellKey != "")
                    //        {
                    //            NewFareSellKey += "~";
                    //        }
                    //        NewFareSellKey += sellKey;
                    //    }
                    //}

                    srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey.Split('~')[4].ToString();
                    srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey.Split('~')[3].ToString();

                    srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey.Split('~')[6]);
                    srSegment.Fare.FareClassOfService = temClass.TemClassClass.Trim();
                    srSegment.Fare.IsAllotmentMarketFare = false;

                    switch (temClass.TempFareApplicationType.ToString().ToLower())
                    {
                        case "route":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                            break;
                        case "sector":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                            break;
                        case "governing":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                            break;
                        default:
                            srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                            //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                            break;
                    }
                    sjrd.Journeys[0].Segments[0] = srSegment;

                    if (temFlight.TemFlightTransit != "")
                    {
                        srSegment = new SellSegment();
                        srSegment.State = MessageState.New;
                        srSegment.DepartureStation = temFlight.TemFlightTransit.Trim();
                        srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                        srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd2);
                        srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta2);
                        srSegment.FlightDesignator = new FlightDesignator();

                        srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber2.Trim();
                        srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();

                        srSegment.Fare = new SellFare();
                        srSegment.Fare.State = MessageState.New;
                        srSegment.Fare.ClassOfService = temClass.TemClassClass2.Trim();
                        srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();
                        srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey2.Split('~')[4].ToString();
                        srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey2.Split('~')[3].ToString();

                        srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey2.Split('~')[6]);
                        srSegment.Fare.FareClassOfService = temClass.TemClassClass2.Trim();
                        srSegment.Fare.IsAllotmentMarketFare = false;

                        switch (temClass.TempFareApplicationType2.ToString().ToLower())
                        {
                            case "route":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                break;
                            case "sector":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                                break;
                            case "governing":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                                break;
                            default:
                                srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                                break;
                        }
                        sjrd.Journeys[0].Segments[1] = srSegment;

                    }

                    //fill data for new dataClass
                    quantityDepart = temClass.TemClassPersonNumber;
                    farePriceDepart = Convert.ToDecimal(temClass.TemClassClassPrice);
                    fullPriceDepart = Convert.ToDecimal(temClass.TemClassFullPrice);
                    signatureDepart = SellSessionID;

                    TemClassofService temClass2 = temClasslist2.ElementAt(ctrEnum);

                    temClass2.TemClassSellSignature = SellSessionID;// SessionManager._signature;
                    UpdateTemClass(temClass2);

                    sjrd.Journeys[1] = new SellJourney();
                    sjrd.Journeys[1].State = MessageState.New;
                    sjrd.Journeys[1].NotForGeneralUse = false;
                    if (temFlight2.TemFlightTransit != "")
                    { sjrd.Journeys[1].Segments = new SellSegment[2]; }
                    else { sjrd.Journeys[1].Segments = new SellSegment[1]; }
                    SellSegment srSegment1 = new SellSegment();
                    srSegment1.State = MessageState.New;
                    srSegment1.DepartureStation = temFlight2.TemFlightDeparture.Trim();

                    if (temFlight2.TemFlightTransit != "")
                    {
                        srSegment1.ArrivalStation = temFlight2.TemFlightTransit.Trim();
                    }
                    else
                    {
                        srSegment1.ArrivalStation = temFlight2.TemFlightArrival.Trim();
                    }

                    srSegment1.STD = Convert.ToDateTime(temFlight2.TemFlightStd);
                    srSegment1.STA = Convert.ToDateTime(temFlight2.TemFlightSta);
                    srSegment1.FlightDesignator = new FlightDesignator();
                    srSegment1.FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber.Trim().PadLeft(4, ' ');
                    srSegment1.FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode.Trim();
                    srSegment1.Fare = new SellFare();
                    srSegment1.Fare.State = MessageState.New;
                    srSegment1.Fare.ClassOfService = temClass2.TemClassClass.Trim();
                    srSegment1.Fare.CarrierCode = temFlight2.TemFlightCarrierCode.Trim();
                    srSegment1.Fare.RuleNumber = temClass2.TemClassFareSellKey.Split('~')[4].ToString();// "AAB1";
                    srSegment1.Fare.FareBasisCode = temClass2.TemClassFareSellKey.Split('~')[3].ToString();// "A00H00";

                    srSegment1.Fare.FareSequence = Convert.ToInt16(temClass2.TemClassFareSellKey.Split('~')[6]);
                    srSegment1.Fare.FareClassOfService = temClass2.TemClassClass.Trim();
                    srSegment1.Fare.IsAllotmentMarketFare = false;

                    switch (temClass2.TempFareApplicationType.ToString().ToLower())
                    {
                        case "route":
                            srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                            break;
                        case "sector":
                            srSegment1.Fare.FareApplicationType = FareApplicationType.Sector;
                            break;
                        case "governing":
                            srSegment1.Fare.FareApplicationType = FareApplicationType.Governing;
                            break;
                        default:
                            srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                            //srSegment1.Fare.FareApplicationType = FareApplicationType.Unmapped;
                            break;
                    }
                    sjrd.Journeys[1].Segments[0] = srSegment1;

                    if (temFlight2.TemFlightTransit != "")
                    {
                        srSegment1 = new SellSegment();
                        srSegment1.State = MessageState.New;
                        srSegment1.DepartureStation = temFlight2.TemFlightTransit.Trim();
                        srSegment1.ArrivalStation = temFlight2.TemFlightArrival.Trim();
                        srSegment1.STD = Convert.ToDateTime(temFlight2.TemFlightStd2);
                        srSegment1.STA = Convert.ToDateTime(temFlight2.TemFlightSta2);
                        srSegment1.FlightDesignator = new FlightDesignator();

                        srSegment1.FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber2.Trim();
                        srSegment1.FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode2.Trim();

                        srSegment1.Fare = new SellFare();
                        srSegment1.Fare.State = MessageState.New;
                        srSegment1.Fare.ClassOfService = temClass2.TemClassClass2.Trim();
                        srSegment1.Fare.CarrierCode = temFlight2.TemFlightCarrierCode2.Trim();
                        srSegment1.Fare.RuleNumber = temClass2.TemClassFareSellKey2.Split('~')[4].ToString();
                        srSegment1.Fare.FareBasisCode = temClass2.TemClassFareSellKey2.Split('~')[3].ToString();

                        srSegment1.Fare.FareSequence = Convert.ToInt16(temClass2.TemClassFareSellKey2.Split('~')[6]);
                        srSegment1.Fare.FareClassOfService = temClass2.TemClassClass2.Trim();
                        srSegment1.Fare.IsAllotmentMarketFare = false;

                        switch (temClass2.TempFareApplicationType2.ToString().ToLower())
                        {
                            case "route":
                                srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                                break;
                            case "sector":
                                srSegment1.Fare.FareApplicationType = FareApplicationType.Sector;
                                break;
                            case "governing":
                                srSegment1.Fare.FareApplicationType = FareApplicationType.Governing;
                                break;
                            default:
                                srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                                //srSegment1.Fare.FareApplicationType = FareApplicationType.Unmapped;
                                break;
                        }
                        sjrd.Journeys[1].Segments[1] = srSegment1;

                    }

                    //fill data for new dataClass
                    quantityReturn = temClass2.TemClassPersonNumber;
                    farePriceReturn = Convert.ToDecimal(temClass2.TemClassClassPrice);
                    fullPriceReturn = Convert.ToDecimal(temClass2.TemClassFullPrice);
                    signatureReturn = SellSessionID;

                    ctrEnum += 1;

                    if (sjrd != null)
                    {
                        int count = 0;
                        int lengths = 0;
                        try
                        {
                            sellrequest.SellRequestData.SellJourneyRequest.SellJourneyRequestData = sjrd;
                            //string requeststring = GetXMLString(sellrequest);
                            SellResponse response = bookingAPI.Sell(sellrequest);
                            //string xml = GetXMLString(response);
                            //added by ketee, add service fees
                            //foreach (PassengerData rowpassenger in lstPassenger)
                            //{


                            //remarked by diana 20170201, no more service fee
                            //if (moveJourney == false)
                            //{
                            //    if (AddServiceFees(SellSessionID, cur, 0) == false)
                            //    {
                            //        bError = true;
                            //        log.Warning(this, "Add fees failed: " + SellSessionID);
                            //        break;
                            //    }
                            //}

                            //}

                            //fill breakdown fee
                            Navitaire.BookingManager.Booking book = GetBookingFromState(SellSessionID);
                            HttpContext.Current.Session.Add("signature", SellSessionID);

                            GetSSRAvailabilityForBookingResponse getSSRAvailabilityForBookingResponses = apiBooking.GetSSRAvailabilityForBooking(book, SellSessionID);
                            if (getSSRAvailabilityForBookingResponses != null)
                            {

                                SSRAvailabilityForBookingResponse ssrAvailabilityResponseForBooking = getSSRAvailabilityForBookingResponses.SSRAvailabilityForBookingResponse;
                                if (sellalready == 0)
                                {
                                    for (int j = 0; j < ssrAvailabilityResponseForBooking.SSRSegmentList.Length; j++) //for SSR index
                                    {
                                        for (int k = 0; k < ssrAvailabilityResponseForBooking.SSRSegmentList[j].AvailablePaxSSRList.Length; k++) //for SSR index
                                        {
                                            if (ssrAvailabilityResponseForBooking.SSRSegmentList[j].AvailablePaxSSRList[k].SSRCode.Equals("INFT"))
                                            {
                                                count = ssrAvailabilityResponseForBooking.SSRSegmentList[j].AvailablePaxSSRList[k].Available;
                                                if (count >= InfantNum)
                                                {
                                                    lengths += 1;
                                                    break;
                                                }

                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    lengths = ssrAvailabilityResponseForBooking.SSRSegmentList.Length;
                                }

                                if (lengths == ssrAvailabilityResponseForBooking.SSRSegmentList.Length)
                                {
                                    if (InfantNum <= book.Passengers.Length && sellalready == 0)
                                    {
                                        //string boolxml = GetXMLString(book);
                                        SellRequest sellSsrRequest = new SellRequest();
                                        SellRequestData sellreqd = new SellRequestData();
                                        sellreqd.SellBy = SellBy.SSR;
                                        sellreqd.SellSSR = new SellSSR();
                                        sellreqd.SellSSR.SSRRequest = new SSRRequest();
                                        sellreqd.SellSSR.SSRRequest.CurrencyCode = book.CurrencyCode;
                                        int SSRRequestCount = ssrAvailabilityResponseForBooking.SSRSegmentList.Length;
                                        sellreqd.SellSSR.SSRRequest.SegmentSSRRequests = new SegmentSSRRequest[SSRRequestCount];

                                        sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0] = new SegmentSSRRequest();
                                        sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].PaxSSRs = new PaxSSR[InfantNum];
                                        for (int i = 0; i < sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].PaxSSRs.Length; i++)
                                        {
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].PaxSSRs[i] = new PaxSSR();
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].PaxSSRs[i].State = MessageState.New;
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].PaxSSRs[i].ActionStatusCode = "NN";
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].PaxSSRs[i].SSRCode = "INFT";
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].PaxSSRs[i].SSRNumber = 0;
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].PaxSSRs[i].DepartureStation = book.Journeys[0].
                                            Segments[0].DepartureStation;
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].PaxSSRs[i].ArrivalStation = book.Journeys[0].
                                            Segments[0].ArrivalStation;
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].PaxSSRs[i].PassengerNumber = (short)i;
                                        }
                                        sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].DepartureStation = ssrAvailabilityResponseForBooking.SSRSegmentList[0].LegKey.DepartureStation;
                                        sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].ArrivalStation = ssrAvailabilityResponseForBooking.SSRSegmentList[0].LegKey.ArrivalStation;
                                        sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].STD = ssrAvailabilityResponseForBooking.SSRSegmentList[0].LegKey.DepartureDate;
                                        sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].FlightDesignator = new FlightDesignator();
                                        sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].FlightDesignator.CarrierCode = ssrAvailabilityResponseForBooking.SSRSegmentList[0].LegKey.CarrierCode;
                                        sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[0].FlightDesignator.FlightNumber = ssrAvailabilityResponseForBooking.SSRSegmentList[0].LegKey.FlightNumber;

                                        if (SSRRequestCount == 2)
                                        {
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1] = new SegmentSSRRequest();

                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs = new PaxSSR[InfantNum];
                                            for (int i = 0; i < sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs.Length; i++)
                                            {
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i] = new PaxSSR();
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].State = MessageState.New;
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].ActionStatusCode = "NN";
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].SSRCode = "INFT";
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].SSRNumber = 0;
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].DepartureStation = book.Journeys[1].
                                                Segments[0].DepartureStation;
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].ArrivalStation = book.Journeys[1].
                                                Segments[0].ArrivalStation;
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].PassengerNumber = (short)i;
                                            }
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].DepartureStation = ssrAvailabilityResponseForBooking.SSRSegmentList[1].LegKey.DepartureStation;
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].ArrivalStation = ssrAvailabilityResponseForBooking.SSRSegmentList[1].LegKey.ArrivalStation;
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].STD = ssrAvailabilityResponseForBooking.SSRSegmentList[1].LegKey.DepartureDate;
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].FlightDesignator = new FlightDesignator();
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].FlightDesignator.CarrierCode = ssrAvailabilityResponseForBooking.SSRSegmentList[1].LegKey.CarrierCode;
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].FlightDesignator.FlightNumber = ssrAvailabilityResponseForBooking.SSRSegmentList[1].LegKey.FlightNumber;
                                        }
                                        else if (SSRRequestCount == 4)
                                        {
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1] = new SegmentSSRRequest();

                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs = new PaxSSR[InfantNum];
                                            for (int i = 0; i < sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs.Length; i++)
                                            {
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i] = new PaxSSR();
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].State = MessageState.New;
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].ActionStatusCode = "NN";
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].SSRCode = "INFT";
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].SSRNumber = 0;
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].DepartureStation = book.Journeys[0].
                                                Segments[1].DepartureStation;
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].ArrivalStation = book.Journeys[0].
                                                Segments[1].ArrivalStation;
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].PaxSSRs[i].PassengerNumber = (short)i;
                                            }
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].DepartureStation = ssrAvailabilityResponseForBooking.SSRSegmentList[1].LegKey.DepartureStation;
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].ArrivalStation = ssrAvailabilityResponseForBooking.SSRSegmentList[1].LegKey.ArrivalStation;
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].STD = ssrAvailabilityResponseForBooking.SSRSegmentList[1].LegKey.DepartureDate;
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].FlightDesignator = new FlightDesignator();
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].FlightDesignator.CarrierCode = ssrAvailabilityResponseForBooking.SSRSegmentList[1].LegKey.CarrierCode;
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[1].FlightDesignator.FlightNumber = ssrAvailabilityResponseForBooking.SSRSegmentList[1].LegKey.FlightNumber;

                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[2] = new SegmentSSRRequest();
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[2].PaxSSRs = new PaxSSR[InfantNum];
                                            for (int i = 0; i < sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[2].PaxSSRs.Length; i++)
                                            {
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[2].PaxSSRs[i] = new PaxSSR();
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[2].PaxSSRs[i].State = MessageState.New;
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[2].PaxSSRs[i].ActionStatusCode = "NN";
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[2].PaxSSRs[i].SSRCode = "INFT";
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[2].PaxSSRs[i].SSRNumber = 0;
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[2].PaxSSRs[i].DepartureStation = book.Journeys[1].
                                                Segments[0].DepartureStation;
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[2].PaxSSRs[i].ArrivalStation = book.Journeys[1].
                                                Segments[0].ArrivalStation;
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[2].PaxSSRs[i].PassengerNumber = (short)i;
                                            }
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[2].DepartureStation = ssrAvailabilityResponseForBooking.SSRSegmentList[2].LegKey.DepartureStation;
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[2].ArrivalStation = ssrAvailabilityResponseForBooking.SSRSegmentList[2].LegKey.ArrivalStation;
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[2].STD = ssrAvailabilityResponseForBooking.SSRSegmentList[2].LegKey.DepartureDate;
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[2].FlightDesignator = new FlightDesignator();
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[2].FlightDesignator.CarrierCode = ssrAvailabilityResponseForBooking.SSRSegmentList[2].LegKey.CarrierCode;
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[2].FlightDesignator.FlightNumber = ssrAvailabilityResponseForBooking.SSRSegmentList[2].LegKey.FlightNumber;

                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[3] = new SegmentSSRRequest();
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[3].PaxSSRs = new PaxSSR[InfantNum];
                                            for (int i = 0; i < sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[3].PaxSSRs.Length; i++)
                                            {
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[3].PaxSSRs[i] = new PaxSSR();
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[3].PaxSSRs[i].State = MessageState.New;
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[3].PaxSSRs[i].ActionStatusCode = "NN";
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[3].PaxSSRs[i].SSRCode = "INFT";
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[3].PaxSSRs[i].SSRNumber = 0;
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[3].PaxSSRs[i].DepartureStation = book.Journeys[1].
                                                Segments[1].DepartureStation;
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[3].PaxSSRs[i].ArrivalStation = book.Journeys[1].
                                                Segments[1].ArrivalStation;
                                                sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[3].PaxSSRs[i].PassengerNumber = (short)i;
                                            }
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[3].DepartureStation = ssrAvailabilityResponseForBooking.SSRSegmentList[3].LegKey.DepartureStation;
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[3].ArrivalStation = ssrAvailabilityResponseForBooking.SSRSegmentList[3].LegKey.ArrivalStation;
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[3].STD = ssrAvailabilityResponseForBooking.SSRSegmentList[3].LegKey.DepartureDate;
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[3].FlightDesignator = new FlightDesignator();
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[3].FlightDesignator.CarrierCode = ssrAvailabilityResponseForBooking.SSRSegmentList[3].LegKey.CarrierCode;
                                            sellreqd.SellSSR.SSRRequest.SegmentSSRRequests[3].FlightDesignator.FlightNumber = ssrAvailabilityResponseForBooking.SSRSegmentList[3].LegKey.FlightNumber;
                                        }


                                        sellSsrRequest.SellRequestData = sellreqd;
                                        sellSsrRequest.Signature = SellSessionID;

                                        sellSsrRequest.ContractVersion = 340;
                                        SellResponse sellSsrResponse = null;
                                        sellSsrResponse = bookingAPI.Sell(sellSsrRequest);
                                        sellalready = 1;


                                        book = GetBookingFromState(SellSessionID);
                                        //string req = GetXMLString(book);

                                        //remark 1st ya by Tyas
                                        int length = lstPassenger.Count;
                                        for (int i = 0; i < InfantNum; i++)
                                        {
                                            rowPassenger = new PassengerData();

                                            //rowPassenger.PassengerID = passengerno.ToString();
                                            rowPassenger.PassengerID = (i).ToString();

                                            rowPassenger.FirstName = "Infant";
                                            rowPassenger.LastName = "Infant";
                                            rowPassenger.PassportNo = "TBA";
                                            rowPassenger.DOB = DateTime.Today.AddMonths(-5);
                                            rowPassenger.SyncCreate = DateTime.Now;
                                            rowPassenger.LastSyncBy = "System";
                                            rowPassenger.Title = "INFT";

                                            rowPassenger.RecordLocator = prevPNR.ToString();


                                            lstPassenger.Add(rowPassenger);
                                        }
                                    }

                                }

                                if (lstPassenger != null)
                                {
                                    HttpContext.Current.Session.Remove("listPassengers");
                                    HttpContext.Current.Session.Add("listPassengers", lstPassenger);
                                }

                                prevPNR += 2;
                                //Get Currecy Rate List 20130625
                                Navitaire.UtilitiesManager.GetExternalRatesListResponseData RateResponse = apiBooking.GetExternalRateList(SellSessionID);
                                string curr = book.CurrencyCode;
                                //string req = GetXMLString(RateResponse);
                                decimal currRate = 1;
                                if (curr != "MYR")
                                {
                                    for (int i = 0; i < RateResponse.ExternalRateList.Length; i++)
                                    {
                                        if (RateResponse.ExternalRateList[i].QuotedCurrency == curr && RateResponse.ExternalRateList[i].CollectedCurrency == "MYR")
                                        {
                                            currRate = RateResponse.ExternalRateList[i].ExchangeRate;
                                        }
                                    }
                                }

                                //depart
                                int segCount = book.Journeys[0].Segments.Length;
                                //renew temClass
                                ClassPrice classPriceDepart = new ClassPrice();

                                for (int iDepart = 0; iDepart < segCount; iDepart++)
                                {
                                    //added by diana 20131031 - added condition if paxfare length is more than 0
                                    if (book.Journeys[0].Segments[iDepart].Fares[0].PaxFares.Length > 0)
                                    {
                                        PaxFare paxFare = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];
                                        PaxFare paxFareChd;
                                        if (temClass.TemClassAdultNumber > 0)
                                        {
                                            HttpContext.Current.Session.Add("getFlightDepartureData", temFlight.TemFlightDeparture);
                                            HttpContext.Current.Session.Add("getFlightTransitData", temFlight.TemFlightTransit);
                                            HttpContext.Current.Session.Add("getFlightArrivalData", temFlight.TemFlightArrival);
                                            AddFarePrice(paxFare, temClass, ref classPriceDepart, "ADT");

                                            if (HttpContext.Current.Session["dataTransFeesOthers"] != null)
                                            {
                                                DataTable dataTF = dtTransFees();
                                                dataTF = (DataTable)HttpContext.Current.Session["dataTransFeesOthers"];

                                                HttpContext.Current.Session.Add("dataTFOthSellJourneyAddInfant", dataTF);
                                            }
                                        }

                                        if (temClass.TemClassChildNumber > 0)
                                        {
                                            if (book.Journeys[0].Segments[iDepart].Fares[0].PaxFares.Length > 1)
                                                paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[1];
                                            else
                                                paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];

                                            //if (temFlight.TemFlightDeparture.ToString().ToUpper() != "HKG" && temFlight.TemFlightArrival.ToString().ToUpper() != "HKG")
                                            //{
                                            //    paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];
                                            //}
                                            HttpContext.Current.Session.Add("getFlightDepartureData", temFlight.TemFlightDeparture);
                                            HttpContext.Current.Session.Add("getFlightTransitData", temFlight.TemFlightTransit);
                                            HttpContext.Current.Session.Add("getFlightArrivalData", temFlight.TemFlightArrival);
                                            AddFarePrice(paxFareChd, temClass, ref classPriceDepart, "CHD");

                                            if (HttpContext.Current.Session["dataTransFeesOthers"] != null)
                                            {
                                                DataTable dataTF = dtTransFees();
                                                dataTF = (DataTable)HttpContext.Current.Session["dataTransFeesOthers"];

                                                HttpContext.Current.Session.Add("dataTFOthSellJourneyAddInfant", dataTF);
                                            }
                                        }
                                    }
                                }
                                //remove divide by 2 as service fees apply to 1st booking only
                                //bdSvc += book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2;
                                //classPriceDepart.ServChrg = (book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2) * temClass.TemClassPersonNumber;


                                //amended by diana 20140121 - add initial value to 0, then add it
                                classPriceDepart.ServChrg = 0;
                                classPriceDepart.SSRChrg = 0;
                                classPriceDepart.SeatChrg = 0;
                                classPriceDepart.ServVAT = 0;
                                classPriceDepart.InfantChrg = 0;

                                //load service charges passenger
                                if (book.Passengers[0].PassengerFees.Length > 0 && book.Passengers[0].PassengerFees[0].ServiceCharges.Length > 0)
                                {
                                    if (book.Passengers[0].PassengerFees[0].FeeType != FeeType.SSRFee)
                                    {
                                        for (int i = 0; i < book.Passengers[0].PassengerFees[0].ServiceCharges.Length; i++)
                                        {
                                            switch (book.Passengers[0].PassengerFees[0].ServiceCharges[i].ChargeCode.ToString().ToUpper())
                                            {
                                                case "SVCF":
                                                    classPriceDepart.ServChrg += (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                                    //classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                                                    break;
                                                case "VAT":
                                                    classPriceDepart.ServVAT += (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                                    //classPriceDepart.FullPrice += classPriceDepart.ServVAT;
                                                    break;
                                                //case "INFT":
                                                //    classPriceDepart.ServInfant += (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount);
                                                //    //classPriceDepart.FullPrice += classPriceDepart.ServVAT;
                                                //    break;
                                                default:
                                                    classPriceDepart.ServChrg += (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                                    //classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                                                    break;
                                            }
                                        }
                                    }


                                }

                                if (book.Journeys[0].Segments.Length == 1)
                                {
                                    for (int i = 0; i < book.Passengers.Length; i++)
                                    {
                                        for (int ii = 0; ii < book.Passengers[i].PassengerFees.Length; ii++)
                                        {
                                            if (book.Passengers[i].PassengerFees[ii].FeeType == FeeType.SSRFee)
                                            {
                                                if (book.Passengers[i].PassengerFees[ii].FlightReference != "")
                                                {
                                                    if ((book.Passengers[i].PassengerFees[ii].FlightReference.Substring(16, 6) == temFlight.TemFlightDeparture + temFlight.TemFlightArrival))
                                                    {
                                                        for (int y = 0; y < book.Passengers[i].PassengerFees[ii].ServiceCharges.Length; y++)
                                                        {
                                                            classPriceDepart.InfantChrg += book.Passengers[i].PassengerFees[ii].ServiceCharges[y].Amount;

                                                        }
                                                    }

                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    for (int i = 0; i < book.Passengers.Length; i++)
                                    {
                                        for (int ii = 0; ii < book.Passengers[i].PassengerFees.Length; ii++)
                                        {
                                            if (book.Passengers[i].PassengerFees[ii].FeeType == FeeType.SSRFee)
                                            {
                                                if (book.Passengers[i].PassengerFees[ii].FlightReference != "")
                                                {
                                                    if ((book.Passengers[i].PassengerFees[ii].FlightReference.Substring(16, 6) == temFlight.TemFlightDeparture + temFlight.TemFlightTransit))
                                                    {
                                                        for (int y = 0; y < book.Passengers[i].PassengerFees[ii].ServiceCharges.Length; y++)
                                                        {
                                                            classPriceDepart.InfantChrg += book.Passengers[i].PassengerFees[ii].ServiceCharges[y].Amount;

                                                        }
                                                    }
                                                    else if ((book.Passengers[i].PassengerFees[ii].FlightReference.Substring(16, 6) == temFlight.TemFlightTransit + temFlight.TemFlightArrival))
                                                    {
                                                        for (int y = 0; y < book.Passengers[i].PassengerFees[ii].ServiceCharges.Length; y++)
                                                        {
                                                            classPriceDepart.InfantChrg += book.Passengers[i].PassengerFees[ii].ServiceCharges[y].Amount;

                                                        }
                                                    }

                                                }
                                            }
                                        }
                                    }
                                }
                                classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                                classPriceDepart.FullPrice += classPriceDepart.SSRChrg;
                                classPriceDepart.FullPrice += classPriceDepart.SeatChrg;
                                classPriceDepart.FullPrice += classPriceDepart.ServVAT;
                                classPriceDepart.FullPrice += classPriceDepart.InfantChrg;



                                //bdFull = bdFull + classPriceDepart.FullPrice;

                                classPriceDepart.ClassID = temClass.TemClassId;

                                //return breakdown fee
                                ClassPrice classPriceReturn = new ClassPrice();

                                segCount = book.Journeys[1].Segments.Length;
                                classPriceReturn.ClassID = temClass2.TemClassId;

                                for (int iReturn = 0; iReturn < segCount; iReturn++)
                                {
                                    //added by diana 20131031 - added condition if paxfare length is more than 0
                                    if (book.Journeys[1].Segments[iReturn].Fares[0].PaxFares.Length > 0)
                                    {
                                        PaxFare paxFare = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[0];
                                        PaxFare paxFareChd;

                                        if (temClass2.TemClassAdultNumber > 0)
                                        {
                                            HttpContext.Current.Session.Add("getFlightDepartureData", temFlight.TemFlightArrival);
                                            HttpContext.Current.Session.Add("getFlightTransitData", temFlight.TemFlightTransit);
                                            HttpContext.Current.Session.Add("getFlightArrivalData", temFlight.TemFlightDeparture);
                                            AddFarePrice(paxFare, temClass2, ref classPriceReturn, "ADT");

                                            if (HttpContext.Current.Session["dataTransFeesOthers"] != null)
                                            {
                                                DataTable dataTF = dtTransFees();
                                                dataTF = (DataTable)HttpContext.Current.Session["dataTransFeesOthers"];

                                                HttpContext.Current.Session.Add("dataTFOthSellJourneyAddInfant", dataTF);
                                            }
                                        }

                                        if (temClass2.TemClassChildNumber > 0)
                                        {
                                            if (book.Journeys[1].Segments[iReturn].Fares[0].PaxFares.Length > 1)
                                                paxFareChd = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[1];
                                            else
                                                paxFareChd = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[0];

                                            //if (temFlight.TemFlightDeparture.ToString().ToUpper() != "HKG" && temFlight.TemFlightArrival.ToString().ToUpper() != "HKG")
                                            //{
                                            //    paxFareChd = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[0];
                                            //}
                                            HttpContext.Current.Session.Add("getFlightDepartureData", temFlight.TemFlightArrival);
                                            HttpContext.Current.Session.Add("getFlightTransitData", temFlight.TemFlightTransit);
                                            HttpContext.Current.Session.Add("getFlightArrivalData", temFlight.TemFlightDeparture);
                                            AddFarePrice(paxFareChd, temClass2, ref classPriceReturn, "CHD");

                                            if (HttpContext.Current.Session["dataTransFeesOthers"] != null)
                                            {
                                                DataTable dataTF = dtTransFees();
                                                dataTF = (DataTable)HttpContext.Current.Session["dataTransFeesOthers"];

                                                HttpContext.Current.Session.Add("dataTFOthSellJourneyAddInfant", dataTF);
                                            }
                                        }
                                    }
                                }

                                //remark, as service charge only apply to 1st segment
                                //bdSvcReturn += book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2;
                                //classPriceReturn.ServChrg = (book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2) * temClass2.TemClassPersonNumber;
                                //bdSvcReturn += 0;
                                classPriceReturn.ServChrg = 0;
                                classPriceReturn.SSRChrg = 0;
                                classPriceReturn.SeatChrg = 0;
                                classPriceReturn.InfantChrg = 0;

                                //bdFullReturn = bdFullReturn + classPriceReturn.FullPrice;
                                //load service charges passenger
                                if (book.Journeys[1].Segments.Length == 1)
                                {
                                    for (int i = 0; i < book.Passengers.Length; i++)
                                    {
                                        for (int ii = 0; ii < book.Passengers[i].PassengerFees.Length; ii++)
                                        {
                                            if (book.Passengers[i].PassengerFees[ii].FeeType == FeeType.SSRFee)
                                            {
                                                if (book.Passengers[i].PassengerFees[ii].FlightReference != "")
                                                {

                                                    if ((book.Passengers[i].PassengerFees[ii].FlightReference.Substring(16, 6) == temFlight2.TemFlightDeparture + temFlight2.TemFlightArrival))
                                                    {
                                                        for (int y = 0; y < book.Passengers[i].PassengerFees[ii].ServiceCharges.Length; y++)
                                                        {
                                                            classPriceReturn.InfantChrg += book.Passengers[i].PassengerFees[ii].ServiceCharges[y].Amount;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    for (int i = 0; i < book.Passengers.Length; i++)
                                    {
                                        for (int ii = 0; ii < book.Passengers[i].PassengerFees.Length; ii++)
                                        {
                                            if (book.Passengers[i].PassengerFees[ii].FeeType == FeeType.SSRFee)
                                            {
                                                if (book.Passengers[i].PassengerFees[ii].FlightReference != "")
                                                {

                                                    if ((book.Passengers[i].PassengerFees[ii].FlightReference.Substring(16, 6) == temFlight2.TemFlightDeparture + temFlight2.TemFlightTransit))
                                                    {
                                                        for (int y = 0; y < book.Passengers[i].PassengerFees[ii].ServiceCharges.Length; y++)
                                                        {
                                                            classPriceReturn.InfantChrg += book.Passengers[i].PassengerFees[ii].ServiceCharges[y].Amount;
                                                        }
                                                    }
                                                    else if ((book.Passengers[i].PassengerFees[ii].FlightReference.Substring(16, 6) == temFlight2.TemFlightTransit + temFlight2.TemFlightArrival))
                                                    {
                                                        for (int y = 0; y < book.Passengers[i].PassengerFees[ii].ServiceCharges.Length; y++)
                                                        {
                                                            classPriceReturn.InfantChrg += book.Passengers[i].PassengerFees[ii].ServiceCharges[y].Amount;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                classPriceReturn.FullPrice += classPriceReturn.ServChrg + classPriceReturn.SSRChrg + classPriceReturn.SeatChrg + classPriceReturn.InfantChrg;
                                //added by ketee , curr rate 20130625
                                classPriceDepart.CurrencyRate = currRate;
                                classPriceReturn.CurrencyRate = currRate;

                                UpdateClassPrice(classPriceDepart);
                                UpdateClassPrice(classPriceReturn);

                                DataRow row;
                                row = dataClassTrans.NewRow();
                                row["Quantity"] = quantityDepart;
                                row["FarePrice"] = (classPriceDepart.FarePrice + classPriceReturn.FarePrice);
                                //commented by diana 20131104
                                //private void ProcessPairedFareJhn(ClassFare[] GoingFare, ClassFare[] ReturnFare,row["FarePrice"] = (classPriceDepart.FarePrice + classPriceReturn.FarePrice) / temClass.TemClassPersonNumber;
                                row["FullPrice"] = (classPriceDepart.FullPrice + classPriceReturn.FullPrice);
                                row["SellSignature"] = signatureDepart;
                                //added by ketee, 20121016
                                row["ServChrg"] = classPriceDepart.ServChrg + classPriceReturn.ServChrg;
                                row["SSRChrg"] = classPriceDepart.SSRChrg + classPriceReturn.SSRChrg;
                                row["SeatChrg"] = classPriceDepart.SeatChrg + classPriceReturn.SeatChrg;
                                row["InfantChrg"] = classPriceDepart.InfantChrg + classPriceReturn.InfantChrg;
                                //added by ketee, VAT
                                row["ServVAT"] = classPriceDepart.ServVAT;
                                row["DetailCollectedAmt"] = 0;
                                row["RecordLocator"] = "";
                                //added by ketee 20130625 currrate
                                row["CurrencyRate"] = classPriceDepart.CurrencyRate;

                                //added by ketee, breakdown fees 20130625
                                bdPaxFee += classPriceDepart.PaxFeeChrg;
                                bdAPT += classPriceDepart.TaxChrg;
                                bdchAPT += classPriceDepart.TAxChrgChd;
                                bdFare += classPriceDepart.FarePrice;
                                bdFuel += classPriceDepart.FuelChrg;
                                bdFull += classPriceDepart.FullPrice;
                                bdOth += classPriceDepart.OthChrg;
                                bdDisc += classPriceDepart.DiscChrg;
                                bdPromoDisc += classPriceDepart.PromoDiscChrg;
                                bdSvc += classPriceDepart.ServChrg;
                                bdSSR += classPriceDepart.SSRChrg;
                                bdSeat += classPriceDepart.SeatChrg;
                                bdVAT += classPriceDepart.ServVAT;
                                bdInfant += classPriceDepart.InfantChrg;

                                bdPaxFeeReturn += classPriceReturn.PaxFeeChrg;
                                bdAPTReturn += classPriceReturn.TaxChrg;
                                bdchAPTReturn += classPriceReturn.TAxChrgChd;
                                bdFareReturn += classPriceReturn.FarePrice;
                                bdFuelReturn += classPriceReturn.FuelChrg;
                                bdFullReturn += classPriceReturn.FullPrice;
                                bdOthReturn += classPriceReturn.OthChrg;
                                bdDiscReturn += classPriceReturn.DiscChrg;
                                bdPromoDiscReturn += classPriceReturn.PromoDiscChrg;
                                bdSvcReturn += classPriceReturn.ServChrg;
                                bdSSRReturn += classPriceReturn.SSRChrg;
                                bdSeatReturn += classPriceReturn.SeatChrg;
                                bdVATReturn += classPriceReturn.ServVAT;
                                bdInfantReturn += classPriceReturn.InfantChrg;

                                dataClassTrans.Rows.Add(row);

                                //save new data class into session
                                if (dataClassTrans.Rows.Count > 0)
                                {
                                    HttpContext.Current.Session.Remove("dataClassTrans");
                                    HttpContext.Current.Session.Add("dataClassTrans", dataClassTrans);
                                }


                            }
                            else
                            {
                                bError = true;

                                log.Warning(this, "Add Infant failed: " + SellSessionID);
                                return false;
                                break;
                            }
                        }
                        catch (Exception ex)
                        {
                            bError = true;
                            log.Error(this, ex);
                            HttpContext.Current.Session["errormsg"] = ex.ToString();
                        }
                    }
                }
                if (sellalready == 0)
                {
                    bError = true;
                    log.Warning(this, "Add Infant failed: " + SellSessionID);
                    return false;
                    //break;
                }
                if (bError)
                {
                    log.Warning(this, "Sell Journey failed.");
                    return false;
                }
            }
            else
            {
                //fares not equal
            }

            //save new data class into session
            if (dataClassTrans.Rows.Count > 0)
            {
                HttpContext.Current.Session.Remove("dataClassTrans");
                HttpContext.Current.Session.Add("dataClassTrans", dataClassTrans);

                //depart breakdown

                DataTable dataBreakdownFee = dtBreakdownFee();
                DataRow rowBD;
                rowBD = dataBreakdownFee.NewRow();
                //added child fare 
                rowBD["Fare"] = bdFare / (totalPaxADT + totalPaxCHD);
                if (totalPaxCHD > 0)
                {
                    rowBD["ChApt"] = bdchAPT / totalPaxCHD;
                }
                else
                {
                    rowBD["ChApt"] = 0;
                }

                rowBD["Apt"] = bdAPT / totalPaxADT;
                rowBD["PaxFee"] = bdPaxFee;
                rowBD["Fuel"] = bdFuel;
                rowBD["Svc"] = bdSvc;
                rowBD["SSR"] = bdSSR;
                rowBD["Baggage"] = bdBaggage;
                rowBD["Meal"] = bdMeal;
                rowBD["Sport"] = bdSport;
                rowBD["Comfort"] = bdComfort;
                rowBD["Seat"] = bdSeat;
                //added by ketee , VAT
                rowBD["VAT"] = bdVAT;
                rowBD["Infant"] = bdInfant;
                rowBD["Oth"] = bdOth;
                rowBD["Disc"] = bdDisc;
                rowBD["PromoDisc"] = bdPromoDisc;
                rowBD["Qty"] = qtyadult + " Adult " + "/" + qtychild + " Child";
                dataBreakdownFee.Rows.Add(rowBD);

                HttpContext.Current.Session.Remove("dataBDFeeDepart");
                HttpContext.Current.Session.Add("dataBDFeeDepart", dataBreakdownFee);

                //return                

                DataTable dataBreakdownFeeReturn = dtBreakdownFee();
                DataRow rowBDReturn;
                rowBDReturn = dataBreakdownFeeReturn.NewRow();

                rowBDReturn["Fare"] = bdFareReturn / (totalPaxADT + totalPaxCHD);
                if (totalPaxCHD > 0)
                {
                    rowBDReturn["ChApt"] = bdchAPTReturn / totalPaxCHD;
                }
                else
                {
                    rowBDReturn["ChApt"] = 0;
                }

                rowBDReturn["Apt"] = bdAPTReturn / totalPaxADT;
                rowBDReturn["PaxFee"] = bdPaxFeeReturn;
                rowBDReturn["Fuel"] = bdFuelReturn;
                rowBDReturn["Svc"] = bdSvcReturn;
                rowBDReturn["SSR"] = bdSSRReturn;
                rowBD["Baggage"] = bdBaggageReturn;
                rowBD["Meal"] = bdMealReturn;
                rowBD["Sport"] = bdSportReturn;
                rowBD["Comfort"] = bdComfortReturn;
                rowBDReturn["Seat"] = bdSeatReturn;
                //added by ketee, VAT
                rowBDReturn["VAT"] = 0;
                rowBDReturn["Oth"] = bdOthReturn;
                rowBDReturn["Infant"] = bdInfantReturn;
                rowBDReturn["Disc"] = bdDiscReturn;
                rowBDReturn["PromoDisc"] = bdPromoDiscReturn;
                rowBDReturn["Qty"] = qtyadult + "Adult" + ":" + qtychild + "Child";
                dataBreakdownFeeReturn.Rows.Add(rowBDReturn);

                HttpContext.Current.Session.Remove("dataBDFeeReturn");
                HttpContext.Current.Session.Add("dataBDFeeReturn", dataBreakdownFeeReturn);

                UpdateFlightPrice(temFlight.TemFlightId, decimal.Parse(rowBD["Fare"].ToString()), bdFull, bdAPT, bdPaxFee, bdchAPT, bdFuel, bdSvc, bdSSR, bdSeat, bdOth, bdDisc, bdPromoDisc, bdFull / temFlight.TemFlightPaxNum, bdVAT);
                UpdateFlightPrice(temFlight2.TemFlightId, decimal.Parse(rowBDReturn["Fare"].ToString()), bdFullReturn, bdAPTReturn, bdPaxFeeReturn, bdchAPTReturn, bdFuelReturn, bdSvcReturn, bdSSRReturn, bdSeatReturn, bdOthReturn, bdDiscReturn, bdPromoDiscReturn, bdFullReturn / temFlight.TemFlightPaxNum, bdVAT);
            }
            return true;
        }

        private void AddFarePrice(PaxFare paxFare, TemClassofService temClass, ref ClassPrice classPrice, string mode)
        {
            try
            {
                int pax = 0;
                if (mode == "ADT")
                {
                    pax = temClass.TemClassAdultNumber;
                }
                else
                {
                    pax = temClass.TemClassChildNumber;
                }

                DataTable dataTF = dtTransFees();
                if (HttpContext.Current.Session["tempTransFees"] != null) dataTF = (DataTable)HttpContext.Current.Session["tempTransFees"];
                DataTable dataTF2 = dtTransFees();
                if (HttpContext.Current.Session["tempTransFees2"] != null) dataTF2 = (DataTable)HttpContext.Current.Session["tempTransFees2"];


                byte SeqNoTemp = 1;
                DataTable dataClassTemp = dtClass();
                if (HttpContext.Current.Session["dataClass"] != null) dataClassTemp = (DataTable)HttpContext.Current.Session["dataClass"];

                string getFlightDepartureData = "";
                if (HttpContext.Current.Session["getFlightDepartureData"] != null) getFlightDepartureData = HttpContext.Current.Session["getFlightDepartureData"].ToString();
                string getFlightTransitData = "";
                if (HttpContext.Current.Session["getFlightTransitData"] != null) getFlightTransitData = HttpContext.Current.Session["getFlightTransitData"].ToString();
                string getFlightArrivalData = "";
                if (HttpContext.Current.Session["getFlightArrivalData"] != null) getFlightArrivalData = HttpContext.Current.Session["getFlightArrivalData"].ToString();

                DataTable dtTFOth = new DataTable();
                if (HttpContext.Current.Session["dataTFOthSellFlightByTem"] != null)
                    dtTFOth = (DataTable)HttpContext.Current.Session["dataTFOthSellFlightByTem"];
                else if (HttpContext.Current.Session["dataTFOthSellFlightByTemAddInfant"] != null)
                    dtTFOth = (DataTable)HttpContext.Current.Session["dataTFOthSellFlightByTemAddInfant"];
                else if (HttpContext.Current.Session["dataTFOthSellJourney"] != null)
                    dtTFOth = (DataTable)HttpContext.Current.Session["dataTFOthSellJourney"];
                else if (HttpContext.Current.Session["dataTFOthSellJourneyAddInfant"] != null)
                    dtTFOth = (DataTable)HttpContext.Current.Session["dataTFOthSellJourneyAddInfant"];
                else
                    dtTFOth = dtTransFees();

                DataRow rowTFOth;

                for (int i = 0; i < paxFare.ServiceCharges.Length; i++)
                {
                    switch (paxFare.ServiceCharges[i].ChargeType.ToString().ToUpper())
                    {
                        case "FAREPRICE":
                            classPrice.FullPrice = classPrice.FullPrice + (paxFare.ServiceCharges[i].Amount * pax);
                            classPrice.FarePrice = classPrice.FarePrice + (paxFare.ServiceCharges[i].Amount * pax);
                            break;
                        case "DISCOUNT":
                            classPrice.FullPrice = classPrice.FullPrice - (paxFare.ServiceCharges[i].Amount * pax);
                            classPrice.DiscChrg = classPrice.DiscChrg - (paxFare.ServiceCharges[i].Amount * pax);

                            if (dtTFOth.Rows.Count == 0) SeqNoTemp = 1;
                            else
                            {
                                if (dtTFOth.Rows[dtTFOth.Rows.Count - 1]["FeeDesc"].ToString() != paxFare.ServiceCharges[i].ChargeDetail)
                                    SeqNoTemp += 1;
                                else
                                    SeqNoTemp = Convert.ToByte(dtTFOth.Rows[dtTFOth.Rows.Count - 1]["SeqNo"].ToString());
                            }

                            rowTFOth = dtTFOth.NewRow();
                            rowTFOth["SeqNo"] = SeqNoTemp;
                            rowTFOth["PaxType"] = mode;
                            rowTFOth["Origin"] = getFlightDepartureData;
                            rowTFOth["Transit"] = getFlightTransitData;
                            rowTFOth["Destination"] = getFlightArrivalData;
                            rowTFOth["FeeCode"] = paxFare.ServiceCharges[i].ChargeCode;
                            rowTFOth["FeeDesc"] = paxFare.ServiceCharges[i].ChargeDetail;
                            rowTFOth["FeeType"] = paxFare.ServiceCharges[i].ChargeType;
                            rowTFOth["FeeQty"] = pax;
                            rowTFOth["FeeRate"] = 0 - paxFare.ServiceCharges[i].Amount;
                            rowTFOth["FeeAmt"] = pax * (0 - paxFare.ServiceCharges[i].Amount);
                            dtTFOth.Rows.Add(rowTFOth);

                            break;
                        case "PROMOTIONDISCOUNT":
                            classPrice.FullPrice = classPrice.FullPrice - (paxFare.ServiceCharges[i].Amount * pax);
                            classPrice.PromoDiscChrg = classPrice.PromoDiscChrg - (paxFare.ServiceCharges[i].Amount * pax);
                            break;
                        case "TRAVELFEE":
                            switch (paxFare.ServiceCharges[i].ChargeCode.ToString().ToUpper())
                            {
                                case "APT":
                                case "ATF":
                                case "APTF":
                                    classPrice.FullPrice = classPrice.FullPrice + (paxFare.ServiceCharges[i].Amount * pax);
                                    if (mode == "ADT")
                                    {
                                        classPrice.TaxChrg = classPrice.TaxChrg + (paxFare.ServiceCharges[i].Amount * pax);
                                    }
                                    else
                                    {
                                        classPrice.TAxChrgChd = classPrice.TAxChrgChd + (paxFare.ServiceCharges[i].Amount * pax);
                                    }
                                    break;
                                case "FUEL":
                                    classPrice.FullPrice = classPrice.FullPrice + (paxFare.ServiceCharges[i].Amount * pax);
                                    classPrice.FuelChrg = classPrice.FuelChrg + (paxFare.ServiceCharges[i].Amount * pax);
                                    break;
                                case "PSCH":
                                case "PSH":
                                    classPrice.FullPrice = classPrice.FullPrice + (paxFare.ServiceCharges[i].Amount * pax);
                                    classPrice.PaxFeeChrg = classPrice.PaxFeeChrg + (paxFare.ServiceCharges[i].Amount * pax);
                                    break;
                                default:
                                    classPrice.FullPrice = classPrice.FullPrice + (paxFare.ServiceCharges[i].Amount * pax);
                                    classPrice.OthChrg = classPrice.OthChrg + (paxFare.ServiceCharges[i].Amount * pax);

                                    if (dtTFOth.Rows.Count == 0) SeqNoTemp = 1;
                                    else
                                    {
                                        if (dtTFOth.Rows[dtTFOth.Rows.Count - 1]["FeeDesc"].ToString() != paxFare.ServiceCharges[i].ChargeDetail)
                                            SeqNoTemp += 1;
                                        else
                                            SeqNoTemp = Convert.ToByte(dtTFOth.Rows[dtTFOth.Rows.Count - 1]["SeqNo"].ToString());
                                    }

                                    rowTFOth = dtTFOth.NewRow();
                                    rowTFOth["SeqNo"] = SeqNoTemp;
                                    rowTFOth["PaxType"] = mode;
                                    rowTFOth["Origin"] = getFlightDepartureData;
                                    rowTFOth["Transit"] = getFlightTransitData;
                                    rowTFOth["Destination"] = getFlightArrivalData;
                                    rowTFOth["FeeCode"] = paxFare.ServiceCharges[i].ChargeCode;
                                    rowTFOth["FeeDesc"] = paxFare.ServiceCharges[i].ChargeDetail;
                                    rowTFOth["FeeType"] = paxFare.ServiceCharges[i].ChargeType;
                                    rowTFOth["FeeQty"] = pax;
                                    rowTFOth["FeeRate"] = paxFare.ServiceCharges[i].Amount;
                                    rowTFOth["FeeAmt"] = pax * paxFare.ServiceCharges[i].Amount;
                                    dtTFOth.Rows.Add(rowTFOth);

                                    break;
                            }
                            break;
                        default:
                            classPrice.FullPrice = classPrice.FullPrice + (paxFare.ServiceCharges[i].Amount * pax);
                            classPrice.OthChrg = classPrice.OthChrg + (paxFare.ServiceCharges[i].Amount * pax);


                            if (dtTFOth.Rows.Count == 0) SeqNoTemp = 1;
                            else
                            {
                                if (dtTFOth.Rows[dtTFOth.Rows.Count - 1]["FeeDesc"].ToString() != paxFare.ServiceCharges[i].ChargeDetail)
                                    SeqNoTemp += 1;
                                else
                                    SeqNoTemp = Convert.ToByte(dtTFOth.Rows[dtTFOth.Rows.Count - 1]["SeqNo"].ToString());
                            }

                            rowTFOth = dtTFOth.NewRow();
                            rowTFOth["SeqNo"] = SeqNoTemp;
                            rowTFOth["PaxType"] = mode;
                            rowTFOth["Origin"] = getFlightDepartureData;
                            rowTFOth["Transit"] = getFlightTransitData;
                            rowTFOth["Destination"] = getFlightArrivalData;
                            rowTFOth["FeeCode"] = paxFare.ServiceCharges[i].ChargeCode;
                            rowTFOth["FeeDesc"] = paxFare.ServiceCharges[i].ChargeDetail;
                            rowTFOth["FeeType"] = paxFare.ServiceCharges[i].ChargeType;
                            rowTFOth["FeeQty"] = pax;
                            rowTFOth["FeeRate"] = paxFare.ServiceCharges[i].Amount;
                            rowTFOth["FeeAmt"] = pax * paxFare.ServiceCharges[i].Amount;
                            dtTFOth.Rows.Add(rowTFOth);

                            break;
                    }
                }

                if (dtTFOth.Rows.Count > 0)
                {
                    HttpContext.Current.Session.Remove("dataTransFeesOthers");
                    HttpContext.Current.Session.Add("dataTransFeesOthers", dtTFOth);
                }
            }
            catch (Exception e)
            {
                log.Error(this, e);
            }

        }

        public Boolean SellMoveJourney(TemFlight temFlight, TemFlight temFlight2, string LoginType, string LoginName, string LoginPWD, string LoginDomain, string SellSessionID)
        {
            IBookingManager bookingAPI = new BookingManagerClient();
            ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");

            DataTable dataClass = dtClass();
            DataTable dtTempClass = dtClass();
            DataTable dtTempClass2 = dtClass();

            DataTable dataClassTrans = dtClassTrans();

            int quantityDepart = 0, quantityReturn = 0, totalPaxADT = 0, totalPaxCHD = 0; //amended by diana 20131103 - add pax for adt and chd

            decimal farePriceDepart = 0, farePriceReturn = 0;
            string signatureDepart = "", signatureReturn = "";
            decimal fullPriceDepart = 0, fullPriceReturn = 0;
            int ctrEnum = 0, qtychild = 0, qtyadult = 0;
            //added by anton 12 oct
            decimal bdchAPT = 0, bdFare = 0, bdAPT = 0, bdPaxFee = 0, bdFuel = 0, bdOth = 0, bdDisc = 0, bdPromoDisc = 0, bdSvc = 0, bdSSR = 0, bdSeat = 0, bdInfant = 0, bdFull = 0, bdFullReturn = 0, bdVAT = 0; // for breakdownfee
            decimal bdchAPTReturn = 0, bdFareReturn = 0, bdAPTReturn = 0, bdPaxFeeReturn = 0, bdFuelReturn = 0, bdOthReturn = 0, bdDiscReturn = 0, bdPromoDiscReturn = 0, bdSvcReturn = 0, bdSSRReturn = 0, bdSeatReturn = 0, bdInfantReturn = 0, bdVATReturn = 0; // for breakdownfee

            dtTempClass = GetTemClassList(temFlight.TemFlightFlightNumber);
            dtTempClass2 = GetTemClassList(temFlight2.TemFlightFlightNumber);
            IEnumerable<TemClassofService> temClasslist = ConvertToIEnum(dtTempClass);
            IEnumerable<TemClassofService> temClasslist2 = ConvertToIEnum(dtTempClass2);
            int id = 0;

            //added by ketee,
            List<PassengerData> lstPassenger = new List<PassengerData>();
            PassengerData rowPassenger;

            //added by ketee, add sell service fees
            string cur = string.Empty;
            bool bError = false;

            int passengerno = 0;
            int prevPNR = 1;

            SellRequest sellrequest = new SellRequest();
            SellJourneyRequestData sjrd = new SellJourneyRequestData();

            log.Info(this, "Tem Class 1 = " + temClasslist.Count() + "; Tem Class 2 =" + temClasslist2.Count());

            if (temClasslist.Count() == temClasslist2.Count())
            {
                foreach (TemClassofService temClass in temClasslist)
                {
                    //prevPNR += 1;
                    //if (LoginType == "SkyAgent")
                    //{

                    //    SellSessionID = apiBooking.AgentLogon("SkyAgent", LoginDomain, LoginName, LoginPWD);
                    //}
                    //else
                    //{
                    //    SellSessionID = apiBooking.AgentLogon();
                    //}

                    temClass.TemClassSellSignature = SellSessionID;
                    UpdateTemClass(temClass);

                    sellrequest.Signature = SellSessionID;
                    sellrequest.ContractVersion = 3413;
                    sellrequest.SellRequestData = new SellRequestData();
                    sellrequest.SellRequestData.SellBy = SellBy.Journey;
                    sellrequest.SellRequestData.SellJourneyRequest = new SellJourneyRequest();

                    sjrd.PaxCount = Convert.ToInt16(temClass.TemClassPersonNumber);
                    sjrd.CurrencyCode = temFlight.TemFlightCurrencyCode.Trim();
                    //added by ketee
                    cur = temFlight.TemFlightCurrencyCode.Trim();
                    sjrd.Passengers = new Passenger[temClass.TemClassPersonNumber];

                    //check child
                    string adultType = "ADT";

                    //check child and adult
                    int childpax = temClass.TemClassChildNumber;
                    qtychild = childpax;
                    int adultpax = temClass.TemClassAdultNumber;
                    qtyadult = adultpax;

                    //added by diana 20131103 - add numofpax
                    totalPaxADT += qtyadult;
                    totalPaxCHD += qtychild;

                    for (int i = 0; i < temClass.TemClassPersonNumber; i++)
                    {
                        //check adult type

                        if (adultpax > 0)
                        {
                            adultType = "ADT";
                        }
                        else
                        {
                            adultType = "CHD";
                        }

                        sjrd.Passengers[i] = new Passenger();

                        //sjrd.Passengers[i].PassengerNumber = Convert.ToInt16(passengerno);
                        sjrd.Passengers[i].PassengerNumber = Convert.ToInt16(i);

                        sjrd.Passengers[i].State = MessageState.New;
                        sjrd.Passengers[i].PassengerID = passengerno;
                        sjrd.Passengers[i].PassengerTypeInfos = new PassengerTypeInfo[1];
                        sjrd.Passengers[i].PassengerTypeInfos[0] = new PassengerTypeInfo();

                        if (adultType == "ADT")
                            sjrd.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse("1994-1-1");
                        else if (adultType == "CHD")
                        {
                            DateTime dtTime = DateTime.Now.AddYears(-5);
                            sjrd.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse(dtTime.Year + "-1-1");
                        }

                        sjrd.Passengers[i].PassengerTypeInfos[0].PaxType = adultType;
                        sjrd.Passengers[i].PassengerTypeInfos[0].State = MessageState.New;
                        sjrd.Passengers[i].PseudoPassenger = false;

                        //added by ketee
                        rowPassenger = new PassengerData();

                        //rowPassenger.PassengerID = passengerno.ToString();
                        rowPassenger.PassengerID = i.ToString();

                        rowPassenger.FirstName = "TBA";
                        rowPassenger.LastName = "TBA";
                        rowPassenger.PassportNo = "TBA";
                        rowPassenger.DOB = DateTime.Parse("1900-01-01");
                        rowPassenger.SyncCreate = DateTime.Now;
                        rowPassenger.LastSyncBy = "System";

                        rowPassenger.RecordLocator = prevPNR.ToString();

                        lstPassenger.Add(rowPassenger);

                        passengerno++;
                        //count adultpax --
                        adultpax--;
                    }
                    //added by ketee
                    if (lstPassenger != null)
                    {
                        HttpContext.Current.Session.Remove("listPassengers");
                        HttpContext.Current.Session.Add("listPassengers", lstPassenger);
                    }

                    prevPNR += 2;

                    sjrd.Journeys = new SellJourney[2];
                    sjrd.Journeys[0] = new SellJourney();
                    sjrd.Journeys[0].State = MessageState.New;
                    sjrd.Journeys[0].NotForGeneralUse = false;
                    if (temFlight.TemFlightTransit != "")
                    { sjrd.Journeys[0].Segments = new SellSegment[2]; }
                    else { sjrd.Journeys[0].Segments = new SellSegment[1]; }
                    SellSegment srSegment = new SellSegment();
                    srSegment.State = MessageState.New;
                    srSegment.DepartureStation = temFlight.TemFlightDeparture.Trim();

                    if (temFlight.TemFlightTransit != "")
                    {
                        srSegment.ArrivalStation = temFlight.TemFlightTransit.Trim();
                    }
                    else
                    {
                        srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                    }

                    srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd);
                    srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta);
                    srSegment.FlightDesignator = new FlightDesignator();
                    srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber.Trim().PadLeft(4, ' ');
                    srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
                    srSegment.Fare = new SellFare();
                    srSegment.Fare.State = MessageState.New;
                    srSegment.Fare.ClassOfService = temClass.TemClassClass.Trim();
                    srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
                    srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey.Split('~')[4].ToString();
                    srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey.Split('~')[3].ToString();

                    srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey.Split('~')[6]);
                    srSegment.Fare.FareClassOfService = temClass.TemClassClass.Trim();
                    srSegment.Fare.IsAllotmentMarketFare = false;

                    switch (temClass.TempFareApplicationType.ToString().ToLower())
                    {
                        case "route":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                            break;
                        case "sector":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                            break;
                        case "governing":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                            break;
                        default:
                            srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                            //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                            break;
                    }
                    sjrd.Journeys[0].Segments[0] = srSegment;

                    if (temFlight.TemFlightTransit != "")
                    {
                        srSegment = new SellSegment();
                        srSegment.State = MessageState.New;
                        srSegment.DepartureStation = temFlight.TemFlightTransit.Trim();
                        srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                        srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd2);
                        srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta2);
                        srSegment.FlightDesignator = new FlightDesignator();

                        srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber2.Trim();
                        srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();

                        srSegment.Fare = new SellFare();
                        srSegment.Fare.State = MessageState.New;
                        srSegment.Fare.ClassOfService = temClass.TemClassClass2.Trim();
                        srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();
                        srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey2.Split('~')[4].ToString();
                        srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey2.Split('~')[3].ToString();

                        srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey2.Split('~')[6]);
                        srSegment.Fare.FareClassOfService = temClass.TemClassClass2.Trim();
                        srSegment.Fare.IsAllotmentMarketFare = false;

                        switch (temClass.TempFareApplicationType2.ToString().ToLower())
                        {
                            case "route":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                break;
                            case "sector":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                                break;
                            case "governing":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                                break;
                            default:
                                srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                                break;
                        }
                        sjrd.Journeys[0].Segments[1] = srSegment;

                    }

                    //fill data for new dataClass
                    quantityDepart = temClass.TemClassPersonNumber;
                    farePriceDepart = Convert.ToDecimal(temClass.TemClassClassPrice);
                    fullPriceDepart = Convert.ToDecimal(temClass.TemClassFullPrice);
                    signatureDepart = SellSessionID;

                    TemClassofService temClass2 = temClasslist2.ElementAt(ctrEnum);

                    temClass2.TemClassSellSignature = SellSessionID;// SessionManager._signature;
                    UpdateTemClass(temClass2);

                    sjrd.Journeys[1] = new SellJourney();
                    sjrd.Journeys[1].State = MessageState.New;
                    sjrd.Journeys[1].NotForGeneralUse = false;
                    if (temFlight2.TemFlightTransit != "")
                    { sjrd.Journeys[1].Segments = new SellSegment[2]; }
                    else { sjrd.Journeys[1].Segments = new SellSegment[1]; }
                    SellSegment srSegment1 = new SellSegment();
                    srSegment1.State = MessageState.New;
                    srSegment1.DepartureStation = temFlight2.TemFlightDeparture.Trim();

                    if (temFlight2.TemFlightTransit != "")
                    {
                        srSegment1.ArrivalStation = temFlight2.TemFlightTransit.Trim();
                    }
                    else
                    {
                        srSegment1.ArrivalStation = temFlight2.TemFlightArrival.Trim();
                    }

                    srSegment1.STD = Convert.ToDateTime(temFlight2.TemFlightStd);
                    srSegment1.STA = Convert.ToDateTime(temFlight2.TemFlightSta);
                    srSegment1.FlightDesignator = new FlightDesignator();
                    srSegment1.FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber.Trim().PadLeft(4, ' ');
                    srSegment1.FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode.Trim();
                    srSegment1.Fare = new SellFare();
                    srSegment1.Fare.State = MessageState.New;
                    srSegment1.Fare.ClassOfService = temClass2.TemClassClass.Trim();
                    srSegment1.Fare.CarrierCode = temFlight2.TemFlightCarrierCode.Trim();
                    srSegment1.Fare.RuleNumber = temClass2.TemClassFareSellKey.Split('~')[4].ToString();// "AAB1";
                    srSegment1.Fare.FareBasisCode = temClass2.TemClassFareSellKey.Split('~')[3].ToString();// "A00H00";

                    srSegment1.Fare.FareSequence = Convert.ToInt16(temClass2.TemClassFareSellKey.Split('~')[6]);
                    srSegment1.Fare.FareClassOfService = temClass2.TemClassClass.Trim();
                    srSegment1.Fare.IsAllotmentMarketFare = false;

                    switch (temClass2.TempFareApplicationType.ToString().ToLower())
                    {
                        case "route":
                            srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                            break;
                        case "sector":
                            srSegment1.Fare.FareApplicationType = FareApplicationType.Sector;
                            break;
                        case "governing":
                            srSegment1.Fare.FareApplicationType = FareApplicationType.Governing;
                            break;
                        default:
                            srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                            //srSegment1.Fare.FareApplicationType = FareApplicationType.Unmapped;
                            break;
                    }
                    sjrd.Journeys[1].Segments[0] = srSegment1;

                    if (temFlight2.TemFlightTransit != "")
                    {
                        srSegment1 = new SellSegment();
                        srSegment1.State = MessageState.New;
                        srSegment1.DepartureStation = temFlight2.TemFlightTransit.Trim();
                        srSegment1.ArrivalStation = temFlight2.TemFlightArrival.Trim();
                        srSegment1.STD = Convert.ToDateTime(temFlight2.TemFlightStd2);
                        srSegment1.STA = Convert.ToDateTime(temFlight2.TemFlightSta2);
                        srSegment1.FlightDesignator = new FlightDesignator();

                        srSegment1.FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber2.Trim();
                        srSegment1.FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode2.Trim();

                        srSegment1.Fare = new SellFare();
                        srSegment1.Fare.State = MessageState.New;
                        srSegment1.Fare.ClassOfService = temClass2.TemClassClass2.Trim();
                        srSegment1.Fare.CarrierCode = temFlight2.TemFlightCarrierCode2.Trim();
                        srSegment1.Fare.RuleNumber = temClass2.TemClassFareSellKey2.Split('~')[4].ToString();
                        srSegment1.Fare.FareBasisCode = temClass2.TemClassFareSellKey2.Split('~')[3].ToString();

                        srSegment1.Fare.FareSequence = Convert.ToInt16(temClass2.TemClassFareSellKey2.Split('~')[6]);
                        srSegment1.Fare.FareClassOfService = temClass2.TemClassClass2.Trim();
                        srSegment1.Fare.IsAllotmentMarketFare = false;

                        switch (temClass2.TempFareApplicationType2.ToString().ToLower())
                        {
                            case "route":
                                srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                                break;
                            case "sector":
                                srSegment1.Fare.FareApplicationType = FareApplicationType.Sector;
                                break;
                            case "governing":
                                srSegment1.Fare.FareApplicationType = FareApplicationType.Governing;
                                break;
                            default:
                                srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                                //srSegment1.Fare.FareApplicationType = FareApplicationType.Unmapped;
                                break;
                        }
                        sjrd.Journeys[1].Segments[1] = srSegment1;

                    }

                    //fill data for new dataClass
                    quantityReturn = temClass2.TemClassPersonNumber;
                    farePriceReturn = Convert.ToDecimal(temClass2.TemClassClassPrice);
                    fullPriceReturn = Convert.ToDecimal(temClass2.TemClassFullPrice);
                    signatureReturn = SellSessionID;

                    ctrEnum += 1;

                    if (sjrd != null)
                    {
                        try
                        {
                            sellrequest.SellRequestData.SellJourneyRequest.SellJourneyRequestData = sjrd;
                            //string requeststring = GetXMLString(sellrequest);
                            SellResponse response = bookingAPI.Sell(sellrequest);
                            //string xml = GetXMLString(response);
                            //added by ketee, add service fees
                            //foreach (PassengerData rowpassenger in lstPassenger)
                            //{

                            //remarked by diana 20170201, no more service fee
                            //if (AddServiceFees(SellSessionID, cur, 0) == false)
                            //{
                            //    bError = true;
                            //    log.Warning(this, "Add fees failed: " + SellSessionID);
                            //    break;
                            //}

                            //added by diana 20140122 - change fee
                            if (AddChangeFees(SellSessionID, cur, 0) == false)
                            {
                                bError = true;
                                log.Warning(this, "Add fees failed: " + SellSessionID);
                                break;
                            }
                            //}

                            //fill breakdown fee
                            Navitaire.BookingManager.Booking book = GetBookingFromState(SellSessionID);
                            //string boolxml = GetXMLString(book);

                            //Get Currecy Rate List 20130625
                            Navitaire.UtilitiesManager.GetExternalRatesListResponseData RateResponse = apiBooking.GetExternalRateList(SellSessionID);
                            string curr = book.CurrencyCode;
                            //string req = GetXMLString(RateResponse);
                            decimal currRate = 1;
                            if (curr != "MYR")
                            {
                                for (int i = 0; i < RateResponse.ExternalRateList.Length; i++)
                                {
                                    if (RateResponse.ExternalRateList[i].QuotedCurrency == curr && RateResponse.ExternalRateList[i].CollectedCurrency == "MYR")
                                    {
                                        currRate = RateResponse.ExternalRateList[i].ExchangeRate;
                                    }
                                }
                            }

                            //depart
                            int segCount = book.Journeys[0].Segments.Length;
                            //renew temClass
                            ClassPrice classPriceDepart = new ClassPrice();

                            for (int iDepart = 0; iDepart < segCount; iDepart++)
                            {
                                //added by diana 20131031 - added condition if paxfare length is more than 0
                                if (book.Journeys[0].Segments[iDepart].Fares[0].PaxFares.Length > 0)
                                {
                                    PaxFare paxFare = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];
                                    PaxFare paxFareChd;
                                    if (temClass.TemClassAdultNumber > 0)
                                    {
                                        AddFarePrice(paxFare, temClass, ref classPriceDepart, "ADT");
                                    }

                                    if (temClass.TemClassChildNumber > 0)
                                    {
                                        if (book.Journeys[0].Segments[iDepart].Fares[0].PaxFares.Length > 1)
                                            paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[1];
                                        else
                                            paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];

                                        //if (temFlight.TemFlightDeparture.ToString().ToUpper() != "HKG" && temFlight.TemFlightArrival.ToString().ToUpper() != "HKG")
                                        //{
                                        //    paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];
                                        //}
                                        AddFarePrice(paxFareChd, temClass, ref classPriceDepart, "CHD");
                                    }
                                }
                            }
                            //remove divide by 2 as service fees apply to 1st booking only
                            //bdSvc += book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2;
                            //classPriceDepart.ServChrg = (book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2) * temClass.TemClassPersonNumber;


                            //amended by diana 20140121 - add initial value to 0, then add it
                            classPriceDepart.ServChrg = 0;
                            classPriceDepart.SSRChrg = 0;
                            classPriceDepart.SeatChrg = 0;
                            classPriceDepart.InfantChrg = 0;
                            classPriceDepart.ServVAT = 0;

                            //load service charges passenger
                            if (book.Passengers[0].PassengerFees.Length > 0 && book.Passengers[0].PassengerFees[0].ServiceCharges.Length > 0)
                            {
                                for (int i = 0; i < book.Passengers[0].PassengerFees[0].ServiceCharges.Length; i++)
                                {
                                    switch (book.Passengers[0].PassengerFees[0].ServiceCharges[i].ChargeCode.ToString().ToUpper())
                                    {
                                        case "SVCF":
                                            classPriceDepart.ServChrg += (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                            //classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                                            break;
                                        case "VAT":
                                            classPriceDepart.ServVAT += (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                            //classPriceDepart.FullPrice += classPriceDepart.ServVAT;
                                            break;
                                        default:
                                            classPriceDepart.ServChrg += (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                            //classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                                            break;
                                    }
                                }
                            }
                            classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                            classPriceDepart.FullPrice += classPriceDepart.SSRChrg;
                            classPriceDepart.FullPrice += classPriceDepart.SeatChrg;
                            classPriceDepart.FullPrice += classPriceDepart.InfantChrg;
                            classPriceDepart.FullPrice += classPriceDepart.ServVAT;


                            //bdFull = bdFull + classPriceDepart.FullPrice;

                            classPriceDepart.ClassID = temClass.TemClassId;

                            //return breakdown fee
                            ClassPrice classPriceReturn = new ClassPrice();

                            segCount = book.Journeys[1].Segments.Length;
                            classPriceReturn.ClassID = temClass2.TemClassId;

                            for (int iReturn = 0; iReturn < segCount; iReturn++)
                            {
                                //added by diana 20131031 - added condition if paxfare length is more than 0
                                if (book.Journeys[1].Segments[iReturn].Fares[0].PaxFares.Length > 0)
                                {
                                    PaxFare paxFare = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[0];
                                    PaxFare paxFareChd;

                                    if (temClass2.TemClassAdultNumber > 0)
                                    {
                                        AddFarePrice(paxFare, temClass2, ref classPriceReturn, "ADT");
                                    }

                                    if (temClass2.TemClassChildNumber > 0)
                                    {
                                        if (book.Journeys[1].Segments[iReturn].Fares[0].PaxFares.Length > 1)
                                            paxFareChd = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[1];
                                        else
                                            paxFareChd = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[0];

                                        //if (temFlight.TemFlightDeparture.ToString().ToUpper() != "HKG" && temFlight.TemFlightArrival.ToString().ToUpper() != "HKG")
                                        //{
                                        //    paxFareChd = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[0];
                                        //}
                                        AddFarePrice(paxFareChd, temClass2, ref classPriceReturn, "CHD");
                                    }
                                }
                            }

                            //remark, as service charge only apply to 1st segment
                            //bdSvcReturn += book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2;
                            //classPriceReturn.ServChrg = (book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2) * temClass2.TemClassPersonNumber;
                            //bdSvcReturn += 0;
                            classPriceReturn.ServChrg = 0;
                            classPriceReturn.SSRChrg = 0;
                            classPriceReturn.SeatChrg = 0;
                            classPriceReturn.InfantChrg = 0;
                            classPriceReturn.FullPrice += classPriceReturn.ServChrg + classPriceReturn.SSRChrg + classPriceReturn.SeatChrg + classPriceReturn.InfantChrg;

                            //bdFullReturn = bdFullReturn + classPriceReturn.FullPrice;

                            //added by ketee , curr rate 20130625
                            classPriceDepart.CurrencyRate = currRate;
                            classPriceReturn.CurrencyRate = currRate;

                            UpdateClassPrice(classPriceDepart);
                            UpdateClassPrice(classPriceReturn);

                            DataRow row;
                            row = dataClassTrans.NewRow();
                            row["Quantity"] = quantityDepart;
                            row["FarePrice"] = (classPriceDepart.FarePrice + classPriceReturn.FarePrice);
                            //commented by diana 20131104
                            //private void ProcessPairedFareJhn(ClassFare[] GoingFare, ClassFare[] ReturnFare,row["FarePrice"] = (classPriceDepart.FarePrice + classPriceReturn.FarePrice) / temClass.TemClassPersonNumber;
                            row["FullPrice"] = (classPriceDepart.FullPrice + classPriceReturn.FullPrice);
                            row["SellSignature"] = signatureDepart;
                            //added by ketee, 20121016
                            row["ServChrg"] = classPriceDepart.ServChrg + classPriceReturn.ServChrg;
                            row["SSRChrg"] = classPriceDepart.SSRChrg + classPriceReturn.SSRChrg;
                            row["SeatChrg"] = classPriceDepart.SeatChrg + classPriceReturn.SeatChrg;
                            row["InfantChrg"] = classPriceDepart.InfantChrg + classPriceReturn.InfantChrg;
                            //added by ketee, VAT
                            row["ServVAT"] = classPriceDepart.ServVAT;
                            row["DetailCollectedAmt"] = 0;
                            row["RecordLocator"] = "";
                            //added by ketee 20130625 currrate
                            row["CurrencyRate"] = classPriceDepart.CurrencyRate;

                            //added by ketee, breakdown fees 20130625
                            bdPaxFee += classPriceDepart.PaxFeeChrg;
                            bdAPT += classPriceDepart.TaxChrg;
                            bdchAPT += classPriceDepart.TAxChrgChd;
                            bdFare += classPriceDepart.FarePrice;
                            bdFuel += classPriceDepart.FuelChrg;
                            bdFull += classPriceDepart.FullPrice;
                            bdOth += classPriceDepart.OthChrg;
                            bdDisc += classPriceDepart.DiscChrg;
                            bdPromoDisc += classPriceDepart.PromoDiscChrg;
                            bdSvc += classPriceDepart.ServChrg;
                            bdSSR += classPriceDepart.SSRChrg;
                            bdSeat += classPriceDepart.SeatChrg;
                            bdInfant += classPriceDepart.InfantChrg;
                            bdVAT += classPriceDepart.ServVAT;

                            bdPaxFeeReturn += classPriceReturn.PaxFeeChrg;
                            bdAPTReturn += classPriceReturn.TaxChrg;
                            bdchAPTReturn += classPriceReturn.TAxChrgChd;
                            bdFareReturn += classPriceReturn.FarePrice;
                            bdFuelReturn += classPriceReturn.FuelChrg;
                            bdFullReturn += classPriceReturn.FullPrice;
                            bdOthReturn += classPriceReturn.OthChrg;
                            bdDiscReturn += classPriceReturn.DiscChrg;
                            bdPromoDiscReturn += classPriceReturn.PromoDiscChrg;
                            bdSvcReturn += classPriceReturn.ServChrg;
                            bdSSRReturn += classPriceReturn.SSRChrg;
                            bdSeatReturn += classPriceReturn.SeatChrg;
                            bdInfantReturn += classPriceReturn.InfantChrg;
                            bdVAT += classPriceReturn.ServVAT;

                            dataClassTrans.Rows.Add(row);

                            //save new data class into session
                            if (dataClassTrans.Rows.Count > 0)
                            {
                                HttpContext.Current.Session.Remove("dataClassTrans");
                                HttpContext.Current.Session.Add("dataClassTrans", dataClassTrans);
                            }
                        }
                        catch (Exception ex)
                        {
                            bError = true;
                            log.Error(this, ex);
                        }
                    }
                }
                if (bError)
                {
                    log.Warning(this, "Sell Journey failed.");
                    return false;
                }
            }
            else
            {
                //fares not equal
            }

            //save new data class into session
            if (dataClassTrans.Rows.Count > 0)
            {
                HttpContext.Current.Session.Remove("dataClassTrans");
                HttpContext.Current.Session.Add("dataClassTrans", dataClassTrans);

                //depart breakdown

                DataTable dataBreakdownFee = dtBreakdownFee();
                DataRow rowBD;
                rowBD = dataBreakdownFee.NewRow();
                //added child fare 
                rowBD["Fare"] = bdFare / (totalPaxADT + totalPaxCHD);
                if (totalPaxCHD > 0)
                {
                    rowBD["ChApt"] = bdchAPT / totalPaxCHD;
                }
                else
                {
                    rowBD["ChApt"] = 0;
                }

                rowBD["Apt"] = bdAPT / totalPaxADT;
                rowBD["PaxFee"] = bdPaxFee;
                rowBD["Fuel"] = bdFuel;
                rowBD["Svc"] = bdSvc;
                rowBD["SSR"] = bdSSR;
                rowBD["Seat"] = bdSeat;
                //added by ketee , VAT
                rowBD["VAT"] = bdVAT;
                rowBD["Oth"] = bdOth;
                rowBD["Disc"] = bdDisc;
                rowBD["PromoDisc"] = bdPromoDisc;
                rowBD["Qty"] = qtyadult + " Adult " + "/" + qtychild + " Child";
                dataBreakdownFee.Rows.Add(rowBD);

                HttpContext.Current.Session.Remove("dataBDFeeDepart");
                HttpContext.Current.Session.Add("dataBDFeeDepart", dataBreakdownFee);

                //return                

                DataTable dataBreakdownFeeReturn = dtBreakdownFee();
                DataRow rowBDReturn;
                rowBDReturn = dataBreakdownFeeReturn.NewRow();

                rowBDReturn["Fare"] = bdFareReturn / (totalPaxADT + totalPaxCHD);
                if (totalPaxCHD > 0)
                {
                    rowBDReturn["ChApt"] = bdchAPTReturn / totalPaxCHD;
                }
                else
                {
                    rowBDReturn["ChApt"] = 0;
                }

                rowBDReturn["Apt"] = bdAPTReturn / totalPaxADT;
                rowBDReturn["PaxFee"] = bdPaxFeeReturn;
                rowBDReturn["Fuel"] = bdFuelReturn;
                rowBDReturn["Svc"] = bdSvcReturn;
                rowBDReturn["SSR"] = bdSSRReturn;
                rowBDReturn["Seat"] = bdSeatReturn;
                //added by ketee, VAT
                rowBDReturn["VAT"] = 0;
                rowBDReturn["Oth"] = bdOthReturn;
                rowBDReturn["Disc"] = bdDiscReturn;
                rowBDReturn["PromoDisc"] = bdPromoDiscReturn;
                rowBDReturn["Qty"] = qtyadult + "Adult" + ":" + qtychild + "Child";
                dataBreakdownFeeReturn.Rows.Add(rowBDReturn);

                HttpContext.Current.Session.Remove("dataBDFeeReturn");
                HttpContext.Current.Session.Add("dataBDFeeReturn", dataBreakdownFeeReturn);

                UpdateFlightPrice(temFlight.TemFlightId, decimal.Parse(rowBD["Fare"].ToString()), bdFull, bdAPT, bdPaxFee, bdchAPT, bdFuel, bdSvc, bdSSR, bdSeat, bdOth, bdDisc, bdPromoDisc, bdFull / temFlight.TemFlightPaxNum, bdVAT);
                UpdateFlightPrice(temFlight2.TemFlightId, decimal.Parse(rowBDReturn["Fare"].ToString()), bdFullReturn, bdAPTReturn, bdPaxFeeReturn, bdchAPTReturn, bdFuelReturn, bdSvcReturn, bdSSRReturn, bdSeatReturn, bdOthReturn, bdDiscReturn, bdPromoDiscReturn, bdFullReturn / temFlight.TemFlightPaxNum, bdVAT);
            }
            return true;
        }

        public Boolean SellJourneyMove(TemFlight temFlight, TemFlight temFlight2, string LoginType, string LoginName, string LoginPWD, string LoginDomain, string SellSessionID, string PNR, int InfantNum = 0)
        {
            IBookingManager bookingAPI = new BookingManagerClient();
            ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");

            DataTable dataClass = dtClass();
            DataTable dtTempClass = dtClass();
            DataTable dtTempClass2 = dtClass();

            DataTable dataClassTrans = dtClassTrans();

            int quantityDepart = 0, quantityReturn = 0, qtychild = 0, qtyadult = 0;
            decimal farePriceDepart = 0, farePriceReturn = 0;
            string signatureDepart = "", signatureReturn = "";
            decimal fullPriceDepart = 0, fullPriceReturn = 0;
            int totalPax = 0, totalPaxADT = 0, totalPaxCHD = 0; //amended by diana 20131103 - add pax for adt and chd
            int ctrEnum = 0;

            dtTempClass = GetTemClassList(temFlight.TemFlightFlightNumber);
            dtTempClass2 = GetTemClassList(temFlight2.TemFlightFlightNumber);
            IEnumerable<TemClassofService> temClasslist = ConvertToIEnum(dtTempClass);
            IEnumerable<TemClassofService> temClasslist2 = ConvertToIEnum(dtTempClass2);
            int id = 0;

            //added by anton 12 oct
            decimal bdchAPT = 0, bdFare = 0, bdAPT = 0, bdPaxFee = 0, bdFuel = 0, bdOth = 0, bdDisc = 0, bdPromoDisc = 0, bdSvc = 0, bdSSR = 0, bdSeat = 0, bdInfant = 0, bdFull = 0, bdFullReturn = 0, bdVAT = 0; // for breakdownfee
            decimal bdchAPTReturn = 0, bdFareReturn = 0, bdAPTReturn = 0, bdPaxFeeReturn = 0, bdFuelReturn = 0, bdOthReturn = 0, bdDiscReturn = 0, bdPromoDiscReturn = 0, bdSvcReturn = 0, bdSSRReturn = 0, bdSeatReturn = 0, bdInfantReturn = 0, bdVATReturn = 0; // for breakdownfee

            //added by ketee,
            List<PassengerData> lstPassenger = new List<PassengerData>();
            PassengerData rowPassenger;

            //added by ketee, add sell service fees
            string cur = string.Empty;
            bool bError = false;

            int passengerno = 0;
            int prevPNR = 0;

            SellRequest sellrequest = new SellRequest();
            SellJourneyRequestData sjrd = new SellJourneyRequestData();

            if (temClasslist.Count() == temClasslist2.Count())
            {
                foreach (TemClassofService temClass in temClasslist)
                {
                    prevPNR += 1;
                    if (SellSessionID == "")
                    {
                        SellSessionID = apiBooking.AgentLogon();
                    }
                    GetBookingRequest booking = new GetBookingRequest();
                    booking.Signature = SellSessionID;
                    booking.ContractVersion = 3413;
                    booking.GetBookingReqData = new GetBookingRequestData();
                    booking.GetBookingReqData.GetBookingBy = GetBookingBy.RecordLocator;
                    booking.GetBookingReqData.GetByRecordLocator = new GetByRecordLocator();
                    booking.GetBookingReqData.GetByRecordLocator.RecordLocator = PNR;
                    GetBookingResponse responseBooking = bookingAPI.GetBooking(booking);
                    ABS.Navitaire.BookingManager.Booking bookingData = responseBooking.Booking;

                    //Cancel Journey
                    CancelRequest cancelRequest = new CancelRequest();
                    cancelRequest.Signature = SellSessionID;

                    cancelRequest.ContractVersion = 3413;
                    cancelRequest.CancelRequestData = new CancelRequestData();
                    cancelRequest.CancelRequestData.CancelBy = CancelBy.Journey;
                    cancelRequest.CancelRequestData.CancelJourney = new CancelJourney();
                    cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest = new CancelJourneyRequest();
                    cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys = new Journey[bookingData.Journeys.Length];
                    for (int i = 0; i < cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys.Length; i++)
                    {
                        cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i] = new Journey();
                        cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i].Segments = new Segment[bookingData.Journeys[i].Segments.Length];
                        for (int ii = 0; ii < cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i].Segments.Length; ii++)
                        {
                            //cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i] = new Journey();
                            cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i].Segments[ii] = new Segment();
                            cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i].Segments[ii].DepartureStation = bookingData.Journeys[i].Segments[ii].DepartureStation;
                            cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i].Segments[ii].ArrivalStation = bookingData.Journeys[i].Segments[ii].ArrivalStation;
                            cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i].Segments[ii].STD = bookingData.Journeys[i].Segments[ii].STD;
                            cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i].Segments[ii].STA = bookingData.Journeys[i].Segments[ii].STA;
                            cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i].Segments[ii].FlightDesignator = new FlightDesignator();
                            cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i].Segments[ii].FlightDesignator = bookingData.Journeys[i].Segments[ii].FlightDesignator;
                        }
                    }

                    CancelResponse cancelResponse = bookingAPI.Cancel(cancelRequest);


                    temClass.TemClassSellSignature = SellSessionID;
                    UpdateTemClass(temClass);

                    sellrequest.Signature = SellSessionID;
                    sellrequest.ContractVersion = 3413;
                    sellrequest.SellRequestData = new SellRequestData();
                    sellrequest.SellRequestData.SellBy = SellBy.Journey;
                    sellrequest.SellRequestData.SellJourneyRequest = new SellJourneyRequest();

                    sjrd.PaxCount = Convert.ToInt16(temClass.TemClassPersonNumber);
                    sjrd.CurrencyCode = temFlight.TemFlightCurrencyCode.Trim();
                    //added by ketee
                    cur = temFlight.TemFlightCurrencyCode.Trim();
                    sjrd.Passengers = new Passenger[temClass.TemClassPersonNumber];

                    //check child
                    string adultType = "ADT";

                    //check child and adult
                    int childpax = temClass.TemClassChildNumber;
                    qtychild = childpax;
                    int adultpax = temClass.TemClassAdultNumber;
                    qtyadult = adultpax;

                    //added by diana 20131103 - add numofpax
                    totalPaxADT += qtyadult;
                    totalPaxCHD += qtychild;

                    for (int i = 0; i < temClass.TemClassPersonNumber; i++)
                    {
                        //check adult type

                        sjrd.Passengers[i] = new Passenger();

                        sjrd.Passengers[i].PassengerNumber = responseBooking.Booking.Passengers[i].PassengerNumber;

                        sjrd.Passengers[i].State = MessageState.New;
                        sjrd.Passengers[i].PassengerID = responseBooking.Booking.Passengers[i].PassengerID;
                        sjrd.Passengers[i].PassengerTypeInfos = new PassengerTypeInfo[1];
                        sjrd.Passengers[i].PassengerTypeInfos[0] = new PassengerTypeInfo();
                        sjrd.Passengers[i].PassengerTypeInfos[0].DOB = responseBooking.Booking.Passengers[i].PassengerTypeInfos[0].DOB;
                        sjrd.Passengers[i].PassengerTypeInfos[0].PaxType = responseBooking.Booking.Passengers[i].PassengerTypeInfos[0].PaxType;
                        sjrd.Passengers[i].PassengerTypeInfos[0].State = MessageState.New;

                        sjrd.Passengers[i].Names = new BookingName[1];
                        sjrd.Passengers[i].Names[0] = new BookingName();
                        sjrd.Passengers[i].Names[0].FirstName = responseBooking.Booking.Passengers[i].Names[0].FirstName;
                        sjrd.Passengers[i].Names[0].LastName = responseBooking.Booking.Passengers[i].Names[0].LastName;
                        sjrd.Passengers[i].Names[0].Title = responseBooking.Booking.Passengers[i].Names[0].Title;

                        if (responseBooking.Booking.Passengers[i].Infant != null)
                        {
                            sjrd.Passengers[i].Infant = new PassengerInfant();
                            sjrd.Passengers[i].Infant.State = MessageState.New;
                            sjrd.Passengers[i].Infant.Names = new BookingName[1];
                            sjrd.Passengers[i].Infant.Names[0] = new BookingName();
                            sjrd.Passengers[i].Infant.Names[0].FirstName = responseBooking.Booking.Passengers[i].Infant.Names[0].FirstName;
                            sjrd.Passengers[i].Infant.Names[0].FirstName = responseBooking.Booking.Passengers[i].Infant.Names[0].LastName;
                            sjrd.Passengers[i].Infant.Gender = responseBooking.Booking.Passengers[i].Infant.Gender;
                            sjrd.Passengers[i].Infant.DOB = responseBooking.Booking.Passengers[i].Infant.DOB;
                        }
                        //Amended by Ellis 20170323, for flightchange
                        if (responseBooking.Booking.Passengers[i].PassengerTravelDocuments.Length > 0)
                        {
                            sjrd.Passengers[i].PassengerTravelDocuments = new PassengerTravelDocument[responseBooking.Booking.Passengers[i].PassengerTravelDocuments.Length];

                            for (int ii = 0; ii < sjrd.Passengers[i].PassengerTravelDocuments.Length; ii++)
                            {
                                sjrd.Passengers[i].PassengerTravelDocuments[ii] = new PassengerTravelDocument();
                                sjrd.Passengers[i].PassengerTravelDocuments[ii].DocNumber = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[ii].DocNumber;
                                sjrd.Passengers[i].PassengerTravelDocuments[ii].ExpirationDate = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[0].ExpirationDate;
                                sjrd.Passengers[i].PassengerTravelDocuments[ii].Gender = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[ii].Gender;
                                sjrd.Passengers[i].PassengerTravelDocuments[ii].IssuedDate = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[ii].IssuedDate;
                                sjrd.Passengers[i].PassengerTravelDocuments[ii].Nationality = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[ii].Nationality;
                                sjrd.Passengers[i].PassengerTravelDocuments[ii].DOB = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[ii].DOB;
                                sjrd.Passengers[i].PassengerTravelDocuments[ii].DocSuffix = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[ii].DocSuffix;
                                sjrd.Passengers[i].PassengerTravelDocuments[ii].DocTypeCode = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[ii].DocTypeCode;
                                sjrd.Passengers[i].PassengerTravelDocuments[ii].Names = new BookingName[1];
                                sjrd.Passengers[i].PassengerTravelDocuments[ii].Names[0] = new BookingName();
                                sjrd.Passengers[i].PassengerTravelDocuments[ii].Names[0].FirstName = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[ii].Names[0].FirstName;
                                sjrd.Passengers[i].PassengerTravelDocuments[ii].Names[0].LastName = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[ii].Names[0].LastName;
                            }
                        }

                        sjrd.Passengers[i].PseudoPassenger = false;

                    }

                    //for (int i = 0; i < InfantNum; i++)
                    //{
                    //    //check adult type

                    //    sjrd.Passengers[i] = new Passenger();
                    //    sjrd.Passengers[i].State = MessageState.New;
                    //    sjrd.Passengers[i].Infant = new PassengerInfant();
                    //    sjrd.Passengers[i].Infant.State = MessageState.New;
                    //    sjrd.Passengers[i].Infant.Names = new BookingName[1];
                    //    sjrd.Passengers[i].Infant.Names[0] = new BookingName();
                    //    sjrd.Passengers[i].Infant.Names[0].FirstName = responseBooking.Booking.Passengers[i].Infant.Names[0].FirstName;
                    //    sjrd.Passengers[i].Infant.Names[0].FirstName = responseBooking.Booking.Passengers[i].Infant.Names[0].LastName;
                    //    sjrd.Passengers[i].Infant.Gender = responseBooking.Booking.Passengers[i].Infant.Gender;
                    //    sjrd.Passengers[i].Infant.DOB = responseBooking.Booking.Passengers[i].Infant.DOB;

                    //    //sjrd.Passengers[i].PassengerTypeInfos = new PassengerTypeInfo[1];
                    //    //sjrd.Passengers[i].PassengerTypeInfos[0] = new PassengerTypeInfo();
                    //    //sjrd.Passengers[i].PassengerTypeInfos[0].DOB = responseBooking.Booking.Passengers[i].PassengerTypeInfos[0].DOB;
                    //    //sjrd.Passengers[i].PassengerTypeInfos[0].PaxType = responseBooking.Booking.Passengers[i].PassengerTypeInfos[0].PaxType;
                    //    //sjrd.Passengers[i].PassengerTypeInfos[0].State = MessageState.New;

                    //    //sjrd.Passengers[i].Names = new BookingName[1];
                    //    //sjrd.Passengers[i].Names[0] = new BookingName();
                    //    //sjrd.Passengers[i].Names[0].FirstName = responseBooking.Booking.Passengers[i].Names[0].FirstName;
                    //    //sjrd.Passengers[i].Names[0].LastName = responseBooking.Booking.Passengers[i].Names[0].LastName;
                    //    //sjrd.Passengers[i].Names[0].Title = responseBooking.Booking.Passengers[i].Names[0].Title;

                    //    //sjrd.Passengers[i].PassengerTravelDocuments = new PassengerTravelDocument[1];
                    //    //sjrd.Passengers[i].PassengerTravelDocuments[0] = new PassengerTravelDocument();
                    //    //sjrd.Passengers[i].PassengerTravelDocuments[0].DocNumber = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[0].DocNumber;
                    //    //sjrd.Passengers[i].PassengerTravelDocuments[0].ExpirationDate = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[0].ExpirationDate;
                    //    //sjrd.Passengers[i].PassengerTravelDocuments[0].Gender = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[0].Gender;
                    //    //sjrd.Passengers[i].PassengerTravelDocuments[0].IssuedDate = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[0].IssuedDate;
                    //    //sjrd.Passengers[i].PassengerTravelDocuments[0].Nationality = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[0].Nationality;
                    //    //sjrd.Passengers[i].PassengerTravelDocuments[0].DOB = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[0].DOB;
                    //    //sjrd.Passengers[i].PassengerTravelDocuments[0].DocSuffix = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[0].DocSuffix;
                    //    //sjrd.Passengers[i].PassengerTravelDocuments[0].Names = new BookingName[1];
                    //    //sjrd.Passengers[i].PassengerTravelDocuments[0].Names[0] = new BookingName();
                    //    //sjrd.Passengers[i].PassengerTravelDocuments[0].Names[0].FirstName = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[0].Names[0].FirstName;
                    //    //sjrd.Passengers[i].PassengerTravelDocuments[0].Names[0].LastName = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[0].Names[0].LastName;

                    //    sjrd.Passengers[i].PseudoPassenger = false;

                    //}
                    //added by ketee
                    if (HttpContext.Current.Session["listPassengers"] != null)
                    {
                        HttpContext.Current.Session.Remove("listPassengers");
                    }

                    prevPNR += 2;

                    sjrd.Journeys = new SellJourney[2];
                    sjrd.Journeys[0] = new SellJourney();
                    sjrd.Journeys[0].State = MessageState.New;
                    sjrd.Journeys[0].NotForGeneralUse = false;
                    if (temFlight.TemFlightTransit != "")
                    { sjrd.Journeys[0].Segments = new SellSegment[2]; }
                    else { sjrd.Journeys[0].Segments = new SellSegment[1]; }
                    SellSegment srSegment = new SellSegment();
                    srSegment.State = MessageState.New;
                    srSegment.DepartureStation = temFlight.TemFlightDeparture.Trim();

                    if (temFlight.TemFlightTransit != "")
                    {
                        srSegment.ArrivalStation = temFlight.TemFlightTransit.Trim();
                    }
                    else
                    {
                        srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                    }

                    srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd);
                    srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta);
                    srSegment.FlightDesignator = new FlightDesignator();
                    srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber.Trim().PadLeft(4, ' ');
                    srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
                    srSegment.Fare = new SellFare();
                    srSegment.Fare.State = MessageState.New;
                    srSegment.Fare.ClassOfService = temClass.TemClassClass.Trim();
                    srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
                    srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey.Split('~')[4].ToString();
                    srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey.Split('~')[3].ToString();

                    srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey.Split('~')[6]);
                    srSegment.Fare.FareClassOfService = temClass.TemClassClass.Trim();
                    srSegment.Fare.IsAllotmentMarketFare = false;

                    switch (temClass.TempFareApplicationType.ToString().ToLower())
                    {
                        case "route":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                            break;
                        case "sector":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                            break;
                        case "governing":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                            break;
                        default:
                            srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                            //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                            break;
                    }
                    sjrd.Journeys[0].Segments[0] = srSegment;

                    if (temFlight.TemFlightTransit != "")
                    {
                        srSegment = new SellSegment();
                        srSegment.State = MessageState.New;
                        srSegment.DepartureStation = temFlight.TemFlightTransit.Trim();
                        srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                        srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd2);
                        srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta2);
                        srSegment.FlightDesignator = new FlightDesignator();

                        srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber2.Trim();
                        srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();

                        srSegment.Fare = new SellFare();
                        srSegment.Fare.State = MessageState.New;
                        srSegment.Fare.ClassOfService = temClass.TemClassClass2.Trim();
                        srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();
                        srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey2.Split('~')[4].ToString();
                        srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey2.Split('~')[3].ToString();

                        srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey2.Split('~')[6]);
                        srSegment.Fare.FareClassOfService = temClass.TemClassClass2.Trim();
                        srSegment.Fare.IsAllotmentMarketFare = false;

                        switch (temClass.TempFareApplicationType2.ToString().ToLower())
                        {
                            case "route":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                break;
                            case "sector":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                                break;
                            case "governing":
                                srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                                break;
                            default:
                                srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                                //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                                break;
                        }
                        sjrd.Journeys[0].Segments[1] = srSegment;

                    }

                    //fill data for new dataClass
                    quantityDepart = temClass.TemClassPersonNumber;
                    farePriceDepart = Convert.ToDecimal(temClass.TemClassClassPrice);
                    fullPriceDepart = Convert.ToDecimal(temClass.TemClassFullPrice);
                    signatureDepart = SellSessionID;

                    TemClassofService temClass2 = temClasslist2.ElementAt(ctrEnum);

                    temClass2.TemClassSellSignature = SellSessionID;// SessionManager._signature;
                    UpdateTemClass(temClass2);

                    sjrd.Journeys[1] = new SellJourney();
                    sjrd.Journeys[1].State = MessageState.New;
                    sjrd.Journeys[1].NotForGeneralUse = false;
                    if (temFlight2.TemFlightTransit != "")
                    { sjrd.Journeys[1].Segments = new SellSegment[2]; }
                    else { sjrd.Journeys[1].Segments = new SellSegment[1]; }
                    SellSegment srSegment1 = new SellSegment();
                    srSegment1.State = MessageState.New;
                    srSegment1.DepartureStation = temFlight2.TemFlightDeparture.Trim();

                    if (temFlight2.TemFlightTransit != "")
                    {
                        srSegment1.ArrivalStation = temFlight2.TemFlightTransit.Trim();
                    }
                    else
                    {
                        srSegment1.ArrivalStation = temFlight2.TemFlightArrival.Trim();
                    }

                    srSegment1.STD = Convert.ToDateTime(temFlight2.TemFlightStd);
                    srSegment1.STA = Convert.ToDateTime(temFlight2.TemFlightSta);
                    srSegment1.FlightDesignator = new FlightDesignator();
                    srSegment1.FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber.Trim().PadLeft(4, ' ');
                    srSegment1.FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode.Trim();
                    srSegment1.Fare = new SellFare();
                    srSegment1.Fare.State = MessageState.New;
                    srSegment1.Fare.ClassOfService = temClass2.TemClassClass.Trim();
                    srSegment1.Fare.CarrierCode = temFlight2.TemFlightCarrierCode.Trim();
                    srSegment1.Fare.RuleNumber = temClass2.TemClassFareSellKey.Split('~')[4].ToString();// "AAB1";
                    srSegment1.Fare.FareBasisCode = temClass2.TemClassFareSellKey.Split('~')[3].ToString();// "A00H00";

                    srSegment1.Fare.FareSequence = Convert.ToInt16(temClass2.TemClassFareSellKey.Split('~')[6]);
                    srSegment1.Fare.FareClassOfService = temClass2.TemClassClass.Trim();
                    srSegment1.Fare.IsAllotmentMarketFare = false;

                    switch (temClass2.TempFareApplicationType.ToString().ToLower())
                    {
                        case "route":
                            srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                            break;
                        case "sector":
                            srSegment1.Fare.FareApplicationType = FareApplicationType.Sector;
                            break;
                        case "governing":
                            srSegment1.Fare.FareApplicationType = FareApplicationType.Governing;
                            break;
                        default:
                            srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                            //srSegment1.Fare.FareApplicationType = FareApplicationType.Unmapped;
                            break;
                    }
                    sjrd.Journeys[1].Segments[0] = srSegment1;

                    if (temFlight2.TemFlightTransit != "")
                    {
                        srSegment1 = new SellSegment();
                        srSegment1.State = MessageState.New;
                        srSegment1.DepartureStation = temFlight2.TemFlightTransit.Trim();
                        srSegment1.ArrivalStation = temFlight2.TemFlightArrival.Trim();
                        srSegment1.STD = Convert.ToDateTime(temFlight2.TemFlightStd2);
                        srSegment1.STA = Convert.ToDateTime(temFlight2.TemFlightSta2);
                        srSegment1.FlightDesignator = new FlightDesignator();

                        srSegment1.FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber2.Trim();
                        srSegment1.FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode2.Trim();

                        srSegment1.Fare = new SellFare();
                        srSegment1.Fare.State = MessageState.New;
                        srSegment1.Fare.ClassOfService = temClass2.TemClassClass2.Trim();
                        srSegment1.Fare.CarrierCode = temFlight2.TemFlightCarrierCode2.Trim();
                        srSegment1.Fare.RuleNumber = temClass2.TemClassFareSellKey2.Split('~')[4].ToString();
                        srSegment1.Fare.FareBasisCode = temClass2.TemClassFareSellKey2.Split('~')[3].ToString();

                        srSegment1.Fare.FareSequence = Convert.ToInt16(temClass2.TemClassFareSellKey2.Split('~')[6]);
                        srSegment1.Fare.FareClassOfService = temClass2.TemClassClass2.Trim();
                        srSegment1.Fare.IsAllotmentMarketFare = false;

                        switch (temClass2.TempFareApplicationType2.ToString().ToLower())
                        {
                            case "route":
                                srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                                break;
                            case "sector":
                                srSegment1.Fare.FareApplicationType = FareApplicationType.Sector;
                                break;
                            case "governing":
                                srSegment1.Fare.FareApplicationType = FareApplicationType.Governing;
                                break;
                            default:
                                srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                                //srSegment1.Fare.FareApplicationType = FareApplicationType.Unmapped;
                                break;
                        }
                        sjrd.Journeys[1].Segments[1] = srSegment1;

                    }

                    //fill data for new dataClass
                    quantityReturn = temClass2.TemClassPersonNumber;
                    farePriceReturn = Convert.ToDecimal(temClass2.TemClassClassPrice);
                    fullPriceReturn = Convert.ToDecimal(temClass2.TemClassFullPrice);
                    signatureReturn = SellSessionID;

                    ctrEnum += 1;

                    //Journey fromJourney = new Journey();
                    ////fromJourney.Segments = new System.ComponentModel.BindingList<Segment>[];
                    //fromJourney.Segments = new Segment[responseBooking.Booking.Journeys[0].Segments.Length];
                    //for(int i = 0;i < responseBooking.Booking.Journeys[0].Segments.Length;i++)
                    //{
                    //    fromJourney.Segments[i] = new Segment();
                    //    fromJourney.Segments[i].State = MessageState.New;
                    //    fromJourney.Segments[i].DepartureStation = responseBooking.Booking.Journeys[0].Segments[i].DepartureStation;
                    //    fromJourney.Segments[i].ArrivalStation = responseBooking.Booking.Journeys[0].Segments[i].ArrivalStation;
                    //    fromJourney.Segments[i].STD = responseBooking.Booking.Journeys[0].Segments[i].STD;
                    //    fromJourney.Segments[i].STA = responseBooking.Booking.Journeys[0].Segments[i].STA;
                    //    fromJourney.Segments[i].FlightDesignator = new FlightDesignator();
                    //    fromJourney.Segments[i].FlightDesignator.CarrierCode = responseBooking.Booking.Journeys[0].Segments[i].FlightDesignator.CarrierCode;
                    //    fromJourney.Segments[i].FlightDesignator.FlightNumber = responseBooking.Booking.Journeys[0].Segments[i].FlightDesignator.FlightNumber;
                    //    fromJourney.Segments[i].FlightDesignator.OpSuffix = responseBooking.Booking.Journeys[0].Segments[i].FlightDesignator.OpSuffix;
                    //    fromJourney.Segments[i].Legs = new Leg[responseBooking.Booking.Journeys[0].Segments[i].Legs.Length];
                    //    for(int ii = 0;ii < responseBooking.Booking.Journeys[0].Segments[i].Legs.Length;ii++){
                    //        fromJourney.Segments[i].State = MessageState.New;
                    //        fromJourney.Segments[i].Legs[ii] = new Leg();
                    //        fromJourney.Segments[i].Legs[ii].DepartureStation = responseBooking.Booking.Journeys[0].Segments[i].Legs[ii].DepartureStation;
                    //        fromJourney.Segments[i].Legs[ii].ArrivalStation = responseBooking.Booking.Journeys[0].Segments[i].Legs[ii].ArrivalStation;
                    //        fromJourney.Segments[i].Legs[ii].FlightDesignator = new FlightDesignator();
                    //        fromJourney.Segments[i].Legs[ii].FlightDesignator.CarrierCode = responseBooking.Booking.Journeys[0].Segments[i].Legs[ii].FlightDesignator.CarrierCode;
                    //        fromJourney.Segments[i].Legs[ii].FlightDesignator.FlightNumber = responseBooking.Booking.Journeys[0].Segments[i].Legs[ii].FlightDesignator.FlightNumber;
                    //        fromJourney.Segments[i].Legs[ii].FlightDesignator.OpSuffix = responseBooking.Booking.Journeys[0].Segments[i].Legs[ii].FlightDesignator.OpSuffix;
                    //        fromJourney.Segments[i].Legs[ii].STD = responseBooking.Booking.Journeys[0].Segments[i].Legs[ii].STD;
                    //        fromJourney.Segments[i].Legs[ii].STA = responseBooking.Booking.Journeys[0].Segments[i].Legs[ii].STA;
                    //    }
                    //}

                    ////create the Flight to move into.
                    //Journey toJourney = new Journey();
                    //if (temFlight.TemFlightTransit != ""){
                    //    toJourney.Segments = new Segment[2];

                    //    toJourney.Segments[0] = new Segment();
                    //    toJourney.Segments[0].State = MessageState.New;
                    //    toJourney.Segments[0].ActionStatusCode = "SS";
                    //    toJourney.Segments[0].DepartureStation = temFlight.TemFlightDeparture;
                    //    toJourney.Segments[0].ArrivalStation = temFlight.TemFlightTransit.Trim();
                    //    toJourney.Segments[0].FlightDesignator = new FlightDesignator();
                    //    toJourney.Segments[0].FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode;
                    //    toJourney.Segments[0].FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber;
                    //    toJourney.Segments[0].FlightDesignator.OpSuffix = temFlight.TemFlightOpSuffix;
                    //    toJourney.Segments[0].STD = Convert.ToDateTime(temFlight.TemFlightStd);
                    //    toJourney.Segments[0].STA = Convert.ToDateTime(temFlight.TemFlightSta);
                    //    toJourney.Segments[0].Fares = new Fare[1];
                    //    toJourney.Segments[0].Fares[0] = new Fare();
                    //    toJourney.Segments[0].Fares[0].CarrierCode = temFlight.TemFlightCarrierCode;
                    //    toJourney.Segments[0].Fares[0].ClassOfService = temClass.TemClassClass.Trim();
                    //    toJourney.Segments[0].Fares[0].FareBasisCode = temClass.TemClassFareSellKey.Split('~')[3].ToString();
                    //    toJourney.Segments[0].Fares[0].FareStatus = FareStatus.Default;
                    //    toJourney.Segments[0].Fares[0].FareApplicationType = FareApplicationType.Route;
                    //    toJourney.Segments[0].Legs = new Leg[1];
                    //    toJourney.Segments[0].Legs[0] = new Leg();
                    //    toJourney.Segments[0].Legs[0].ArrivalStation = temFlight.TemFlightTransit.Trim();
                    //    toJourney.Segments[0].Legs[0].DepartureStation = temFlight.TemFlightDeparture;
                    //    toJourney.Segments[0].Legs[0].FlightDesignator = new FlightDesignator();
                    //    toJourney.Segments[0].Legs[0].FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode;
                    //    toJourney.Segments[0].Legs[0].FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber;
                    //    toJourney.Segments[0].Legs[0].FlightDesignator.OpSuffix = temFlight.TemFlightOpSuffix;
                    //    toJourney.Segments[0].Legs[0].STD = Convert.ToDateTime(temFlight.TemFlightStd);
                    //    toJourney.Segments[0].Legs[0].STA = Convert.ToDateTime(temFlight.TemFlightSta);

                    //    toJourney.Segments[1] = new Segment();
                    //    toJourney.Segments[1].State = MessageState.New;
                    //    toJourney.Segments[1].ActionStatusCode = "SS";
                    //    toJourney.Segments[1].DepartureStation = temFlight.TemFlightTransit.Trim();
                    //    toJourney.Segments[1].ArrivalStation = temFlight.TemFlightArrival.Trim();
                    //    toJourney.Segments[1].FlightDesignator = new FlightDesignator();
                    //    toJourney.Segments[1].FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode2;
                    //    toJourney.Segments[1].FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber2;
                    //    toJourney.Segments[1].FlightDesignator.OpSuffix = temFlight.TemFlightOpSuffix2;
                    //    toJourney.Segments[1].STD = Convert.ToDateTime(temFlight.TemFlightStd2);
                    //    toJourney.Segments[1].STA = Convert.ToDateTime(temFlight.TemFlightSta2);
                    //    toJourney.Segments[1].Fares = new Fare[1];
                    //    toJourney.Segments[1].Fares[0] = new Fare();
                    //    toJourney.Segments[1].Fares[0].CarrierCode = temFlight.TemFlightCarrierCode2;
                    //    toJourney.Segments[1].Fares[0].ClassOfService = temClass.TemClassClass2.Trim();
                    //    toJourney.Segments[1].Fares[0].FareBasisCode = temClass.TemClassFareSellKey2.Split('~')[3].ToString();
                    //    toJourney.Segments[1].Fares[0].FareStatus = FareStatus.Default;
                    //    toJourney.Segments[1].Fares[0].FareApplicationType = FareApplicationType.Route;
                    //    toJourney.Segments[1].Legs = new Leg[1];
                    //    toJourney.Segments[1].Legs[0] = new Leg();
                    //    toJourney.Segments[1].Legs[0].ArrivalStation = temFlight.TemFlightArrival.Trim();
                    //    toJourney.Segments[1].Legs[0].DepartureStation = temFlight.TemFlightTransit.Trim();
                    //    toJourney.Segments[1].Legs[0].FlightDesignator = new FlightDesignator();
                    //    toJourney.Segments[1].Legs[0].FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode2;
                    //    toJourney.Segments[1].Legs[0].FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber2;
                    //    toJourney.Segments[1].Legs[0].FlightDesignator.OpSuffix = temFlight.TemFlightOpSuffix2;
                    //    toJourney.Segments[1].Legs[0].STD = Convert.ToDateTime(temFlight.TemFlightStd2);
                    //    toJourney.Segments[1].Legs[0].STA = Convert.ToDateTime(temFlight.TemFlightSta2);
                    //}
                    //else
                    //{
                    //    toJourney.Segments = new Segment[1];

                    //    toJourney.Segments[0] = new Segment();
                    //    toJourney.Segments[0].State = MessageState.New;
                    //    toJourney.Segments[0].ActionStatusCode = "SS";
                    //    toJourney.Segments[0].DepartureStation = temFlight.TemFlightDeparture;
                    //    toJourney.Segments[0].ArrivalStation = temFlight.TemFlightArrival;
                    //    toJourney.Segments[0].FlightDesignator = new FlightDesignator();
                    //    toJourney.Segments[0].FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode;
                    //    toJourney.Segments[0].FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber;
                    //    toJourney.Segments[0].FlightDesignator.OpSuffix = temFlight.TemFlightOpSuffix;
                    //    toJourney.Segments[0].STD = Convert.ToDateTime(temFlight.TemFlightStd);
                    //    toJourney.Segments[0].STA = Convert.ToDateTime(temFlight.TemFlightSta);
                    //    toJourney.Segments[0].Fares = new Fare[1];
                    //    toJourney.Segments[0].Fares[0] = new Fare();
                    //    toJourney.Segments[0].Fares[0].CarrierCode = temFlight.TemFlightCarrierCode;
                    //    toJourney.Segments[0].Fares[0].ClassOfService = temClass.TemClassClass.Trim();
                    //    toJourney.Segments[0].Fares[0].FareBasisCode = temClass.TemClassFareSellKey.Split('~')[3].ToString();
                    //    toJourney.Segments[0].Fares[0].FareStatus = FareStatus.Default;
                    //    toJourney.Segments[0].Fares[0].FareApplicationType = FareApplicationType.Route;
                    //    toJourney.Segments[0].Legs = new Leg[1];
                    //    toJourney.Segments[0].Legs[0] = new Leg();
                    //    toJourney.Segments[0].Legs[0].ArrivalStation = temFlight.TemFlightArrival;
                    //    toJourney.Segments[0].Legs[0].DepartureStation = temFlight.TemFlightDeparture;
                    //    toJourney.Segments[0].Legs[0].FlightDesignator = new FlightDesignator();
                    //    toJourney.Segments[0].Legs[0].FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode;
                    //    toJourney.Segments[0].Legs[0].FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber;
                    //    toJourney.Segments[0].Legs[0].FlightDesignator.OpSuffix = temFlight.TemFlightOpSuffix;
                    //    toJourney.Segments[0].Legs[0].STD = Convert.ToDateTime(temFlight.TemFlightStd);
                    //    toJourney.Segments[0].Legs[0].STA = Convert.ToDateTime(temFlight.TemFlightSta);
                    //}


                    //// create and populate request
                    //MoveJourneyBookingsRequest request = new MoveJourneyBookingsRequest();
                    //MoveJourneyBookingsRequestData moveData = new MoveJourneyBookingsRequestData();
                    //moveData.FromJourney = fromJourney;
                    //moveData.ToJourneys = new Journey[1];
                    //moveData.ToJourneys[0] = new Journey();
                    //moveData.ToJourneys[0] = toJourney;
                    //moveData.MovePassengerJourneyType = MovePassengerJourneyType.IROP;
                    //moveData.RecordLocators = new string[1];
                    //moveData.RecordLocators[0] = PNR;
                    //moveData.ChangeReasonCode = "MOVE";
                    //moveData.IgnorePNRsWithInvalidFromJourney = true;
                    //moveData.BookingComment = "Sample Move";
                    //request.MoveJourneyBookingsRequestData = moveData;
                    //request.Signature = SellSessionID;

                    //request.ContractVersion = 3413;

                    //MoveJourneyBookingsResponse response = null;
                    //response = bookingAPI.MoveJourneyBookings(request);

                    //Journey fromJourney2 = new Journey();
                    ////fromJourney.Segments = new System.ComponentModel.BindingList<Segment>[];
                    //fromJourney2.Segments = new Segment[responseBooking.Booking.Journeys[1].Segments.Length];
                    //for (int i = 0; i < responseBooking.Booking.Journeys[1].Segments.Length; i++)
                    //{
                    //    fromJourney2.Segments[i] = new Segment();
                    //    fromJourney2.Segments[i].State = MessageState.New;
                    //    fromJourney2.Segments[i].DepartureStation = responseBooking.Booking.Journeys[1].Segments[i].DepartureStation;
                    //    fromJourney2.Segments[i].ArrivalStation = responseBooking.Booking.Journeys[1].Segments[i].ArrivalStation;
                    //    fromJourney2.Segments[i].STD = responseBooking.Booking.Journeys[1].Segments[i].STD;
                    //    fromJourney2.Segments[i].STA = responseBooking.Booking.Journeys[1].Segments[i].STA;
                    //    fromJourney2.Segments[i].FlightDesignator = new FlightDesignator();
                    //    fromJourney2.Segments[i].FlightDesignator.CarrierCode = responseBooking.Booking.Journeys[1].Segments[i].FlightDesignator.CarrierCode;
                    //    fromJourney2.Segments[i].FlightDesignator.FlightNumber = responseBooking.Booking.Journeys[1].Segments[i].FlightDesignator.FlightNumber;
                    //    fromJourney2.Segments[i].FlightDesignator.OpSuffix = responseBooking.Booking.Journeys[1].Segments[i].FlightDesignator.OpSuffix;
                    //    fromJourney2.Segments[i].Legs = new Leg[responseBooking.Booking.Journeys[1].Segments[i].Legs.Length];
                    //    for (int ii = 0; ii < responseBooking.Booking.Journeys[1].Segments[i].Legs.Length; ii++)
                    //    {
                    //        fromJourney2.Segments[i].State = MessageState.New;
                    //        fromJourney2.Segments[i].Legs[ii] = new Leg();
                    //        fromJourney2.Segments[i].Legs[ii].DepartureStation = responseBooking.Booking.Journeys[1].Segments[i].Legs[ii].DepartureStation;
                    //        fromJourney2.Segments[i].Legs[ii].ArrivalStation = responseBooking.Booking.Journeys[1].Segments[i].Legs[ii].ArrivalStation;
                    //        fromJourney2.Segments[i].Legs[ii].FlightDesignator = new FlightDesignator();
                    //        fromJourney2.Segments[i].Legs[ii].FlightDesignator.CarrierCode = responseBooking.Booking.Journeys[1].Segments[i].Legs[ii].FlightDesignator.CarrierCode;
                    //        fromJourney2.Segments[i].Legs[ii].FlightDesignator.FlightNumber = responseBooking.Booking.Journeys[1].Segments[i].Legs[ii].FlightDesignator.FlightNumber;
                    //        fromJourney2.Segments[i].Legs[ii].FlightDesignator.OpSuffix = responseBooking.Booking.Journeys[1].Segments[i].Legs[ii].FlightDesignator.OpSuffix;
                    //        fromJourney2.Segments[i].Legs[ii].STD = responseBooking.Booking.Journeys[1].Segments[i].Legs[ii].STD;
                    //        fromJourney2.Segments[i].Legs[ii].STA = responseBooking.Booking.Journeys[1].Segments[i].Legs[ii].STA;
                    //    }
                    //}

                    ////create the Flight to move into.
                    //Journey toJourney2 = new Journey();
                    //if (temFlight2.TemFlightTransit != "")
                    //{
                    //    toJourney2.Segments = new Segment[2];

                    //    toJourney2.Segments[0] = new Segment();
                    //    toJourney2.Segments[0].State = MessageState.New;
                    //    toJourney2.Segments[0].ActionStatusCode = "SS";
                    //    toJourney2.Segments[0].DepartureStation = temFlight2.TemFlightDeparture;
                    //    toJourney2.Segments[0].ArrivalStation = temFlight2.TemFlightTransit.Trim();
                    //    toJourney2.Segments[0].FlightDesignator = new FlightDesignator();
                    //    toJourney2.Segments[0].FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode;
                    //    toJourney2.Segments[0].FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber;
                    //    toJourney2.Segments[0].FlightDesignator.OpSuffix = temFlight2.TemFlightOpSuffix;
                    //    toJourney2.Segments[0].STD = Convert.ToDateTime(temFlight2.TemFlightStd);
                    //    toJourney2.Segments[0].STA = Convert.ToDateTime(temFlight2.TemFlightSta);
                    //    toJourney2.Segments[0].Fares = new Fare[1];
                    //    toJourney2.Segments[0].Fares[0] = new Fare();
                    //    toJourney2.Segments[0].Fares[0].CarrierCode = temFlight2.TemFlightCarrierCode;
                    //    toJourney2.Segments[0].Fares[0].ClassOfService = temClass2.TemClassClass.Trim();
                    //    toJourney2.Segments[0].Fares[0].FareBasisCode = temClass2.TemClassFareSellKey.Split('~')[3].ToString();
                    //    toJourney2.Segments[0].Fares[0].FareStatus = FareStatus.Default;
                    //    toJourney2.Segments[0].Fares[0].FareApplicationType = FareApplicationType.Route;
                    //    toJourney2.Segments[0].Legs = new Leg[1];
                    //    toJourney2.Segments[0].Legs[0] = new Leg();
                    //    toJourney2.Segments[0].Legs[0].ArrivalStation = temFlight2.TemFlightTransit.Trim();
                    //    toJourney2.Segments[0].Legs[0].DepartureStation = temFlight2.TemFlightDeparture;
                    //    toJourney2.Segments[0].Legs[0].FlightDesignator = new FlightDesignator();
                    //    toJourney2.Segments[0].Legs[0].FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode;
                    //    toJourney2.Segments[0].Legs[0].FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber;
                    //    toJourney2.Segments[0].Legs[0].FlightDesignator.OpSuffix = temFlight2.TemFlightOpSuffix;
                    //    toJourney2.Segments[0].Legs[0].STD = Convert.ToDateTime(temFlight2.TemFlightStd);
                    //    toJourney2.Segments[0].Legs[0].STA = Convert.ToDateTime(temFlight2.TemFlightSta);

                    //    toJourney2.Segments[1] = new Segment();
                    //    toJourney2.Segments[1].State = MessageState.New;
                    //    toJourney2.Segments[1].ActionStatusCode = "SS";
                    //    toJourney2.Segments[1].DepartureStation = temFlight2.TemFlightTransit.Trim();
                    //    toJourney2.Segments[1].ArrivalStation = temFlight2.TemFlightArrival.Trim();
                    //    toJourney2.Segments[1].FlightDesignator = new FlightDesignator();
                    //    toJourney2.Segments[1].FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode2;
                    //    toJourney2.Segments[1].FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber2;
                    //    toJourney2.Segments[1].FlightDesignator.OpSuffix = temFlight2.TemFlightOpSuffix2;
                    //    toJourney2.Segments[1].STD = Convert.ToDateTime(temFlight2.TemFlightStd2);
                    //    toJourney2.Segments[1].STA = Convert.ToDateTime(temFlight2.TemFlightSta2);
                    //    toJourney2.Segments[1].Fares = new Fare[1];
                    //    toJourney2.Segments[1].Fares[0] = new Fare();
                    //    toJourney2.Segments[1].Fares[0].CarrierCode = temFlight2.TemFlightCarrierCode2;
                    //    toJourney2.Segments[1].Fares[0].ClassOfService = temClass2.TemClassClass2.Trim();
                    //    toJourney2.Segments[1].Fares[0].FareBasisCode = temClass2.TemClassFareSellKey2.Split('~')[3].ToString();
                    //    toJourney2.Segments[1].Fares[0].FareStatus = FareStatus.Default;
                    //    toJourney2.Segments[1].Fares[0].FareApplicationType = FareApplicationType.Route;
                    //    toJourney2.Segments[1].Legs = new Leg[1];
                    //    toJourney2.Segments[1].Legs[0] = new Leg();
                    //    toJourney2.Segments[1].Legs[0].ArrivalStation = temFlight2.TemFlightArrival.Trim();
                    //    toJourney2.Segments[1].Legs[0].DepartureStation = temFlight2.TemFlightTransit.Trim();
                    //    toJourney2.Segments[1].Legs[0].FlightDesignator = new FlightDesignator();
                    //    toJourney2.Segments[1].Legs[0].FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode2;
                    //    toJourney2.Segments[1].Legs[0].FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber2;
                    //    toJourney2.Segments[1].Legs[0].FlightDesignator.OpSuffix = temFlight2.TemFlightOpSuffix2;
                    //    toJourney2.Segments[1].Legs[0].STD = Convert.ToDateTime(temFlight2.TemFlightStd2);
                    //    toJourney2.Segments[1].Legs[0].STA = Convert.ToDateTime(temFlight2.TemFlightSta2);
                    //}
                    //else
                    //{
                    //    toJourney2.Segments = new Segment[1];

                    //    toJourney2.Segments[0] = new Segment();
                    //    toJourney2.Segments[0].State = MessageState.New;
                    //    toJourney2.Segments[0].ActionStatusCode = "SS";
                    //    toJourney2.Segments[0].DepartureStation = temFlight2.TemFlightDeparture;
                    //    toJourney2.Segments[0].ArrivalStation = temFlight2.TemFlightArrival;
                    //    toJourney2.Segments[0].FlightDesignator = new FlightDesignator();
                    //    toJourney2.Segments[0].FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode;
                    //    toJourney2.Segments[0].FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber;
                    //    toJourney2.Segments[0].FlightDesignator.OpSuffix = temFlight2.TemFlightOpSuffix;
                    //    toJourney2.Segments[0].STD = Convert.ToDateTime(temFlight2.TemFlightStd);
                    //    toJourney2.Segments[0].STA = Convert.ToDateTime(temFlight2.TemFlightSta);
                    //    toJourney2.Segments[0].Fares = new Fare[1];
                    //    toJourney2.Segments[0].Fares[0] = new Fare();
                    //    toJourney2.Segments[0].Fares[0].CarrierCode = temFlight2.TemFlightCarrierCode;
                    //    toJourney2.Segments[0].Fares[0].ClassOfService = temClass2.TemClassClass.Trim();
                    //    toJourney2.Segments[0].Fares[0].FareBasisCode = temClass2.TemClassFareSellKey.Split('~')[3].ToString();
                    //    toJourney2.Segments[0].Fares[0].FareStatus = FareStatus.Default;
                    //    toJourney2.Segments[0].Fares[0].FareApplicationType = FareApplicationType.Route;
                    //    toJourney2.Segments[0].Legs = new Leg[1];
                    //    toJourney2.Segments[0].Legs[0] = new Leg();
                    //    toJourney2.Segments[0].Legs[0].ArrivalStation = temFlight2.TemFlightArrival;
                    //    toJourney2.Segments[0].Legs[0].DepartureStation = temFlight2.TemFlightDeparture;
                    //    toJourney2.Segments[0].Legs[0].FlightDesignator = new FlightDesignator();
                    //    toJourney2.Segments[0].Legs[0].FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode;
                    //    toJourney2.Segments[0].Legs[0].FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber;
                    //    toJourney2.Segments[0].Legs[0].FlightDesignator.OpSuffix = temFlight2.TemFlightOpSuffix;
                    //    toJourney2.Segments[0].Legs[0].STD = Convert.ToDateTime(temFlight2.TemFlightStd);
                    //    toJourney2.Segments[0].Legs[0].STA = Convert.ToDateTime(temFlight2.TemFlightSta);
                    //}


                    //// create and populate request
                    //MoveJourneyBookingsRequest request2 = new MoveJourneyBookingsRequest();
                    //MoveJourneyBookingsRequestData moveData2 = new MoveJourneyBookingsRequestData();
                    //moveData2.FromJourney = fromJourney2;
                    //moveData2.ToJourneys = new Journey[1];
                    //moveData2.ToJourneys[0] = new Journey();
                    //moveData2.ToJourneys[0] = toJourney2;
                    //moveData2.MovePassengerJourneyType = MovePassengerJourneyType.IROP;
                    //moveData2.ChangeReasonCode = "MOVE";
                    //moveData2.RecordLocators = new string[1];
                    //moveData2.RecordLocators[0] = PNR;
                    //moveData2.IgnorePNRsWithInvalidFromJourney = true;
                    //moveData2.BookingComment = "Sample Move";
                    //request2.MoveJourneyBookingsRequestData = moveData2;
                    //request2.Signature = SellSessionID;

                    //request.ContractVersion = 3413;

                    //MoveJourneyBookingsResponse response2 = null;
                    //response2 = bookingAPI.MoveJourneyBookings(request2);


                    if (sjrd != null)
                    {
                        try
                        {
                            sellrequest.SellRequestData.SellJourneyRequest.SellJourneyRequestData = sjrd;
                            ////string requeststring = GetXMLString(sellrequest);

                            SellResponse response = bookingAPI.Sell(sellrequest);

                            //remark 1st by Tyas 20170315
                            //if (response != null)
                            //{
                            //string msg = "";
                            //apiBooking.BookingCommitFlightChange(PNR, SellSessionID, ref msg, temFlight.TemFlightCurrencyCode, false, true);
                            //}

                            //added by ketee, add service fees
                            //foreach (PassengerData rowpassenger in lstPassenger)
                            //{

                            //remarked by diana 20170201, no more service fee
                            //if (AddServiceFees(SellSessionID, cur, 0) == false)
                            //{
                            //    bError = true;
                            //    log.Warning(this, "Add fees failed: " + SellSessionID);
                            //    break;
                            //}

                            //added by diana 20140122 - change fee
                            //if (AddChangeFees(SellSessionID, cur, 0) == false)
                            //{
                            //    bError = true;
                            //    log.Warning(this, "Add fees failed: " + SellSessionID);
                            //    break;
                            //}

                            //fill breakdown fee
                            Navitaire.BookingManager.Booking book = GetBookingFromState(SellSessionID);
                            //string boolxml = GetXMLString(book);

                            //Get Currecy Rate List 20130625
                            Navitaire.UtilitiesManager.GetExternalRatesListResponseData RateResponse = apiBooking.GetExternalRateList(SellSessionID);
                            string curr = book.CurrencyCode;
                            //string req = GetXMLString(RateResponse);
                            decimal currRate = 1;
                            if (curr != "MYR")
                            {
                                for (int i = 0; i < RateResponse.ExternalRateList.Length; i++)
                                {
                                    if (RateResponse.ExternalRateList[i].QuotedCurrency == curr && RateResponse.ExternalRateList[i].CollectedCurrency == "MYR")
                                    {
                                        currRate = RateResponse.ExternalRateList[i].ExchangeRate;
                                    }
                                }
                            }

                            //depart
                            int segCount = book.Journeys[0].Segments.Length;
                            //renew temClass
                            ClassPrice classPriceDepart = new ClassPrice();

                            for (int iDepart = 0; iDepart < segCount; iDepart++)
                            {
                                //added by diana 20131031 - added condition if paxfare length is more than 0
                                if (book.Journeys[0].Segments[iDepart].Fares[0].PaxFares.Length > 0)
                                {
                                    PaxFare paxFare = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];
                                    PaxFare paxFareChd;
                                    if (temClass.TemClassAdultNumber > 0)
                                    {
                                        AddFarePrice(paxFare, temClass, ref classPriceDepart, "ADT");
                                    }

                                    if (temClass.TemClassChildNumber > 0)
                                    {
                                        if (book.Journeys[0].Segments[iDepart].Fares[0].PaxFares.Length > 1)
                                            paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[1];
                                        else
                                            paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];

                                        //if (temFlight.TemFlightDeparture.ToString().ToUpper() != "HKG" && temFlight.TemFlightArrival.ToString().ToUpper() != "HKG")
                                        //{
                                        //    paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];
                                        //}
                                        AddFarePrice(paxFareChd, temClass, ref classPriceDepart, "CHD");
                                    }
                                }
                            }
                            //remove divide by 2 as service fees apply to 1st booking only
                            //bdSvc += book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2;
                            //classPriceDepart.ServChrg = (book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2) * temClass.TemClassPersonNumber;


                            //amended by diana 20140121 - add initial value to 0, then add it
                            classPriceDepart.ServChrg = 0;
                            classPriceDepart.SSRChrg = 0;
                            classPriceDepart.SeatChrg = 0;
                            classPriceDepart.InfantChrg = 0;
                            classPriceDepart.ServVAT = 0;

                            //load service charges passenger
                            if (book.Passengers[0].PassengerFees.Length > 0 && book.Passengers[0].PassengerFees[0].ServiceCharges.Length > 0)
                            {
                                for (int i = 0; i < book.Passengers[0].PassengerFees[0].ServiceCharges.Length; i++)
                                {
                                    switch (book.Passengers[0].PassengerFees[0].ServiceCharges[i].ChargeCode.ToString().ToUpper())
                                    {
                                        case "SVCF":
                                            classPriceDepart.ServChrg += (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                            //classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                                            break;
                                        case "VAT":
                                            classPriceDepart.ServVAT += (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                            //classPriceDepart.FullPrice += classPriceDepart.ServVAT;
                                            break;
                                        default:
                                            classPriceDepart.ServChrg += (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                            //classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                                            break;
                                    }
                                }
                            }
                            classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                            classPriceDepart.FullPrice += classPriceDepart.SSRChrg;
                            classPriceDepart.FullPrice += classPriceDepart.SeatChrg;
                            classPriceDepart.FullPrice += classPriceDepart.InfantChrg;
                            classPriceDepart.FullPrice += classPriceDepart.ServVAT;


                            //bdFull = bdFull + classPriceDepart.FullPrice;

                            classPriceDepart.ClassID = temClass.TemClassId;

                            //return breakdown fee
                            ClassPrice classPriceReturn = new ClassPrice();

                            segCount = book.Journeys[1].Segments.Length;
                            classPriceReturn.ClassID = temClass2.TemClassId;

                            for (int iReturn = 0; iReturn < segCount; iReturn++)
                            {
                                //added by diana 20131031 - added condition if paxfare length is more than 0
                                if (book.Journeys[1].Segments[iReturn].Fares[0].PaxFares.Length > 0)
                                {
                                    PaxFare paxFare = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[0];
                                    PaxFare paxFareChd;

                                    if (temClass2.TemClassAdultNumber > 0)
                                    {
                                        AddFarePrice(paxFare, temClass2, ref classPriceReturn, "ADT");
                                    }

                                    if (temClass2.TemClassChildNumber > 0)
                                    {
                                        if (book.Journeys[1].Segments[iReturn].Fares[0].PaxFares.Length > 1)
                                            paxFareChd = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[1];
                                        else
                                            paxFareChd = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[0];

                                        //if (temFlight.TemFlightDeparture.ToString().ToUpper() != "HKG" && temFlight.TemFlightArrival.ToString().ToUpper() != "HKG")
                                        //{
                                        //    paxFareChd = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[0];
                                        //}
                                        AddFarePrice(paxFareChd, temClass2, ref classPriceReturn, "CHD");
                                    }
                                }
                            }

                            //remark, as service charge only apply to 1st segment
                            //bdSvcReturn += book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2;
                            //classPriceReturn.ServChrg = (book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2) * temClass2.TemClassPersonNumber;
                            //bdSvcReturn += 0;
                            classPriceReturn.ServChrg = 0;
                            classPriceReturn.SSRChrg = 0;
                            classPriceReturn.SeatChrg = 0;
                            classPriceReturn.InfantChrg = 0;
                            classPriceReturn.FullPrice += classPriceReturn.ServChrg + classPriceReturn.SSRChrg + classPriceReturn.SeatChrg + classPriceReturn.InfantChrg;

                            //bdFullReturn = bdFullReturn + classPriceReturn.FullPrice;

                            //added by ketee , curr rate 20130625
                            classPriceDepart.CurrencyRate = currRate;
                            classPriceReturn.CurrencyRate = currRate;

                            UpdateClassPrice(classPriceDepart);
                            UpdateClassPrice(classPriceReturn);

                            DataRow row;
                            row = dataClassTrans.NewRow();
                            row["Quantity"] = quantityDepart;
                            row["FarePrice"] = (classPriceDepart.FarePrice + classPriceReturn.FarePrice);
                            //commented by diana 20131104
                            //private void ProcessPairedFareJhn(ClassFare[] GoingFare, ClassFare[] ReturnFare,row["FarePrice"] = (classPriceDepart.FarePrice + classPriceReturn.FarePrice) / temClass.TemClassPersonNumber;
                            row["FullPrice"] = (classPriceDepart.FullPrice + classPriceReturn.FullPrice);
                            row["SellSignature"] = signatureDepart;
                            //added by ketee, 20121016
                            row["ServChrg"] = classPriceDepart.ServChrg + classPriceReturn.ServChrg;
                            row["SSRChrg"] = classPriceDepart.SSRChrg + classPriceReturn.SSRChrg;
                            row["SeatChrg"] = classPriceDepart.SeatChrg + classPriceReturn.SeatChrg;
                            row["InfantChrg"] = classPriceDepart.InfantChrg + classPriceReturn.InfantChrg;
                            //added by ketee, VAT
                            row["ServVAT"] = classPriceDepart.ServVAT;
                            row["DetailCollectedAmt"] = 0;
                            row["RecordLocator"] = "";
                            //added by ketee 20130625 currrate
                            row["CurrencyRate"] = classPriceDepart.CurrencyRate;

                            //added by ketee, breakdown fees 20130625
                            bdPaxFee += classPriceDepart.PaxFeeChrg;
                            bdAPT += classPriceDepart.TaxChrg;
                            bdchAPT += classPriceDepart.TAxChrgChd;
                            bdFare += classPriceDepart.FarePrice;
                            bdFuel += classPriceDepart.FuelChrg;
                            bdFull += classPriceDepart.FullPrice;
                            bdOth += classPriceDepart.OthChrg;
                            bdDisc += classPriceDepart.DiscChrg;
                            bdPromoDisc += classPriceDepart.PromoDiscChrg;
                            bdSvc += classPriceDepart.ServChrg;
                            bdSSR += classPriceDepart.SSRChrg;
                            bdSeat += classPriceDepart.SeatChrg;
                            bdInfant += classPriceDepart.InfantChrg;
                            bdVAT += classPriceDepart.ServVAT;

                            bdPaxFeeReturn += classPriceReturn.PaxFeeChrg;
                            bdAPTReturn += classPriceReturn.TaxChrg;
                            bdchAPTReturn += classPriceReturn.TAxChrgChd;
                            bdFareReturn += classPriceReturn.FarePrice;
                            bdFuelReturn += classPriceReturn.FuelChrg;
                            bdFullReturn += classPriceReturn.FullPrice;
                            bdOthReturn += classPriceReturn.OthChrg;
                            bdDiscReturn += classPriceReturn.DiscChrg;
                            bdPromoDiscReturn += classPriceReturn.PromoDiscChrg;
                            bdSvcReturn += classPriceReturn.ServChrg;
                            bdSSRReturn += classPriceReturn.SSRChrg;
                            bdSeatReturn += classPriceReturn.SeatChrg;
                            bdInfantReturn += classPriceReturn.InfantChrg;
                            bdVAT += classPriceReturn.ServVAT;



                            dataClassTrans.Rows.Add(row);

                            //save new data class into session
                            if (dataClassTrans.Rows.Count > 0)
                            {
                                HttpContext.Current.Session.Remove("dataClassTrans");
                                HttpContext.Current.Session.Add("dataClassTrans", dataClassTrans);
                            }

                        }
                        catch (Exception ex)
                        {
                            bError = true;
                            log.Error(this, ex);
                            HttpContext.Current.Session["errormove"] = ex;
                        }
                    }
                }
                if (bError)
                {
                    log.Warning(this, "Sell Journey failed.");
                    return false;
                }
            }
            else
            {
                //fares not equal
            }

            return true; //added by diana 20140122
        }

        public Boolean SellJourneyMoveOneWay(TemFlight temFlight, TemFlight temFlight2, string LoginType, string LoginName, string LoginPWD, string LoginDomain, string SellSessionID, string PNR, int InfantNum = 0)
        {
            IBookingManager bookingAPI = new BookingManagerClient();
            ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");

            DataTable dataClass = dtClass();
            DataTable dtTempClass = dtClass();
            DataTable dtTempClass2 = dtClass();

            DataTable dataClassTrans = dtClassTrans();

            int quantityDepart = 0, quantityReturn = 0, qtychild = 0, qtyadult = 0;
            decimal farePriceDepart = 0, farePriceReturn = 0;
            string signatureDepart = "", signatureReturn = "";
            decimal fullPriceDepart = 0, fullPriceReturn = 0;
            int ctrEnum = 0;
            int totalPax = 0, totalPaxADT = 0, totalPaxCHD = 0; //amended by diana 20131103 - add pax for adt and chd

            dtTempClass = GetTemClassList(temFlight.TemFlightFlightNumber);
            dtTempClass2 = GetTemClassList(temFlight2.TemFlightFlightNumber);
            IEnumerable<TemClassofService> temClasslist = ConvertToIEnum(dtTempClass);
            IEnumerable<TemClassofService> temClasslist2 = ConvertToIEnum(dtTempClass2);
            int id = 0;

            //added by anton 12 oct
            decimal bdchAPT = 0, bdFare = 0, bdAPT = 0, bdPaxFee = 0, bdFuel = 0, bdOth = 0, bdDisc = 0, bdPromoDisc = 0, bdSvc = 0, bdSSR = 0, bdSeat = 0, bdInfant = 0, bdFull = 0, bdFullReturn = 0, bdVAT = 0; // for breakdownfee
            decimal bdchAPTReturn = 0, bdFareReturn = 0, bdAPTReturn = 0, bdPaxFeeReturn = 0, bdFuelReturn = 0, bdOthReturn = 0, bdDiscReturn = 0, bdPromoDiscReturn = 0, bdSvcReturn = 0, bdSSRReturn = 0, bdSeatReturn = 0, bdInfantReturn = 0, bdVATReturn = 0; // for breakdownfee

            //added by ketee,
            List<PassengerData> lstPassenger = new List<PassengerData>();
            PassengerData rowPassenger;

            //added by ketee, add sell service fees
            string cur = string.Empty;
            bool bError = false;

            int passengerno = 0;
            int prevPNR = 0;

            SellRequest sellrequest = new SellRequest();
            SellJourneyRequestData sjrd = new SellJourneyRequestData();

            foreach (TemClassofService temClass in temClasslist)
            {
                prevPNR += 1;
                if (LoginType == "SkyAgent")
                {
                    SellSessionID = apiBooking.AgentLogon("SkyAgent", LoginDomain, LoginName, LoginPWD);
                }
                else
                {
                    SellSessionID = apiBooking.AgentLogon();
                }
                GetBookingRequest booking = new GetBookingRequest();
                booking.Signature = SellSessionID;
                booking.ContractVersion = 3413;
                booking.GetBookingReqData = new GetBookingRequestData();
                booking.GetBookingReqData.GetBookingBy = GetBookingBy.RecordLocator;
                booking.GetBookingReqData.GetByRecordLocator = new GetByRecordLocator();
                booking.GetBookingReqData.GetByRecordLocator.RecordLocator = PNR;
                GetBookingResponse responseBooking = bookingAPI.GetBooking(booking);
                ABS.Navitaire.BookingManager.Booking bookingData = responseBooking.Booking;

                //Cancel Journey
                CancelRequest cancelRequest = new CancelRequest();
                cancelRequest.Signature = SellSessionID;

                cancelRequest.ContractVersion = 3413;
                cancelRequest.CancelRequestData = new CancelRequestData();
                cancelRequest.CancelRequestData.CancelBy = CancelBy.Journey;
                cancelRequest.CancelRequestData.CancelJourney = new CancelJourney();
                cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest = new CancelJourneyRequest();
                cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys = new Journey[bookingData.Journeys.Length];
                for (int i = 0; i < cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys.Length; i++)
                {
                    cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i] = new Journey();
                    cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i].Segments = new Segment[bookingData.Journeys[i].Segments.Length];
                    for (int ii = 0; ii < cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i].Segments.Length; ii++)
                    {

                        cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i].Segments[ii] = new Segment();
                        cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i].Segments[ii].DepartureStation = bookingData.Journeys[i].Segments[ii].DepartureStation;
                        cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i].Segments[ii].ArrivalStation = bookingData.Journeys[i].Segments[ii].ArrivalStation;
                        cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i].Segments[ii].STD = bookingData.Journeys[i].Segments[ii].STD;
                        cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i].Segments[ii].STA = bookingData.Journeys[i].Segments[ii].STA;
                        cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i].Segments[ii].FlightDesignator = new FlightDesignator();
                        cancelRequest.CancelRequestData.CancelJourney.CancelJourneyRequest.Journeys[i].Segments[ii].FlightDesignator = bookingData.Journeys[i].Segments[ii].FlightDesignator;
                    }
                }

                CancelResponse cancelResponse = bookingAPI.Cancel(cancelRequest);

                temClass.TemClassSellSignature = SellSessionID;
                UpdateTemClass(temClass);

                sellrequest.Signature = SellSessionID;
                //sellrequest.Signature = temClass.TemClassSellSignature;

                sellrequest.ContractVersion = 3413;
                sellrequest.SellRequestData = new SellRequestData();
                sellrequest.SellRequestData.SellBy = SellBy.Journey;
                sellrequest.SellRequestData.SellJourneyRequest = new SellJourneyRequest();
                //SellJourneyRequestData sjrd = new SellJourneyRequestData();
                sjrd.PaxCount = Convert.ToInt16(temClass.TemClassPersonNumber);
                sjrd.CurrencyCode = temFlight.TemFlightCurrencyCode.Trim();
                //added by ketee
                cur = temFlight.TemFlightCurrencyCode.Trim(); ;
                sjrd.Passengers = new Passenger[temClass.TemClassPersonNumber];

                //check child
                string adultType = "ADT";

                //check child and adult
                int childpax = temClass.TemClassChildNumber;
                qtychild = childpax;
                int adultpax = temClass.TemClassAdultNumber;
                qtyadult = adultpax;

                //added by diana 20131103 - add numofpax
                totalPaxADT += qtyadult;
                totalPaxCHD += qtychild;

                for (int i = 0; i < temClass.TemClassPersonNumber; i++)
                {
                    sjrd.Passengers[i] = new Passenger();
                    sjrd.Passengers[i].PassengerNumber = responseBooking.Booking.Passengers[i].PassengerNumber;
                    sjrd.Passengers[i].State = MessageState.New;
                    sjrd.Passengers[i].PassengerID = responseBooking.Booking.Passengers[i].PassengerID;
                    sjrd.Passengers[i].PassengerTypeInfos = new PassengerTypeInfo[1];
                    sjrd.Passengers[i].PassengerTypeInfos[0] = new PassengerTypeInfo();
                    sjrd.Passengers[i].PassengerTypeInfos[0].DOB = responseBooking.Booking.Passengers[i].PassengerTypeInfos[0].DOB;
                    sjrd.Passengers[i].PassengerTypeInfos[0].PaxType = responseBooking.Booking.Passengers[i].PassengerTypeInfos[0].PaxType;
                    sjrd.Passengers[i].PassengerTypeInfos[0].State = MessageState.New;

                    sjrd.Passengers[i].Names = new BookingName[1];
                    sjrd.Passengers[i].Names[0] = new BookingName();
                    sjrd.Passengers[i].Names[0].FirstName = responseBooking.Booking.Passengers[i].Names[0].FirstName;
                    sjrd.Passengers[i].Names[0].LastName = responseBooking.Booking.Passengers[i].Names[0].LastName;
                    sjrd.Passengers[i].Names[0].Title = responseBooking.Booking.Passengers[i].Names[0].Title;

                    if (responseBooking.Booking.Passengers[i].Infant != null)
                    {
                        sjrd.Passengers[i].Infant = new PassengerInfant();
                        sjrd.Passengers[i].Infant.State = MessageState.New;
                        sjrd.Passengers[i].Infant.Names = new BookingName[1];
                        sjrd.Passengers[i].Infant.Names[0] = new BookingName();
                        sjrd.Passengers[i].Infant.Names[0].FirstName = responseBooking.Booking.Passengers[i].Infant.Names[0].FirstName;
                        sjrd.Passengers[i].Infant.Names[0].FirstName = responseBooking.Booking.Passengers[i].Infant.Names[0].LastName;
                        sjrd.Passengers[i].Infant.Gender = responseBooking.Booking.Passengers[i].Infant.Gender;
                        sjrd.Passengers[i].Infant.DOB = responseBooking.Booking.Passengers[i].Infant.DOB;
                    }

                    //Amended by Ellis 20170323, for flightchange
                    if (responseBooking.Booking.Passengers[i].PassengerTravelDocuments.Length > 0)
                    {
                        sjrd.Passengers[i].PassengerTravelDocuments = new PassengerTravelDocument[responseBooking.Booking.Passengers[i].PassengerTravelDocuments.Length];

                        for (int ii = 0; ii < sjrd.Passengers[i].PassengerTravelDocuments.Length; ii++)
                        {
                            sjrd.Passengers[i].PassengerTravelDocuments[ii] = new PassengerTravelDocument();
                            sjrd.Passengers[i].PassengerTravelDocuments[ii].DocNumber = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[ii].DocNumber;
                            sjrd.Passengers[i].PassengerTravelDocuments[ii].ExpirationDate = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[0].ExpirationDate;
                            sjrd.Passengers[i].PassengerTravelDocuments[ii].Gender = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[ii].Gender;
                            sjrd.Passengers[i].PassengerTravelDocuments[ii].IssuedDate = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[ii].IssuedDate;
                            sjrd.Passengers[i].PassengerTravelDocuments[ii].Nationality = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[ii].Nationality;
                            sjrd.Passengers[i].PassengerTravelDocuments[ii].DOB = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[ii].DOB;
                            sjrd.Passengers[i].PassengerTravelDocuments[ii].DocSuffix = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[ii].DocSuffix;
                            sjrd.Passengers[i].PassengerTravelDocuments[ii].DocTypeCode = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[ii].DocTypeCode;
                            sjrd.Passengers[i].PassengerTravelDocuments[ii].Names = new BookingName[1];
                            sjrd.Passengers[i].PassengerTravelDocuments[ii].Names[0] = new BookingName();
                            sjrd.Passengers[i].PassengerTravelDocuments[ii].Names[0].FirstName = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[ii].Names[0].FirstName;
                            sjrd.Passengers[i].PassengerTravelDocuments[ii].Names[0].LastName = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[ii].Names[0].LastName;
                        }
                    }


                    sjrd.Passengers[i].PseudoPassenger = false;

                }

                //for (int i = 0; i < InfantNum; i++)
                //{
                //    sjrd.Passengers[i] = new Passenger();
                //    sjrd.Passengers[i].State = MessageState.New;
                //    sjrd.Passengers[i].Infant = new PassengerInfant();
                //    sjrd.Passengers[i].Infant.State = MessageState.New;
                //    sjrd.Passengers[i].Infant.Names = new BookingName[1];
                //    sjrd.Passengers[i].Infant.Names[0] = new BookingName();
                //    sjrd.Passengers[i].Infant.Names[0].FirstName = responseBooking.Booking.Passengers[i].Infant.Names[0].FirstName;
                //    sjrd.Passengers[i].Infant.Names[0].FirstName = responseBooking.Booking.Passengers[i].Infant.Names[0].LastName;
                //    sjrd.Passengers[i].Infant.Gender = responseBooking.Booking.Passengers[i].Infant.Gender;
                //    sjrd.Passengers[i].Infant.DOB = responseBooking.Booking.Passengers[i].Infant.DOB;

                //    //sjrd.Passengers[i].PassengerTypeInfos = new PassengerTypeInfo[1];
                //    //sjrd.Passengers[i].PassengerTypeInfos[0] = new PassengerTypeInfo();
                //    //sjrd.Passengers[i].PassengerTypeInfos[0].DOB = responseBooking.Booking.Passengers[i].PassengerTypeInfos[0].DOB;
                //    //sjrd.Passengers[i].PassengerTypeInfos[0].PaxType = responseBooking.Booking.Passengers[i].PassengerTypeInfos[0].PaxType;
                //    //sjrd.Passengers[i].PassengerTypeInfos[0].State = MessageState.New;

                //    //sjrd.Passengers[i].Names = new BookingName[1];
                //    //sjrd.Passengers[i].Names[0] = new BookingName();
                //    //sjrd.Passengers[i].Names[0].FirstName = responseBooking.Booking.Passengers[i].Names[0].FirstName;
                //    //sjrd.Passengers[i].Names[0].LastName = responseBooking.Booking.Passengers[i].Names[0].LastName;
                //    //sjrd.Passengers[i].Names[0].Title = responseBooking.Booking.Passengers[i].Names[0].Title;

                //    //sjrd.Passengers[i].PassengerTravelDocuments = new PassengerTravelDocument[1];
                //    //sjrd.Passengers[i].PassengerTravelDocuments[0] = new PassengerTravelDocument();
                //    //sjrd.Passengers[i].PassengerTravelDocuments[0].DocNumber = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[0].DocNumber;
                //    //sjrd.Passengers[i].PassengerTravelDocuments[0].ExpirationDate = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[0].ExpirationDate;
                //    //sjrd.Passengers[i].PassengerTravelDocuments[0].Gender = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[0].Gender;
                //    //sjrd.Passengers[i].PassengerTravelDocuments[0].IssuedDate = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[0].IssuedDate;
                //    //sjrd.Passengers[i].PassengerTravelDocuments[0].Nationality = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[0].Nationality;
                //    //sjrd.Passengers[i].PassengerTravelDocuments[0].DOB = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[0].DOB;
                //    //sjrd.Passengers[i].PassengerTravelDocuments[0].DocSuffix = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[0].DocSuffix;
                //    //sjrd.Passengers[i].PassengerTravelDocuments[0].Names = new BookingName[1];
                //    //sjrd.Passengers[i].PassengerTravelDocuments[0].Names[0] = new BookingName();
                //    //sjrd.Passengers[i].PassengerTravelDocuments[0].Names[0].FirstName = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[0].Names[0].FirstName;
                //    //sjrd.Passengers[i].PassengerTravelDocuments[0].Names[0].LastName = responseBooking.Booking.Passengers[i].PassengerTravelDocuments[0].Names[0].LastName;

                //    sjrd.Passengers[i].PseudoPassenger = false;

                //}
                //added by ketee
                if (HttpContext.Current.Session["listPassengers"] != null)
                {
                    HttpContext.Current.Session.Remove("listPassengers");
                }

                sjrd.Journeys = new SellJourney[1];
                sjrd.Journeys[0] = new SellJourney();
                sjrd.Journeys[0].State = MessageState.New;
                sjrd.Journeys[0].NotForGeneralUse = false;
                if (temFlight.TemFlightTransit != "")
                { sjrd.Journeys[0].Segments = new SellSegment[2]; }
                else { sjrd.Journeys[0].Segments = new SellSegment[1]; }
                SellSegment srSegment = new SellSegment();
                srSegment.State = MessageState.New;
                srSegment.DepartureStation = temFlight.TemFlightDeparture.Trim();
                if (temFlight.TemFlightTransit != "")
                {
                    srSegment.ArrivalStation = temFlight.TemFlightTransit.Trim();
                }
                else
                {
                    srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                }

                srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd);
                srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta);
                srSegment.FlightDesignator = new FlightDesignator();

                srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber.Trim();
                srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
                srSegment.Fare = new SellFare();
                srSegment.Fare.State = MessageState.New;
                srSegment.Fare.ClassOfService = temClass.TemClassClass.Trim();
                srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode.Trim();
                srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey.Split('~')[4].ToString();// "AAB1";
                srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey.Split('~')[3].ToString();// "A00H00";

                srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey.Split('~')[6]);
                srSegment.Fare.FareClassOfService = temClass.TemClassClass.Trim();
                srSegment.Fare.IsAllotmentMarketFare = false;

                switch (temClass.TempFareApplicationType.ToString().ToLower())
                {
                    case "route":
                        srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                        break;
                    case "sector":
                        srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                        break;
                    case "governing":
                        srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                        break;
                    default:
                        srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                        //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                        break;
                }
                sjrd.Journeys[0].Segments[0] = srSegment;

                if (temFlight.TemFlightTransit != "")
                {
                    srSegment = new SellSegment();
                    srSegment.State = MessageState.New;
                    srSegment.DepartureStation = temFlight.TemFlightTransit.Trim();
                    srSegment.ArrivalStation = temFlight.TemFlightArrival.Trim();
                    srSegment.STD = Convert.ToDateTime(temFlight.TemFlightStd2);
                    srSegment.STA = Convert.ToDateTime(temFlight.TemFlightSta2);
                    srSegment.FlightDesignator = new FlightDesignator();

                    srSegment.FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber2.Trim();
                    srSegment.FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();

                    srSegment.Fare = new SellFare();
                    srSegment.Fare.State = MessageState.New;
                    srSegment.Fare.ClassOfService = temClass.TemClassClass2.Trim();
                    srSegment.Fare.CarrierCode = temFlight.TemFlightCarrierCode2.Trim();
                    srSegment.Fare.RuleNumber = temClass.TemClassFareSellKey2.Split('~')[4].ToString();
                    srSegment.Fare.FareBasisCode = temClass.TemClassFareSellKey2.Split('~')[3].ToString();

                    srSegment.Fare.FareSequence = Convert.ToInt16(temClass.TemClassFareSellKey2.Split('~')[6]);
                    srSegment.Fare.FareClassOfService = temClass.TemClassClass2.Trim();
                    srSegment.Fare.IsAllotmentMarketFare = false;

                    switch (temClass.TempFareApplicationType2.ToString().ToLower())
                    {
                        case "route":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                            break;
                        case "sector":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Sector;
                            break;
                        case "governing":
                            srSegment.Fare.FareApplicationType = FareApplicationType.Governing;
                            break;
                        default:
                            //srSegment.Fare.FareApplicationType = FareApplicationType.Unmapped;
                            srSegment.Fare.FareApplicationType = FareApplicationType.Route;
                            break;
                    }
                    sjrd.Journeys[0].Segments[1] = srSegment;
                }

                //sellrequest.SellRequestData.SellJourneyRequest.SellJourneyRequestData = sjrd;

                //fill data for new dataClass
                quantityDepart = temClass.TemClassPersonNumber;
                farePriceDepart = Convert.ToDecimal(temClass.TemClassClassPrice);
                fullPriceDepart = Convert.ToDecimal(temClass.TemClassFullPrice);
                signatureDepart = SellSessionID;

                //TemClassofService temClass2 = temClasslist2.ElementAt(ctrEnum);

                //temClass2.TemClassSellSignature = SellSessionID;// SessionManager._signature;
                //UpdateTemClass(temClass2);

                //sjrd.Journeys[1] = new SellJourney();
                //sjrd.Journeys[1].State = MessageState.New;
                //sjrd.Journeys[1].NotForGeneralUse = false;
                //if (temFlight2.TemFlightTransit != "")
                //{ sjrd.Journeys[1].Segments = new SellSegment[2]; }
                //else { sjrd.Journeys[1].Segments = new SellSegment[1]; }
                //SellSegment srSegment1 = new SellSegment();
                //srSegment1.State = MessageState.New;
                //srSegment1.DepartureStation = temFlight2.TemFlightDeparture.Trim();

                //if (temFlight2.TemFlightTransit != "")
                //{
                //    srSegment1.ArrivalStation = temFlight2.TemFlightTransit.Trim();
                //}
                //else
                //{
                //    srSegment1.ArrivalStation = temFlight2.TemFlightArrival.Trim();
                //}

                //srSegment1.STD = Convert.ToDateTime(temFlight2.TemFlightStd);
                //srSegment1.STA = Convert.ToDateTime(temFlight2.TemFlightSta);
                //srSegment1.FlightDesignator = new FlightDesignator();
                //srSegment1.FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber.Trim().PadLeft(4, ' ');
                //srSegment1.FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode.Trim();
                //srSegment1.Fare = new SellFare();
                //srSegment1.Fare.State = MessageState.New;
                //srSegment1.Fare.ClassOfService = temClass2.TemClassClass.Trim();
                //srSegment1.Fare.CarrierCode = temFlight2.TemFlightCarrierCode.Trim();
                //srSegment1.Fare.RuleNumber = temClass2.TemClassFareSellKey.Split('~')[4].ToString();// "AAB1";
                //srSegment1.Fare.FareBasisCode = temClass2.TemClassFareSellKey.Split('~')[3].ToString();// "A00H00";

                //srSegment1.Fare.FareSequence = Convert.ToInt16(temClass2.TemClassFareSellKey.Split('~')[6]);
                //srSegment1.Fare.FareClassOfService = temClass2.TemClassClass.Trim();
                //srSegment1.Fare.IsAllotmentMarketFare = false;

                //switch (temClass2.TempFareApplicationType.ToString().ToLower())
                //{
                //    case "route":
                //        srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                //        break;
                //    case "sector":
                //        srSegment1.Fare.FareApplicationType = FareApplicationType.Sector;
                //        break;
                //    case "governing":
                //        srSegment1.Fare.FareApplicationType = FareApplicationType.Governing;
                //        break;
                //    default:
                //        srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                //        //srSegment1.Fare.FareApplicationType = FareApplicationType.Unmapped;
                //        break;
                //}
                //sjrd.Journeys[1].Segments[0] = srSegment1;

                //if (temFlight2.TemFlightTransit != "")
                //{
                //    srSegment1 = new SellSegment();
                //    srSegment1.State = MessageState.New;
                //    srSegment1.DepartureStation = temFlight2.TemFlightTransit.Trim();
                //    srSegment1.ArrivalStation = temFlight2.TemFlightArrival.Trim();
                //    srSegment1.STD = Convert.ToDateTime(temFlight2.TemFlightStd2);
                //    srSegment1.STA = Convert.ToDateTime(temFlight2.TemFlightSta2);
                //    srSegment1.FlightDesignator = new FlightDesignator();

                //    srSegment1.FlightDesignator.FlightNumber = temFlight2.TemFlightFlightNumber2.Trim();
                //    srSegment1.FlightDesignator.CarrierCode = temFlight2.TemFlightCarrierCode2.Trim();

                //    srSegment1.Fare = new SellFare();
                //    srSegment1.Fare.State = MessageState.New;
                //    srSegment1.Fare.ClassOfService = temClass2.TemClassClass2.Trim();
                //    srSegment1.Fare.CarrierCode = temFlight2.TemFlightCarrierCode2.Trim();
                //    srSegment1.Fare.RuleNumber = temClass2.TemClassFareSellKey2.Split('~')[4].ToString();
                //    srSegment1.Fare.FareBasisCode = temClass2.TemClassFareSellKey2.Split('~')[3].ToString();

                //    srSegment1.Fare.FareSequence = Convert.ToInt16(temClass2.TemClassFareSellKey2.Split('~')[6]);
                //    srSegment1.Fare.FareClassOfService = temClass2.TemClassClass2.Trim();
                //    srSegment1.Fare.IsAllotmentMarketFare = false;

                //    switch (temClass2.TempFareApplicationType2.ToString().ToLower())
                //    {
                //        case "route":
                //            srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                //            break;
                //        case "sector":
                //            srSegment1.Fare.FareApplicationType = FareApplicationType.Sector;
                //            break;
                //        case "governing":
                //            srSegment1.Fare.FareApplicationType = FareApplicationType.Governing;
                //            break;
                //        default:
                //            srSegment1.Fare.FareApplicationType = FareApplicationType.Route;
                //            //srSegment1.Fare.FareApplicationType = FareApplicationType.Unmapped;
                //            break;
                //    }
                //    sjrd.Journeys[1].Segments[1] = srSegment1;

                //}

                ctrEnum += 1;

                //Journey fromJourney = new Journey();
                ////fromJourney.Segments = new System.ComponentModel.BindingList<Segment>[];
                //fromJourney.Segments = new Segment[responseBooking.Booking.Journeys[0].Segments.Length];
                //for (int i = 0; i < responseBooking.Booking.Journeys[0].Segments.Length; i++)
                //{
                //    fromJourney.Segments[i] = new Segment();
                //    fromJourney.Segments[i].State = MessageState.New;
                //    fromJourney.Segments[i].DepartureStation = responseBooking.Booking.Journeys[0].Segments[i].DepartureStation;
                //    fromJourney.Segments[i].ArrivalStation = responseBooking.Booking.Journeys[0].Segments[i].ArrivalStation;
                //    fromJourney.Segments[i].STD = responseBooking.Booking.Journeys[0].Segments[i].STD;
                //    fromJourney.Segments[i].STA = responseBooking.Booking.Journeys[0].Segments[i].STA;
                //    fromJourney.Segments[i].FlightDesignator = new FlightDesignator();
                //    fromJourney.Segments[i].FlightDesignator.CarrierCode = responseBooking.Booking.Journeys[0].Segments[i].FlightDesignator.CarrierCode;
                //    fromJourney.Segments[i].FlightDesignator.FlightNumber = responseBooking.Booking.Journeys[0].Segments[i].FlightDesignator.FlightNumber;
                //    fromJourney.Segments[i].FlightDesignator.OpSuffix = responseBooking.Booking.Journeys[0].Segments[i].FlightDesignator.OpSuffix;
                //    fromJourney.Segments[i].Legs = new Leg[responseBooking.Booking.Journeys[0].Segments[i].Legs.Length];
                //    for (int ii = 0; ii < responseBooking.Booking.Journeys[0].Segments[i].Legs.Length; ii++)
                //    {
                //        fromJourney.Segments[i].State = MessageState.New;
                //        fromJourney.Segments[i].Legs[ii] = new Leg();
                //        fromJourney.Segments[i].Legs[ii].DepartureStation = responseBooking.Booking.Journeys[0].Segments[i].Legs[ii].DepartureStation;
                //        fromJourney.Segments[i].Legs[ii].ArrivalStation = responseBooking.Booking.Journeys[0].Segments[i].Legs[ii].ArrivalStation;
                //        fromJourney.Segments[i].Legs[ii].FlightDesignator = new FlightDesignator();
                //        fromJourney.Segments[i].Legs[ii].FlightDesignator.CarrierCode = responseBooking.Booking.Journeys[0].Segments[i].Legs[ii].FlightDesignator.CarrierCode;
                //        fromJourney.Segments[i].Legs[ii].FlightDesignator.FlightNumber = responseBooking.Booking.Journeys[0].Segments[i].Legs[ii].FlightDesignator.FlightNumber;
                //        fromJourney.Segments[i].Legs[ii].FlightDesignator.OpSuffix = responseBooking.Booking.Journeys[0].Segments[i].Legs[ii].FlightDesignator.OpSuffix;
                //        fromJourney.Segments[i].Legs[ii].STD = responseBooking.Booking.Journeys[0].Segments[i].Legs[ii].STD;
                //        fromJourney.Segments[i].Legs[ii].STA = responseBooking.Booking.Journeys[0].Segments[i].Legs[ii].STA;
                //    }
                //}

                ////create the Flight to move into.
                //Journey toJourney = new Journey();
                //if (temFlight.TemFlightTransit != "")
                //{
                //    toJourney.Segments = new Segment[2];

                //    toJourney.Segments[0] = new Segment();
                //    toJourney.Segments[0].State = MessageState.New;
                //    toJourney.Segments[0].ActionStatusCode = "SS";
                //    toJourney.Segments[0].DepartureStation = temFlight.TemFlightDeparture;
                //    toJourney.Segments[0].ArrivalStation = temFlight.TemFlightTransit.Trim();
                //    toJourney.Segments[0].FlightDesignator = new FlightDesignator();
                //    toJourney.Segments[0].FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode;
                //    toJourney.Segments[0].FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber;
                //    toJourney.Segments[0].FlightDesignator.OpSuffix = temFlight.TemFlightOpSuffix;
                //    toJourney.Segments[0].STD = Convert.ToDateTime(temFlight.TemFlightStd);
                //    toJourney.Segments[0].STA = Convert.ToDateTime(temFlight.TemFlightSta);
                //    toJourney.Segments[0].Fares = new Fare[1];
                //    toJourney.Segments[0].Fares[0] = new Fare();
                //    toJourney.Segments[0].Fares[0].CarrierCode = temFlight.TemFlightCarrierCode;
                //    toJourney.Segments[0].Fares[0].ClassOfService = temClass.TemClassClass.Trim();
                //    toJourney.Segments[0].Fares[0].FareBasisCode = temClass.TemClassFareSellKey.Split('~')[3].ToString();
                //    toJourney.Segments[0].Fares[0].FareStatus = FareStatus.Default;
                //    toJourney.Segments[0].Fares[0].FareApplicationType = FareApplicationType.Route;
                //    toJourney.Segments[0].Legs = new Leg[1];
                //    toJourney.Segments[0].Legs[0] = new Leg();
                //    toJourney.Segments[0].Legs[0].ArrivalStation = temFlight.TemFlightTransit.Trim();
                //    toJourney.Segments[0].Legs[0].DepartureStation = temFlight.TemFlightDeparture;
                //    toJourney.Segments[0].Legs[0].FlightDesignator = new FlightDesignator();
                //    toJourney.Segments[0].Legs[0].FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode;
                //    toJourney.Segments[0].Legs[0].FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber;
                //    toJourney.Segments[0].Legs[0].FlightDesignator.OpSuffix = temFlight.TemFlightOpSuffix;
                //    toJourney.Segments[0].Legs[0].STD = Convert.ToDateTime(temFlight.TemFlightStd);
                //    toJourney.Segments[0].Legs[0].STA = Convert.ToDateTime(temFlight.TemFlightSta);

                //    toJourney.Segments[1] = new Segment();
                //    toJourney.Segments[1].State = MessageState.New;
                //    toJourney.Segments[1].ActionStatusCode = "SS";
                //    toJourney.Segments[1].DepartureStation = temFlight.TemFlightTransit.Trim();
                //    toJourney.Segments[1].ArrivalStation = temFlight.TemFlightArrival.Trim();
                //    toJourney.Segments[1].FlightDesignator = new FlightDesignator();
                //    toJourney.Segments[1].FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode2;
                //    toJourney.Segments[1].FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber2;
                //    toJourney.Segments[1].FlightDesignator.OpSuffix = temFlight.TemFlightOpSuffix2;
                //    toJourney.Segments[1].STD = Convert.ToDateTime(temFlight.TemFlightStd2);
                //    toJourney.Segments[1].STA = Convert.ToDateTime(temFlight.TemFlightSta2);
                //    toJourney.Segments[1].Fares = new Fare[1];
                //    toJourney.Segments[1].Fares[0] = new Fare();
                //    toJourney.Segments[1].Fares[0].CarrierCode = temFlight.TemFlightCarrierCode2;
                //    toJourney.Segments[1].Fares[0].ClassOfService = temClass.TemClassClass2.Trim();
                //    toJourney.Segments[1].Fares[0].FareBasisCode = temClass.TemClassFareSellKey2.Split('~')[3].ToString();
                //    toJourney.Segments[1].Fares[0].FareStatus = FareStatus.Default;
                //    toJourney.Segments[1].Fares[0].FareApplicationType = FareApplicationType.Route;
                //    toJourney.Segments[1].Legs = new Leg[1];
                //    toJourney.Segments[1].Legs[0] = new Leg();
                //    toJourney.Segments[1].Legs[0].ArrivalStation = temFlight.TemFlightArrival.Trim();
                //    toJourney.Segments[1].Legs[0].DepartureStation = temFlight.TemFlightTransit.Trim();
                //    toJourney.Segments[1].Legs[0].FlightDesignator = new FlightDesignator();
                //    toJourney.Segments[1].Legs[0].FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode2;
                //    toJourney.Segments[1].Legs[0].FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber2;
                //    toJourney.Segments[1].Legs[0].FlightDesignator.OpSuffix = temFlight.TemFlightOpSuffix2;
                //    toJourney.Segments[1].Legs[0].STD = Convert.ToDateTime(temFlight.TemFlightStd2);
                //    toJourney.Segments[1].Legs[0].STA = Convert.ToDateTime(temFlight.TemFlightSta2);
                //}
                //else
                //{
                //    toJourney.Segments = new Segment[1];

                //    toJourney.Segments[0] = new Segment();
                //    toJourney.Segments[0].State = MessageState.New;
                //    toJourney.Segments[0].ActionStatusCode = "SS";
                //    toJourney.Segments[0].DepartureStation = temFlight.TemFlightDeparture;
                //    toJourney.Segments[0].ArrivalStation = temFlight.TemFlightArrival;
                //    toJourney.Segments[0].FlightDesignator = new FlightDesignator();
                //    toJourney.Segments[0].FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode;
                //    toJourney.Segments[0].FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber;
                //    toJourney.Segments[0].FlightDesignator.OpSuffix = temFlight.TemFlightOpSuffix;
                //    toJourney.Segments[0].STD = Convert.ToDateTime(temFlight.TemFlightStd);
                //    toJourney.Segments[0].STA = Convert.ToDateTime(temFlight.TemFlightSta);
                //    toJourney.Segments[0].Fares = new Fare[1];
                //    toJourney.Segments[0].Fares[0] = new Fare();
                //    toJourney.Segments[0].Fares[0].CarrierCode = temFlight.TemFlightCarrierCode;
                //    toJourney.Segments[0].Fares[0].ClassOfService = temClass.TemClassClass.Trim();
                //    toJourney.Segments[0].Fares[0].FareBasisCode = temClass.TemClassFareSellKey.Split('~')[3].ToString();
                //    toJourney.Segments[0].Fares[0].FareStatus = FareStatus.Default;
                //    toJourney.Segments[0].Fares[0].FareApplicationType = FareApplicationType.Route;
                //    toJourney.Segments[0].Legs = new Leg[1];
                //    toJourney.Segments[0].Legs[0] = new Leg();
                //    toJourney.Segments[0].Legs[0].ArrivalStation = temFlight.TemFlightArrival;
                //    toJourney.Segments[0].Legs[0].DepartureStation = temFlight.TemFlightDeparture;
                //    toJourney.Segments[0].Legs[0].FlightDesignator = new FlightDesignator();
                //    toJourney.Segments[0].Legs[0].FlightDesignator.CarrierCode = temFlight.TemFlightCarrierCode;
                //    toJourney.Segments[0].Legs[0].FlightDesignator.FlightNumber = temFlight.TemFlightFlightNumber;
                //    toJourney.Segments[0].Legs[0].FlightDesignator.OpSuffix = temFlight.TemFlightOpSuffix;
                //    toJourney.Segments[0].Legs[0].STD = Convert.ToDateTime(temFlight.TemFlightStd);
                //    toJourney.Segments[0].Legs[0].STA = Convert.ToDateTime(temFlight.TemFlightSta);
                //}


                //// create and populate request
                //MoveJourneyBookingsRequest request = new MoveJourneyBookingsRequest();
                //MoveJourneyBookingsRequestData moveData = new MoveJourneyBookingsRequestData();
                //moveData.FromJourney = fromJourney;
                //moveData.ToJourneys = new Journey[1];
                //moveData.ToJourneys[0] = new Journey();
                //moveData.ToJourneys[0] = toJourney;
                //moveData.MovePassengerJourneyType = MovePassengerJourneyType.IROP;
                //moveData.RecordLocators = new string[1];
                //moveData.RecordLocators[0] = PNR;
                //moveData.ChangeReasonCode = "MOVE";
                //moveData.IgnorePNRsWithInvalidFromJourney = true;
                //moveData.BookingComment = "Sample Move";
                //request.MoveJourneyBookingsRequestData = moveData;
                //request.Signature = SellSessionID;

                //request.ContractVersion = 3413;

                //MoveJourneyBookingsResponse response = null;
                //response = bookingAPI.MoveJourneyBookings(request);

                if (sjrd != null)
                {
                    try
                    {
                        sellrequest.SellRequestData.SellJourneyRequest.SellJourneyRequestData = sjrd;
                        //string requeststring = GetXMLString(sellrequest);

                        SellResponse response = bookingAPI.Sell(sellrequest);

                        //remark 1st by Tyas 20170315
                        //if (response != null){
                        //string msg = "";
                        //apiBooking.BookingCommitFlightChange(PNR, SellSessionID, ref msg, temFlight.TemFlightCurrencyCode, false, true);
                        //}

                        //added by ketee, add service fees
                        //foreach (PassengerData rowpassenger in lstPassenger)
                        //{

                        //remarked by diana 20170201, no more service fee
                        //if (AddServiceFees(SellSessionID, cur, 0) == false)
                        //{
                        //    bError = true;
                        //    log.Warning(this, "Add fees failed: " + SellSessionID);
                        //    break;
                        //}

                        //added by diana 20140122 - change fee
                        //if (AddChangeFees(SellSessionID, cur, 0) == false)
                        //{
                        //    bError = true;
                        //    log.Warning(this, "Add fees failed: " + SellSessionID);
                        //    break;
                        //}

                        //fill breakdown fee
                        Navitaire.BookingManager.Booking book = GetBookingFromState(SellSessionID);
                        //string boolxml = GetXMLString(book);

                        //Get Currecy Rate List 20130625
                        Navitaire.UtilitiesManager.GetExternalRatesListResponseData RateResponse = apiBooking.GetExternalRateList(SellSessionID);
                        string curr = book.CurrencyCode;
                        //string req = GetXMLString(RateResponse);
                        decimal currRate = 1;
                        if (curr != "MYR")
                        {
                            for (int i = 0; i < RateResponse.ExternalRateList.Length; i++)
                            {
                                if (RateResponse.ExternalRateList[i].QuotedCurrency == curr && RateResponse.ExternalRateList[i].CollectedCurrency == "MYR")
                                {
                                    currRate = RateResponse.ExternalRateList[i].ExchangeRate;
                                }
                            }
                        }

                        //depart
                        int segCount = book.Journeys[0].Segments.Length;
                        //renew temClass
                        ClassPrice classPriceDepart = new ClassPrice();

                        for (int iDepart = 0; iDepart < segCount; iDepart++)
                        {
                            //added by diana 20131031 - added condition if paxfare length is more than 0
                            if (book.Journeys[0].Segments[iDepart].Fares[0].PaxFares.Length > 0)
                            {
                                PaxFare paxFare = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];
                                PaxFare paxFareChd;
                                if (temClass.TemClassAdultNumber > 0)
                                {
                                    AddFarePrice(paxFare, temClass, ref classPriceDepart, "ADT");
                                }

                                if (temClass.TemClassChildNumber > 0)
                                {
                                    if (book.Journeys[0].Segments[iDepart].Fares[0].PaxFares.Length > 1)
                                        paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[1];
                                    else
                                        paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];

                                    //if (temFlight.TemFlightDeparture.ToString().ToUpper() != "HKG" && temFlight.TemFlightArrival.ToString().ToUpper() != "HKG")
                                    //{
                                    //    paxFareChd = book.Journeys[0].Segments[iDepart].Fares[0].PaxFares[0];
                                    //}
                                    AddFarePrice(paxFareChd, temClass, ref classPriceDepart, "CHD");
                                }
                            }
                        }
                        //remove divide by 2 as service fees apply to 1st booking only
                        //bdSvc += book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2;
                        //classPriceDepart.ServChrg = (book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2) * temClass.TemClassPersonNumber;


                        //amended by diana 20140121 - add initial value to 0, then add it
                        classPriceDepart.ServChrg = 0;
                        classPriceDepart.SSRChrg = 0;
                        classPriceDepart.SeatChrg = 0;
                        classPriceDepart.InfantChrg = 0;
                        classPriceDepart.ServVAT = 0;

                        //load service charges passenger
                        if (book.Passengers[0].PassengerFees.Length > 0 && book.Passengers[0].PassengerFees[0].ServiceCharges.Length > 0)
                        {
                            for (int i = 0; i < book.Passengers[0].PassengerFees[0].ServiceCharges.Length; i++)
                            {
                                switch (book.Passengers[0].PassengerFees[0].ServiceCharges[i].ChargeCode.ToString().ToUpper())
                                {
                                    case "SVCF":
                                        classPriceDepart.ServChrg += (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                        //classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                                        break;
                                    case "VAT":
                                        classPriceDepart.ServVAT += (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                        //classPriceDepart.FullPrice += classPriceDepart.ServVAT;
                                        break;
                                    default:
                                        classPriceDepart.ServChrg += (book.Passengers[0].PassengerFees[0].ServiceCharges[i].Amount) * temClass.TemClassPersonNumber;
                                        //classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                                        break;
                                }
                            }
                        }
                        classPriceDepart.FullPrice += classPriceDepart.ServChrg;
                        classPriceDepart.FullPrice += classPriceDepart.SSRChrg;
                        classPriceDepart.FullPrice += classPriceDepart.SeatChrg;
                        classPriceDepart.FullPrice += classPriceDepart.InfantChrg;
                        classPriceDepart.FullPrice += classPriceDepart.ServVAT;


                        //bdFull = bdFull + classPriceDepart.FullPrice;

                        classPriceDepart.ClassID = temClass.TemClassId;

                        ////return breakdown fee
                        //ClassPrice classPriceReturn = new ClassPrice();

                        //segCount = book.Journeys[1].Segments.Length;
                        //classPriceReturn.ClassID = temClass2.TemClassId;

                        //for (int iReturn = 0; iReturn < segCount; iReturn++)
                        //{
                        //    //added by diana 20131031 - added condition if paxfare length is more than 0
                        //    if (book.Journeys[1].Segments[iReturn].Fares[0].PaxFares.Length > 0)
                        //    {
                        //        PaxFare paxFare = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[0];
                        //        PaxFare paxFareChd;

                        //        if (temClass2.TemClassAdultNumber > 0)
                        //        {
                        //            AddFarePrice(paxFare, temClass2, ref classPriceReturn, "ADT");
                        //        }

                        //        if (temClass2.TemClassChildNumber > 0)
                        //        {
                        //            if (book.Journeys[1].Segments[iReturn].Fares[0].PaxFares.Length > 1)
                        //                paxFareChd = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[1];
                        //            else
                        //                paxFareChd = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[0];

                        //            //if (temFlight.TemFlightDeparture.ToString().ToUpper() != "HKG" && temFlight.TemFlightArrival.ToString().ToUpper() != "HKG")
                        //            //{
                        //            //    paxFareChd = book.Journeys[1].Segments[iReturn].Fares[0].PaxFares[0];
                        //            //}
                        //            AddFarePrice(paxFareChd, temClass2, ref classPriceReturn, "CHD");
                        //        }
                        //    }
                        //}

                        ////remark, as service charge only apply to 1st segment
                        ////bdSvcReturn += book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2;
                        ////classPriceReturn.ServChrg = (book.Passengers[0].PassengerFees[0].ServiceCharges[0].Amount / 2) * temClass2.TemClassPersonNumber;
                        ////bdSvcReturn += 0;
                        //classPriceReturn.ServChrg = 0;
                        //classPriceReturn.SSRChrg = 0;
                        //classPriceReturn.SeatChrg = 0;
                        //classPriceReturn.InfantChrg = 0;
                        //classPriceReturn.FullPrice += classPriceReturn.ServChrg + classPriceReturn.SSRChrg + classPriceReturn.SeatChrg + classPriceReturn.InfantChrg;

                        //bdFullReturn = bdFullReturn + classPriceReturn.FullPrice;

                        //added by ketee , curr rate 20130625
                        classPriceDepart.CurrencyRate = currRate;
                        //classPriceReturn.CurrencyRate = currRate;

                        UpdateClassPrice(classPriceDepart);
                        //UpdateClassPrice(classPriceReturn);

                        DataRow row;
                        row = dataClassTrans.NewRow();
                        row["Quantity"] = quantityDepart;
                        row["FarePrice"] = (classPriceDepart.FarePrice);
                        //commented by diana 20131104
                        //private void ProcessPairedFareJhn(ClassFare[] GoingFare, ClassFare[] ReturnFare,row["FarePrice"] = (classPriceDepart.FarePrice + classPriceReturn.FarePrice) / temClass.TemClassPersonNumber;
                        row["FullPrice"] = (classPriceDepart.FullPrice);
                        row["SellSignature"] = signatureDepart;
                        //added by ketee, 20121016
                        row["ServChrg"] = classPriceDepart.ServChrg;
                        row["SSRChrg"] = classPriceDepart.SSRChrg;
                        row["SeatChrg"] = classPriceDepart.SeatChrg;
                        row["InfantChrg"] = classPriceDepart.InfantChrg;
                        //added by ketee, VAT
                        row["ServVAT"] = classPriceDepart.ServVAT;
                        row["DetailCollectedAmt"] = 0;
                        row["RecordLocator"] = "";
                        //added by ketee 20130625 currrate
                        row["CurrencyRate"] = classPriceDepart.CurrencyRate;

                        //added by ketee, breakdown fees 20130625
                        bdPaxFee += classPriceDepart.PaxFeeChrg;
                        bdAPT += classPriceDepart.TaxChrg;
                        bdchAPT += classPriceDepart.TAxChrgChd;
                        bdFare += classPriceDepart.FarePrice;
                        bdFuel += classPriceDepart.FuelChrg;
                        bdFull += classPriceDepart.FullPrice;
                        bdOth += classPriceDepart.OthChrg;
                        bdDisc += classPriceDepart.DiscChrg;
                        bdPromoDisc += classPriceDepart.PromoDiscChrg;
                        bdSvc += classPriceDepart.ServChrg;
                        bdSSR += classPriceDepart.SSRChrg;
                        bdSeat += classPriceDepart.SeatChrg;
                        bdInfant += classPriceDepart.InfantChrg;
                        bdVAT += classPriceDepart.ServVAT;

                        //bdPaxFeeReturn += classPriceReturn.PaxFeeChrg;
                        //bdAPTReturn += classPriceReturn.TaxChrg;
                        //bdchAPTReturn += classPriceReturn.TAxChrgChd;
                        //bdFareReturn += classPriceReturn.FarePrice;
                        //bdFuelReturn += classPriceReturn.FuelChrg;
                        //bdFullReturn += classPriceReturn.FullPrice;
                        //bdOthReturn += classPriceReturn.OthChrg;
                        //bdDiscReturn += classPriceReturn.DiscChrg;
                        //bdPromoDiscReturn += classPriceReturn.PromoDiscChrg;
                        //bdSvcReturn += classPriceReturn.ServChrg;
                        //bdSSRReturn += classPriceReturn.SSRChrg;
                        //bdSeatReturn += classPriceReturn.SeatChrg;
                        //bdInfantReturn += classPriceReturn.InfantChrg;
                        //bdVAT += classPriceReturn.ServVAT;



                        dataClassTrans.Rows.Add(row);

                        //save new data class into session
                        if (dataClassTrans.Rows.Count > 0)
                        {
                            HttpContext.Current.Session.Remove("dataClassTrans");
                            HttpContext.Current.Session.Add("dataClassTrans", dataClassTrans);
                        }

                    }
                    catch (Exception ex)
                    {
                        bError = true;
                        log.Error(this, ex);
                        HttpContext.Current.Session["errormove"] = ex;
                    }
                }
            }
            if (bError)
            {
                log.Warning(this, "Sell Journey failed.");
                return false;
            }
            return true; //added by diana 20140122
        }
        public void MoveJourney(string PNR, string JourneySellKey, string LoginType, string LoginName, string LoginPWD, string LoginDomain, string SellSessionID)
        {
            IBookingManager bookingAPI = new BookingManagerClient();

            //Navitaire.BookingManager.Booking book = GetBookingFromState(JourneySellKey);
            //string res = GetXMLString(book);
            Navitaire.APIBooking apiBooking = new Navitaire.APIBooking("");
            Navitaire.BookingManager.GetBookingResponse Response = new Navitaire.BookingManager.GetBookingResponse();
            //Response = ApiBook.GetBookingResponseByPNRSignature(PNR,SellSessionID);
            //string resp = GetXMLString(Response);

            string msg = "";
            apiBooking.BookingCommitChange(PNR, SellSessionID, ref msg, "MYR", true, true);

            Response = new Navitaire.BookingManager.GetBookingResponse();
            Response = apiBooking.GetBookingResponseByPNR(PNR);
            //string resp = GetXMLString(Response);
        }

        #endregion

        #region "Add/update Passenger into Booking "
        public class PassengerList
        {
            public virtual string PsgAddress
            {
                get;
                set;
            }
            public virtual string PsgAddress1
            {
                get;
                set;
            }
            public virtual string PsgAddress2
            {
                get;
                set;
            }
            public virtual string PsgBirthDay
            {
                get;
                set;
            }
            public virtual string PsgBookingPnr
            {
                get;
                set;
            }
            public virtual string PsgCity
            {
                get;
                set;
            }
            public virtual string PsgCountry
            {
                get;
                set;
            }
            public virtual string PsgCreateBy
            {
                get;
                set;
            }
            public virtual string PsgCreateDate
            {
                get;
                set;
            }
            public virtual string PsgEmail
            {
                get;
                set;
            }
            public virtual string PsgExpirationDate
            {
                get;
                set;
            }
            public virtual string PsgFirstName
            {
                get;
                set;
            }
            public virtual string PsgHomePhone
            {
                get;
                set;
            }
            public virtual int PsgId
            {
                get;
                set;
            }
            public virtual int PsgPassengerID
            {
                get;
                set;
            }
            public virtual string PsgIssuingCountry
            {
                get;
                set;
            }
            public virtual string PsgLastName
            {
                get;
                set;
            }
            public virtual string PsgMobilePhone
            {
                get;
                set;
            }
            public virtual string PsgModifyBy
            {
                get;
                set;
            }
            public virtual string PsgModifyDate
            {
                get;
                set;
            }
            public virtual string PsgPassportNo
            {
                get;
                set;
            }
            public virtual string PsgState
            {
                get;
                set;
            }
            public virtual string PsgTitle
            {
                get;
                set;
            }
            public virtual string PsgCustomerNumber
            {
                get;
                set;
            }
            public virtual string PsgSignature
            {
                get;
                set;
            }
            public virtual string PsgGender
            {
                get;
                set;
            }
            public virtual decimal PsgChangeNameFee
            {
                get;
                set;
            }
            public virtual int PsgChangeNameCount
            {
                get;
                set;
            }
        }
        public Boolean UpdatePassengers(PassengerData strPsgClass, int strPassengerID, string PNR, int num, ref string errmsg)
        {
            IBookingManager bookingAPI = new BookingManagerClient();
            UpdatePassengersRequest request = new UpdatePassengersRequest();
            UpdatePassengersRequestData requestData = new UpdatePassengersRequestData();
            ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");

            string SellSessionID;
            SellSessionID = apiBooking.AgentLogon();
            GetBookingResponse resp = GetBookingByPNR(PNR, SellSessionID);

            requestData.Passengers = new Passenger[1];
            requestData.Passengers = new Passenger[1];
            requestData.Passengers[0] = new Passenger();
            requestData.Passengers[0].PassengerNumber = Convert.ToInt16(strPsgClass.PassengerID);
            //requestData.Passengers[0].PassengerID = Convert.ToInt64(strPassengerID);// aa().Booking.Passengers[0].PassengerID;
            requestData.Passengers[0].Names = new BookingName[1];
            requestData.Passengers[0].Names[0] = new BookingName();
            requestData.Passengers[0].Names[0].State = MessageState.Modified;
            requestData.Passengers[0].Names[0].FirstName = strPsgClass.FirstName;// "chenyq";
            requestData.Passengers[0].Names[0].LastName = strPsgClass.LastName;// "chriass";
            requestData.Passengers[0].Names[0].Title = strPsgClass.Title;// "Mr";
            requestData.Passengers[0].PassengerInfo = new PassengerInfo();
            requestData.Passengers[0].PassengerInfo.State = MessageState.Modified;
            requestData.Passengers[0].PassengerInfo.Gender = Gender.Male;
            requestData.Passengers[0].PassengerInfo.Nationality = strPsgClass.Nationality;// "CN";
            requestData.Passengers[0].PassengerInfo.ResidentCountry = strPsgClass.IssuingCountry;// "CN";
            requestData.Passengers[0].PassengerTypeInfos = new PassengerTypeInfo[1];
            requestData.Passengers[0].PassengerTypeInfos[0] = new PassengerTypeInfo();
            requestData.Passengers[0].PassengerTypeInfos[0].State = MessageState.Modified;
            requestData.Passengers[0].PassengerTypeInfos[0].DOB = DateTime.Parse(strPsgClass.DOB.ToString());// DateTime.Parse("1984-02-02");
            //requestData.Passengers[0].PassengerTypeInfos[0].PaxType = "ADT";
            if (strPsgClass.Title.ToUpper() == "CHD")
                requestData.Passengers[0].PassengerTypeInfos[0].PaxType = "CHD";
            else
                requestData.Passengers[0].PassengerTypeInfos[0].PaxType = "ADT";

            //requestData.Passengers[0].PassengerTravelDocuments[0].

            //requestData.Passengers[0].PassengerModel = new PassengerModel[1];
            //requestData.Passengers[0].PassengerModel[0] = new PassengerModel();
            //requestData.Passengers[0].PassengerModel[0].State = MessageState.Modified;
            //requestData.Passengers[0].PassengerModel[0].Gender = Gender.Male;
            //requestData.Passengers[0].PassengerModel[0].Nationality = strPsgClass.PsgCountry;//"CN";
            //requestData.Passengers[0].PassengerModel[0].ResidentCountry = strPsgClass.PsgIssuingCountry;// "CN";
            requestData.Passengers[0].State = MessageState.Clean;
            requestData.Passengers[0].PseudoPassenger = false;
            requestData.WaiveNameChangeFee = true;

            request.updatePassengersRequestData = requestData;
            request.ContractVersion = 3413;
            request.Signature = SellSessionID;// SessionManager._signature;
            UpdatePassengersResponse response = bookingAPI.UpdatePassengers(request);
            if (response != null)
            {
                if (response.BookingUpdateResponseData.Warning != null && response.BookingUpdateResponseData.Warning.ToString() != string.Empty)
                    return false;
            }
            string err = string.Empty;
            if (BookingCommitByPNR(PNR, SellSessionID, ref errmsg) == false)
            {
                return false;
            }
            return true;
            //BookingCommitByPNR(PNR, SessionID);
        }

        public Boolean UpdatePassengersList(List<PassengerData> PsgList, List<PassengerData> PsgListInfant, string PNR, ref string errmsg, bool IsInternational)
        {
            IBookingManager bookingAPI = new BookingManagerClient();
            UpdatePassengersRequest request = new UpdatePassengersRequest();
            UpdatePassengersRequestData requestData = new UpdatePassengersRequestData();
            List<BookingTransactionDetail> objListBK_TRANSDTL_Infos = new List<BookingTransactionDetail>();
            ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");

            string SellSessionID = "";
            int InfantNum = 0;
            ArrayList PassengerIDInfant = new ArrayList();
            if (HttpContext.Current.Session["SellSessionID"] == null)
            {
                SellSessionID = apiBooking.AgentLogon();

                GetBookingResponse resp = GetBookingByPNR(PNR, SellSessionID);
                //if (resp != null)
                //{
                //    //for (int i = 0; i < resp.Booking.Passengers.Length; i++)
                //    //{
                //    //    InfantNum += resp.Booking.Passengers[i].PassengerInfants.Length;
                //    //    PassengerIDInfant.Add(resp.Booking.Passengers[i].PassengerNumber);
                //    //}
                //}
            }
            else
            {
                int count = 0;
                //remark by ketee, 20170122
                objListBK_TRANSDTL_Infos = (List<BookingTransactionDetail>)HttpContext.Current.Session["objListBK_TRANSDTL_Infos"];
                foreach (BookingTransactionDetail b in objListBK_TRANSDTL_Infos)
                {
                    if (b.RecordLocator == PNR)
                    {
                        SellSessionID = b.Signature;
                        break;
                    }
                    else
                    {
                        count += 1;
                    }
                }

                if (count == objListBK_TRANSDTL_Infos.Count)
                {
                    SellSessionID = apiBooking.AgentLogon();
                    GetBookingResponse resp = GetBookingByPNR(PNR, SellSessionID);
                    //if (resp != null)
                    //{
                    //    //for (int i = 0; i < resp.Booking.Passengers.Length; i++)
                    //    //{
                    //    //    InfantNum += resp.Booking.Passengers[i].PassengerInfants.Length;
                    //    //}
                    //}
                }
                //SellSessionID = HttpContext.Current.Session["SellSessionID"].ToString();
                //GetBookingResponse resp = GetBookingByPNR(PNR, SellSessionID);
                //if (resp != null)
                //{
                //    for (int i = 0; i < resp.Booking.Passengers.Length; i++)
                //    {
                //        InfantNum += resp.Booking.Passengers[i].PassengerInfants.Length;
                //    }
                //}
                //GetBookingResponse resp = GetBookingByPNR(PNR, SellSessionID);
                //if (resp != null)
                //{
                //    for (int i = 0; i < resp.Booking.Passengers.Length; i++)
                //    {
                //        InfantNum += resp.Booking.Passengers[i].PassengerInfants.Length;
                //    }
                //}
                //HttpCookie cookie2 = Request.Cookies["cookieSearchcondition"];
                //if (cookie2 != null)
                //{
                //    if (Convert.ToInt32(cookie2.Values["InfantNum"]) != 0)
                //    {
                //        HttpCookie cookie3 = Request.Cookies["AllPax"];
                //        if (cookie3 != null)
                //        {
                InfantNum = PsgListInfant.Count;
                //        }
                //    }
                //}
            }
            //SellSessionID = apiBooking.AgentLogon();
            //GetBookingResponse resp = GetBookingByPNR(PNR, SellSessionID);
            PassengerData strPsgClass;
            PassengerData strPsgClass2;
            //requestData.Passengers = new Passenger[PsgList.Count];

            PsgList = PsgList.FindAll(item => item.RecordLocator == PNR);

            requestData.Passengers = new Passenger[PsgList.Count];



            for (int i = 0; i < PsgList.Count; i++)
            {
                strPsgClass = new PassengerData();
                strPsgClass = PsgList[i];
                if (strPsgClass.RecordLocator.Trim() == PNR)
                {
                    requestData.Passengers[i] = new Passenger();
                    requestData.Passengers[i].PassengerNumber = Convert.ToInt16(strPsgClass.PassengerID);
                    //requestData.Passengers[0].PassengerID = Convert.ToInt64(strPassengerID);// aa().Booking.Passengers[0].PassengerID;
                    requestData.Passengers[i].Names = new BookingName[1];
                    requestData.Passengers[i].Names[0] = new BookingName();
                    requestData.Passengers[i].Names[0].State = MessageState.Modified;
                    requestData.Passengers[i].Names[0].FirstName = strPsgClass.FirstName;
                    requestData.Passengers[i].Names[0].LastName = strPsgClass.LastName;
                    requestData.Passengers[i].Names[0].Title = strPsgClass.Title;

                    requestData.Passengers[i].PassengerInfo = new PassengerInfo();
                    requestData.Passengers[i].PassengerInfo.State = MessageState.Modified;
                    requestData.Passengers[i].PassengerInfo.Gender = Gender.Male;
                    if (strPsgClass.Gender.ToUpper() == "MALE")
                        requestData.Passengers[i].PassengerInfo.Gender = Gender.Male;
                    else
                        requestData.Passengers[i].PassengerInfo.Gender = Gender.Female;
                    requestData.Passengers[i].PassengerInfo.Nationality = strPsgClass.Nationality;
                    requestData.Passengers[i].PassengerInfo.ResidentCountry = strPsgClass.IssuingCountry;
                    requestData.Passengers[i].PassengerTypeInfos = new PassengerTypeInfo[1];
                    requestData.Passengers[i].PassengerTypeInfos[0] = new PassengerTypeInfo();
                    requestData.Passengers[i].PassengerTypeInfos[0].State = MessageState.Modified;
                    requestData.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse(strPsgClass.DOB.ToString());

                    if (strPsgClass.Title.ToUpper() != "CHD")
                    { requestData.Passengers[i].PassengerTypeInfos[0].PaxType = "ADT"; }
                    else { requestData.Passengers[i].PassengerTypeInfos[0].PaxType = "CHD"; }

                    List<PassengerData> PsgListInfantNew = PsgListInfant.Where(item => item.PassengerID == strPsgClass.PassengerID && item.RecordLocator == strPsgClass.RecordLocator).ToList();
                    if (PsgListInfantNew.Count > 0)
                    {
                        strPsgClass2 = new PassengerData();
                        strPsgClass2 = PsgListInfantNew[0];
                        requestData.Passengers[i].State = MessageState.Modified;
                        requestData.Passengers[i].Infant = new PassengerInfant();
                        requestData.Passengers[i].Infant.State = MessageState.New;
                        requestData.Passengers[i].Infant.Names = new BookingName[1];
                        requestData.Passengers[i].Infant.Names[0] = new BookingName();
                        requestData.Passengers[i].Infant.Names[0].FirstName = strPsgClass2.FirstName;
                        //requestData.Passengers[0].Infant.Names[0].MiddleName = "T";
                        requestData.Passengers[i].Infant.Names[0].LastName = strPsgClass2.LastName;
                        if (strPsgClass2.Gender.ToUpper() == "MALE")
                            requestData.Passengers[i].Infant.Gender = Gender.Male;
                        else
                            requestData.Passengers[i].Infant.Gender = Gender.Female;
                        requestData.Passengers[i].Infant.DOB = strPsgClass2.DOB;
                        requestData.Passengers[i].Infant.Nationality = strPsgClass2.Nationality;

                        if (IsInternational) //20170321 - Sienny (validate passportno and expirydate if international)
                        {
                            requestData.Passengers[i].PassengerTravelDocuments = new PassengerTravelDocument[2];
                            requestData.Passengers[i].PassengerTravelDocuments[0] = new PassengerTravelDocument();
                            requestData.Passengers[i].PassengerTravelDocuments[0].State = MessageState.New;
                            requestData.Passengers[i].PassengerTravelDocuments[0].Names = new BookingName[1];
                            requestData.Passengers[i].PassengerTravelDocuments[0].Names[0] = new BookingName();
                            requestData.Passengers[i].PassengerTravelDocuments[0].Names[0].FirstName = strPsgClass.FirstName;
                            //requestData.Passengers[0].PassengerTravelDocuments[0].Names[0].MiddleName = "T";
                            requestData.Passengers[i].PassengerTravelDocuments[0].Names[0].LastName = strPsgClass.LastName;
                            requestData.Passengers[i].PassengerTravelDocuments[0].DocNumber = strPsgClass.PassportNo;
                            requestData.Passengers[i].PassengerTravelDocuments[0].ExpirationDate = strPsgClass.ExpiryDate;
                            requestData.Passengers[i].PassengerTravelDocuments[0].DocTypeCode = "P";
                            if (strPsgClass.Gender.ToUpper() == "MALE")
                                requestData.Passengers[i].PassengerTravelDocuments[0].Gender = Gender.Male;
                            else
                                requestData.Passengers[i].PassengerTravelDocuments[0].Gender = Gender.Female;
                            requestData.Passengers[i].PassengerTravelDocuments[0].IssuedByCode = strPsgClass.IssuingCountry;


                            requestData.Passengers[i].PassengerTravelDocuments[1] = new PassengerTravelDocument();
                            // populate travel document data and add to passenger
                            requestData.Passengers[i].PassengerTravelDocuments[1].State = MessageState.New;
                            requestData.Passengers[i].PassengerTravelDocuments[1].Names = new BookingName[1];
                            requestData.Passengers[i].PassengerTravelDocuments[1].Names[0] = new BookingName();
                            requestData.Passengers[i].PassengerTravelDocuments[1].Names[0].FirstName = strPsgClass2.FirstName;
                            //requestData.Passengers[0].PassengerTravelDocuments[0].Names[0].MiddleName = "T";
                            requestData.Passengers[i].PassengerTravelDocuments[1].Names[0].LastName = strPsgClass2.LastName;
                            requestData.Passengers[i].PassengerTravelDocuments[1].DocNumber = strPsgClass2.PassportNo;
                            requestData.Passengers[i].PassengerTravelDocuments[1].DocSuffix = "I";
                            if (strPsgClass2.Gender.ToUpper() == "MALE")
                                requestData.Passengers[i].PassengerTravelDocuments[1].Gender = Gender.Male;
                            else
                                requestData.Passengers[i].PassengerTravelDocuments[1].Gender = Gender.Female;
                            requestData.Passengers[i].PassengerTravelDocuments[1].DOB = strPsgClass2.DOB;
                            requestData.Passengers[i].PassengerTravelDocuments[1].DocTypeCode = "P";
                            //requestData.Passengers[i].PassengerTravelDocuments[0].IssuedDate = DateTime.Parse("2020-09-01T00:00:00");
                            requestData.Passengers[i].PassengerTravelDocuments[1].ExpirationDate = strPsgClass2.ExpiryDate;
                            requestData.Passengers[i].PassengerTravelDocuments[1].IssuedByCode = strPsgClass2.IssuingCountry;
                        }
                    }
                    else
                    {
                        if (IsInternational) //20170321 - Sienny (validate passportno and expirydate if international)
                        {
                            requestData.Passengers[i].PassengerTravelDocuments = new PassengerTravelDocument[1];
                            requestData.Passengers[i].PassengerTravelDocuments[0] = new PassengerTravelDocument();
                            requestData.Passengers[i].PassengerTravelDocuments[0].Names = new BookingName[1];
                            requestData.Passengers[i].PassengerTravelDocuments[0].Names[0] = new BookingName();
                            requestData.Passengers[i].PassengerTravelDocuments[0].Names[0].FirstName = strPsgClass.FirstName;
                            //requestData.Passengers[0].PassengerTravelDocuments[0].Names[0].MiddleName = "T";
                            requestData.Passengers[i].PassengerTravelDocuments[0].Names[0].LastName = strPsgClass.LastName;
                            requestData.Passengers[i].PassengerTravelDocuments[0].DocNumber = strPsgClass.PassportNo;
                            requestData.Passengers[i].PassengerTravelDocuments[0].ExpirationDate = strPsgClass.ExpiryDate;
                            requestData.Passengers[i].PassengerTravelDocuments[0].DocTypeCode = "P";
                            if (strPsgClass.Gender.ToUpper() == "MALE")
                                requestData.Passengers[i].PassengerTravelDocuments[0].Gender = Gender.Male;
                            else
                                requestData.Passengers[i].PassengerTravelDocuments[0].Gender = Gender.Female;
                            requestData.Passengers[i].PassengerTravelDocuments[0].IssuedByCode = strPsgClass.IssuingCountry;
                        }
                    }
                    requestData.Passengers[i].State = MessageState.Clean;
                    requestData.Passengers[i].PseudoPassenger = false;
                    requestData.WaiveNameChangeFee = true;
                }
            }

            //remark by ketee, 20170122
            //if (InfantNum != 0 && PsgListInfant[0].RecordLocator.Trim() == PNR)
            //{
            //    for (int i = 0; i < InfantNum; i++)
            //    {
            //        strPsgClass = new PassengerData();
            //        strPsgClass = PsgListInfant[i];
            //        requestData.Passengers[i].State = MessageState.Modified;
            //        requestData.Passengers[i].Infant = new PassengerInfant();
            //        requestData.Passengers[i].Infant.State = MessageState.New;
            //        requestData.Passengers[i].Infant.Names = new BookingName[1];
            //        requestData.Passengers[i].Infant.Names[0] = new BookingName();
            //        requestData.Passengers[i].Infant.Names[0].FirstName = strPsgClass.FirstName;
            //        //requestData.Passengers[0].Infant.Names[0].MiddleName = "T";
            //        requestData.Passengers[i].Infant.Names[0].LastName = strPsgClass.LastName;
            //        if (strPsgClass.Gender.ToUpper() == "MALE")
            //            requestData.Passengers[i].Infant.Gender = Gender.Male;
            //        else
            //            requestData.Passengers[i].Infant.Gender = Gender.Female;
            //        requestData.Passengers[i].Infant.DOB = strPsgClass.DOB;
            //        requestData.Passengers[i].Infant.Nationality = strPsgClass.Nationality;
            //        // create infant travel document objects

            //    }
            //}

            request.updatePassengersRequestData = requestData;
            request.ContractVersion = 3413;
            request.Signature = SellSessionID;// SessionManager._signature;
            //string xml = GetXMLString(request);
            UpdatePassengersResponse response = bookingAPI.UpdatePassengers(request);
            //xml = GetXMLString(response);
            if (response != null)
            {
                if (response.BookingUpdateResponseData.Warning != null && response.BookingUpdateResponseData.Warning.ToString() != string.Empty)
                    return false;
            }
            string err = string.Empty;
            //GetBookingResponse respon = GetBookingByPNR(PNR, SellSessionID);
            if (BookingCommitByPNR(PNR, SellSessionID, ref errmsg) == false)
            {
                return false;
            }
            return true;
            //BookingCommitByPNR(PNR, SessionID);
        }
        #endregion

        public Boolean CommitUpdatePax(ABS.Logic.GroupBooking.Agent.AgentProfile agent, string PNR, List<PassengerData> PsgList, List<PassengerData> PsgListInfant, bool IsInternational, ref string errMsg, string contactTitle = "", string contactFirstName = "", string contactLastName = "", string contactEmail = "", string contactPhone = "", string contactAddress = "", string contactTown = "", string contactCountry = "", string contactState = "", string contactZipCode = "", string organizationName = "")
        {
            //added by romy, performance monitoring
            var profiler = MiniProfiler.Current;

            IBookingManager bookingAPI = new BookingManagerClient();
            UpdatePassengersRequest request = new UpdatePassengersRequest();
            UpdatePassengersRequestData requestData = new UpdatePassengersRequestData();
            List<BookingTransactionDetail> objListBK_TRANSDTL_Infos = new List<BookingTransactionDetail>();
            ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");

            string SellSessionID = "";
            int InfantNum = 0;
            //string PNR = psSellSignature;

            if (HttpContext.Current.Session["SellSessionID"] == null)
            {
                SellSessionID = apiBooking.AgentLogon();

                GetBookingResponse resp = GetBookingByPNR(PNR, SellSessionID);
                if (resp != null)
                {
                    //for (int i = 0; i < resp.Booking.Passengers.Length; i++)
                    //{
                    //    InfantNum += resp.Booking.Passengers[i].PassengerInfants.Length;
                    //}
                }
            }
            else
            {
                int count = 0;
                //remark by ketee, 20170122
                objListBK_TRANSDTL_Infos = (List<BookingTransactionDetail>)HttpContext.Current.Session["objListBK_TRANSDTL_Infos"];
                foreach (BookingTransactionDetail b in objListBK_TRANSDTL_Infos)
                {
                    if (b.RecordLocator == PNR)
                    {
                        SellSessionID = b.Signature;
                        break;
                    }
                    else
                    {
                        count += 1;
                    }
                }

                if (count == objListBK_TRANSDTL_Infos.Count)
                {
                    SellSessionID = apiBooking.AgentLogon();
                    GetBookingResponse resp = GetBookingByPNR(PNR, SellSessionID);
                    if (resp != null)
                    {
                        for (int i = 0; i < resp.Booking.Passengers.Length; i++)
                        {
                            InfantNum += resp.Booking.Passengers[i].PassengerInfants.Length;
                        }
                    }
                }
                else if (PsgListInfant != null) InfantNum = PsgListInfant.Count;
            }

            PassengerData strPsgClass;

            PsgList = PsgList.FindAll(item => item.RecordLocator == PNR);

            requestData.Passengers = new Passenger[PsgList.Count];



            for (int i = 0; i < PsgList.Count; i++)
            {
                strPsgClass = new PassengerData();
                strPsgClass = PsgList[i];
                if (strPsgClass.RecordLocator == PNR)
                {
                    requestData.Passengers[i] = new Passenger();
                    requestData.Passengers[i].PassengerNumber = Convert.ToInt16(strPsgClass.PassengerID);
                    //requestData.Passengers[0].PassengerID = Convert.ToInt64(strPassengerID);// aa().Booking.Passengers[0].PassengerID;
                    requestData.Passengers[i].Names = new BookingName[1];
                    requestData.Passengers[i].Names[0] = new BookingName();
                    requestData.Passengers[i].Names[0].State = MessageState.Modified;
                    requestData.Passengers[i].Names[0].FirstName = strPsgClass.FirstName;
                    requestData.Passengers[i].Names[0].LastName = strPsgClass.LastName;
                    requestData.Passengers[i].Names[0].Title = strPsgClass.Title;

                    requestData.Passengers[i].PassengerInfo = new PassengerInfo();
                    requestData.Passengers[i].PassengerInfo.State = MessageState.Modified;
                    requestData.Passengers[i].PassengerInfo.Gender = Gender.Male;
                    if (strPsgClass.Gender.ToUpper() == "MALE")
                        requestData.Passengers[i].PassengerInfo.Gender = Gender.Male;
                    else
                        requestData.Passengers[i].PassengerInfo.Gender = Gender.Female;
                    requestData.Passengers[i].PassengerInfo.Nationality = strPsgClass.Nationality;
                    requestData.Passengers[i].PassengerInfo.ResidentCountry = strPsgClass.IssuingCountry;
                    requestData.Passengers[i].PassengerTypeInfos = new PassengerTypeInfo[1];
                    requestData.Passengers[i].PassengerTypeInfos[0] = new PassengerTypeInfo();
                    requestData.Passengers[i].PassengerTypeInfos[0].State = MessageState.Modified;
                    requestData.Passengers[i].PassengerTypeInfos[0].DOB = DateTime.Parse(strPsgClass.DOB.ToString());

                    if (strPsgClass.Title.ToUpper() != "CHD")
                    { requestData.Passengers[i].PassengerTypeInfos[0].PaxType = "ADT"; }
                    else { requestData.Passengers[i].PassengerTypeInfos[0].PaxType = "CHD"; }

                    int indexInfant = PsgListInfant.FindIndex(x => Convert.ToInt16(x.PassengerID) == i);

                    if (indexInfant >= 0)
                    {
                        requestData.Passengers[i].Infant = new PassengerInfant();
                        requestData.Passengers[i].Infant.State = MessageState.New;
                        requestData.Passengers[i].Infant.Names = new BookingName[1];
                        requestData.Passengers[i].Infant.Names[0] = new BookingName();
                        requestData.Passengers[i].Infant.Names[0].FirstName = PsgListInfant[indexInfant].FirstName;
                        //requestData.Passengers[0].Infant.Names[0].MiddleName = "T";
                        requestData.Passengers[i].Infant.Names[0].LastName = PsgListInfant[indexInfant].LastName;
                        if (PsgListInfant[indexInfant].Gender.ToUpper() == "MALE")
                            requestData.Passengers[i].Infant.Gender = Gender.Male;
                        else
                            requestData.Passengers[i].Infant.Gender = Gender.Female;
                        requestData.Passengers[i].Infant.DOB = PsgListInfant[indexInfant].DOB;
                        requestData.Passengers[i].Infant.Nationality = PsgListInfant[indexInfant].Nationality;
                    }

                    if (IsInternational) //20170321 - Sienny (validate passportno and expirydate if international)
                    {
                        if (indexInfant >= 0)
                        {
                            requestData.Passengers[i].PassengerTravelDocuments = new PassengerTravelDocument[2];
                        }
                        else
                        {
                            requestData.Passengers[i].PassengerTravelDocuments = new PassengerTravelDocument[1];
                        }
                        requestData.Passengers[i].PassengerTravelDocuments[0] = new PassengerTravelDocument();
                        requestData.Passengers[i].PassengerTravelDocuments[0].DocNumber = strPsgClass.PassportNo;
                        requestData.Passengers[i].PassengerTravelDocuments[0].ExpirationDate = strPsgClass.ExpiryDate;
                        requestData.Passengers[i].PassengerTravelDocuments[0].DocTypeCode = "P";
                        if (strPsgClass.Gender.ToUpper() == "MALE")
                            requestData.Passengers[i].PassengerTravelDocuments[0].Gender = Gender.Male;
                        else
                            requestData.Passengers[i].PassengerTravelDocuments[0].Gender = Gender.Female;
                        requestData.Passengers[i].PassengerTravelDocuments[0].IssuedByCode = strPsgClass.IssuingCountry;

                        if (indexInfant >= 0)
                        {
                            requestData.Passengers[i].PassengerTravelDocuments[1] = new PassengerTravelDocument();
                            // populate travel document data and add to passenger
                            requestData.Passengers[i].PassengerTravelDocuments[1].State = MessageState.New;
                            requestData.Passengers[i].PassengerTravelDocuments[1].Names = new BookingName[1];
                            requestData.Passengers[i].PassengerTravelDocuments[1].Names[0] = new BookingName();
                            requestData.Passengers[i].PassengerTravelDocuments[1].Names[0].FirstName = PsgListInfant[indexInfant].FirstName;
                            //requestData.Passengers[0].PassengerTravelDocuments[0].Names[0].MiddleName = "T";
                            requestData.Passengers[i].PassengerTravelDocuments[1].Names[0].LastName = PsgListInfant[indexInfant].LastName;
                            requestData.Passengers[i].PassengerTravelDocuments[1].DocNumber = PsgListInfant[indexInfant].PassportNo;
                            requestData.Passengers[i].PassengerTravelDocuments[1].DocSuffix = "I";
                            if (PsgListInfant[indexInfant].Gender.ToUpper() == "MALE")
                                requestData.Passengers[i].PassengerTravelDocuments[1].Gender = Gender.Male;
                            else
                                requestData.Passengers[i].PassengerTravelDocuments[1].Gender = Gender.Female;
                            requestData.Passengers[i].PassengerTravelDocuments[1].DOB = PsgListInfant[indexInfant].DOB;
                            requestData.Passengers[i].PassengerTravelDocuments[1].DocTypeCode = "P";
                            //requestData.Passengers[i].PassengerTravelDocuments[0].IssuedDate = DateTime.Parse("2020-09-01T00:00:00");
                            requestData.Passengers[i].PassengerTravelDocuments[1].ExpirationDate = PsgListInfant[indexInfant].ExpiryDate;
                            requestData.Passengers[i].PassengerTravelDocuments[1].IssuedByCode = PsgListInfant[indexInfant].IssuingCountry;

                        }
                    }

                    requestData.Passengers[i].State = MessageState.Clean;
                    requestData.Passengers[i].PseudoPassenger = false;
                    requestData.WaiveNameChangeFee = true;
                }
            }

            //remark by ketee, 20170122
            //if (InfantNum != 0)
            //{
            //    for (int i = 0; i < InfantNum; i++)
            //    {
            //        strPsgClass = new PassengerData();
            //        strPsgClass = PsgListInfant[i];
            //        requestData.Passengers[i].State = MessageState.Modified;
            //        requestData.Passengers[i].Infant = new PassengerInfant();
            //        requestData.Passengers[i].Infant.State = MessageState.New;
            //        requestData.Passengers[i].Infant.Names = new BookingName[1];
            //        requestData.Passengers[i].Infant.Names[0] = new BookingName();
            //        requestData.Passengers[i].Infant.Names[0].FirstName = strPsgClass.FirstName;
            //        //requestData.Passengers[0].Infant.Names[0].MiddleName = "T";
            //        requestData.Passengers[i].Infant.Names[0].LastName = strPsgClass.LastName;
            //        if (strPsgClass.Gender.ToUpper() == "MALE")
            //            requestData.Passengers[i].Infant.Gender = Gender.Male;
            //        else
            //            requestData.Passengers[i].Infant.Gender = Gender.Female;
            //        requestData.Passengers[i].Infant.DOB = strPsgClass.DOB;
            //        requestData.Passengers[i].Infant.Nationality = strPsgClass.Nationality;
            //        // create infant travel document objects
            //        //requestData.Passengers[i].PassengerTravelDocuments = new PassengerTravelDocument[1];
            //        //requestData.Passengers[i].PassengerTravelDocuments[0] = new PassengerTravelDocument();
            //        //// populate travel document data and add to passenger
            //        //requestData.Passengers[i].PassengerTravelDocuments[0].State = MessageState.New;
            //        //requestData.Passengers[i].PassengerTravelDocuments[0].Names = new BookingName[1];
            //        //requestData.Passengers[i].PassengerTravelDocuments[0].Names[0] = new BookingName();
            //        //requestData.Passengers[i].PassengerTravelDocuments[0].Names[0].FirstName = strPsgClass.FirstName;
            //        ////requestData.Passengers[0].PassengerTravelDocuments[0].Names[0].MiddleName = "T";
            //        //requestData.Passengers[i].PassengerTravelDocuments[0].Names[0].LastName = strPsgClass.LastName;
            //        //requestData.Passengers[i].PassengerTravelDocuments[0].DocNumber = strPsgClass.PassportNo;
            //        //requestData.Passengers[i].PassengerTravelDocuments[0].DocSuffix = "I";
            //        //requestData.Passengers[i].PassengerTravelDocuments[0].DOB = strPsgClass.DOB;
            //        //requestData.Passengers[i].PassengerTravelDocuments[0].DocTypeCode = "P";
            //        ////requestData.Passengers[i].PassengerTravelDocuments[0].IssuedDate = DateTime.Parse("2020-09-01T00:00:00");
            //        //requestData.Passengers[i].PassengerTravelDocuments[0].ExpirationDate = strPsgClass.ExpiryDate;
            //        //requestData.Passengers[i].PassengerTravelDocuments[0].IssuedByCode = strPsgClass.IssuingCountry;
            //    }
            //}

            request.updatePassengersRequestData = requestData;
            request.ContractVersion = 3413;
            request.Signature = SellSessionID;// SessionManager._signature;
            //string xml = GetXMLString(request);
            UpdatePassengersResponse response;
            using (profiler.Step("UpdatePassengers"))
            {
                response = bookingAPI.UpdatePassengers(request);
            }
            //xml = GetXMLString(response);
            if (response != null)
            {
                if (response.BookingUpdateResponseData.Warning != null && response.BookingUpdateResponseData.Warning.ToString() != string.Empty)
                    return false;
            }
            string err = string.Empty;
            //GetBookingResponse respon = GetBookingByPNR(PNR, SellSessionID);
            using (profiler.Step("BookingCommitByPNR"))
            {
                if (BookingCommitByPNR(PNR, SellSessionID, ref errMsg) == false)
                {
                    return false;
                }
            }
            return true;
            //BookingCommitByPNR(PNR, SessionID);
        }
        #region "ClearJourney"

        //added by diana 20131107 - clear expired journey in navitaire
        public Boolean ClearExpiredJourney(string AgentID = "", string TransID = "")
        {
            try
            {
                ArrayList SignatureKey = new ArrayList();
                GetExpiredJourney(ref SignatureKey, AgentID, TransID);

                if (SignatureKey.Count > 0)
                {
                    for (int i = 0; i < SignatureKey.Count; i++)
                    {
                        string errMsg = "";
                        string recordLocator = "";
                        bool foundJourney = false;

                        ABS.Navitaire.APIBooking absNavitaire = new ABS.Navitaire.APIBooking("");
                        Navitaire.BookingManager.Booking booking = absNavitaire.GetBookingFromState(SignatureKey[i].ToString());
                        //string str = GetXMLString(booking);
                        if (booking != null)
                        {
                            if (booking.Journeys.Length > 0 && booking.RecordLocator != "")
                            {
                                foundJourney = true;
                                recordLocator = booking.RecordLocator;
                            }
                        }

                        if (foundJourney == true)
                        {
                            SetTransDetailStatus(SignatureKey[i].ToString(), 0, recordLocator);
                            log.Info(this, "Session Found: " + SignatureKey[i].ToString() + "  Update PNR: " + recordLocator);
                        }
                        else
                        {
                            if (booking != null && booking.Journeys.Length > 0)
                            {
                                absNavitaire.ClearJourney(SignatureKey[i].ToString(), ref errMsg);
                                log.Info(this, "Clear Expired Journey: " + SignatureKey[i].ToString() + " : " + errMsg);
                            }
                            if (errMsg != null && !string.IsNullOrEmpty(errMsg))
                            {
                                if (errMsg.Trim().ToUpper().Contains("NO SUCH SESSION"))
                                    SetTransDetailStatus(SignatureKey[i].ToString(), 1);
                                //return false;
                            }
                            else
                            {
                                SetTransDetailStatus(SignatureKey[i].ToString(), 1);
                            }
                        }


                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
                //throw new ApplicationException("Data not found");
            }
        }

        public Boolean ClearExpiredSession(ArrayList SignatureKey)
        {
            try
            {
                //ArrayList SignatureKey = new ArrayList();
                //SignatureKey.Add(SessionID);

                if (SignatureKey.Count > 0)
                {
                    for (int i = 0; i < SignatureKey.Count; i++)
                    {
                        string errMsg = "";
                        string recordLocator = "";
                        bool foundJourney = false;

                        ABS.Navitaire.APIBooking absNavitaire = new ABS.Navitaire.APIBooking("");
                        Navitaire.BookingManager.Booking booking = absNavitaire.GetBookingFromState(SignatureKey[i].ToString());
                        //string str = GetXMLString(booking);
                        if (booking != null)
                        {
                            if (booking.Journeys.Length > 0 && booking.RecordLocator != "")
                            {
                                foundJourney = true;
                                recordLocator = booking.RecordLocator;
                            }

                            if (foundJourney == false)
                            {
                                absNavitaire.ClearJourney(SignatureKey[i].ToString(), ref errMsg);
                            }

                        }


                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
                //throw new ApplicationException("Data not found");
            }
        }

        //added by diana 20131210 - when exception, check journey exist
        public void CheckJourneyExist(string exceptionMessage, string sellSignature, string PNR = "")
        {
            HttpContext.Current.Session["ExceptionMessage"] = exceptionMessage + " ";
            HttpContext.Current.Session["InvalidBooking"] = "false";

            //test to get booking response
            if (sellSignature != "")
            {
                Navitaire.APIBooking api = new Navitaire.APIBooking("");
                Navitaire.BookingManager.Booking booking = new Navitaire.BookingManager.Booking();
                booking = api.GetBookingFromState(sellSignature);
                if (booking != null)
                {
                    if (booking.Journeys.Length <= 0)
                    {
                        log.Info(this, "Journey does not exist : " + sellSignature);
                        HttpContext.Current.Session["InvalidBooking"] = "true";
                    }
                    else
                    {
                        log.Info(this, "Journey exists : " + sellSignature);
                    }
                }
                else
                {
                    log.Info(this, "Journey does not exist : " + sellSignature);
                    HttpContext.Current.Session["InvalidBooking"] = "true";
                }
            }
            else
            {
                Navitaire.APIBooking api = new Navitaire.APIBooking("");
                Navitaire.BookingManager.GetBookingResponse Response = new Navitaire.BookingManager.GetBookingResponse();
                Response = api.GetBookingResponseByPNR(PNR);
                if (Response != null)
                {
                    if (Response.Booking == null || Response.Booking.Journeys.Length <= 0)
                    {
                        log.Info(this, "Journey does not exist : " + PNR);
                        HttpContext.Current.Session["InvalidBooking"] = "true";
                    }
                    else
                    {
                        log.Info(this, "Journey exists : " + PNR);
                    }
                }
                else
                {
                    log.Info(this, "Journey does not exist : " + PNR);
                    HttpContext.Current.Session["InvalidBooking"] = "true";
                }
            }
            //end test to get booking reponse
        }

        //added by diana 20131107 - retrieve expired journey in 15 mins
        public void GetExpiredJourney(ref ArrayList SignatureKey, string AgentID = "", string TransID = "")
        {
            DataTable dt = null;
            string strSQL = string.Empty;
            string strCondition = string.Empty;
            string searchAgent = "";
            string searchTransID = "";

            //remark by ketee, 20170415
            //if (AgentID != "")
            //    searchAgent = " AND BookingDate > DATEADD(MINUTE, -30, GETDATE()) AND AgentID='" + AgentID + "'";
            //else
            //    searchAgent = " AND BookingDate < DATEADD(MINUTE, -15, GETDATE()) AND BookingDate > DATEADD(MINUTE, -30, GETDATE())";
            //modify by ketee, 20170415, suppose no need to filter by minute, select all booking to clear on dashboard page will do

            //if (AgentID != "")
            //    searchAgent = " AND BookingDate > DATEADD(DAY, -7, GETDATE()) AND AgentID='" + AgentID + "' AND BK_TRANSMAIN.Synccreate >= DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0)";
            //else
            //    searchAgent = " AND BookingDate < DATEADD(MINUTE, -15, GETDATE()) AND BookingDate > DATEADD(MINUTE, -30, GETDATE())";

            if (AgentID != "")
                searchAgent = " AND BookingDate > DATEADD(MINUTE, -30, GETDATE()) AND AgentID='" + AgentID + "' AND BK_TRANSMAIN.Synccreate >= DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0)";
            else
                searchAgent = " AND BookingDate < DATEADD(MINUTE, -15, GETDATE()) AND BookingDate > DATEADD(MINUTE, -30, GETDATE())";

            //added by diana 20131114 - to filter specific transID
            if (TransID != "")
                searchTransID = " AND BK_TRANSMAIN.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'";
            try
            {
                //testing in agentmain first
                strSQL = "SELECT DISTINCT SellKey FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID=BK_TRANSMAIN.TransID" +
                        " AND TransVoid=0 AND LEN(RecordLocator)<6" + searchAgent + searchTransID;
                //strSQL = "SELECT DISTINCT SellKey FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID=BK_TRANSMAIN.TransID" +
                //" AND TransVoid=0 AND BookingDate < DATEADD(MINUTE, -15, GETDATE()) AND BookingDate > DATEADD(MINUTE, -30, GETDATE()) AND LEN(RecordLocator)<6" + searchAgent;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        SignatureKey.Add(drRow["SellKey"]);
                    }
                }
            }
            catch (Exception ex)
            {
                //throw new ApplicationException("Data not found");
            }
        }

        //added by diana 20131107 - set void=1 for expired transdetail
        public bool SetTransDetailStatus(string SellKey, int voidValue, string recordLocator = "")
        {
            try
            {
                string strSQL = "";
                ArrayList lstSQL = new ArrayList();
                bool rValue = false;
                string updateRecordLocator = "";

                if (recordLocator != "") updateRecordLocator = ", RecordLocator='" + recordLocator + "'";
                strSQL = "UPDATE BK_TRANSDTL SET TransVoid='" + voidValue + "'" + updateRecordLocator + " WHERE SellKey='" + SellKey + "';";
                log.Info(this, "SetTransDetailStatus BK_TRANSDTL: " + strSQL);
                lstSQL.Add(strSQL);

                if (recordLocator != "")
                {
                    strSQL = "UPDATE BK_TRANSMAIN SET TransStatus=1 WHERE TransID = (SELECT DISTINCT TransID FROM BK_TRANSDTL WHERE RecordLocator='" + recordLocator + "') AND TransStatus=0;";
                    log.Info(this, "SetTransDetailStatus BK_TRANSMAIN: " + strSQL);
                    lstSQL.Add(strSQL);
                }

                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return false;
                }

                return true;
            }
            catch (Exception ex)
            {
                log.Error(ex, "Function: SetTransDetailStatus fail");
                return false;
                //throw new ApplicationException("Data not found");
            }
            finally
            {
                //lstSQL = null;
            }
        }

        //added by ketee, 20170416
        /// <summary>
        /// update Transaction header status = 1
        /// </summary>
        /// <param name="TransID"></param>
        /// <param name="recordLocator"></param>
        /// <returns></returns>
        public bool SetTransHeaderStatus(string TransID, string recordLocator = "")
        {
            try
            {
                string strSQL = "";
                ArrayList lstSQL = new ArrayList();
                bool rValue = false;

                if (recordLocator != "")
                {
                    strSQL = "UPDATE BK_TRANSMAIN SET TransStatus=1 WHERE TransID = (SELECT DISTINCT TransID FROM BK_TRANSDTL WHERE RecordLocator='" + recordLocator + "') AND TransStatus=0;";
                    lstSQL.Add(strSQL);
                }

                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return false;
                }

                return true;
            }
            catch (Exception ex)
            {
                log.Error(ex, "Function: SetTransHeaderStatus fail");
                return false;
                //throw new ApplicationException("Data not found");
            }
            finally
            {
                //lstSQL = null;
            }
        }

        #endregion

        #region "CancelTransaction"

        public Boolean CancelExpiredTransaction()
        {
            //CancelOldTransDetails();
            //CancelExpiryTransaction();
            //CancelExpiryPassengerUploadTransaction();
            //return true;
            try
            {
                List<BookingTransactionDetail> BookingTransactionDetail = null;

                //to add old trans, expired trans, expired pass upload
                Hashtable OutDatedTransactionID = new Hashtable();
                GetAllOldTransaction(ref OutDatedTransactionID);
                GetAllPendingPaymentTransaction(ref OutDatedTransactionID);
                GetAllPendingPassengerUploadTransaction(ref OutDatedTransactionID);

                if (OutDatedTransactionID != null)
                {
                    ABS.Navitaire.APIBooking absNavitaire = new ABS.Navitaire.APIBooking("");
                    foreach (string keyValue in OutDatedTransactionID.Keys)
                    {
                        BookingTransactionDetail = new List<BookingTransactionDetail>();
                        BookingTransactionDetail = GetAllRecordLocatorDetails(keyValue);
                        if (BookingTransactionDetail != null)
                        {
                            foreach (BookingTransactionDetail transDetail in BookingTransactionDetail)
                            {
                                string Signature = "";
                                string errMsg = "";

                                //will be uncommented later
                                ////for old transaction
                                //if (OutDatedTransactionID[keyValue].ToString() == "0")
                                //{
                                //    Signature = transDetail.Signature;
                                //    absNavitaire.ClearJourney(Signature, ref errMsg);
                                //    if (errMsg != null && !string.IsNullOrEmpty(errMsg))
                                //    {
                                //        return false;
                                //    }
                                //}//for expired payment date or passenger upload
                                //else
                                //{
                                //    if (transDetail.RecordLocator.Trim().Length >= 6)
                                //    {
                                //        Signature = absNavitaire.AgentLogon();
                                //        //absNavitaire.CancelJourney(transDetail.RecordLocator, -transDetail.CollectedAmount, transDetail.Currency, Signature, ErrMessage)
                                //        absNavitaire.CancelJourney(transDetail.RecordLocator, 0, transDetail.Currency, Signature, ref errMsg);
                                //    }
                                //}

                            }

                            if (UpdateTransactionFinalStatus(keyValue, int.Parse(OutDatedTransactionID[keyValue].ToString()) + 5) == false)
                            {
                                return false;
                            }
                        }

                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
                //throw new ApplicationException("Data not found");
            }
        }

        //START HERE

        protected void CancelOldTransDetails()
        {
            ABS.Navitaire.APIBooking absNavitaire = new ABS.Navitaire.APIBooking("");
            List<BookingTransactionDetail> BookingTransactionDetail;

            List<BookingTransactionMain> LstBookingTransMain;
            LstBookingTransMain = GetBK_TRANSMAIN10(0, Convert.ToInt32("7754544"), "BookingDate < DATEADD(MINUTE, -5, GETDATE())");

            if (LstBookingTransMain != null)
            {
                foreach (BookingTransactionMain transmain in LstBookingTransMain)
                {
                    BookingTransactionDetail = GetAllBK_TRANSDTLTOCANCEL("7754544", transmain.TransID);
                    if (BookingTransactionDetail != null)
                    {
                        foreach (BookingTransactionDetail transdtl in BookingTransactionDetail)
                        {
                            string Signature = "";
                            string errMsg = "";
                            Signature = transdtl.Signature;
                            absNavitaire.ClearJourney(Signature, ref errMsg);
                            if (errMsg != null && errMsg != "")
                            {
                                return;
                            }

                        }

                    }
                    if (UpdateCancelTransactionStatus(transmain.TransID, "5") == false)
                    {
                        return;
                    }
                }


            }
        }

        protected void CancelExpiryTransaction()
        {
            List<BookingTransactionDetail> BookingTransactionDetail;
            List<BookingTransactionMain> LstBookingTransMain;
            List<string> TransIDs = GetAllExpiryTrans_Dtl_NextDueDate("7754544");
            string TransFound = "";
            string TransDeleted = "";
            string ProcessTransID = "";
            int TransDeletedCount = 0;
            if (TransIDs != null)
            {
                try
                {
                    log.Info(this, "Expiry Transaction Found : " + TransIDs.Count + " records");
                    foreach (string TransID in TransIDs)
                    {
                        ProcessTransID = TransID;
                        BookingTransactionDetail = Get_TRANSDTL("7754544", TransID);
                        if (BookingTransactionDetail != null)
                        {
                            foreach (BookingTransactionDetail transdtl in BookingTransactionDetail)
                            {
                                if (transdtl.RecordLocator.Trim().Length < 6)
                                {
                                    TransFound += ": " + transdtl.RecordLocator;
                                }
                                else
                                {
                                    if (CancelProcess(BookingTransactionDetail, "7754544"))
                                    {
                                        if (TransFound != "")
                                        {
                                            TransFound += ", " + TransID;
                                        }
                                        else
                                        {
                                            TransFound += TransID;
                                        }
                                        //foreach (BookingTransactionDetail transdtl in BookingTransactionDetail)
                                        //{
                                        //string Signature = "";
                                        //string errMsg = "";
                                        //Signature = transdtl.Signature;
                                        //absNavitaire.ClearJourney(Signature, ref errMsg);
                                        //if (errMsg != null && errMsg != "")
                                        //{
                                        //    return;
                                        //}
                                        foreach (BookingTransactionDetail transdtl2 in BookingTransactionDetail)
                                        {
                                            TransFound += ": " + transdtl2.RecordLocator;
                                        }
                                        //}
                                        if (UpdateCancelTransactionStatus(TransID, "6") == false)
                                        {
                                            log.Warning(this, "Update Expiry Transaction Failed.");
                                            return;
                                        }
                                        else
                                        {
                                            if (TransDeleted != "")
                                            {
                                                TransDeleted += ", " + TransID;
                                            }
                                            else
                                            {
                                                TransDeleted += TransID;
                                            }
                                            TransDeletedCount++;
                                        }
                                    }
                                    else
                                    {
                                        log.Warning(this, "Cancel Transaction " + TransID + " Failed.");
                                        return;
                                    }
                                }
                            }
                        }


                    }
                    log.Info(this, "Expiry Transaction Found: " + TransFound);
                    log.Info(this, "Expiry Transaction Deleted (" + TransDeletedCount + "): " + TransDeleted);
                }
                catch (Exception ex)
                {
                    log.Error(this, ex, " TransID:" + ProcessTransID);
                }

            }
        }

        protected void CancelExpiryPassengerUploadTransaction()
        {
            List<ABS.Logic.GroupBooking.Booking.BookingTransactionDetail> BookingTransactionDetail;
            List<ABS.Logic.GroupBooking.Booking.BookingTransactionMain> LstBookingTransMain;
            List<string> TransIDs = GetAllExpiryUploadPassengersTrans("7754544");

            string TransFound = "";
            string TransDeleted = "";
            string ProcessTransID = "";
            int TransDeletedCount = 0;
            if (TransIDs != null)
            {
                try
                {
                    log.Info(this, "Expiry Transaction Found : " + TransIDs.Count + " records");
                    foreach (string TransID in TransIDs)
                    {
                        ProcessTransID = TransID;
                        BookingTransactionDetail = Get_TRANSDTL("7754544", TransID);
                        if (BookingTransactionDetail != null)
                        {
                            foreach (ABS.Logic.GroupBooking.Booking.BookingTransactionDetail transdtl in BookingTransactionDetail)
                            {
                                if (transdtl.RecordLocator.Trim().Length < 6)
                                {
                                    TransFound += ": " + transdtl.RecordLocator;
                                }
                                else
                                {
                                    if (CancelProcess(BookingTransactionDetail, "7754544"))
                                    {
                                        if (TransFound != "")
                                        {
                                            TransFound += ", " + TransID;
                                        }
                                        else
                                        {
                                            TransFound += TransID;
                                        }
                                        //foreach (ABS.Logic.GroupBooking.Booking.BookingTransactionDetail transdtl in BookingTransactionDetail)
                                        //{
                                        //string Signature = "";
                                        //string errMsg = "";
                                        //Signature = transdtl.Signature;
                                        //absNavitaire.ClearJourney(Signature, ref errMsg);
                                        //if (errMsg != null && errMsg != "")
                                        //{
                                        //    return;
                                        //}
                                        foreach (BookingTransactionDetail transdtl2 in BookingTransactionDetail)
                                        {
                                            TransFound += ": " + transdtl2.RecordLocator;
                                        }
                                        //}
                                        if (UpdateCancelTransactionStatus(TransID, "7") == false)
                                        {
                                            log.Warning(this, "Update Expiry Passenger Upload Transaction Failed.");
                                            return;
                                        }
                                        else
                                        {
                                            if (TransDeleted != "")
                                            {
                                                TransDeleted += ", " + TransID;
                                            }
                                            else
                                            {
                                                TransDeleted += TransID;
                                            }
                                            TransDeletedCount++;
                                        }
                                    }
                                    else
                                    {
                                        log.Warning(this, "Cancel Transaction " + TransID + " Failed.");
                                        return;
                                    }
                                }
                            }
                        }


                    }
                    log.Info(this, "Expiry Transaction Found: " + TransFound);
                    log.Info(this, "Expiry Transaction Deleted (" + TransDeletedCount + "): " + TransDeleted);
                }
                catch (Exception ex)
                {
                    log.Error(this, ex, " TransID:" + ProcessTransID);
                }

            }
        }

        public Boolean UpdateCancelTransactionStatus(string TransID, string Status)
        {
            try
            {
                List<BookingTransactionDetail> lstDetailCombinePNR = new List<BookingTransactionDetail>();
                List<BookingTransactionDetail> lstbookDTLInfo = new List<BookingTransactionDetail>();
                BookingTransactionDetail bookDTLInfo = new BookingTransactionDetail();
                BookingTransactionMain bookHDRInfo = new BookingTransactionMain();
                BookingTransTender bookTransTenderInfo = new BookingTransTender();
                List<PassengerData> lstPassenger = new List<PassengerData>();
                List<PaymentInfo> lstPayment = new List<PaymentInfo>();
                string strSQL = "";
                ArrayList lstSQL = new ArrayList();
                Boolean rValue;

                bookHDRInfo = GetSingleBK_TRANSMAIN(TransID);
                //lstDetailCombinePNR = GetAllBK_TRANSDTLCombinePNR(TransID);
                //lstbookDTLInfo = GetAllBK_TRANSDTLFilter(TransID, 2);

                if (bookHDRInfo != null)
                {
                    //amended by diana 20130821
                    string cancelStr = "";
                    if (Convert.ToInt16(Status) == 5 || Convert.ToInt16(Status) == 6 || Convert.ToInt16(Status) == 7)
                        cancelStr = ",TransRemark1='AUTO CANCEL PROCESS',CANCELDATE=GETDATE()";
                    strSQL = "UPDATE BK_Transmain SET TransStatus=" + Convert.ToInt16(Status) + cancelStr + " WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'";

                    lstSQL.Add(strSQL);
                    rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                    if (rValue == false)
                    {
                        return false;
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {

            }
        }

        //END HERE

        public bool UpdateTransactionFinalStatus(string TransID, int Status, string Remark = "AUTO CANCEL PROCESS")
        {
            try
            {
                string strSQL = "";
                ArrayList lstSQL = new ArrayList();
                bool rValue = false;

                strSQL = "UPDATE BK_TRANSMAIN SET TransStatus=" + Status + ",TransRemark1='" + Remark + "',CANCELDATE=GETDATE() WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "';" + "UPDATE BK_TRANSDTL SET TransVoid=1 WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "';";
                lstSQL.Add(strSQL);
                //log.Info(this,strSQL);
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return false;
                }

                return true;
            }
            catch (Exception ex)
            {

                return false;
                //throw new ApplicationException("Data not found");
            }
            finally
            {
            }
            return true;
        }

        public void GetAllOldTransaction(ref Hashtable OutDatedTransactionID)
        {
            DataTable dt = null;
            string strSQL = string.Empty;
            string strCondition = string.Empty;

            try
            {
                //commented by diana 20131021
                strSQL = "SELECT TransID,TransStatus,ExpiryDate FROM BK_TRANSMAIN WHERE TransStatus=0 AND BookingDate < DATEADD(MINUTE, -20, GETDATE())";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        if (!OutDatedTransactionID.ContainsKey(Convert.ToString(drRow["TransID"])))
                        {
                            if (drRow["TransStatus"].ToString() == "0" && (DateTime.Parse(drRow["BookingDate"].ToString()) < DateTime.Now.AddMinutes(-5)))
                            {
                                OutDatedTransactionID.Add(Convert.ToString(drRow["TransID"]), drRow["TransStatus"]);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                //throw new ApplicationException("Data not found");
            }
        }

        public void GetAllPendingPaymentTransaction(ref Hashtable OutDatedTransactionID)
        {
            DataTable dt = null;
            string strSQL = string.Empty;
            string strCondition = string.Empty;

            try
            {
                //commented by diana 20131021
                //strSQL = "SELECT BK_TRANSMAIN.TransID, BK_TRANSDTL.NextDueDate FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID = BK_TRANSMAIN.TransID AND BK_TRANSMAIN.expirydate < GETDATE() and BK_TRANSMAIN.STDDate > GETDATE() and BK_TRANSMAIN.TransStatus = 1 " & " GROUP BY BK_TRANSMAIN.TransID, BK_TRANSDTL.NextDueDate"
                strSQL = "SELECT TransID,TransStatus,ExpiryDate FROM BK_TRANSMAIN WHERE TransStatus = 1 AND CONVERT (date,BK_TRANSMAIN.ExpiryDate) < CONVERT (date,GETDATE())";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        if (!OutDatedTransactionID.ContainsKey(Convert.ToString(drRow["TransID"])))
                        {
                            if (drRow["TransStatus"].ToString() == "1" && (DateTime.Parse(drRow["ExpiryDate"].ToString()).Date < DateTime.Now.Date))
                            {
                                OutDatedTransactionID.Add(Convert.ToString(drRow["TransID"]), drRow["TransStatus"]);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                //throw new ApplicationException("Data not found");
            }
        }

        public void GetAllPendingPassengerUploadTransaction(ref Hashtable OutDatedTransactionID)
        {
            DataTable dt = null;
            string strSQL = string.Empty;
            string strCondition = string.Empty;

            try
            {
                //commented by diana 20131021
                //strSQL = "SELECT BK_TRANSMAIN.TransID, BK_TRANSDTL.NextDueDate, BK_TRANSMAIN.STDDate ,BK_TRANSMAIN.SchemeCode, DateAdd(dd, -7, BK_TRANSMAIN.STDDate) as duedate, GETDATE() as today " & " FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID = BK_TRANSMAIN.TransID AND GETDATE() > DateAdd(dd, -7, BK_TRANSMAIN.STDDate) and BK_TRANSMAIN.TransStatus = 2 AND BK_TRANSMAIN.SchemeCode not in ('W1W', 'SVCF')"
                strSQL = "SELECT TransID,TransStatus,ExpiryDate FROM BK_TRANSMAIN WHERE TransStatus = 2 AND CONVERT (date,BK_TRANSMAIN.ExpiryDate) < CONVERT (date,GETDATE())";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        if (!OutDatedTransactionID.ContainsKey(Convert.ToString(drRow["TransID"])))
                        {
                            if (drRow["TransStatus"].ToString() == "2" && (DateTime.Parse(drRow["ExpiryDate"].ToString()).Date < DateTime.Now.Date))
                            {
                                OutDatedTransactionID.Add(Convert.ToString(drRow["TransID"]), drRow["TransStatus"]);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                //throw new ApplicationException("Data not found");
            }
        }

        public List<BookingTransactionDetail> GetAllRecordLocatorDetails(string TransID)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info = default(BookingTransactionDetail);
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();

            DataTable dt = null;
            string strSQL = string.Empty;

            try
            {
                //commented by diana 20131021
                //strSQL = "SELECT BK_TRANSDTL.* FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID = BK_TRANSMAIN.TransID AND BK_TRANSMAIN.TransID='" & TransID & "' and BK_TRANSMAIN.SyncCreate < DATEADD(MINUTE, -1, GETDATE()) and BK_TRANSMAIN.SyncCreate > DATEADD(MINUTE, -30, GETDATE()) and BK_TRANSMAIN.TransStatus = 0 "
                strSQL = "SELECT Distinct RecordLocator, TransID, Currency, TransVoid, DetailCollectedAmt, SellKey FROM BK_TRANSDTL WHERE BK_TRANSDTL.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.RecordLocator = Convert.ToString(drRow["RecordLocator"]);
                        objBK_TRANSDTL_Info.TransID = Convert.ToString(drRow["TransID"]);
                        objBK_TRANSDTL_Info.Currency = Convert.ToString(drRow["Currency"]);
                        objBK_TRANSDTL_Info.TransVoid = Convert.ToByte(drRow["TransVoid"]);
                        objBK_TRANSDTL_Info.CollectedAmount = Convert.ToDecimal(drRow["DetailCollectedAmt"]);
                        objBK_TRANSDTL_Info.Signature = Convert.ToString(drRow["SellKey"]);
                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        //added by ketee, 2016-02-08
        public bool CancelUpToDateExpiryTransaction(string PassKey)
        {
            Navitaire.APIBooking ApiBook = new Navitaire.APIBooking("");
            List<ABS.Logic.GroupBooking.Booking.BookingTransactionDetail> BookingTransactionDetail;
            List<ABS.Logic.GroupBooking.Booking.BookingTransactionDetail> BookingTransactionDetailToCancel;
            List<ABS.Logic.GroupBooking.Booking.BookingTransactionDetail> CHKBookingTransactionDetailExisted;

            //List<string> TransIDs = GetAllExpiryTrans_Dtl_NextDueDate(AgentSet.AgentID);
            List<ABS.Logic.GroupBooking.Booking.BookingTransactionMain> AllTransaction = new List<ABS.Logic.GroupBooking.Booking.BookingTransactionMain>();

            string TransFound = "";
            string TransDeleted = "";
            string ProcessTransID = "";
            int TransDeletedCount = 0;
            int PNRCounter = 0;

            bool exitFor = false;
            try
            {
                AllTransaction = GetAllBK_TRANSMAINTransactionExpiry("", "", "", "1,2", true, 0);
                if (AllTransaction == null)
                {
                    log.Info(this, "Up to Date Expiry Transaction Not Found : records at " + DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss"));
                    return true;
                }

                //AllTransaction = GetAllBK_TRANSMAINBookingExpiry("", "", "", "1,2", false, 2);
                log.Info(this, "Up to Date Expiry Transaction Found : " + AllTransaction.Count + " records at " + DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss"));
                foreach (ABS.Logic.GroupBooking.Booking.BookingTransactionMain Trans in AllTransaction)
                {
                    ProcessTransID = Trans.TransID;
                    BookingTransactionDetail = Get_DISTINCTTRANSDTL(Trans.AgentID, Trans.TransID);
                    if (BookingTransactionDetail != null)
                    {
                        //Check all PNRs status before cancellation
                        string PNRsToBeCancel = "";
                        BookingTransactionDetailToCancel = new List<Booking.BookingTransactionDetail>();
                        CHKBookingTransactionDetailExisted = new List<Booking.BookingTransactionDetail>();
                        PNRCounter = 0;
                        log.Info(this, "Cancellation, Started : " + Trans.TransID + " ; Payment Expiry at: " + Trans.ExpiryDate.ToString("yyyy-MM-dd hh:mm:ss"));
                        foreach (ABS.Logic.GroupBooking.Booking.BookingTransactionDetail transdtl in BookingTransactionDetail)
                        {
                            if (transdtl.RecordLocator.Trim().Length < 6)
                            {
                                log.Info(this, "Cancellation, TransID : " + Trans.TransID + " ; Invalid PNR: " + transdtl.RecordLocator.Trim());
                            }
                            else
                            {
                                //log.Info(this, "Cancellation, TransID : " + Trans.TransID + " ; Checking and get PNR Status from Navitaire: " + transdtl.RecordLocator.Trim());
                                ABS.Navitaire.BookingManager.GetBookingResponse resp = ApiBook.GetBookingResponseByPNR(transdtl.RecordLocator.Trim());

                                //to validate if the booking have any divided PNR, 20170427
                                if (resp.Booking.ParentRecordLocator.Trim() != "")
                                {
                                    CHKBookingTransactionDetailExisted = GetBookingTransactionDetailByPNR(resp.Booking.ParentRecordLocator.Trim());
                                    if (CHKBookingTransactionDetailExisted.Count <= 0)
                                    {
                                        log.Info(this, "Cancellation There is not Booking added to TransID : " + Trans.TransID + " ; Invalid PNR: " + resp.Booking.ParentRecordLocator.Trim());
                                        continue;
                                    }
                                }
                                else if (resp.Booking.BookingComments.Length > 0)
                                {
                                    //Sample comments: PNR divided to SM56RQ
                                    foreach (BookingComment a in resp.Booking.BookingComments)
                                    {
                                        if (a.CommentText.Trim().ToLower().Contains("divide"))
                                        {
                                            string dividedPNR = "";
                                            dividedPNR = a.CommentText.Trim().Substring(a.CommentText.Trim().Length - 6, 6);
                                            if (dividedPNR != "")
                                            {
                                                CHKBookingTransactionDetailExisted = GetBookingTransactionDetailByPNR(dividedPNR);
                                                if (CHKBookingTransactionDetailExisted.Count <= 0)
                                                {
                                                    log.Info(this, "Cancellation There is not Booking added to TransID : " + Trans.TransID + " ; Invalid PNR: " + dividedPNR);
                                                    exitFor = true;
                                                }
                                            }
                                        }
                                    }
                                    if (exitFor)
                                        continue;
                                }

                                if (resp.Booking.BookingInfo.BookingStatus.ToString().ToLower().Trim() == "confirmed" && resp.Booking.BookingInfo.PaidStatus.ToString().ToLower().Trim() == "underpaid")
                                {

                                    log.Info(this, "Cancellation, TransID : " + Trans.TransID + " ; PNR Status (" + resp.Booking.BookingInfo.BookingStatus.ToString() + ") (" + resp.Booking.BookingInfo.PaidStatus.ToString() + ") -" + transdtl.RecordLocator.Trim() + " - Navitaire Modified Date at: " + resp.Booking.BookingInfo.ModifiedDate.ToString("yyyy-MM-dd hh:mm:ss"));
                                    if (PNRsToBeCancel == "")
                                    {
                                        PNRsToBeCancel = transdtl.RecordLocator.Trim();
                                    }
                                    else
                                    {
                                        PNRsToBeCancel += "," + transdtl.RecordLocator.Trim();
                                    }
                                    BookingTransactionDetailToCancel.Add(transdtl);
                                    PNRCounter++;
                                }
                                else
                                {
                                    //if the passenger upload date expired, normall 7 days b4 STD, if passkey == aaxx, then only cancel those passenger upload expiry booking, 20170427
                                    if (resp.Booking.BookingInfo.BookingStatus.ToString().ToLower().Trim() == "confirmed" && Trans.TransStatus == 2 && PassKey.Contains("aaxx"))
                                    {
                                        log.Info(this, "Cancellation, TransID : " + Trans.TransID + " ; TransStatus: " + Trans.TransStatus + " ; PNR Status (" + resp.Booking.BookingInfo.BookingStatus.ToString() + ") (" + resp.Booking.BookingInfo.PaidStatus.ToString() + ") -" + transdtl.RecordLocator.Trim() + " - Navitaire Modified Date at: " + resp.Booking.BookingInfo.ModifiedDate.ToString("yyyy-MM-dd hh:mm:ss"));
                                        if (PNRsToBeCancel == "")
                                        {
                                            PNRsToBeCancel = transdtl.RecordLocator.Trim();
                                        }
                                        else
                                        {
                                            PNRsToBeCancel += "," + transdtl.RecordLocator.Trim();
                                        }
                                        BookingTransactionDetailToCancel.Add(transdtl);
                                        PNRCounter++;
                                    }
                                    else
                                    {
                                        log.Info(this, "Cancellation, TransID : " + Trans.TransID + " ; Pending for cancellation, PNR: " + transdtl.RecordLocator.Trim() + " - Status: " + resp.Booking.BookingInfo.BookingStatus.ToString() + " (" + resp.Booking.BookingInfo.PaidStatus.ToString() + ") Navitaire Modified at: " + resp.Booking.BookingInfo.ModifiedDate.ToString("yyyy-MM-dd hh:mm:ss"));
                                    }

                                }
                            }

                        }
                        if (PNRCounter == BookingTransactionDetailToCancel.Count && PNRCounter > 0)
                        {
                            log.Info(this, "Cancellation, Confirm cancellation PNRs [" + PNRsToBeCancel + "] Processing at " + DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss"));
                            if (PassKey.Contains("aax"))
                            {
                                //log.Info(this, "Cancellation, Confirm cancellation PNRs [" + PNRsToBeCancel + "] Done at " + DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss"));
                                if (CancelProcess(BookingTransactionDetailToCancel, Trans.AgentID))
                                {
                                    if (PNRCounter == BookingTransactionDetail.Count)
                                    {
                                        if (UpdateTransactionStatus(Trans.TransID, "6") == false)
                                        {
                                            log.Info(this, "Update Expiry Transaction Failed.");
                                        }
                                    }
                                    else
                                    {
                                        log.Info(this, "Partial Cancellation, Done Partial cancellation PNRs [" + PNRsToBeCancel + "] at " + DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss"));
                                    }

                                    log.Info(this, "Cancellation, Done cancellation PNRs [" + PNRsToBeCancel + "] at " + DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss"));
                                }
                                else
                                {
                                    log.Warning(this, "Cancellation fail, TransID:" + Trans.TransID + " at " + DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss"));
                                }
                            }
                        }
                        else
                        {
                            log.Info(this, "Cancellation, Pending verification, PNRs count not match, PNRs [" + PNRsToBeCancel + "]");
                        }

                        log.Info(this, "Cancellation, Ended   : " + Trans.TransID + " ; at: " + DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss"));

                    }
                    else
                    {
                        log.Info(this, "Cancellation, TransID : " + Trans.TransID + " ; Booking details not found");
                    }

                }
                //log.Info(this, "Expiry Transaction Found: " + TransFound);
                //log.Info(this, "Expiry Transaction Deleted (" + TransDeletedCount + "): " + TransDeleted);
                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex, " CancelUpdateToDateExpiryTransaction:" + ProcessTransID);
                throw new Exception("CancelUpdateToDateExpiryTransaction: ", ex);
                //return false;
            }
            finally
            {
                ApiBook = null;
                BookingTransactionDetail = null;
                AllTransaction = null;
            }

        }


        #endregion

        #region "Check Session"
        public Boolean CheckInvalidPNRByTransID(string TransID = "", bool reload = false)
        {
            try
            {
                ArrayList SignatureKey = new ArrayList();
                SignatureKey = GetTransactionSessionID(TransID);

                string reloadPage = "";
                if (reload) { reloadPage = "reload - "; }

                log.Info(this, reloadPage + "check invalid PNR:" + TransID);

                if (SignatureKey.Count > 0)
                {
                    for (int i = 0; i < SignatureKey.Count; i++)
                    {
                        string errMsg = "";
                        string recordLocator = "";
                        bool foundJourney = false;

                        ABS.Navitaire.APIBooking absNavitaire = new ABS.Navitaire.APIBooking("");
                        Navitaire.BookingManager.Booking booking = absNavitaire.GetBookingFromState(SignatureKey[i].ToString());
                        //string str = GetXMLString(booking);
                        if (booking != null)
                        {
                            if (booking.Journeys.Length > 0 && booking.RecordLocator != "")
                            {
                                foundJourney = true;
                                recordLocator = booking.RecordLocator;
                            }
                        }

                        if (foundJourney == true)
                        {
                            SetTransDetailStatus(SignatureKey[i].ToString(), 0, recordLocator);
                        }
                        else if (reload == false)
                        {
                            absNavitaire.ClearJourney(SignatureKey[i].ToString(), ref errMsg);
                            if (errMsg != null && !string.IsNullOrEmpty(errMsg))
                            {
                                return false;
                            }
                            else
                            {
                                SetTransDetailStatus(SignatureKey[i].ToString(), 1);
                            }
                        }


                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
                //throw new ApplicationException("Data not found");
            }
        }

        public string CheckInvalidPNRBySignature(string Signature = "")
        {
            try
            {
                log.Info(this, "check invalid PNR by signature:" + Signature);

                string errMsg = "";
                string recordLocator = "";
                bool foundJourney = false;

                ABS.Navitaire.APIBooking absNavitaire = new ABS.Navitaire.APIBooking("");
                Navitaire.BookingManager.Booking booking = absNavitaire.GetBookingFromState(Signature);
                //string str = GetXMLString(booking);
                if (booking != null)
                {
                    if (booking.Journeys.Length > 0 && booking.RecordLocator != "")
                    {
                        foundJourney = true;
                        recordLocator = booking.RecordLocator;
                    }
                }

                if (foundJourney == true)
                {
                    SetTransDetailStatus(Signature, 0, recordLocator);
                }
                return recordLocator;
            }
            catch (Exception ex)
            {
                return "";
                //throw new ApplicationException("Data not found");
            }
        }

        private ArrayList GetTransactionSessionID(string TransID = "")
        {
            try
            {
                DataTable dt;
                ArrayList SignatureKey = new ArrayList();
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();
                }
                strSQL = "SELECT DISTINCT SellKey FROM BK_TRANSDTL " +
                    " WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND LEN(RecordLocator)<6 AND TransVoid=0";
                log.Info(this, strSQL);
                //strSQL = "SELECT DISTINCT SellKey FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID=BK_TRANSMAIN.TransID" +
                //" AND TransVoid=0 AND BookingDate < DATEADD(MINUTE, -15, GETDATE()) AND BookingDate > DATEADD(MINUTE, -30, GETDATE()) AND LEN(RecordLocator)<6" + searchAgent;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {

                    //to log columns
                    string colName = "";
                    foreach (DataColumn col in dt.Columns)
                    {
                        colName += col.ColumnName + ";";
                    }
                    log.Info(this, colName);
                    //to log columns

                    foreach (DataRow drRow in dt.Rows)
                    {
                        SignatureKey.Add(drRow["SellKey"]);
                    }
                }
                return SignatureKey;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return null;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        #endregion

        #region "UpdateFlightDetails"

        public Boolean UpdateFlightAndPayment()
        {
            try
            {
                //to add trans with status of 1 and 2
                List<ListTransaction> AllTransaction = new List<ListTransaction>();
                GetPendingTransaction(ref AllTransaction);
                //GetPendingPassengerUploadTransaction(ref AllTransaction);

                if (AllTransaction != null)
                {
                    log.Info(this, AllTransaction.Count.ToString());
                    foreach (ListTransaction eachTransaction in AllTransaction)
                    {
                        UpdateBookingJourney(eachTransaction.TransID, eachTransaction.AgentUserName, eachTransaction.AgentID, true);
                        UpdatePaymentTransaction(eachTransaction.TransID, eachTransaction.AgentUserName, eachTransaction.AgentID, true);
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
                //throw new ApplicationException("Data not found");
            }
        }

        public Boolean UpdatePaymentTransaction(string TransID, string AgentName, string AgentID, Boolean VerifyDetails = false)
        {
            bool journeyExist = true;
            try
            {
                string PNR;
                Decimal totalPaid = 0;
                int totalPax = 0;
                decimal totalTransAmountAll = 0;
                decimal totalTransAmount = 0;
                decimal totalAmountGoing = 0;
                decimal totalAmountReturn = 0;
                decimal totalTransSubTotal = 0;
                decimal totalTransTotalFee = 0;
                decimal totalTransTotalTax = 0;
                decimal totalTransTotalPaxFee = 0;
                decimal totalTransTotalOth = 0;
                decimal totalTransTotalProcess = 0;
                decimal totalTransTotalSSR = 0;
                decimal totalTransTotalSeat = 0;
                decimal totalTransTotalNameChange = 0;
                decimal totalTransTotalInfant = 0;
                decimal totalTransTotalDisc = 0;
                decimal totalTransTotalPromoDisc = 0;
                decimal AverageFare = 0;

                List<PaymentContainer> listPaymentContainers = new List<PaymentContainer>();
                List<BookingTransTender> listBookTransTenderInfo = new List<BookingTransTender>();
                BookingTransactionDetail bookDTLInfo = new BookingTransactionDetail();
                BookingTransactionMain bookHDRInfo = new BookingTransactionMain();
                BookingTransTender bookTransTenderInfo = new BookingTransTender();
                List<PassengerData> lstPassenger = new List<PassengerData>();

                //begin load data
                BookingTransactionMain listBookingMain = new BookingTransactionMain();
                List<BookingTransactionDetail> listBookingDetailDistinct = new List<BookingTransactionDetail>();
                List<BookingTransactionDetail> listBookingDetail = new List<BookingTransactionDetail>();

                listBookingMain = GetBookingTransactionMain(TransID);
                listBookingDetailDistinct = GetBookingTransactionDetail(TransID);
                listBookingDetail = GetAllTransDetails(TransID, 0);

                //DataTable dtTransMain = DataTableTransMain(lstbookHDRInfo);
                //DataTable dtTransDetail = DataTableTransDetail(listDetailCombinePNR);
                //end load data

                if (listBookingMain != null && listBookingDetailDistinct != null)
                {


                    List<BookingTransTender> listTransTender = new List<BookingTransTender>();
                    listTransTender = GetAllBK_TRANSTENDERFilter(TransID);

                    List<BookingTransactionDetail> lstbookDTLInfo = new List<BookingTransactionDetail>();
                    lstbookDTLInfo = new List<BookingTransactionDetail>();

                    //update transmain
                    DataTable dtKeyFieldMain = GetKeyFieldMainByTransID(TransID);

                    //for (int i = 0; i < dtTransDetail.Rows.Count; i++) 
                    foreach (BookingTransactionDetail listTransDetail in listBookingDetailDistinct)
                    {
                        PNR = listTransDetail.RecordLocator.ToString();
                        log.Info(this, "Entering GetPaymentDetailsByPNR - PNR : " + PNR);
                        if (GetPaymentDetailsByPNR(PNR, TransID))
                        {
                            log.Info(this, "End of GetPaymentDetailsByPNR - succeed - PNR : " + PNR);
                            //load all available record in 1 transaction id
                            if (VerifyDetails)
                            {
                                totalPax += Convert.ToInt16(listTransDetail.PaxAdult.ToString()) + Convert.ToInt16(listTransDetail.PaxChild.ToString());
                                totalTransAmount += Convert.ToDecimal(listTransDetail.LineTotal.ToString());
                                totalTransTotalFee += Convert.ToDecimal(listTransDetail.LineFee.ToString());
                                totalTransTotalOth += Convert.ToDecimal(listTransDetail.LineOth.ToString());
                                totalTransTotalProcess += Convert.ToDecimal(listTransDetail.LineProcess.ToString());
                                totalTransTotalSSR += Convert.ToDecimal(listTransDetail.LineSSR.ToString());
                                totalTransTotalSeat += Convert.ToDecimal(listTransDetail.LineSeat.ToString());
                                totalTransTotalNameChange += Convert.ToDecimal(listTransDetail.LineNameChange.ToString());
                                totalTransTotalInfant += Convert.ToDecimal(listTransDetail.LineInfant.ToString());
                                totalTransTotalDisc += Convert.ToDecimal(listTransDetail.LineDisc.ToString());
                                totalTransTotalPromoDisc += Convert.ToDecimal(listTransDetail.LinePromoDisc.ToString());
                                totalTransTotalTax += Convert.ToDecimal(listTransDetail.LineTax.ToString());
                                totalTransTotalPaxFee += Convert.ToDecimal(listTransDetail.LinePaxFee.ToString());
                                totalTransSubTotal += Convert.ToDecimal(listTransDetail.LineTotal.ToString());
                            }
                            totalTransAmountAll += Convert.ToDecimal(listTransDetail.LineTotal.ToString());
                            if (HttpContext.Current.Session["PaymentContainers"] != null)
                            {
                                listPaymentContainers = (List<PaymentContainer>)HttpContext.Current.Session["PaymentContainers"];
                                DataTable dtKeyField = new DataTable();
                                dtKeyField = GetKeyFieldDetailByPNR(PNR);
                                decimal paymentAmount = 0, feeAmount = 0, totPaymentAmount = 0, leftPayDetail = 0, totalPNRAmount = 0, currencyRate = 0;

                                foreach (PaymentContainer rowPayment in listPaymentContainers)
                                {
                                    int paymentStatus = 0;
                                    string authorizationCode = "";
                                    string accountNumber = "";
                                    string merchantID = "";
                                    long accountNumberID = 0;
                                    byte transVoid = 1;
                                    paymentAmount = rowPayment.CollectedAmount;
                                    paymentStatus = rowPayment.PaymentStatus;
                                    authorizationCode = rowPayment.AuthorizationCode;
                                    accountNumber = rowPayment.AccountNumber;
                                    merchantID = rowPayment.MerchantID;
                                    accountNumberID = rowPayment.AccountNumberID;
                                    currencyRate = rowPayment.CurrencyRate;

                                    //totalPaid += paymentAmount;
                                    if (rowPayment.PaymentStatus == 3)
                                    {
                                        transVoid = 0;
                                        totalPaid += paymentAmount;
                                        totalPNRAmount += paymentAmount;
                                    }

                                    int iIndex = listTransTender.FindIndex(p => p.SeqNo == Convert.ToInt32(rowPayment.PaymentNumber) && p.RecordLocator == rowPayment.RecordLocator);
                                    if (iIndex >= 0)
                                    {
                                        BookingTransTender bookingTender = listTransTender[iIndex];
                                        AssignPaymentList(TransID, Convert.ToByte(bookingTender.SeqNo), paymentAmount, feeAmount, totPaymentAmount, rowPayment.CurrencyCode, rowPayment.CurrencyCode, bookingTender.TenderID, rowPayment.PaymentText, rowPayment.AccountNumber, rowPayment.AuthorizationCode, rowPayment.MerchantID, bookingTender.CreateBy, PNR, transVoid, "update", rowPayment.PaymentDate, ref listBookTransTenderInfo, currencyRate);
                                    }
                                    else
                                    {
                                        AssignPaymentList(TransID, Convert.ToByte(rowPayment.PaymentNumber), paymentAmount, feeAmount, totPaymentAmount, rowPayment.CurrencyCode, rowPayment.CurrencyCode, getTenderIDbyDesc(rowPayment.PaymentMethodCode), rowPayment.PaymentText, rowPayment.AccountNumber, rowPayment.AuthorizationCode, rowPayment.MerchantID, AgentName, PNR, transVoid, "insert", rowPayment.PaymentDate, ref listBookTransTenderInfo, currencyRate);
                                    }
                                }

                                int goingreturn = 0;
                                string strOrigin = "";
                                for (int ctrDetail = 0; ctrDetail < dtKeyField.Rows.Count; ctrDetail++)
                                {
                                    string RecordLocator = dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString();
                                    //TransID = dtKeyField.Rows[ctrDetail]["TransID"].ToString();
                                    byte SeqNo = Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]);

                                    bookDTLInfo = new BookingTransactionDetail();
                                    bookDTLInfo = GetSingleBK_TRANSDTL(RecordLocator, TransID, SeqNo);

                                    if (totalPNRAmount > bookDTLInfo.LineTotal)
                                    {
                                        leftPayDetail = totalPNRAmount - bookDTLInfo.LineTotal;
                                        totalPNRAmount = bookDTLInfo.LineTotal;
                                        AssignTransDetail(ref lstbookDTLInfo, dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString(), dtKeyField.Rows[ctrDetail]["TransID"].ToString(), Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]), AgentName, totalPNRAmount, PNR);
                                        //totalPaid += paymentAmount;
                                        totalPNRAmount = leftPayDetail;
                                    }
                                    else
                                    {
                                        AssignTransDetail(ref lstbookDTLInfo, dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString(), dtKeyField.Rows[ctrDetail]["TransID"].ToString(), Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]), AgentName, totalPNRAmount, PNR);
                                        //totalPaid += paymentAmount;
                                        totalPNRAmount = 0;
                                    }

                                    //total up total going and total return
                                    //start added by Agus
                                    if (strOrigin == "") strOrigin = bookDTLInfo.Origin;
                                    if (bookDTLInfo.Origin == strOrigin) goingreturn = 0;
                                    else goingreturn = 1;
                                    //end added by Agus
                                    if (VerifyDetails)
                                    {
                                        if (goingreturn == 0)
                                        {
                                            totalAmountGoing += bookDTLInfo.LineTotal;
                                        }
                                        else
                                        {
                                            totalAmountReturn += bookDTLInfo.LineTotal;
                                        }
                                    }

                                }
                            }
                            else
                            {
                                return false;
                            }
                        }
                        else
                        {
                            log.Info(this, "End of GetPaymentDetailsByPNR - no journey - PNR : " + PNR);
                            journeyExist = false;
                            totalTransAmountAll += Convert.ToDecimal(listTransDetail.LineTotal.ToString());
                            if (VerifyDetails)
                            {
                                DataTable dtKeyField = new DataTable();
                                dtKeyField = GetKeyFieldDetailBySignature(listTransDetail.SellKey.ToString());
                                //decimal paymentAmount = 0, leftPayDetail = 0, totalPNRAmount = 0;
                                for (int ctrDetail = 0; ctrDetail < dtKeyField.Rows.Count; ctrDetail++)
                                {
                                    string RecordLocator = dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString();
                                    //TransID = dtKeyField.Rows[ctrDetail]["TransID"].ToString();
                                    byte SeqNo = Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]);

                                    bookDTLInfo = new BookingTransactionDetail();
                                    bookDTLInfo = GetSingleBK_TRANSDTL(RecordLocator, TransID, SeqNo);

                                    //cancel PNR
                                    CancelTransactionByPNR(TransID, RecordLocator, AgentID);
                                    AssignTransDetail(ref lstbookDTLInfo, dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString(), dtKeyField.Rows[ctrDetail]["TransID"].ToString(), Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]), AgentName, bookDTLInfo.CollectedAmount, PNR, 1);

                                    totalPaid += bookDTLInfo.CollectedAmount;
                                    //totalPaid += paymentAmount;
                                    //totalPNRAmount = 0;


                                }
                            }
                        }
                    }

                    //decimal TotalTrans = Convert.ToDecimal(dtTransMain.Rows[0]["TotalTrans"]);
                    byte TransStatus = 1;
                    if (totalTransAmount > 0 && totalPaid >= totalTransAmount)
                    {
                        TransStatus = 2;
                    }
                    else
                    {
                        if (totalTransAmount == 0 && totalTransAmountAll > 0 && totalPaid >= totalTransAmountAll)
                        {
                            TransStatus = 2;
                        }
                    }

                    //if (totalPaid == TotalTrans)
                    //{
                    //    TransStatus = 2;
                    //}
                    if (dtKeyFieldMain.Rows.Count > 0)
                    {
                        AssignTransMain(ref bookHDRInfo, TransID, dtKeyFieldMain.Rows[0]["AgentID"].ToString(), dtKeyFieldMain.Rows[0]["AgentCatgID"].ToString(), Convert.ToByte(dtKeyFieldMain.Rows[0]["TransType"]), Convert.ToDateTime(dtKeyFieldMain.Rows[0]["BookingDate"]), TransStatus, AgentName, 2, totalPaid, "", "", totalPax, totalTransAmount, totalTransTotalFee, totalTransTotalTax, totalTransTotalPaxFee, totalTransTotalOth, totalTransTotalSSR, totalTransTotalSeat, totalTransTotalNameChange, totalTransTotalInfant, totalTransTotalDisc, totalTransTotalPromoDisc, totalTransTotalProcess, totalTransSubTotal, totalAmountGoing, totalAmountReturn);
                    }

                    if (lstbookDTLInfo.Count > 0 && bookHDRInfo != null && bookTransTenderInfo != null)
                    {
                        if (AutoUpdateHeaderDetailTrans(journeyExist, bookHDRInfo, lstbookDTLInfo, listBookTransTenderInfo, ABS.Logic.GroupBooking.Booking.BookingControl.EnumSaveType.Update) == false)
                        {
                            return false; // transaction failed
                        }
                        else
                        {
                            return true;
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        public Boolean UpdateBookingJourney(string TransID, string AgentName, string AgentID, Boolean VerifyDetails = false)
        {
            try
            {
                string PNR;
                string currencyCode = "";
                decimal exchangeRate = 1;
                DateTime stdDate = DateTime.Now;
                bool change = false;

                DateTime timeNow = DateTime.Now.AddYears(10);
                DateTime paymentExtensionDate = timeNow;

                List<BookingJourneyContainer> listBookingJourneyContainers = new List<BookingJourneyContainer>();
                List<BookingTransactionDetail> listBookingJourney = new List<BookingTransactionDetail>();
                BookingTransactionDetail lstBooking = new BookingTransactionDetail();

                BookingTransactionDetail bookDTLInfo = new BookingTransactionDetail();
                BookingTransactionMain bookHDRInfo = new BookingTransactionMain();

                //begin load data
                BookingTransactionMain listBookingMain = new BookingTransactionMain();
                List<BookingTransactionDetail> listBookingDetailDistinct = new List<BookingTransactionDetail>();
                List<BookingTransactionDetail> listBookingDetail = new List<BookingTransactionDetail>();

                listBookingMain = GetBookingTransactionMain(TransID);
                listBookingDetailDistinct = GetBookingTransactionDetail(TransID);
                listBookingDetail = GetAllTransDetails(TransID, 0);

                //DataTable dtTransMain = DataTableTransMain(lstbookHDRInfo);
                //DataTable dtTransDetail = DataTableTransDetail(listDetailCombinePNR);
                //end load data

                if (listBookingMain != null && listBookingDetailDistinct != null)
                {

                    //update transmain
                    DataTable dtKeyFieldMain = GetKeyFieldMainByTransID(TransID);

                    foreach (BookingTransactionDetail listTransDetail in listBookingDetailDistinct)
                    {
                        PNR = listTransDetail.RecordLocator.ToString();
                        log.Info(this, "Entering GetBookingJourneyDetailsByPNR - PNR : " + PNR);
                        if (GetBookingJourneyDetailsByPNR(PNR, TransID))
                        {
                            log.Info(this, "End Retrieve GetBookingJourneyDetailsByPNR - succeed - PNR : " + PNR);
                            if (HttpContext.Current.Session["BookingJourneyContainers"] != null)
                            {
                                listBookingJourneyContainers = (List<BookingJourneyContainer>)HttpContext.Current.Session["BookingJourneyContainers"];
                                DataTable dtKeyField = new DataTable();
                                dtKeyField = GetKeyFieldDetailByPNR(PNR);
                                decimal paymentAmount = 0, leftPayDetail = 0, totalPNRAmount = 0, currencyRate = 0;
                                int rowBookingJourneySeqNo = 1;
                                foreach (BookingJourneyContainer rowBookingJourney in listBookingJourneyContainers)
                                {
                                    paymentExtensionDate = rowBookingJourney.HoldDateTime;
                                    currencyCode = rowBookingJourney.CurrencyCode;
                                    exchangeRate = rowBookingJourney.ExchangeRate;
                                    if (rowBookingJourneySeqNo == 1) { stdDate = rowBookingJourney.STD; change = true; }
                                    int iIndex = listBookingDetail.FindIndex(p => p.SeqNo == rowBookingJourneySeqNo && p.RecordLocator == rowBookingJourney.RecordLocator);
                                    if (iIndex >= 0)
                                    {
                                        BookingTransactionDetail bookingJourney = listBookingDetail[iIndex];
                                        AssignBookingJourneyList(TransID, Convert.ToByte(bookingJourney.SeqNo), rowBookingJourney, PNR, "update", ref listBookingJourney);
                                    }
                                    else
                                    {
                                        AssignBookingJourneyList(TransID, Convert.ToByte(rowBookingJourneySeqNo), rowBookingJourney, PNR, "insert", ref listBookingJourney);
                                    }
                                    rowBookingJourneySeqNo++;
                                }
                            }
                            else
                            {
                                return false;
                            }
                        }
                        else
                        {
                            log.Info(this, "End Retrieve GetBookingJourneyDetailsByPNR - no journey - PNR : " + PNR);
                        }
                    }
                    //if (dtKeyFieldMain.Rows.Count > 0)
                    if (dtKeyFieldMain.Rows.Count > 0 && listBookingDetailDistinct.Count > 0)
                    {
                        bookHDRInfo = GetBookingTransactionMain(TransID, Convert.ToByte(dtKeyFieldMain.Rows[0]["TransType"]), dtKeyFieldMain.Rows[0]["AgentID"].ToString(), dtKeyFieldMain.Rows[0]["AgentCatgID"].ToString(), Convert.ToDateTime(dtKeyFieldMain.Rows[0]["BookingDate"]));
                        bookHDRInfo.Currency = currencyCode;
                        bookHDRInfo.CurrencyPaid = currencyCode;
                        bookHDRInfo.ExchangeRate = exchangeRate;

                        if (change == true) bookHDRInfo.STDDate = stdDate;

                        string GroupName = "AA";
                        //GeneralControl objGeneral = new GeneralControl();
                        //string GroupName = objGeneral.getOPTGroupByCarrierCode(lstBookingTransDetail[0].CarrierCode);

                        PaymentControl objPayment = new PaymentControl();
                        string Scheme = objPayment.GetScheme(bookHDRInfo.STDDate, bookHDRInfo.BookingDate, GroupName, TransID);
                        objSQL.AddField("SchemeCode", Scheme, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                        PaymentInfo paymentInfo = new PaymentInfo();
                        paymentInfo = objPayment.GetPaymentScheme(Scheme, "AA", TransID);

                        if (paymentInfo.Code_1 == "DOB")
                        {
                            bookHDRInfo.PaymentDateEx1 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_1);
                            bookHDRInfo.ExpiryDate = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_1);
                        }
                        else if (paymentInfo.Code_1 == "STD")
                        {
                            bookHDRInfo.PaymentDateEx1 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_1);
                            bookHDRInfo.ExpiryDate = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_1);
                        }
                        if (paymentInfo.Code_2 == "DOB")
                        {
                            bookHDRInfo.PaymentDateEx2 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_2);
                        }
                        else if (paymentInfo.Code_2 == "STD")
                        {
                            bookHDRInfo.PaymentDateEx2 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_2);
                        }
                        if (paymentInfo.Code_3 == "DOB")
                        {
                            bookHDRInfo.PaymentDateEx3 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_3);
                        }
                        else if (paymentInfo.Code_3 == "STD")
                        {
                            bookHDRInfo.PaymentDateEx3 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_3);
                        }
                        //added by diana 20131112 - to check hold date time
                        if (bookHDRInfo.PaymentDateEx1 != null)
                        {
                            if (bookHDRInfo.PaymentDateEx1 < paymentExtensionDate && paymentExtensionDate < timeNow) bookHDRInfo.PaymentDateEx1 = paymentExtensionDate;
                        }
                        if (bookHDRInfo.PaymentDateEx2 != null)
                        {
                            if (bookHDRInfo.PaymentDateEx2 < paymentExtensionDate && paymentExtensionDate < timeNow) bookHDRInfo.PaymentDateEx2 = paymentExtensionDate;
                        }
                        if (bookHDRInfo.PaymentDateEx3 != null)
                        {
                            if (bookHDRInfo.PaymentDateEx3 < paymentExtensionDate && paymentExtensionDate < timeNow) bookHDRInfo.PaymentDateEx3 = paymentExtensionDate;
                        }
                        if (bookHDRInfo.ExpiryDate < paymentExtensionDate && paymentExtensionDate < timeNow)
                        {
                            bookHDRInfo.ExpiryDate = paymentExtensionDate;
                        }
                        //end added by diana 20131112 - to check hold date time
                        bookHDRInfo.CurReminderDate = bookHDRInfo.ExpiryDate.Date.AddDays(-5);
                    }
                    if (listBookingDetail != null)
                    {
                        if (UpdateFlightDetails(bookHDRInfo, listBookingJourney, ABS.Logic.GroupBooking.Booking.BookingControl.EnumSaveType.Update) == false)
                        {
                            return false; // transaction failed
                        }
                        else
                        {
                            return true;
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        public Boolean AutoUpdateHeaderDetailTrans(bool journeyExist, BookingTransactionMain BookingTransMain, List<BookingTransactionDetail> lstBookingTransDetail, List<BookingTransTender> lstBookingTransTender, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;

            DateTime nextDueDate = DateTime.Now;
            Decimal nextDueAmount = 0;
            try
            {
                if (BookingTransMain != null && lstBookingTransDetail != null)
                {
                    //from here
                    decimal totalCollectedAmount = 0;
                    decimal totalLineTotal = 0;
                    decimal totalLineFee = 0;

                    //added by diana 20140121 - for GroupName purpose
                    string PNR = "";
                    string GroupName = "";
                    int cnt = 0;

                    foreach (BookingTransactionDetail pBookingTransDetail in lstBookingTransDetail)
                    {
                        totalCollectedAmount += pBookingTransDetail.CollectedAmount;
                        totalLineTotal += pBookingTransDetail.LineTotal;
                        totalLineFee += pBookingTransDetail.LineFee;

                        //added by diana 20140121 - get GroupName
                        if (cnt == 0)
                        {
                            GeneralControl objGeneral = new GeneralControl();
                            PNR = pBookingTransDetail.RecordLocator;
                            GroupName = objGeneral.getOPTGroupByCarrierCode(pBookingTransDetail.CarrierCode);
                        }
                        cnt += 1;
                    }
                    nextDueDate = BookingTransMain.BookingDate;
                    DateTime ExpiryDate = BookingTransMain.ExpiryDate;
                    nextDueAmount = GetNextAmount_Date_Due(BookingTransMain.TransID, PNR, GroupName, BookingTransMain.PayScheme, 1, totalCollectedAmount, totalLineTotal - totalCollectedAmount, totalLineFee, totalLineTotal, BookingTransMain.STDDate, BookingTransMain.BookingDate, ref ExpiryDate);


                    if (BookingTransMain.TransStatus == 1 && BookingTransMain.PayScheme == "W1W")
                    {
                        nextDueDate = BookingTransMain.STDDate.AddDays(-1);
                        BookingTransMain.ExpiryDate = ExpiryDate;
                        if (BookingTransMain.ExpiryDate.Date.AddDays(-5) > DateTime.Now.Date)
                            BookingTransMain.CurReminderDate = BookingTransMain.ExpiryDate.Date.AddDays(-5);
                        else if (BookingTransMain.ExpiryDate.Date.AddDays(-1) > DateTime.Now.Date)
                            BookingTransMain.CurReminderDate = BookingTransMain.ExpiryDate.Date.AddDays(-1);
                        else
                            BookingTransMain.CurReminderDate = BookingTransMain.ExpiryDate.Date;
                    }
                    else
                    {
                        nextDueDate = ExpiryDate;
                        BookingTransMain.ExpiryDate = ExpiryDate;
                        BookingTransMain.CurReminderDate = BookingTransMain.ExpiryDate.Date.AddDays(-5);
                    }



                    //to here
                }

                if (BookingTransMain != null)
                {
                    //added by diana 20131030 - check whether booking is expired or not
                    if (journeyExist == false && (BookingTransMain.TransStatus == 1 || BookingTransMain.TransStatus == 2))
                    {
                        BookingTransMain.TransStatus += 5;
                        BookingTransMain.TransRemark1 = "AUTO CANCEL PROCESS";
                        BookingTransMain.CancelDate = DateTime.Now;
                        objSQL.AddField("TransStatus", BookingTransMain.TransStatus, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    }
                    //end added by diana 20131030
                    objSQL.AddField("TransID", BookingTransMain.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransType", BookingTransMain.TransType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("AgentID", BookingTransMain.AgentID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("AgentCatgID", BookingTransMain.AgentCatgID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("BookingDate", BookingTransMain.BookingDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDateEx1", BookingTransMain.PaymentDateEx1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentAmtEx1", BookingTransMain.PaymentAmtEx1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDateEx2", BookingTransMain.PaymentDateEx2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentAmtEx2", BookingTransMain.PaymentAmtEx2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDateEx3", BookingTransMain.PaymentDateEx3, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentAmtEx3", BookingTransMain.PaymentAmtEx3, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDate", BookingTransMain.PaymentDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CancelDate", BookingTransMain.CancelDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    //if (BookingTransMain.TransStatus <= 2)
                    objSQL.AddField("ExpiryDate", BookingTransMain.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("STDDate", BookingTransMain.STDDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Currency", BookingTransMain.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CurrencyPaid", BookingTransMain.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CollectedAmt", BookingTransMain.CollectedAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TotalAmtAVG", BookingTransMain.TotalAmtAVG, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TotalAmtGoing", BookingTransMain.TotalAmtGoing, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TotalAmtReturn", BookingTransMain.TotalAmtReturn, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransSubTotal", BookingTransMain.TransSubTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalAmt", BookingTransMain.TransTotalAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalFee", BookingTransMain.TransTotalFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalTax", BookingTransMain.TransTotalTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalPaxFee", BookingTransMain.TransTotalPaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalOth", BookingTransMain.TransTotalOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalSSR", BookingTransMain.TransTotalSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalDisc", BookingTransMain.TransTotalDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalPromoDisc", BookingTransMain.TransTotalPromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalPAX", BookingTransMain.TransTotalPAX, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalSeat", BookingTransMain.TransTotalSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalNameChange", BookingTransMain.TransTotalNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalProcess", BookingTransMain.TransTotalProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalInfant", BookingTransMain.TransTotalInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransRemark1", BookingTransMain.TransRemark1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                    objSQL.AddField("TransRemark2", BookingTransMain.TransRemark2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                    objSQL.AddField("Posted", BookingTransMain.Posted, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CreateBy", BookingTransMain.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncCreate", BookingTransMain.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncLastUpd", BookingTransMain.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LastSyncBy", BookingTransMain.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    if (BookingTransMain.TransStatus <= 2)
                        objSQL.AddField("CurReminderDate", BookingTransMain.CurReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("NextReminderDate", BookingTransMain.NextReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ReminderType", BookingTransMain.ReminderType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PromoCode", BookingTransMain.PromoCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                    //objSQL.AddField("Currency", BookingTransMain.Currency, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    //objSQL.AddField("CurrencyPaid", BookingTransMain.Currency, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    //objSQL.AddField("ExchangeRate", BookingTransMain.ExchangeRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                    switch (saveType)
                    {
                        case EnumSaveType.Insert:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSMAIN", string.Empty);
                            break;
                        case EnumSaveType.Update:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSMAIN", "BK_TRANSMAIN.TransID='" + BookingTransMain.TransID + "'");
                            break;
                    }
                    lstSQL.Add(strSQL);
                }

                if (lstBookingTransDetail != null)
                {
                    foreach (BookingTransactionDetail pBookingTransDetail in lstBookingTransDetail)
                    {
                        //added by diana 20131029 - update transvoid to 1 if booking status is cancel
                        pBookingTransDetail.TransVoid = 0;
                        if (BookingTransMain != null)
                        {
                            if (BookingTransMain.TransStatus >= 4) pBookingTransDetail.TransVoid = 1;
                        }
                        //end added by diana 20131029
                        objSQL.AddField("RecordLocator", pBookingTransDetail.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransID", pBookingTransDetail.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SeqNo", pBookingTransDetail.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CarrierCode", pBookingTransDetail.CarrierCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightNo", pBookingTransDetail.FlightNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DepartureDate", pBookingTransDetail.DepatureDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DepartureDate2", pBookingTransDetail.DepatureDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightDura", pBookingTransDetail.FlightDura, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightDura2", pBookingTransDetail.FlightDura2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Origin", pBookingTransDetail.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Transit", pBookingTransDetail.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Destination", pBookingTransDetail.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ArrivalDate", pBookingTransDetail.ArrivalDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ArrivalDate2", pBookingTransDetail.ArrivalDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FareClass", pBookingTransDetail.FareClass, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FarePerPax", pBookingTransDetail.FarePerPax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineTotal", pBookingTransDetail.LineTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineTax", pBookingTransDetail.LineTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LinePaxFee", pBookingTransDetail.LinePaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineFee", pBookingTransDetail.LineFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineOth", pBookingTransDetail.LineOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineProcess", pBookingTransDetail.LineProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineSSR", pBookingTransDetail.LineSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineSeat", pBookingTransDetail.LineSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineNameChange", pBookingTransDetail.LineNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineInsureFee", pBookingTransDetail.LineInsureFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);//added by romy for insure
                        objSQL.AddField("LineInfant", pBookingTransDetail.LineInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineDisc", pBookingTransDetail.LineDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LinePromoDisc", pBookingTransDetail.LinePromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("AttemptCount", pBookingTransDetail.AttemptCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Currency", pBookingTransDetail.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaxAdult", pBookingTransDetail.PaxAdult, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaxChild", pBookingTransDetail.PaxChild, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransVoid", pBookingTransDetail.TransVoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CreateBy", pBookingTransDetail.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncCreate", pBookingTransDetail.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncLastUpd", pBookingTransDetail.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LastSyncBy", pBookingTransDetail.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DetailCollectedAmt", pBookingTransDetail.CollectedAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                        objSQL.AddField("NextDueDate", nextDueDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("NextDueAmount", nextDueAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                        objSQL.AddField("SellKey", pBookingTransDetail.Signature, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                        switch (saveType)
                        {
                            case EnumSaveType.Insert:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSDTL", string.Empty);
                                break;
                            /*
                            case EnumSaveType.Update:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.RecordLocator='" + pBookingTransDetail.RecordLocator + "' AND BK_TRANSDTL.TransID='" + pBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBookingTransDetail.SeqNo + "'");
                                break;*/
                            case EnumSaveType.Update:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.TransID='" + pBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBookingTransDetail.SeqNo + "'");
                                break;
                        }
                        lstSQL.Add(strSQL);
                    }
                }

                if (lstBookingTransTender != null)
                {
                    foreach (BookingTransTender BookingTransTender in lstBookingTransTender)
                    {
                        objSQL.AddField("TransID", BookingTransTender.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SeqNo", BookingTransTender.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransDate", BookingTransTender.TransDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Currency", BookingTransTender.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CurrencyPaid", BookingTransTender.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TenderID", BookingTransTender.TenderID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeType", BookingTransTender.FeeType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TenderAmt", BookingTransTender.TenderAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TenderDue", BookingTransTender.TenderDue, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeAmt", BookingTransTender.FeeAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PayAmt", BookingTransTender.PayAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Transvoid", BookingTransTender.Transvoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncCreate", BookingTransTender.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("RefNo", BookingTransTender.RefNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("AuthorizationCode", BookingTransTender.AuthorizationCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("MerchantID", BookingTransTender.MerchantID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CreateBy", BookingTransTender.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        //added by ketee, 20121028
                        objSQL.AddField("RecordLocator", BookingTransTender.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        if (BookingTransTender.CommandType == "insert")
                        {
                            objSQL.AddField("ExchgRate", BookingTransTender.ExchgRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        }

                        if (BookingTransTender.CommandType == "insert")
                        {
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSTENDER", string.Empty);
                        }
                        else
                        {
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSTENDER", "TransID='" + BookingTransTender.TransID + "' AND SeqNo=" + BookingTransTender.SeqNo + " AND RecordLocator='" + BookingTransTender.RecordLocator + "'");
                        }

                        lstSQL.Add(strSQL);
                    }
                }
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                log.Info(this, "Finish Update Details for Payment " + BookingTransMain.TransID + " with value of " + rValue);
                if (rValue == false)
                {
                    return false;
                }
                //return GetSingleBK_TRANSMAIN(BookingTransMain.TransID, BookingTransMain.TransType, BookingTransMain.AgentID, BookingTransMain.AgentCatgID, BookingTransMain.BookingDate);
                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        public void GetPendingTransaction(ref List<ListTransaction> AllTransaction)
        {
            DataTable dt = null;
            string strSQL = string.Empty;

            try
            {
                //commented by diana 20131021
                //strSQL = "SELECT BK_TRANSMAIN.TransID, BK_TRANSDTL.NextDueDate FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID = BK_TRANSMAIN.TransID AND BK_TRANSMAIN.expirydate < GETDATE() and BK_TRANSMAIN.STDDate > GETDATE() and BK_TRANSMAIN.TransStatus = 1 " & " GROUP BY BK_TRANSMAIN.TransID, BK_TRANSDTL.NextDueDate"
                strSQL = "SELECT BK_TRANSMAIN.TransID,BK_TRANSMAIN.TransStatus,BK_TRANSMAIN.AgentID,AG_PROFILE.Username FROM BK_TRANSMAIN INNER JOIN AG_PROFILE ON BK_TRANSMAIN.AgentID=AG_PROFILE.AgentID AND BK_TRANSMAIN.TransStatus IN (1,2)";

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        ListTransaction TransactionDetail = new ListTransaction();
                        TransactionDetail.TransID = drRow["TransID"].ToString();
                        TransactionDetail.TransStatus = (byte)drRow["TransStatus"];
                        TransactionDetail.AgentID = drRow["AgentID"].ToString();
                        TransactionDetail.AgentUserName = drRow["Username"].ToString();
                        AllTransaction.Add(TransactionDetail);
                    }
                }
            }
            catch (Exception ex)
            {
                //throw new ApplicationException("Data not found");
            }
        }

        //public void GetPendingPassengerUploadTransaction(ref Hashtable TransactionID)
        //{
        //    List<string> TransIDs = new List<string>();
        //    DataTable dt = null;
        //    string strSQL = string.Empty;
        //    try
        //    {
        //        //commented by diana 20131021
        //        //strSQL = "SELECT BK_TRANSMAIN.TransID, BK_TRANSDTL.NextDueDate, BK_TRANSMAIN.STDDate ,BK_TRANSMAIN.SchemeCode, DateAdd(dd, -7, BK_TRANSMAIN.STDDate) as duedate, GETDATE() as today " & " FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID = BK_TRANSMAIN.TransID AND GETDATE() > DateAdd(dd, -7, BK_TRANSMAIN.STDDate) and BK_TRANSMAIN.TransStatus = 2 AND BK_TRANSMAIN.SchemeCode not in ('W1W', 'SVCF')"
        //        strSQL = "SELECT BK_TRANSMAIN.TransID,BK_TRANSMAIN.TransStatus FROM BK_TRANSMAIN WHERE BK_TRANSMAIN.TransStatus = 2";
        //        log.Info(this,strSQL);
        //        dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
        //        if (dt != null && dt.Rows.Count > 0)
        //        {
        //            foreach (DataRow drRow in dt.Rows)
        //            {
        //                if (!TransactionID.ContainsKey(Convert.ToString(drRow["TransID"])))
        //                {
        //                    TransactionID.Add(Convert.ToString(drRow["TransID"]), "2");
        //                }
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        //throw new ApplicationException("Data not found");
        //    }
        //}

        //change from GetSingleBK_TRANSMAIN
        public BookingTransactionMain GetBookingTransactionMain(string pTransID, byte pTransType, string pAgentID, string pAgentCatgID, DateTime pBookingDate)
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            BookingTransactionMain objBookingTransactionMain;
            DataTable dt;
            DateTime dateValue;
            decimal numValue;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("BK_TRANSMAIN.TransID");
                lstFields.Add("BK_TRANSMAIN.TransType");
                lstFields.Add("BK_TRANSMAIN.AgentID");
                lstFields.Add("BK_TRANSMAIN.AgentCatgID");
                lstFields.Add("BK_TRANSMAIN.BookingDate");
                lstFields.Add("BK_TRANSMAIN.PaymentDateEx1");
                lstFields.Add("BK_TRANSMAIN.PaymentAmtEx1");
                lstFields.Add("BK_TRANSMAIN.PaymentDateEx2");
                lstFields.Add("BK_TRANSMAIN.PaymentAmtEx2");
                lstFields.Add("BK_TRANSMAIN.PaymentDateEx3");
                lstFields.Add("BK_TRANSMAIN.PaymentAmtEx3");
                lstFields.Add("BK_TRANSMAIN.PaymentDate");
                lstFields.Add("BK_TRANSMAIN.CancelDate");
                lstFields.Add("BK_TRANSMAIN.ExpiryDate");
                lstFields.Add("BK_TRANSMAIN.STDDate");
                lstFields.Add("BK_TRANSMAIN.Currency");
                lstFields.Add("BK_TRANSMAIN.CurrencyPaid");
                lstFields.Add("BK_TRANSMAIN.CollectedAmt");
                lstFields.Add("BK_TRANSMAIN.TotalAmtAVG");
                lstFields.Add("BK_TRANSMAIN.TotalAmtGoing");
                lstFields.Add("BK_TRANSMAIN.TotalAmtReturn");
                lstFields.Add("BK_TRANSMAIN.TransSubTotal");
                lstFields.Add("BK_TRANSMAIN.TransTotalAmt");
                lstFields.Add("BK_TRANSMAIN.TransTotalFee");
                lstFields.Add("BK_TRANSMAIN.TransTotalTax");
                lstFields.Add("BK_TRANSMAIN.TransTotalPaxFee");
                lstFields.Add("BK_TRANSMAIN.TransTotalOth");
                lstFields.Add("BK_TRANSMAIN.TransTotalSSR");
                lstFields.Add("BK_TRANSMAIN.TransTotalDisc");
                lstFields.Add("BK_TRANSMAIN.TransTotalPromoDisc");
                lstFields.Add("BK_TRANSMAIN.TransTotalPAX");
                lstFields.Add("BK_TRANSMAIN.TransTotalSeat");
                lstFields.Add("BK_TRANSMAIN.TransTotalNameChange");
                lstFields.Add("BK_TRANSMAIN.TransTotalProcess");
                lstFields.Add("BK_TRANSMAIN.TransTotalInfant");
                lstFields.Add("BK_TRANSMAIN.TransRemark1");
                lstFields.Add("BK_TRANSMAIN.TransRemark2");
                lstFields.Add("BK_TRANSMAIN.TransStatus");
                lstFields.Add("BK_TRANSMAIN.Posted");
                lstFields.Add("BK_TRANSMAIN.rowguid");
                lstFields.Add("BK_TRANSMAIN.CreateBy");
                lstFields.Add("BK_TRANSMAIN.SyncCreate");
                lstFields.Add("BK_TRANSMAIN.SyncLastUpd");
                lstFields.Add("BK_TRANSMAIN.LastSyncBy");
                lstFields.Add("BK_TRANSMAIN.CurReminderDate");
                lstFields.Add("BK_TRANSMAIN.NextReminderDate");
                lstFields.Add("BK_TRANSMAIN.ReminderType");
                lstFields.Add("BK_TRANSMAIN.SchemeCode");
                lstFields.Add("BK_TRANSMAIN.PromoCode");

                strFields = GetSqlFields(lstFields);
                strFilter = "WHERE BK_TRANSMAIN.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pTransID) + "' AND BK_TRANSMAIN.BookingDate='" + pBookingDate + "' AND BK_TRANSMAIN.TransType ='" + pTransType + "' AND BK_TRANSMAIN.AgentID ='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pAgentID) + "' AND BK_TRANSMAIN.AgentCatgID ='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pAgentCatgID) + "'";
                strSQL = "SELECT " + strFields + " FROM BK_TRANSMAIN " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];

                    objBookingTransactionMain = new BookingTransactionMain();
                    objBookingTransactionMain.TransID = (string)drRow["TransID"];
                    objBookingTransactionMain.TransType = (byte)drRow["TransType"];
                    objBookingTransactionMain.AgentID = (string)drRow["AgentID"];
                    objBookingTransactionMain.AgentCatgID = (string)drRow["AgentCatgID"];
                    objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];
                    if (DateTime.TryParse(drRow["PaymentDateEx1"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx1 = (DateTime)drRow["PaymentDateEx1"];
                    if (decimal.TryParse(drRow["PaymentAmtEx1"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx1 = (decimal)drRow["PaymentAmtEx1"];
                    if (DateTime.TryParse(drRow["PaymentDateEx2"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx2 = (DateTime)drRow["PaymentDateEx2"];
                    if (decimal.TryParse(drRow["PaymentAmtEx2"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx2 = (decimal)drRow["PaymentAmtEx2"];
                    if (DateTime.TryParse(drRow["PaymentDateEx3"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx3 = (DateTime)drRow["PaymentDateEx3"];
                    if (decimal.TryParse(drRow["PaymentAmtEx3"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx3 = (decimal)drRow["PaymentAmtEx3"];
                    if (DateTime.TryParse(drRow["PaymentDate"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDate = (DateTime)drRow["PaymentDate"];
                    if (DateTime.TryParse(drRow["CancelDate"].ToString(), out dateValue)) objBookingTransactionMain.CancelDate = (DateTime)drRow["CancelDate"];
                    if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                    if (DateTime.TryParse(drRow["STDDate"].ToString(), out dateValue)) objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];
                    objBookingTransactionMain.Currency = (string)drRow["Currency"];
                    objBookingTransactionMain.CurrencyPaid = (string)drRow["CurrencyPaid"];
                    objBookingTransactionMain.CollectedAmt = (decimal)drRow["CollectedAmt"];
                    objBookingTransactionMain.TotalAmtAVG = (decimal)drRow["TotalAmtAVG"];
                    objBookingTransactionMain.TotalAmtGoing = (decimal)drRow["TotalAmtGoing"];
                    objBookingTransactionMain.TotalAmtReturn = (decimal)drRow["TotalAmtReturn"];
                    objBookingTransactionMain.TransSubTotal = (decimal)drRow["TransSubTotal"];
                    objBookingTransactionMain.TransTotalAmt = (decimal)drRow["TransTotalAmt"];
                    objBookingTransactionMain.TransTotalFee = (decimal)drRow["TransTotalFee"];
                    objBookingTransactionMain.TransTotalTax = (decimal)drRow["TransTotalTax"];
                    objBookingTransactionMain.TransTotalPaxFee = (decimal)drRow["TransTotalPaxFee"];
                    objBookingTransactionMain.TransTotalOth = (decimal)drRow["TransTotalOth"];
                    objBookingTransactionMain.TransTotalSSR = (decimal)drRow["TransTotalSSR"];
                    objBookingTransactionMain.TransTotalDisc = (decimal)drRow["TransTotalDisc"];
                    objBookingTransactionMain.TransTotalPromoDisc = (decimal)drRow["TransTotalPromoDisc"];
                    objBookingTransactionMain.TransTotalPAX = (int)drRow["TransTotalPAX"];
                    objBookingTransactionMain.TransTotalSeat = (decimal)drRow["TransTotalSeat"];
                    objBookingTransactionMain.TransTotalNameChange = (decimal)drRow["TransTotalNameChange"];
                    objBookingTransactionMain.TransTotalProcess = (decimal)drRow["TransTotalProcess"];
                    objBookingTransactionMain.TransTotalInfant = (decimal)drRow["TransTotalInfant"];
                    objBookingTransactionMain.TransRemark1 = (string)drRow["TransRemark1"];
                    objBookingTransactionMain.TransRemark2 = (string)drRow["TransRemark2"];
                    objBookingTransactionMain.TransStatus = (byte)drRow["TransStatus"];
                    objBookingTransactionMain.Posted = (byte)drRow["Posted"];
                    objBookingTransactionMain.rowguid = (Guid)drRow["rowguid"];
                    objBookingTransactionMain.CreateBy = (string)drRow["CreateBy"];
                    if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTransactionMain.SyncCreate = (DateTime)drRow["SyncCreate"];
                    if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                    objBookingTransactionMain.LastSyncBy = (string)drRow["LastSyncBy"];
                    if (DateTime.TryParse(drRow["CurReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.CurReminderDate = (DateTime)drRow["CurReminderDate"];
                    if (DateTime.TryParse(drRow["NextReminderDate"].ToString(), out dateValue)) objBookingTransactionMain.NextReminderDate = (DateTime)drRow["NextReminderDate"];
                    objBookingTransactionMain.ReminderType = (byte)drRow["ReminderType"];
                    objBookingTransactionMain.PayScheme = (string)drRow["SchemeCode"];
                    objBookingTransactionMain.PromoCode = (string)drRow["PromoCode"];
                    return objBookingTransactionMain;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        //change from GetSingleBK_TRANSMAIN
        public BookingTransactionMain GetBookingTransactionMain(string pTransID)
        {
            objSQL.ClearFields();
            objSQL.ClearCondtions();
            BookingTransactionMain objBookingTransactionMain;
            DataTable dt;
            DateTime dateValue;
            decimal numValue;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("BK_TRANSMAIN.TransID");
                lstFields.Add("BK_TRANSMAIN.TransType");
                lstFields.Add("BK_TRANSMAIN.AgentID");
                lstFields.Add("BK_TRANSMAIN.AgentCatgID");
                lstFields.Add("BK_TRANSMAIN.BookingDate");
                lstFields.Add("BK_TRANSMAIN.PaymentDateEx1");
                lstFields.Add("BK_TRANSMAIN.PaymentAmtEx1");
                lstFields.Add("BK_TRANSMAIN.PaymentDateEx2");
                lstFields.Add("BK_TRANSMAIN.PaymentAmtEx2");
                lstFields.Add("BK_TRANSMAIN.PaymentDateEx3");
                lstFields.Add("BK_TRANSMAIN.PaymentAmtEx3");
                lstFields.Add("BK_TRANSMAIN.PaymentDate");
                lstFields.Add("BK_TRANSMAIN.CancelDate");
                lstFields.Add("BK_TRANSMAIN.ExpiryDate");
                lstFields.Add("BK_TRANSMAIN.STDDate");
                lstFields.Add("BK_TRANSMAIN.Currency");
                lstFields.Add("BK_TRANSMAIN.CurrencyPaid");
                lstFields.Add("BK_TRANSMAIN.CollectedAmt");
                lstFields.Add("BK_TRANSMAIN.TotalAmtAVG");
                lstFields.Add("BK_TRANSMAIN.TotalAmtGoing");
                lstFields.Add("BK_TRANSMAIN.TotalAmtReturn");
                lstFields.Add("BK_TRANSMAIN.TransSubTotal");
                lstFields.Add("BK_TRANSMAIN.TransTotalAmt");
                lstFields.Add("BK_TRANSMAIN.TransTotalFee");
                lstFields.Add("BK_TRANSMAIN.TransTotalTax");
                lstFields.Add("BK_TRANSMAIN.TransTotalPaxFee");
                lstFields.Add("BK_TRANSMAIN.TransTotalOth");
                lstFields.Add("BK_TRANSMAIN.TransTotalSSR");
                lstFields.Add("BK_TRANSMAIN.TransTotalDisc");
                lstFields.Add("BK_TRANSMAIN.TransTotalPromoDisc");
                lstFields.Add("BK_TRANSMAIN.TransTotalPAX");
                lstFields.Add("BK_TRANSMAIN.TransTotalSeat");
                lstFields.Add("BK_TRANSMAIN.TransTotalNameChange");
                lstFields.Add("BK_TRANSMAIN.TransTotalProcess");
                lstFields.Add("BK_TRANSMAIN.TransTotalInfant");
                lstFields.Add("BK_TRANSMAIN.TransRemark1");
                lstFields.Add("BK_TRANSMAIN.TransRemark2");
                lstFields.Add("BK_TRANSMAIN.TransStatus");
                lstFields.Add("BK_TRANSMAIN.Posted");
                lstFields.Add("BK_TRANSMAIN.rowguid");
                lstFields.Add("BK_TRANSMAIN.CreateBy");
                lstFields.Add("BK_TRANSMAIN.SyncCreate");
                lstFields.Add("BK_TRANSMAIN.SyncLastUpd");
                lstFields.Add("BK_TRANSMAIN.LastSyncBy");
                //added by ketee ,20121016
                lstFields.Add("BK_TRANSMAIN.SchemeCode");
                lstFields.Add("BK_TRANSMAIN.PromoCode");

                strFields = GetSqlFields(lstFields);
                strFilter = "Where BK_TRANSMAIN.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pTransID) + "'";
                strSQL = "SELECT " + strFields + " FROM BK_TRANSMAIN " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow drRow = dt.Rows[0];

                    objBookingTransactionMain = new BookingTransactionMain();
                    objBookingTransactionMain.TransID = (string)drRow["TransID"];
                    objBookingTransactionMain.TransType = (byte)drRow["TransType"];
                    objBookingTransactionMain.AgentID = (string)drRow["AgentID"];
                    objBookingTransactionMain.AgentCatgID = (string)drRow["AgentCatgID"];
                    objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];
                    if (DateTime.TryParse(drRow["PaymentDateEx1"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx1 = (DateTime)drRow["PaymentDateEx1"];
                    if (decimal.TryParse(drRow["PaymentAmtEx1"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx1 = (decimal)drRow["PaymentAmtEx1"];
                    if (DateTime.TryParse(drRow["PaymentDateEx2"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx2 = (DateTime)drRow["PaymentDateEx2"];
                    if (decimal.TryParse(drRow["PaymentAmtEx2"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx2 = (decimal)drRow["PaymentAmtEx2"];
                    if (DateTime.TryParse(drRow["PaymentDateEx3"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx3 = (DateTime)drRow["PaymentDateEx3"];
                    if (decimal.TryParse(drRow["PaymentAmtEx3"].ToString(), out numValue)) objBookingTransactionMain.PaymentAmtEx3 = (decimal)drRow["PaymentAmtEx3"];
                    if (DateTime.TryParse(drRow["PaymentDate"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDate = (DateTime)drRow["PaymentDate"];
                    if (DateTime.TryParse(drRow["CancelDate"].ToString(), out dateValue)) objBookingTransactionMain.CancelDate = (DateTime)drRow["CancelDate"];
                    if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                    if (DateTime.TryParse(drRow["STDDate"].ToString(), out dateValue)) objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];
                    objBookingTransactionMain.Currency = (string)drRow["Currency"];
                    objBookingTransactionMain.CurrencyPaid = (string)drRow["CurrencyPaid"];
                    objBookingTransactionMain.CollectedAmt = (decimal)drRow["CollectedAmt"];
                    objBookingTransactionMain.TotalAmtAVG = (decimal)drRow["TotalAmtAVG"];
                    objBookingTransactionMain.TotalAmtGoing = (decimal)drRow["TotalAmtGoing"];
                    objBookingTransactionMain.TotalAmtReturn = (decimal)drRow["TotalAmtReturn"];
                    objBookingTransactionMain.TransSubTotal = (decimal)drRow["TransSubTotal"];
                    objBookingTransactionMain.TransTotalAmt = (decimal)drRow["TransTotalAmt"];
                    objBookingTransactionMain.TransTotalFee = (decimal)drRow["TransTotalFee"];
                    objBookingTransactionMain.TransTotalTax = (decimal)drRow["TransTotalTax"];
                    objBookingTransactionMain.TransTotalPaxFee = (decimal)drRow["TransTotalPaxFee"];
                    objBookingTransactionMain.TransTotalOth = (decimal)drRow["TransTotalOth"];
                    objBookingTransactionMain.TransTotalSSR = (decimal)drRow["TransTotalSSR"];
                    objBookingTransactionMain.TransTotalDisc = (decimal)drRow["TransTotalDisc"];
                    objBookingTransactionMain.TransTotalPromoDisc = (decimal)drRow["TransTotalPromoDisc"];
                    objBookingTransactionMain.TransTotalPAX = (int)drRow["TransTotalPAX"];
                    objBookingTransactionMain.TransTotalSeat = (decimal)drRow["TransTotalSeat"];
                    objBookingTransactionMain.TransTotalNameChange = (decimal)drRow["TransTotalNameChange"];
                    objBookingTransactionMain.TransTotalProcess = (decimal)drRow["TransTotalProcess"];
                    objBookingTransactionMain.TransTotalInfant = (decimal)drRow["TransTotalInfant"];
                    objBookingTransactionMain.TransRemark1 = (string)drRow["TransRemark1"];
                    objBookingTransactionMain.TransRemark2 = (string)drRow["TransRemark2"];
                    objBookingTransactionMain.TransStatus = (byte)drRow["TransStatus"];
                    objBookingTransactionMain.Posted = (byte)drRow["Posted"];
                    objBookingTransactionMain.rowguid = (Guid)drRow["rowguid"];
                    objBookingTransactionMain.CreateBy = (string)drRow["CreateBy"];
                    if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTransactionMain.SyncCreate = (DateTime)drRow["SyncCreate"];
                    if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                    objBookingTransactionMain.LastSyncBy = (string)drRow["LastSyncBy"];
                    //added by ketee ,20121016
                    objBookingTransactionMain.PayScheme = (string)drRow["SchemeCode"];
                    objBookingTransactionMain.PromoCode = (string)drRow["PromoCode"];
                    return objBookingTransactionMain;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        //public DataTable GetBookingTransMain(string pTransID)
        //{
        //    objSQL.ClearFields();
        //    objSQL.ClearCondtions();
        //    BookingTransactionMain objBookingTransactionMain;
        //    DataTable dt;
        //    DateTime dateValue;
        //    String strSQL = string.Empty;
        //    String strFields = string.Empty;
        //    String strFilter = string.Empty;
        //    List<string> lstFields = new List<string>();
        //    try
        //    {
        //        lstFields.Add("BK_TRANSMAIN.TransID");
        //        lstFields.Add("BK_TRANSMAIN.TransType");
        //        lstFields.Add("BK_TRANSMAIN.AgentID");
        //        lstFields.Add("BK_TRANSMAIN.AgentCatgID");
        //        lstFields.Add("BK_TRANSMAIN.BookingDate");
        //        lstFields.Add("BK_TRANSMAIN.PaymentDateEx1");
        //        lstFields.Add("BK_TRANSMAIN.PaymentDateEx2");
        //        lstFields.Add("BK_TRANSMAIN.PaymentDateEx3");
        //        lstFields.Add("BK_TRANSMAIN.PaymentDate");
        //        lstFields.Add("BK_TRANSMAIN.CancelDate");
        //        lstFields.Add("BK_TRANSMAIN.ExpiryDate");
        //        lstFields.Add("BK_TRANSMAIN.STDDate");
        //        lstFields.Add("BK_TRANSMAIN.Currency");
        //        lstFields.Add("BK_TRANSMAIN.CurrencyPaid");
        //        lstFields.Add("BK_TRANSMAIN.CollectedAmt");
        //        lstFields.Add("BK_TRANSMAIN.TotalAmtAVG");
        //        lstFields.Add("BK_TRANSMAIN.TotalAmtGoing");
        //        lstFields.Add("BK_TRANSMAIN.TotalAmtReturn");
        //        lstFields.Add("BK_TRANSMAIN.TransSubTotal");
        //        lstFields.Add("BK_TRANSMAIN.TransTotalAmt");
        //        lstFields.Add("BK_TRANSMAIN.TransTotalFee");
        //        lstFields.Add("BK_TRANSMAIN.TransTotalTax");
        //        lstFields.Add("BK_TRANSMAIN.TransTotalOth");
        //        lstFields.Add("BK_TRANSMAIN.TransTotalPAX");
        //        lstFields.Add("BK_TRANSMAIN.TransTotalSeat");
        //        lstFields.Add("BK_TRANSMAIN.TransRemark1");
        //        lstFields.Add("BK_TRANSMAIN.TransRemark2");
        //        lstFields.Add("BK_TRANSMAIN.TransStatus");
        //        lstFields.Add("BK_TRANSMAIN.Posted");
        //        lstFields.Add("BK_TRANSMAIN.rowguid");
        //        lstFields.Add("BK_TRANSMAIN.CreateBy");
        //        lstFields.Add("BK_TRANSMAIN.SyncCreate");
        //        lstFields.Add("BK_TRANSMAIN.SyncLastUpd");
        //        lstFields.Add("BK_TRANSMAIN.LastSyncBy");
        //        //added by ketee ,20121016
        //        lstFields.Add("BK_TRANSMAIN.SchemeCode");

        //        strFields = GetSqlFields(lstFields);
        //        strFilter = "Where BK_TRANSMAIN.TransID='" + pTransID + "'";
        //        strSQL = "SELECT " + strFields + " FROM BK_TRANSMAIN " + strFilter;
        //        dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

        //        if (dt != null && dt.Rows.Count > 0)
        //        {
        //            DataRow drRow = dt.Rows[0];

        //            DataRow row = dtTransMain.NewRow();

        //            //from here
        //            row["AgentID"] = (string)drRow["AgentID"];
        //            row["AgentCatgID"] = (string)drRow["AgentCatgID"];
        //            row["BookingDate"] = (DateTime)drRow["BookingDate"];
        //            row["TransID"] = (string)drRow["TransID"];
        //            row["TransType"] = (byte)drRow["TransType"];
        //            row["TotalDepart"] = (decimal)drRow["TotalAmtGoing"];
        //            row["TotalReturn"] = (decimal)drRow["TotalAmtReturn"];
        //            row["TotalFee"] = (decimal)drRow["TransTotalFee"];
        //            row["TotalTax"] = (decimal)drRow["TransTotalTax"];
        //            row["TotalOth"] = (decimal)drRow["TransTotalOth"];
        //            row["TotalTrans"] = (decimal)drRow["TransTotalAmt"];
        //            row["CollectedAmt"] = (decimal)drRow["CollectedAmt"];
        //            row["TotalDue"] = (decimal)drRow["TransTotalAmt"] - (decimal)drRow["CollectedAmt"];
        //            row["Currency"] = (string)drRow["Currency"];
        //            row["CurrencyPaid"] = (string)drRow["CurrencyPaid"];
        //            //added by ketee, 20121016
        //            row["STDDate"] = (DateTime)drRow["STDDate"];
        //            row["SchemeCode"] = bookHeader.PayScheme;
        //            //to here

        //            objBookingTransactionMain = new BookingTransactionMain();
        //            objBookingTransactionMain.TransID = ;
        //            objBookingTransactionMain.TransType = ;
        //            objBookingTransactionMain.AgentID = ;
        //            objBookingTransactionMain.AgentCatgID = ;
        //            objBookingTransactionMain.BookingDate = ;
        //            if (DateTime.TryParse(drRow["PaymentDateEx1"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx1 = (DateTime)drRow["PaymentDateEx1"];
        //            if (DateTime.TryParse(drRow["PaymentDateEx2"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx2 = (DateTime)drRow["PaymentDateEx2"];
        //            if (DateTime.TryParse(drRow["PaymentDateEx3"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDateEx3 = (DateTime)drRow["PaymentDateEx3"];
        //            if (DateTime.TryParse(drRow["PaymentDate"].ToString(), out dateValue)) objBookingTransactionMain.PaymentDate = (DateTime)drRow["PaymentDate"];
        //            if (DateTime.TryParse(drRow["CancelDate"].ToString(), out dateValue)) objBookingTransactionMain.CancelDate = (DateTime)drRow["CancelDate"];
        //            if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];
        //            if (DateTime.TryParse(drRow["STDDate"].ToString(), out dateValue)) objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];
        //            objBookingTransactionMain.Currency = ;
        //            objBookingTransactionMain.CurrencyPaid = ;
        //            objBookingTransactionMain.CollectedAmt = ;
        //            objBookingTransactionMain.TotalAmtAVG = (decimal)drRow["TotalAmtAVG"];
        //            objBookingTransactionMain.TotalAmtGoing = ;
        //            objBookingTransactionMain.TotalAmtReturn = ;
        //            objBookingTransactionMain.TransSubTotal = (decimal)drRow["TransSubTotal"];
        //            objBookingTransactionMain.TransTotalAmt = ;
        //            objBookingTransactionMain.TransTotalFee = ;
        //            objBookingTransactionMain.TransTotalTax = ;
        //            objBookingTransactionMain.TransTotalOth = ;
        //            objBookingTransactionMain.TransTotalPAX = (int)drRow["TransTotalPAX"];
        //            objBookingTransactionMain.TransTotalSeat = (int)drRow["TransTotalSeat"];
        //            objBookingTransactionMain.TransRemark1 = (string)drRow["TransRemark1"];
        //            objBookingTransactionMain.TransRemark2 = (string)drRow["TransRemark2"];
        //            objBookingTransactionMain.TransStatus = (byte)drRow["TransStatus"];
        //            objBookingTransactionMain.Posted = (byte)drRow["Posted"];
        //            objBookingTransactionMain.rowguid = (Guid)drRow["rowguid"];
        //            objBookingTransactionMain.CreateBy = (string)drRow["CreateBy"];
        //            if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBookingTransactionMain.SyncCreate = (DateTime)drRow["SyncCreate"];
        //            if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
        //            objBookingTransactionMain.LastSyncBy = (string)drRow["LastSyncBy"];
        //            //added by ketee ,20121016
        //            objBookingTransactionMain.PayScheme = ;
        //            return objBookingTransactionMain;
        //        }
        //        else
        //        {
        //            return null;
        //            throw new ApplicationException("BK_TRANSMAIN does not exist.");
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }
        //}

        public DataTable DataTableTransMain(BookingTransactionMain bookHeader)
        {
            DataTable dtTransMain = new DataTable();
            DataRow row = dtTransMain.NewRow();
            if (bookHeader != null)
            {
                row["AgentID"] = bookHeader.AgentID;
                row["AgentCatgID"] = bookHeader.AgentCatgID;
                row["BookingDate"] = Convert.ToDateTime(bookHeader.BookingDate);
                row["TransID"] = bookHeader.TransID;
                row["TransType"] = bookHeader.TransType;
                row["TotalDepart"] = bookHeader.TotalAmtGoing;
                row["TotalReturn"] = bookHeader.TotalAmtReturn;
                row["TotalFee"] = bookHeader.TransTotalFee;
                row["TotalTax"] = bookHeader.TransTotalTax;
                row["TotalPaxFee"] = bookHeader.TransTotalPaxFee;
                row["TotalOth"] = bookHeader.TransTotalOth;
                row["TotalSSR"] = bookHeader.TransTotalSSR;
                row["TotalSeat"] = bookHeader.TransTotalSeat;
                row["TotalNameChange"] = bookHeader.TransTotalNameChange;
                row["TotalInfant"] = bookHeader.TransTotalInfant;
                row["TotalDisc"] = bookHeader.TransTotalDisc;
                row["TotalPromoDisc"] = bookHeader.TransTotalPromoDisc;
                row["TotalProcess"] = bookHeader.TransTotalProcess;
                row["TotalTrans"] = bookHeader.TransTotalAmt;
                row["CollectedAmt"] = bookHeader.CollectedAmt;
                row["TotalDue"] = bookHeader.TransTotalAmt - bookHeader.CollectedAmt;
                row["Currency"] = bookHeader.Currency;
                row["CurrencyPaid"] = bookHeader.CurrencyPaid;
                //added by ketee, 20121016
                row["STDDate"] = bookHeader.STDDate;
                row["SchemeCode"] = bookHeader.PayScheme;
                row["PromoCode"] = bookHeader.PromoCode;
                dtTransMain.Rows.Add(row);
                return dtTransMain;
            }
            return null;
        }

        //change from GetAllBK_TRANSDTLCombinePNR
        public List<BookingTransactionDetail> GetBookingTransactionDetail(string transID, int TransVoid = 2)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            String strSQL = string.Empty;

            try
            {
                string strFilter = "";
                if (TransVoid <= 1)
                {
                    strFilter = " AND TransVoid=" + TransVoid;
                }
                /// commented by diana 20131021
                //if (TransVoid <= 1)
                //{
                //    str = " AND TransVoid IN(0,1)";
                //}

                strSQL = "SELECT DISTINCT RecordLocator, TransID, SUM(LineTotal) AS LineTotal, SUM(DetailCollectedAmt) AS DetailCollectedAmt, CONVERT(DATE,NextDueDate) AS NextDueDate, SUM(LineFee) AS ServiceCharge, SUM(LineTax) AS ServiceTax, SUM(LinePaxFee) AS ServicePaxFee, Sum(LineOth) AS OtherTax, Sum(LineProcess) AS ProcessFee, Sum(LineSSR) AS SSRFee, Sum(LineSeat) AS SeatFee, Sum(LineNameChange) AS NameChangeFee, Sum(LineInfant) AS InfantFee, Sum(LineDisc) AS ServiceDiscount, Sum(LinePromoDisc) AS ServicePromoDiscount, PaxAdult, PaxChild, SellKey ";
                strSQL += "FROM BK_TRANSDTL WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, transID) + "' " + strFilter;
                strSQL += "GROUP BY RecordLocator, TransID, CONVERT(DATE,NextDueDate), PaxAdult, PaxChild, SellKey ORDER BY TransID, PaxAdult DESC";

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                        objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];
                        // added by diana 20130920
                        objBK_TRANSDTL_Info.NextDueDate = (DateTime)drRow["NextDueDate"];
                        // end added by diana 20130920
                        //added by ketee, 20121016
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.LineFee = (decimal)drRow["ServiceCharge"];
                        objBK_TRANSDTL_Info.SellKey = (string)drRow["SellKey"];
                        objBK_TRANSDTL_Info.LineTax = (decimal)drRow["ServiceTax"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["ServicePaxFee"];
                        objBK_TRANSDTL_Info.LineOth = (decimal)drRow["OtherTax"];
                        objBK_TRANSDTL_Info.LineProcess = (decimal)drRow["ProcessFee"];
                        objBK_TRANSDTL_Info.LineSSR = (decimal)drRow["SSRFee"];
                        objBK_TRANSDTL_Info.LineSeat = (decimal)drRow["SeatFee"];
                        objBK_TRANSDTL_Info.LineNameChange = (decimal)drRow["NameChangeFee"];
                        objBK_TRANSDTL_Info.LineInfant = (decimal)drRow["InfantFee"];
                        objBK_TRANSDTL_Info.LineDisc = (decimal)drRow["ServiceDiscount"];
                        objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["ServicePromoDiscount"];

                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<BookingTransactionDetail> GetBookingTransactionDetailByPNR(string PNR, int TransVoid = 2)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            String strSQL = string.Empty;

            try
            {
                string strFilter = "";
                if (TransVoid <= 1)
                {
                    strFilter = " AND TransVoid=" + TransVoid;
                }
                /// commented by diana 20131021
                //if (TransVoid <= 1)
                //{
                //    str = " AND TransVoid IN(0,1)";
                //}

                strSQL = "SELECT DISTINCT RecordLocator, TransID, SUM(LineTotal) AS LineTotal, SUM(DetailCollectedAmt) AS DetailCollectedAmt, CONVERT(DATE,NextDueDate) AS NextDueDate, SUM(LineFee) AS ServiceCharge, SUM(LineTax) AS ServiceTax, SUM(LinePaxFee) AS ServicePaxFee, Sum(LineOth) AS OtherTax, Sum(LineProcess) AS ProcessFee, Sum(LineSSR) AS SSRFee, Sum(LineSeat) AS SeatFee, Sum(LineNameChange) AS NameChangeFee, Sum(LineInfant) AS InfantFee, Sum(LineDisc) AS ServiceDiscount, Sum(LinePromoDisc) AS ServicePromoDiscount, PaxAdult, PaxChild, SellKey ";
                strSQL += "FROM BK_TRANSDTL WHERE RecordLocator = '" + PNR + "' " + strFilter;
                strSQL += "GROUP BY RecordLocator, TransID, CONVERT(DATE,NextDueDate), PaxAdult, PaxChild, SellKey ORDER BY TransID, PaxAdult DESC";

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                        objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];
                        // added by diana 20130920
                        objBK_TRANSDTL_Info.NextDueDate = (DateTime)drRow["NextDueDate"];
                        // end added by diana 20130920
                        //added by ketee, 20121016
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.LineFee = (decimal)drRow["ServiceCharge"];
                        objBK_TRANSDTL_Info.SellKey = (string)drRow["SellKey"];
                        objBK_TRANSDTL_Info.LineTax = (decimal)drRow["ServiceTax"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["ServicePaxFee"];
                        objBK_TRANSDTL_Info.LineOth = (decimal)drRow["OtherTax"];
                        objBK_TRANSDTL_Info.LineProcess = (decimal)drRow["ProcessFee"];
                        objBK_TRANSDTL_Info.LineSSR = (decimal)drRow["SSRFee"];
                        objBK_TRANSDTL_Info.LineSeat = (decimal)drRow["SeatFee"];
                        objBK_TRANSDTL_Info.LineNameChange = (decimal)drRow["NameChangeFee"];
                        objBK_TRANSDTL_Info.LineInfant = (decimal)drRow["InfantFee"];
                        objBK_TRANSDTL_Info.LineDisc = (decimal)drRow["ServiceDiscount"];
                        objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["ServicePromoDiscount"];

                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public DataTable DataTableTransDetail(List<BookingTransactionDetail> listDetail)
        {
            DataTable dtTransDetail = new DataTable();
            DataRow row;
            if (listDetail != null && listDetail.Count > 0)
            {
                foreach (BookingTransactionDetail detail in listDetail)
                {
                    row = dtTransDetail.NewRow();
                    row["TransID"] = detail.TransID;
                    row["RecordLocator"] = detail.RecordLocator;
                    //row["SeqNo"] = detail.SeqNo;
                    row["DetailCollectedAmount"] = detail.CollectedAmount;
                    row["LineTotal"] = detail.LineTotal;
                    //row["CurrencyPaid"] = detail.Currency;
                    row["AmountDue"] = detail.LineTotal - detail.CollectedAmount;
                    //added by ketee, 20121016
                    row["PaxAdult"] = detail.PaxAdult;
                    row["PaxChild"] = detail.PaxChild;
                    row["LineFee"] = detail.LineFee;
                    row["SellKey"] = detail.SellKey;
                    row["LineTax"] = detail.LineTax;
                    row["LinePaxFee"] = detail.LinePaxFee;
                    row["LineOth"] = detail.LineOth;
                    row["LineProcess"] = detail.LineProcess;
                    row["LineSSR"] = detail.LineSSR;
                    row["LineSeat"] = detail.LineSeat;
                    row["LineNameChange"] = detail.LineNameChange;
                    row["LineInfant"] = detail.LineInfant;
                    row["LineDisc"] = detail.LineDisc;
                    row["LinePromoDisc"] = detail.LinePromoDisc;
                    // added by diana 20130920
                    row["NextDueDate"] = detail.NextDueDate;
                    // ended added by diana 20130920
                    dtTransDetail.Rows.Add(row);
                }
                return dtTransDetail;
            }
            return null;
        }

        //from GetAllBK_TRANSDTLFilter
        public List<BookingTransactionDetail> GetAllTransDetails(string pTransID, int TransVoid = 2)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                string str = "";

                if (TransVoid <= 1)
                {
                    str = " AND TransVoid=" + TransVoid;
                }
                /// commented by diana 20131021
                //if (TransVoid <= 1)
                //{
                //    str = " AND TransVoid IN(0,1)";
                //}
                strSQL = "SELECT * FROM BK_TRANSDTL WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pTransID) + "'" + str + " ORDER BY SeqNo ASC";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        //if (TransVoid == 1)
                        //    objBK_TRANSDTL_Info.RecordLocator = "Rejected";
                        //else
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSDTL_Info.SeqNo = (byte)drRow["SeqNo"];
                        objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                        objBK_TRANSDTL_Info.FlightNo = (string)drRow["CarrierCode"] + (string)drRow["FlightNo"];
                        if (DateTime.TryParse(drRow["DepartureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepartureDate"];
                        objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                        objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                        if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];

                        objBK_TRANSDTL_Info.FareClass = (string)drRow["FareClass"];
                        objBK_TRANSDTL_Info.FarePerPax = (decimal)drRow["FarePerPax"];
                        objBK_TRANSDTL_Info.Journey = (string)drRow["Origin"] + "-" + (string)drRow["Destination"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["LinePaxFee"];

                        /// amended by diana 20130829
                        /// subtracted total by fare fee
                        if ((int)drRow["PaxChild"] > 0)
                        {
                            objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2;
                            objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTotal"] - (decimal)drRow["LinePaxFee"] - ((decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"] + (int)drRow["PaxChild"]) / 2);
                        }
                        else
                        {
                            objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]);
                            objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTotal"] - (decimal)drRow["LinePaxFee"] - ((decimal)drRow["FarePerPax"] * ((int)drRow["PaxAdult"]));
                        }
                        //objBK_TRANSDTL_Info.LineFlight = (decimal)drRow["LineTotal"] - (decimal)drRow["LineTax"] - (decimal)drRow["LineFee"] - (decimal)drRow["LineOth"];
                        //objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"];
                        objBK_TRANSDTL_Info.LineFee = (decimal)drRow["LineFee"];
                        objBK_TRANSDTL_Info.LineOth = (decimal)drRow["LineOth"];
                        objBK_TRANSDTL_Info.LineProcess = (decimal)drRow["LineProcess"];
                        objBK_TRANSDTL_Info.LineSSR = (decimal)drRow["LineSSR"];
                        objBK_TRANSDTL_Info.LineSeat = (decimal)drRow["LineSeat"];
                        objBK_TRANSDTL_Info.LineNameChange = (decimal)drRow["LineNameChange"];
                        objBK_TRANSDTL_Info.LineInfant = (decimal)drRow["LineInfant"];
                        objBK_TRANSDTL_Info.LineDisc = (decimal)drRow["LineDisc"];
                        objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["LinePromoDisc"];
                        //objBK_TRANSDTL_Info.AttemptCount = (int)drRow["AttemptCount"];
                        objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];
                        objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.TransVoid = (byte)drRow["TransVoid"];
                        objBK_TRANSDTL_Info.rowguid = (Guid)drRow["rowguid"];
                        objBK_TRANSDTL_Info.CreateBy = (string)drRow["CreateBy"];
                        //added by ketee
                        objBK_TRANSDTL_Info.TotalPax = objBK_TRANSDTL_Info.PaxAdult + objBK_TRANSDTL_Info.PaxChild;

                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBK_TRANSDTL_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        #endregion

        #region UpdateTransaction

        //for clearing expired journey and updating status of 0
        public Boolean UpdatePendingConfirmTransactionProcess()
        {
            try
            {
                //clear or insert pnr to transdetail
                ClearExpiredJourney();

                List<ListTransaction> AllTransaction = new List<ListTransaction>();
                GetTransaction(ref AllTransaction, 0, " AND BookingDate < DATEADD(MINUTE, -15, GETDATE())");

                if (AllTransaction != null)
                {
                    log.Info(this, AllTransaction.Count.ToString());
                    foreach (ListTransaction TransactionInfo in AllTransaction)
                    {
                        ClearUnconfirmedTransaction(TransactionInfo.TransID);
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
                //throw new ApplicationException("Data not found");
            }
        }

        //for updating status of 1
        public Boolean UpdatePendingPaymentTransactionProcess()
        {
            try
            {
                List<ListTransaction> AllTransaction = new List<ListTransaction>();
                GetTransaction(ref AllTransaction, 1);

                if (AllTransaction != null)
                {
                    log.Info(this, AllTransaction.Count.ToString());
                    foreach (ListTransaction TransactionInfo in AllTransaction)
                    {
                        //for status 1 and 2 : update flight and payment, if expired then status += 5 and details is void
                        UpdateDetails(TransactionInfo, TransactionInfo.AgentUserName, TransactionInfo.AgentID, true);
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
                //throw new ApplicationException("Data not found");
            }
        }

        //for updating status of 2
        public Boolean UpdatePendingPassengerTransactionProcess()
        {
            try
            {
                List<ListTransaction> AllTransaction = new List<ListTransaction>();
                GetTransaction(ref AllTransaction, 2);

                if (AllTransaction != null)
                {
                    log.Info(this, AllTransaction.Count.ToString());
                    foreach (ListTransaction TransactionInfo in AllTransaction)
                    {
                        //for status 1 and 2 : update flight and payment, if expired then status += 5 and details is void
                        UpdateDetails(TransactionInfo, TransactionInfo.AgentUserName, TransactionInfo.AgentID, true);
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
                //throw new ApplicationException("Data not found");
            }
        }

        //for all combination status of 0,1,2
        ////public Boolean UpdateAllTransaction()
        ////{
        ////    try
        ////    {
        ////        //clear or insert pnr to transdetail
        ////        ClearExpiredJourney();

        ////        //to add trans with status of 1 and 2
        ////        List<ListTransaction> AllTransaction = new List<ListTransaction>();
        ////        GetTransaction(ref AllTransaction, 0, " AND BookingDate < DATEADD(MINUTE, -15, GETDATE())");
        ////        GetTransaction(ref AllTransaction, 1);
        ////        GetTransaction(ref AllTransaction, 2);
        ////        //GetPendingPassengerUploadTransaction(ref AllTransaction);

        ////        if (AllTransaction != null)
        ////        {
        ////            log.Info(this, AllTransaction.Count.ToString());
        ////            foreach (ListTransaction TransactionInfo in AllTransaction)
        ////            {
        ////                if (TransactionInfo.TransStatus == 0)
        ////                {
        ////                    //for status 0 : clear journey by signature, set status to 5, set details to void=1
        ////                    ClearUnconfirmedTransaction(TransactionInfo.TransID);
        ////                }
        ////                else
        ////                {
        ////                    //for status 1 and 2 : update flight and payment, if expired then status += 5 and details is void
        ////                    UpdateDetails(TransactionInfo, TransactionInfo.AgentUserName, TransactionInfo.AgentID, true);
        ////                }
        ////            }
        ////        }
        ////        return true;
        ////    }
        ////    catch (Exception ex)
        ////    {
        ////        return false;
        ////        //throw new ApplicationException("Data not found");
        ////    }
        ////}

        //clear journey of non pnr
        public Boolean ClearUnconfirmedTransaction(string TransID)
        {
            List<BookingTransactionDetail> BookingTransactionDetail = null;
            BookingTransactionDetail = GetAllRecordLocatorDetails(TransID);
            bool getJourney = false;

            if (BookingTransactionDetail != null)
            {
                ABS.Navitaire.APIBooking absNavitaire = new ABS.Navitaire.APIBooking("");
                foreach (BookingTransactionDetail transDetail in BookingTransactionDetail)
                {
                    //from here - get booking from state
                    string errMsg = "";
                    string recordLocator = "";
                    bool foundJourney = false;

                    Navitaire.BookingManager.Booking booking = absNavitaire.GetBookingFromState(transDetail.Signature);
                    //string str = GetXMLString(booking);
                    if (booking != null)
                    {
                        if (booking.Journeys.Length > 0 && booking.RecordLocator != "")
                        {
                            foundJourney = true;
                            getJourney = true; //at least there is one valid pnr
                            recordLocator = booking.RecordLocator;
                        }
                    }

                    if (foundJourney == true)
                    {
                        SetTransDetailStatus(transDetail.Signature, 0, recordLocator); //set void to 0 and transmain status to 1
                    }
                    else
                    {
                        absNavitaire.ClearJourney(transDetail.Signature, ref errMsg);
                        if (errMsg != null && !string.IsNullOrEmpty(errMsg))
                        {
                            //return false;
                        }
                        else if (transDetail.RecordLocator.ToString().Trim().Length >= 6)
                        {
                            getJourney = true;
                            recordLocator = transDetail.RecordLocator;
                        }
                        else
                        {
                            SetTransDetailStatus(transDetail.Signature, 1); //set void to 1
                        }
                    }
                    //to here

                    //string Signature = "";
                    //string errMsg = "";
                    //Signature = transDetail.Signature;
                    //absNavitaire.ClearJourney(Signature, ref errMsg);


                }
            }
            if (getJourney == false) //none of the transdetail is valid
            {
                UpdateUnconfirmedStatus(TransID); //set status to 5
            }

            return true;
        }

        //update status 0 to 5
        public Boolean UpdateUnconfirmedStatus(string TransID)
        {
            try
            {
                string strSQL = "";
                ArrayList lstSQL = new ArrayList();
                bool rValue = false;

                strSQL = "UPDATE BK_TRANSMAIN SET TransStatus=5,TransRemark1='AUTO CANCEL PROCESS',CANCELDATE=GETDATE(),SyncLastUpd=GETDATE() WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "';" + "UPDATE BK_TRANSDTL SET TransVoid=1 WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "';";

                lstSQL.Add(strSQL);
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {

            }
        }

        //get transaction
        public void GetTransaction(ref List<ListTransaction> TransactionList, int TransStatus, string filter = "")
        {
            DataTable dt = null;
            string strSQL = string.Empty;
            string strFilter = string.Empty;

            if (filter != "")
                strFilter = filter;

            try
            {
                //commented by diana 20131021
                //strSQL = "SELECT BK_TRANSMAIN.TransID, BK_TRANSDTL.NextDueDate FROM BK_TRANSDTL INNER JOIN BK_TRANSMAIN ON BK_TRANSDTL.TransID = BK_TRANSMAIN.TransID AND BK_TRANSMAIN.expirydate < GETDATE() and BK_TRANSMAIN.STDDate > GETDATE() and BK_TRANSMAIN.TransStatus = 1 " & " GROUP BY BK_TRANSMAIN.TransID, BK_TRANSDTL.NextDueDate"
                strSQL = "SELECT BK_TRANSMAIN.TransID,BK_TRANSMAIN.TransStatus,BK_TRANSMAIN.AgentID,AG_PROFILE.Username FROM BK_TRANSMAIN INNER JOIN AG_PROFILE ON BK_TRANSMAIN.AgentID=AG_PROFILE.AgentID AND BK_TRANSMAIN.TransStatus = " + TransStatus + " " + strFilter;

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        ListTransaction TransactionDetail = new ListTransaction();
                        TransactionDetail.TransID = drRow["TransID"].ToString();
                        TransactionDetail.TransStatus = (byte)drRow["TransStatus"];
                        TransactionDetail.AgentID = drRow["AgentID"].ToString();
                        TransactionDetail.AgentUserName = drRow["Username"].ToString();
                        TransactionList.Add(TransactionDetail);
                    }
                }
            }
            catch (Exception ex)
            {
                //throw new ApplicationException("Data not found");
            }
        }

        //update all transaction
        public Boolean UpdateDetails(ListTransaction TransactionInfo, string AgentName, string AgentID, Boolean VerifyDetails = false)
        {
            try
            {
                string PNR;
                string currencyCode = "";
                decimal exchangeRate = 1;
                DateTime stdDate = DateTime.Now;
                bool change = false;

                Decimal totalPaid = 0;
                int totalPax = 0;
                decimal totalTransAmountAll = 0;
                decimal totalTransAmount = 0;
                decimal totalAmountGoing = 0;
                decimal totalAmountReturn = 0;
                decimal totalTransSubTotal = 0;
                decimal totalTransTotalFee = 0;
                decimal totalTransTotalTax = 0;
                decimal totalTransTotalPaxFee = 0;
                decimal totalTransTotalOth = 0;
                decimal totalTransTotalProcess = 0;
                decimal totalTransTotalSSR = 0;
                decimal totalTransTotalSeat = 0;
                decimal totalTransTotalNameChange = 0;
                decimal totalTransTotalInfant = 0;
                decimal totalTransTotalDisc = 0;
                decimal totalTransTotalPromoDisc = 0;
                decimal AverageFare = 0;

                string TransID = TransactionInfo.TransID; //take transID
                int Status = TransactionInfo.TransStatus;

                VerifyDetails = true; //need to be checked

                List<BookingJourneyContainer> listBookingJourneyContainers = new List<BookingJourneyContainer>();
                List<BookingTransactionDetail> listBookingJourney = new List<BookingTransactionDetail>();
                BookingTransactionDetail lstBooking = new BookingTransactionDetail();

                BookingTransactionDetail bookDTLInfo = new BookingTransactionDetail();
                BookingTransactionMain bookHDRInfo = new BookingTransactionMain();

                //begin load data
                BookingTransactionMain listBookingMain = new BookingTransactionMain();
                List<BookingTransactionDetail> listBookingDetailDistinct = new List<BookingTransactionDetail>();
                List<BookingTransactionDetail> listBookingDetail = new List<BookingTransactionDetail>();

                listBookingMain = GetBookingTransactionMain(TransID); //collect transmain
                listBookingDetailDistinct = GetBookingTransactionDetail(TransID); //collect distinct details - PNR
                listBookingDetail = GetAllTransDetails(TransID, 0); //collect all transdetails with no void

                //end load data

                List<PaymentContainer> listPaymentContainers = new List<PaymentContainer>();
                List<BookingTransTender> listBookTransTenderInfo = new List<BookingTransTender>();
                BookingTransTender bookTransTenderInfo = new BookingTransTender();

                List<BookingTransTender> listTransTender = new List<BookingTransTender>();
                listTransTender = GetAllBK_TRANSTENDERFilter(TransID); //load payment from db

                List<BookingTransactionDetail> lstbookDTLInfo = new List<BookingTransactionDetail>();
                lstbookDTLInfo = new List<BookingTransactionDetail>();

                if (listBookingMain != null && listBookingDetailDistinct != null)
                {

                    //update transmain
                    DataTable dtKeyFieldMain = GetKeyFieldMainByTransID(TransID);

                    foreach (BookingTransactionDetail listTransDetail in listBookingDetailDistinct) //load distinct of PNRs
                    {
                        PNR = listTransDetail.RecordLocator.ToString(); //insert PNR
                        log.Info(this, "Entering GetBookingJourneyDetailsByPNR - PNR : " + PNR);
                        if (GetJourneyAndPaymentDetails(PNR, TransID)) //take journey and payment by PNR
                        {
                            log.Info(this, "End Retrieve GetBookingJourneyDetailsByPNR - succeed - PNR : " + PNR);

                            DataTable dtKeyField = new DataTable();
                            dtKeyField = GetKeyFieldDetailByPNR(PNR); //Take All RecordLocator, TransID, SeqNo

                            #region AssignBookingJourney
                            if (HttpContext.Current.Session["BookingJourneyContainers"] != null) //if got journey
                            {
                                listBookingJourneyContainers = (List<BookingJourneyContainer>)HttpContext.Current.Session["BookingJourneyContainers"];
                                //decimal paymentAmount = 0, leftPayDetail = 0, totalPNRAmount = 0, currencyRate = 0;
                                int rowBookingJourneySeqNo = 1;
                                foreach (BookingJourneyContainer rowBookingJourney in listBookingJourneyContainers) //loop journey from navitaire
                                {
                                    currencyCode = rowBookingJourney.CurrencyCode;
                                    exchangeRate = rowBookingJourney.ExchangeRate;
                                    if (rowBookingJourneySeqNo == 1) { stdDate = rowBookingJourney.STD; change = true; } //change STD
                                    int iIndex = listBookingDetail.FindIndex(p => p.SeqNo == rowBookingJourneySeqNo && p.RecordLocator == rowBookingJourney.RecordLocator);
                                    if (iIndex >= 0)//check for similar PNR and seqNo - if same, then update, if not, then insert
                                    {
                                        BookingTransactionDetail bookingJourney = listBookingDetail[iIndex];
                                        AssignBookingJourneyDetails(TransID, Convert.ToByte(bookingJourney.SeqNo), rowBookingJourney, PNR, "update", ref listBookingJourney);
                                    }
                                    else
                                    {
                                        AssignBookingJourneyDetails(TransID, Convert.ToByte(rowBookingJourneySeqNo), rowBookingJourney, PNR, "insert", ref listBookingJourney);
                                    }

                                    if (VerifyDetails)
                                    {
                                        int curIndex = rowBookingJourneySeqNo - 1;
                                        totalPax += Convert.ToInt16(listBookingJourney[curIndex].PaxAdult) + Convert.ToInt16(listBookingJourney[curIndex].PaxChild);
                                        totalTransAmount += Convert.ToDecimal(listBookingJourney[curIndex].LineTotal);
                                        totalTransTotalFee += Convert.ToDecimal(listBookingJourney[curIndex].LineFee);
                                        totalTransTotalOth += Convert.ToDecimal(listBookingJourney[curIndex].LineOth);
                                        totalTransTotalProcess += Convert.ToDecimal(listBookingJourney[curIndex].LineProcess);
                                        totalTransTotalSSR += Convert.ToDecimal(listBookingJourney[curIndex].LineSSR);
                                        totalTransTotalSeat += Convert.ToDecimal(listBookingJourney[curIndex].LineSeat);
                                        totalTransTotalNameChange += Convert.ToDecimal(listBookingJourney[curIndex].LineNameChange);
                                        totalTransTotalInfant += Convert.ToDecimal(listBookingJourney[curIndex].LineInfant);
                                        totalTransTotalDisc += Convert.ToDecimal(listBookingJourney[curIndex].LineDisc);
                                        totalTransTotalPromoDisc += Convert.ToDecimal(listBookingJourney[curIndex].LinePromoDisc);
                                        totalTransTotalTax += Convert.ToDecimal(listBookingJourney[curIndex].LineTax);
                                        totalTransTotalPaxFee += Convert.ToDecimal(listBookingJourney[curIndex].LinePaxFee);
                                        totalTransSubTotal += Convert.ToDecimal(listBookingJourney[curIndex].LineTotal);
                                    }

                                    rowBookingJourneySeqNo++;
                                }
                            }
                            else
                            {
                                return false;
                            }
                            #endregion

                            #region AssignPayment
                            decimal paymentAmount = 0, feeAmount = 0, totPaymentAmount = 0, leftPayDetail = 0, totalPNRAmount = 0, currencyRate = 0;

                            totalTransAmountAll += Convert.ToDecimal(listTransDetail.LineTotal);
                            if (HttpContext.Current.Session["PaymentContainers"] != null)
                            {
                                listPaymentContainers = (List<PaymentContainer>)HttpContext.Current.Session["PaymentContainers"];

                                foreach (PaymentContainer rowPayment in listPaymentContainers) //loop payment from navitaire
                                {
                                    int paymentStatus = 0;
                                    string authorizationcode = "";
                                    string accountNumber = "";
                                    string merchantID = "";
                                    long accountNumberID = 0;
                                    byte transVoid = 1;
                                    paymentAmount = rowPayment.CollectedAmount;
                                    paymentStatus = rowPayment.PaymentStatus;
                                    authorizationcode = rowPayment.AuthorizationCode;
                                    accountNumber = rowPayment.AccountNumber;
                                    merchantID = rowPayment.MerchantID;
                                    accountNumberID = rowPayment.AccountNumberID;
                                    currencyRate = rowPayment.CurrencyRate;

                                    //totalPaid += paymentAmount;
                                    if (rowPayment.PaymentStatus == 3)
                                    {
                                        transVoid = 0;
                                        totalPaid += paymentAmount;
                                        totalPNRAmount += paymentAmount;
                                    }

                                    int iIndex = listTransTender.FindIndex(p => p.SeqNo == Convert.ToInt32(rowPayment.PaymentNumber) && p.RecordLocator == rowPayment.RecordLocator);
                                    if (iIndex >= 0)
                                    {
                                        BookingTransTender bookingTender = listTransTender[iIndex];
                                        AssignPaymentList(TransID, Convert.ToByte(bookingTender.SeqNo), paymentAmount, feeAmount, totPaymentAmount, rowPayment.CurrencyCode, rowPayment.CurrencyCode, bookingTender.TenderID, rowPayment.PaymentText, rowPayment.AccountNumber, rowPayment.AuthorizationCode, rowPayment.MerchantID, bookingTender.CreateBy, PNR, transVoid, "update", rowPayment.PaymentDate, ref listBookTransTenderInfo, currencyRate);
                                    }
                                    else
                                    {
                                        AssignPaymentList(TransID, Convert.ToByte(rowPayment.PaymentNumber), paymentAmount, feeAmount, totPaymentAmount, rowPayment.CurrencyCode, rowPayment.CurrencyCode, getTenderIDbyDesc(rowPayment.PaymentMethodCode), rowPayment.PaymentText, rowPayment.AccountNumber, rowPayment.AuthorizationCode, rowPayment.MerchantID, AgentName, PNR, transVoid, "insert", rowPayment.PaymentDate, ref listBookTransTenderInfo, currencyRate);
                                    }
                                }
                            }
                            else
                            {
                                return false;
                            }
                            #endregion

                            #region updateDetails
                            int goingreturn = 0;
                            string strOrigin = "";
                            for (int ctrDetail = 0; ctrDetail < dtKeyField.Rows.Count; ctrDetail++)
                            {
                                //string RecordLocator = dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString();
                                //TransID = dtKeyField.Rows[ctrDetail]["TransID"].ToString();
                                //byte SeqNo = Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]);

                                //bookDTLInfo = new BookingTransactionDetail();
                                //bookDTLInfo = GetSingleBK_TRANSDTL(RecordLocator, TransID, SeqNo);

                                if (totalPNRAmount > listBookingJourney[ctrDetail].LineTotal)
                                {
                                    leftPayDetail = totalPNRAmount - listBookingJourney[ctrDetail].LineTotal;
                                    totalPNRAmount = listBookingJourney[ctrDetail].LineTotal;
                                    //AssignTransDetail(ref listBookingJourney, dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString(), dtKeyField.Rows[ctrDetail]["TransID"].ToString(), Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]), AgentName, totalPNRAmount, PNR);
                                    //public void AssignTransDetail(ref List<BookingTransactionDetail> lstbookDTLInfo, string recordlocatordb, string transID, byte seqNo, string agentName, decimal collectedAmt, string pnr, byte transVoid = 0)

                                    listBookingJourney[ctrDetail].TransVoid = 0;
                                    listBookingJourney[ctrDetail].LastSyncBy = AgentName;
                                    listBookingJourney[ctrDetail].SyncLastUpd = DateTime.Now;
                                    listBookingJourney[ctrDetail].CollectedAmount = totalPNRAmount;
                                    listBookingJourney[ctrDetail].RecordLocator = PNR;

                                    totalPNRAmount = leftPayDetail;
                                }
                                else
                                {

                                    listBookingJourney[ctrDetail].TransVoid = 0;
                                    listBookingJourney[ctrDetail].LastSyncBy = AgentName;
                                    listBookingJourney[ctrDetail].SyncLastUpd = DateTime.Now;
                                    listBookingJourney[ctrDetail].CollectedAmount = totalPNRAmount;
                                    listBookingJourney[ctrDetail].RecordLocator = PNR;

                                    //AssignTransDetail(ref listBookingJourney, dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString(), dtKeyField.Rows[ctrDetail]["TransID"].ToString(), Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]), AgentName, totalPNRAmount, PNR);
                                    //totalPaid += paymentAmount;
                                    totalPNRAmount = 0;
                                }

                                //total up total going and total return
                                //start added by Agus
                                if (strOrigin == "") strOrigin = bookDTLInfo.Origin;
                                if (bookDTLInfo.Origin == strOrigin) goingreturn = 0;
                                else goingreturn = 1;
                                //end added by Agus
                                if (VerifyDetails)
                                {
                                    if (goingreturn == 0)
                                    {
                                        totalAmountGoing += listBookingJourney[ctrDetail].LineTotal;
                                    }
                                    else
                                    {
                                        totalAmountReturn += listBookingJourney[ctrDetail].LineTotal;
                                    }
                                }

                            }
                            #endregion

                        }
                        else
                        {
                            log.Info(this, "End Retrieve GetBookingJourneyDetailsByPNR - no journey - PNR : " + PNR);

                            #region CancelPNR
                            //commented by diana - need to be checked
                            //totalTransAmountAll += Convert.ToDecimal(listTransDetail.LineTotal);
                            //if (VerifyDetails)
                            //{
                            //    DataTable dtKeyField = new DataTable();
                            //    dtKeyField = GetKeyFieldDetailBySignature(listTransDetail.SellKey);
                            //    //decimal paymentAmount = 0, leftPayDetail = 0, totalPNRAmount = 0;
                            //    for (int ctrDetail = 0; ctrDetail < dtKeyField.Rows.Count; ctrDetail++)
                            //    {
                            //        string RecordLocator = dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString();
                            //        //TransID = dtKeyField.Rows[ctrDetail]["TransID"].ToString();
                            //        byte SeqNo = Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]);

                            //        bookDTLInfo = new BookingTransactionDetail();
                            //        bookDTLInfo = GetSingleBK_TRANSDTL(RecordLocator, TransID, SeqNo);

                            //        //cancel PNR
                            //        //CancelTransactionByPNR(TransID, RecordLocator, AgentID);
                            //        AssignTransDetail(ref lstbookDTLInfo, dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString(), dtKeyField.Rows[ctrDetail]["TransID"].ToString(), Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]), AgentName, bookDTLInfo.CollectedAmount, PNR, 1);

                            //        totalPaid += bookDTLInfo.CollectedAmount;
                            //        //totalPaid += paymentAmount;
                            //        //totalPNRAmount = 0;

                            //    }
                            //}
                            #endregion
                        }
                    }

                    #region UpdateAllTransactionDetails
                    if (dtKeyFieldMain.Rows.Count > 0 && listBookingDetailDistinct.Count > 0)
                    {
                        byte TransStatus = 1;
                        if (totalTransAmount > 0 && totalPaid >= totalTransAmount)
                        {
                            TransStatus = 2;
                        }
                        else
                        {
                            if (totalTransAmount == 0 && totalTransAmountAll > 0 && totalPaid >= totalTransAmountAll)
                            {
                                TransStatus = 2;
                            }
                        }
                        if (dtKeyFieldMain.Rows.Count > 0)
                        {
                            AssignTransMain(ref bookHDRInfo, TransID, dtKeyFieldMain.Rows[0]["AgentID"].ToString(), dtKeyFieldMain.Rows[0]["AgentCatgID"].ToString(), Convert.ToByte(dtKeyFieldMain.Rows[0]["TransType"]), Convert.ToDateTime(dtKeyFieldMain.Rows[0]["BookingDate"]), TransStatus, AgentName, 2, totalPaid, "", "", totalPax, totalTransAmount, totalTransTotalFee, totalTransTotalTax, totalTransTotalPaxFee, totalTransTotalOth, totalTransTotalSSR, totalTransTotalSeat, totalTransTotalNameChange, totalTransTotalInfant, totalTransTotalDisc, totalTransTotalPromoDisc, totalTransTotalProcess, totalTransSubTotal, totalAmountGoing, totalAmountReturn);
                        }

                        //bookHDRInfo = GetBookingTransactionMain(TransID, Convert.ToByte(dtKeyFieldMain.Rows[0]["TransType"]), dtKeyFieldMain.Rows[0]["AgentID"].ToString(), dtKeyFieldMain.Rows[0]["AgentCatgID"].ToString(), Convert.ToDateTime(dtKeyFieldMain.Rows[0]["BookingDate"]));
                        bookHDRInfo.Currency = currencyCode;
                        bookHDRInfo.CurrencyPaid = currencyCode;
                        bookHDRInfo.ExchangeRate = exchangeRate;

                        if (change == true) bookHDRInfo.STDDate = stdDate;

                        string GroupName = "AA";
                        //GeneralControl objGeneral = new GeneralControl();
                        //string GroupName = objGeneral.getOPTGroupByCarrierCode(lstBookingTransDetail[0].CarrierCode);

                        PaymentControl objPayment = new PaymentControl();
                        string Scheme = objPayment.GetScheme(bookHDRInfo.STDDate, bookHDRInfo.BookingDate, GroupName, TransID);
                        objSQL.AddField("SchemeCode", Scheme, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                        PaymentInfo paymentInfo = new PaymentInfo();
                        paymentInfo = objPayment.GetPaymentScheme(Scheme, "AA", TransID);

                        if (paymentInfo.Code_1 == "DOB")
                        {
                            bookHDRInfo.PaymentDateEx1 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_1);
                            bookHDRInfo.ExpiryDate = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_1);
                        }
                        else if (paymentInfo.Code_1 == "STD")
                        {
                            bookHDRInfo.PaymentDateEx1 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_1);
                            bookHDRInfo.ExpiryDate = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_1);
                        }
                        if (paymentInfo.Code_2 == "DOB")
                        {
                            bookHDRInfo.PaymentDateEx2 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_2);
                        }
                        else if (paymentInfo.Code_2 == "STD")
                        {
                            bookHDRInfo.PaymentDateEx2 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_2);
                        }
                        if (paymentInfo.Code_3 == "DOB")
                        {
                            bookHDRInfo.PaymentDateEx3 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_3);
                        }
                        else if (paymentInfo.Code_3 == "STD")
                        {
                            bookHDRInfo.PaymentDateEx3 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_3);
                        }
                        bookHDRInfo.CurReminderDate = bookHDRInfo.ExpiryDate.Date.AddDays(-5);
                    }

                    if (listBookingDetail != null && bookTransTenderInfo != null)
                    {
                        if (UpdateAllTransactionDetails(bookHDRInfo, listBookingJourney, listBookTransTenderInfo, ABS.Logic.GroupBooking.Booking.BookingControl.EnumSaveType.Update) == false)
                        {
                            return false; // transaction failed
                        }
                        else
                        {
                            return true;
                        }
                    }
                    else
                    {
                        return false;
                    }
                    #endregion
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        //save to database
        public Boolean UpdateAllTransactionDetails(BookingTransactionMain BookingTransMain, List<BookingTransactionDetail> lstBookingTransDetail, List<BookingTransTender> lstBookingTransTender, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;

            DateTime nextDueDate = DateTime.Now;
            Decimal nextDueAmount = 0;

            ArrayList ListRecordLocator = new ArrayList();
            ArrayList ListCollectedAmount = new ArrayList();
            ArrayList ListLineTotal = new ArrayList();
            ArrayList ListLineFee = new ArrayList();
            ArrayList ListNextDueDate = new ArrayList();
            ArrayList ListNextDueAmount = new ArrayList();


            //added by diana 20131112 - get payment extension
            DateTime paymentExtensionDate = DateTime.Now;
            Boolean extendPayment = false;
            if (BookingTransMain != null)
            {
                extendPayment = GetPaymentExtensionDate(BookingTransMain.TransID, ref paymentExtensionDate);
            }
            //end added by diana 20131112 - get payment extension

            try
            {
                if (BookingTransMain != null && lstBookingTransDetail != null)
                {
                    //from here
                    decimal totalCollectedAmount = 0;
                    decimal totalLineTotal = 0;
                    decimal totalLineFee = 0;

                    //amended by diana 20131106 - to get lowest expirydate

                    nextDueDate = BookingTransMain.BookingDate;
                    DateTime ExpiryDate = BookingTransMain.ExpiryDate;
                    DateTime LowestExpiryDate = BookingTransMain.ExpiryDate;

                    //added by diana 20140121 - to store GroupName
                    int cnt = 0;
                    string GroupName = "";

                    foreach (BookingTransactionDetail pBookingTransDetail in lstBookingTransDetail)
                    {
                        //added by diana 20140121 - store first segement GroupName
                        if (cnt == 0)
                        {
                            GeneralControl objGeneral = new GeneralControl();
                            GroupName = objGeneral.getOPTGroupByCarrierCode(pBookingTransDetail.CarrierCode);
                        }
                        cnt += 1;

                        if (ListRecordLocator.IndexOf(pBookingTransDetail.RecordLocator) < 0)
                        {
                            ListRecordLocator.Add(pBookingTransDetail.RecordLocator);
                            ListCollectedAmount.Add(pBookingTransDetail.CollectedAmount);
                            ListLineTotal.Add(pBookingTransDetail.LineTotal);
                            ListLineFee.Add(pBookingTransDetail.LineFee);
                            ListNextDueDate.Add(pBookingTransDetail.NextDueDate);
                            ListNextDueAmount.Add(pBookingTransDetail.NextDueAmount);
                        }
                        else
                        {
                            int index = ListRecordLocator.IndexOf(pBookingTransDetail.RecordLocator);
                            ListCollectedAmount[index] = (decimal)ListCollectedAmount[index] + (decimal)pBookingTransDetail.CollectedAmount;
                            ListLineTotal[index] = (decimal)ListLineTotal[index] + (decimal)pBookingTransDetail.LineTotal;
                            ListLineFee[index] = (decimal)ListLineFee[index] + (decimal)pBookingTransDetail.LineFee;
                            ListNextDueDate[index] = pBookingTransDetail.NextDueDate;
                            ListNextDueAmount[index] = pBookingTransDetail.NextDueAmount;
                        }
                    }


                    int indexDetail = 0;
                    bool firstRecord = true;
                    foreach (string detailList in ListRecordLocator)
                    {
                        //added by ketee, passing in existing expiry date for validation , 20160223
                        ExpiryDate = (DateTime)ListNextDueDate[indexDetail];
                        nextDueAmount = GetNextAmount_Date_Due(BookingTransMain.TransID, detailList, GroupName, BookingTransMain.PayScheme, 1, (decimal)ListCollectedAmount[indexDetail], (decimal)ListLineTotal[indexDetail] - (decimal)ListCollectedAmount[indexDetail], (decimal)ListLineFee[indexDetail], (decimal)ListLineTotal[indexDetail], BookingTransMain.STDDate, BookingTransMain.BookingDate, ref ExpiryDate);
                        int indexPNR = ListRecordLocator.IndexOf(detailList);
                        ListNextDueDate[indexPNR] = ExpiryDate;
                        ListNextDueAmount[indexPNR] = nextDueAmount;

                        indexDetail += 1;

                        if (detailList.ToString().Trim().Length >= 6)
                        {
                            //remark by ketee and replace with just check expiry date
                            if (ExpiryDate.Date < LowestExpiryDate.Date)
                                LowestExpiryDate = ExpiryDate;
                            //if (firstRecord)
                            //{
                            //    LowestExpiryDate = ExpiryDate;
                            //    firstRecord = false;
                            //}
                            //else if (ExpiryDate.Date < LowestExpiryDate.Date)
                            //    LowestExpiryDate = ExpiryDate;
                        }
                    }

                    ExpiryDate = LowestExpiryDate;

                    //amended by dianaa 20131112 - check for extension
                    if (extendPayment)
                    {
                        if (ExpiryDate < paymentExtensionDate)
                        {
                            ExpiryDate = paymentExtensionDate;
                        }
                    }
                    //end amended by dianaa 20131112 - check for extension

                    if (BookingTransMain.TransStatus == 1 && BookingTransMain.PayScheme == "W1W")
                    {
                        nextDueDate = BookingTransMain.STDDate.AddDays(-1);
                        BookingTransMain.ExpiryDate = ExpiryDate;
                        if (BookingTransMain.ExpiryDate.Date.AddDays(-5) > DateTime.Now.Date)
                            BookingTransMain.CurReminderDate = BookingTransMain.ExpiryDate.Date.AddDays(-5);
                        else if (BookingTransMain.ExpiryDate.Date.AddDays(-1) > DateTime.Now.Date)
                            BookingTransMain.CurReminderDate = BookingTransMain.ExpiryDate.Date.AddDays(-1);
                        else
                            BookingTransMain.CurReminderDate = BookingTransMain.ExpiryDate.Date;
                    }
                    else
                    {
                        nextDueDate = ExpiryDate;
                        BookingTransMain.ExpiryDate = ExpiryDate;
                        BookingTransMain.CurReminderDate = BookingTransMain.ExpiryDate.Date.AddDays(-5);
                    }
                    //to here
                }

                if (BookingTransMain != null)
                {
                    objSQL.AddField("TransID", BookingTransMain.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransType", BookingTransMain.TransType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("AgentID", BookingTransMain.AgentID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("AgentCatgID", BookingTransMain.AgentCatgID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("BookingDate", BookingTransMain.BookingDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDateEx1", BookingTransMain.PaymentDateEx1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentAmtEx1", BookingTransMain.PaymentAmtEx1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDateEx2", BookingTransMain.PaymentDateEx2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentAmtEx2", BookingTransMain.PaymentAmtEx2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDateEx3", BookingTransMain.PaymentDateEx3, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentAmtEx3", BookingTransMain.PaymentAmtEx3, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PaymentDate", BookingTransMain.PaymentDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    if (BookingTransMain.TransStatus <= 2)
                        objSQL.AddField("ExpiryDate", BookingTransMain.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("STDDate", BookingTransMain.STDDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("Currency", BookingTransMain.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CurrencyPaid", BookingTransMain.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CollectedAmt", BookingTransMain.CollectedAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TotalAmtAVG", BookingTransMain.TotalAmtAVG, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TotalAmtGoing", BookingTransMain.TotalAmtGoing, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TotalAmtReturn", BookingTransMain.TotalAmtReturn, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransSubTotal", BookingTransMain.TransSubTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalAmt", BookingTransMain.TransTotalAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalFee", BookingTransMain.TransTotalFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalTax", BookingTransMain.TransTotalTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalPaxFee", BookingTransMain.TransTotalPaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalOth", BookingTransMain.TransTotalOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalSSR", BookingTransMain.TransTotalSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalDisc", BookingTransMain.TransTotalDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalPromoDisc", BookingTransMain.TransTotalPromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalPAX", BookingTransMain.TransTotalPAX, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalSeat", BookingTransMain.TransTotalSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalNameChange", BookingTransMain.TransTotalNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalProcess", BookingTransMain.TransTotalProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransTotalInfant", BookingTransMain.TransTotalInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransRemark2", BookingTransMain.TransRemark2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                    objSQL.AddField("Posted", BookingTransMain.Posted, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("CreateBy", BookingTransMain.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncCreate", BookingTransMain.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("SyncLastUpd", BookingTransMain.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("LastSyncBy", BookingTransMain.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                    if (BookingTransMain.TransStatus <= 2)
                        objSQL.AddField("CurReminderDate", BookingTransMain.CurReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("NextReminderDate", BookingTransMain.NextReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("ReminderType", BookingTransMain.ReminderType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("PromoCode", BookingTransMain.PromoCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                    //added by diana 20131030 - check whether booking is expired or not
                    if (BookingTransMain.ExpiryDate.Date < DateTime.Now.Date && (BookingTransMain.TransStatus == 1 || BookingTransMain.TransStatus == 2))
                    {
                        BookingTransMain.TransStatus += 5;
                        BookingTransMain.TransRemark1 = "AUTO CANCEL PROCESS";
                        BookingTransMain.CancelDate = DateTime.Now;
                    }
                    //end added by diana 20131030

                    objSQL.AddField("CancelDate", BookingTransMain.CancelDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                    objSQL.AddField("TransRemark1", BookingTransMain.TransRemark1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                    objSQL.AddField("TransStatus", BookingTransMain.TransStatus, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                    //objSQL.AddField("Currency", BookingTransMain.Currency, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    //objSQL.AddField("CurrencyPaid", BookingTransMain.Currency, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                    //objSQL.AddField("ExchangeRate", BookingTransMain.ExchangeRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                    switch (saveType)
                    {
                        case EnumSaveType.Insert:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSMAIN", string.Empty);
                            break;
                        case EnumSaveType.Update:
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSMAIN", "BK_TRANSMAIN.TransID='" + BookingTransMain.TransID + "'");
                            break;
                    }
                    lstSQL.Add(strSQL);
                }

                if (lstBookingTransDetail != null)
                {
                    foreach (BookingTransactionDetail pBookingTransDetail in lstBookingTransDetail)
                    {
                        //added by diana 20131029 - update transvoid to 1 if booking status is cancel
                        pBookingTransDetail.TransVoid = 0;
                        if (BookingTransMain != null)
                        {
                            if (BookingTransMain.TransStatus >= 4) pBookingTransDetail.TransVoid = 1;
                        }
                        //end added by diana 20131029

                        //added byd diana 20131106 - update expirydate
                        if (BookingTransMain.TransStatus == 1 && BookingTransMain.PayScheme == "W1W")
                        {
                            pBookingTransDetail.NextDueDate = BookingTransMain.STDDate.AddDays(-1);
                        }
                        else
                        {
                            int indexPNR = ListRecordLocator.IndexOf(pBookingTransDetail.RecordLocator);
                            if (indexPNR >= 0)
                            {
                                pBookingTransDetail.NextDueDate = (DateTime)ListNextDueDate[indexPNR];
                                pBookingTransDetail.NextDueAmount = (decimal)ListNextDueAmount[indexPNR];
                                objSQL.AddField("NextDueAmount", pBookingTransDetail.NextDueAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            }
                        }
                        //end added by diana 20131106

                        //amended by dianaa 20131112 - check for extension
                        if (extendPayment)
                        {
                            if (pBookingTransDetail.NextDueDate < paymentExtensionDate)
                            {
                                pBookingTransDetail.NextDueDate = paymentExtensionDate;
                            }
                        }
                        //end amended by dianaa 20131112 - check for extension

                        objSQL.AddField("RecordLocator", pBookingTransDetail.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransID", pBookingTransDetail.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SeqNo", pBookingTransDetail.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CarrierCode", pBookingTransDetail.CarrierCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightNo", pBookingTransDetail.FlightNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DepartureDate", pBookingTransDetail.DepatureDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DepartureDate2", pBookingTransDetail.DepatureDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightDura", pBookingTransDetail.FlightDura, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightDura2", pBookingTransDetail.FlightDura2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Origin", pBookingTransDetail.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Transit", pBookingTransDetail.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Destination", pBookingTransDetail.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ArrivalDate", pBookingTransDetail.ArrivalDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ArrivalDate2", pBookingTransDetail.ArrivalDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FareClass", pBookingTransDetail.FareClass, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FarePerPax", pBookingTransDetail.FarePerPax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineTotal", pBookingTransDetail.LineTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineTax", pBookingTransDetail.LineTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LinePaxFee", pBookingTransDetail.LinePaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineFee", pBookingTransDetail.LineFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineOth", pBookingTransDetail.LineOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineProcess", pBookingTransDetail.LineProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineSSR", pBookingTransDetail.LineSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineSeat", pBookingTransDetail.LineSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineNameChange", pBookingTransDetail.LineNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineInfant", pBookingTransDetail.LineInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineDisc", pBookingTransDetail.LineDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LinePromoDisc", pBookingTransDetail.LinePromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("AttemptCount", pBookingTransDetail.AttemptCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Currency", pBookingTransDetail.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaxAdult", pBookingTransDetail.PaxAdult, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaxChild", pBookingTransDetail.PaxChild, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransVoid", pBookingTransDetail.TransVoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CreateBy", pBookingTransDetail.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncCreate", pBookingTransDetail.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncLastUpd", pBookingTransDetail.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LastSyncBy", pBookingTransDetail.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DetailCollectedAmt", pBookingTransDetail.CollectedAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                        objSQL.AddField("NextDueDate", pBookingTransDetail.NextDueDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);

                        objSQL.AddField("SellKey", pBookingTransDetail.Signature, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                        switch (saveType)
                        {
                            case EnumSaveType.Insert:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSDTL", string.Empty);
                                break;
                            /*
                            case EnumSaveType.Update:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.RecordLocator='" + pBookingTransDetail.RecordLocator + "' AND BK_TRANSDTL.TransID='" + pBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBookingTransDetail.SeqNo + "'");
                                break;*/
                            case EnumSaveType.Update:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.TransID='" + pBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBookingTransDetail.SeqNo + "'");
                                break;
                        }
                        lstSQL.Add(strSQL);
                    }
                }

                if (lstBookingTransTender != null)
                {
                    foreach (BookingTransTender BookingTransTender in lstBookingTransTender)
                    {
                        //added by diana 20131029 - update transvoid to 1 if booking status is cancel
                        //BookingTransTender.Transvoid = 0;
                        //if (BookingTransMain != null)
                        //{
                        //    if (BookingTransMain.TransStatus >= 4) BookingTransTender.Transvoid = 1;
                        //}
                        //end added by diana 20131029

                        objSQL.AddField("TransID", BookingTransTender.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SeqNo", BookingTransTender.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransDate", BookingTransTender.TransDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Currency", BookingTransTender.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CurrencyPaid", BookingTransTender.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TenderID", BookingTransTender.TenderID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeType", BookingTransTender.FeeType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TenderAmt", BookingTransTender.TenderAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TenderDue", BookingTransTender.TenderDue, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FeeAmt", BookingTransTender.FeeAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PayAmt", BookingTransTender.PayAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Transvoid", BookingTransTender.Transvoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncCreate", BookingTransTender.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("RefNo", BookingTransTender.RefNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("AuthorizationCode", BookingTransTender.AuthorizationCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("MerchantID", BookingTransTender.MerchantID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CreateBy", BookingTransTender.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        //added by ketee, 20121028
                        objSQL.AddField("RecordLocator", BookingTransTender.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        if (BookingTransTender.CommandType == "insert")
                        {
                            objSQL.AddField("ExchgRate", BookingTransTender.ExchgRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        }

                        if (BookingTransTender.CommandType == "insert")
                        {
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSTENDER", string.Empty);
                        }
                        else
                        {
                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSTENDER", "TransID='" + BookingTransTender.TransID + "' AND SeqNo=" + BookingTransTender.SeqNo + " AND RecordLocator='" + BookingTransTender.RecordLocator + "'");
                        }

                        lstSQL.Add(strSQL);
                    }
                }
                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                if (rValue == false)
                {
                    return false;
                }

                //commented by diana - will be used later
                //added by diana 20131114 - to cancel journey for transtatus >= 4
                //if (BookingTransMain.TransStatus >= 4)
                //{
                //    ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");
                //    foreach (BookingTransactionDetail pBookingTransDetail in lstBookingTransDetail)
                //    {
                //        string signature = apiBooking.AgentLogon();
                //        string errMessage = "";
                //        apiBooking.CancelJourney(pBookingTransDetail.RecordLocator, -pBookingTransDetail.CollectedAmount, pBookingTransDetail.Currency, signature, ref errMessage); //cancel journey to api
                //    }
                //}
                //return GetSingleBK_TRANSMAIN(BookingTransMain.TransID, BookingTransMain.TransType, BookingTransMain.AgentID, BookingTransMain.AgentCatgID, BookingTransMain.BookingDate);
                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        //grabbing journey and payment details
        public Boolean GetJourneyAndPaymentDetails(string PNR, string TransID)
        {
            List<BookingJourneyContainer> lstBookingJourneyContainer = new List<BookingJourneyContainer>();
            List<PaymentContainer> lstPaymentContainer = new List<PaymentContainer>();

            try
            {
                string errMsg = "";

                Navitaire.APIBooking ApiBook = new Navitaire.APIBooking("");
                Navitaire.BookingManager.GetBookingResponse Response = new Navitaire.BookingManager.GetBookingResponse();
                //log.Info(this,"Object ApiBook created - PNR : " + PNR);
                Response = ApiBook.GetBookingResponseByPNR(PNR);
                //string resp = GetXMLString(Response);
                //log.Info(this,"Response retrieve - PNR : " + PNR);
                if (Response != null)
                {
                    if (Response.Booking == null || Response.Booking.Journeys.Length <= 0)
                    {
                        //ABS.Navitaire.APIBooking absNavitaire = new ABS.Navitaire.APIBooking("");
                        //Navitaire.BookingManager.Booking booking = absNavitaire.GetBookingFromState(SignatureKey[i].ToString());
                        //booking = GetBookingFromState(SellKey);
                        //if (booking != null)
                        //{

                        //}
                        //else
                        //{
                        log.Info(this, "GetJourneyAndPaymentDetails - Booking status is pending. PNR:" + PNR + ", TransactionID:" + TransID);
                        return false;
                        //}
                    }

                    //begin get booking journey details
                    #region getBookingJourneyDetails
                    int paxADT = 0, paxCHD = 0;
                    decimal serviceFee = 0;
                    decimal vatFee = 0;
                    decimal chargeFee = 0;
                    decimal otherFee = 0;
                    decimal processFee = 0;
                    decimal nameChangeFee = 0;
                    decimal splFee = 0;
                    decimal ssrFee1 = 0; //going
                    decimal ssrFee2 = 0; //return
                    decimal seatFee1 = 0; //going
                    decimal seatFee2 = 0; //return
                    decimal infantFee1 = 0; //going
                    decimal infantFee2 = 0; //return
                    string feeCode = "";
                    decimal feeAmount = 0;
                    decimal discFee = 0;
                    decimal promoDiscFee = 0;
                    string feeChargeType = "";

                    //retrieve arrival, departure
                    string Departure = "", Arrival = "", TransitDepart = "", TransitReturn = "";
                    for (int j = 0; j < Response.Booking.Journeys.Length; j++)
                    {
                        for (int k = 0; k < Response.Booking.Journeys[j].Segments.Length; k++)
                        {
                            switch (j)
                            {
                                case 0:
                                    if (k == 0)
                                    {
                                        Departure = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        Arrival = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                    }
                                    else if (k == 1)
                                    {
                                        TransitDepart = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        Arrival = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                    }
                                    break;
                                case 1:
                                    if (k == 0)
                                    {
                                        Arrival = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                    }
                                    else if (k == 1)
                                    {
                                        TransitReturn = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                    }
                                    break;
                                default:
                                    break;

                            }
                        }
                    }

                    foreach (Passenger itemPassenger in Response.Booking.Passengers)
                    {
                        if (itemPassenger.PassengerTypeInfos[0].PaxType == "ADT")
                        {
                            paxADT++;
                        }
                        else
                        {
                            paxCHD++;
                        }

                        foreach (PassengerFee itemPassengerFee in itemPassenger.PassengerFees)
                        {
                            foreach (BookingServiceCharge itemServiceCharge in itemPassengerFee.ServiceCharges)
                            {
                                feeCode = itemServiceCharge.ChargeCode;
                                feeAmount = itemServiceCharge.Amount;
                                feeChargeType = itemServiceCharge.ChargeType.ToString();

                                if (feeChargeType.ToUpper() == "DISCOUNT")
                                {
                                    discFee -= feeAmount;
                                }
                                else if (feeChargeType.ToUpper() == "PROMOTIONDISCOUNT")
                                {
                                    promoDiscFee -= feeAmount;
                                }
                                else if (itemPassengerFee.FeeType == FeeType.SSRFee)
                                {
                                    if (feeChargeType.ToUpper() == "DISCOUNT")
                                    {
                                        feeAmount = 0 - feeAmount;
                                    }
                                    if (itemPassengerFee.FlightReference != "")
                                    {
                                        if (itemPassengerFee.FlightReference.Substring(16, 6) == Departure + Arrival || itemPassengerFee.FlightReference.Substring(16, 6) == Departure + TransitDepart || itemPassengerFee.FlightReference.Substring(16, 6) == TransitDepart + Arrival)
                                        {
                                            if (feeCode == "INFT")
                                                infantFee1 += feeAmount;
                                            else
                                                ssrFee1 += feeAmount;
                                        }
                                        else if (itemPassengerFee.FlightReference.Substring(16, 6) == Arrival + Departure || itemPassengerFee.FlightReference.Substring(16, 6) == TransitReturn + Departure || itemPassengerFee.FlightReference.Substring(16, 6) == Arrival + TransitReturn)
                                        {
                                            if (feeCode == "INFT")
                                                infantFee2 += feeAmount;
                                            else
                                                ssrFee2 += feeAmount;
                                        }
                                    }
                                }
                                else if (itemPassengerFee.FeeType == FeeType.SeatFee)
                                {
                                    if (feeChargeType.ToUpper() == "DISCOUNT")
                                    {
                                        feeAmount = 0 - feeAmount;
                                    }
                                    if (itemPassengerFee.FlightReference != "")
                                    {
                                        if (itemPassengerFee.FlightReference.Substring(16, 6) == Departure + Arrival || itemPassengerFee.FlightReference.Substring(16, 6) == Departure + TransitDepart || itemPassengerFee.FlightReference.Substring(16, 6) == TransitDepart + Arrival)
                                            seatFee1 += feeAmount;
                                        else if (itemPassengerFee.FlightReference.Substring(16, 6) == Arrival + Departure || itemPassengerFee.FlightReference.Substring(16, 6) == TransitReturn + Departure || itemPassengerFee.FlightReference.Substring(16, 6) == Arrival + TransitReturn)
                                            seatFee2 += feeAmount;
                                    }
                                }
                                else if (itemPassengerFee.FeeType == FeeType.PaymentFee)
                                {
                                    if (feeChargeType.ToUpper() == "DISCOUNT")
                                    {
                                        feeAmount = 0 - feeAmount;
                                    }
                                    processFee += feeAmount;
                                }
                                else if (itemPassengerFee.FeeCode == "NCF")
                                {
                                    if (feeChargeType.ToUpper() == "DISCOUNT")
                                    {
                                        feeAmount = 0 - feeAmount;
                                    }
                                    nameChangeFee += feeAmount;
                                }
                                else
                                {
                                    switch (feeCode)
                                    {
                                        case "SVCF":
                                            serviceFee += feeAmount;
                                            break;
                                        case "VAT":
                                            vatFee += feeAmount;
                                            break;
                                        case "CHG":
                                            chargeFee += feeAmount;
                                            break;
                                        case "SPL":
                                            splFee += feeAmount;
                                            break;
                                        //case "NCF":
                                        //    nameChangeFee += feeAmount;
                                        //    break;
                                        //case "CONA":
                                        //    processFee += feeAmount;
                                        //    break;
                                        default:
                                            otherFee += feeAmount;
                                            break;
                                    }
                                }
                            }
                        }
                    }

                    //load journey
                    BookingJourneyContainer bookingJourneyContainer = new BookingJourneyContainer();
                    for (int j = 0; j < Response.Booking.Journeys.Length; j++)
                    {
                        bookingJourneyContainer = new BookingJourneyContainer();
                        for (int k = 0; k < Response.Booking.Journeys[j].Segments.Length; k++)
                        {
                            switch (j)
                            {
                                case 0:
                                    if (k == 0)
                                    {
                                        for (int m = 0; m < Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares.Length; m++)
                                        {
                                            if (Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].PaxType == "ADT")
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.AdtFarePrice = charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.AdtDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.AdtPromoDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.AdtTaxChrg = charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.AdtFuelChrg = charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg = charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.AdtFarePrice = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.AdtTaxChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.AdtFuelChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.AdtServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                            else
                                            {
                                                int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                if (length > 0) bookingJourneyContainer.ChdFarePrice = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                if (length > 1) bookingJourneyContainer.ChdTaxChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                if (length > 2) bookingJourneyContainer.ChdFuelChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                if (length > 3)
                                                {
                                                    for (int c = 3; c < length; c++)
                                                    {
                                                        bookingJourneyContainer.ChdServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                    }
                                                }
                                            }
                                        }
                                        //int serviceCharge = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges.Length; // 1
                                        //string paxType = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].PaxType; // ADT
                                        //string currencyCode = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges[0].CurrencyCode; // MYR
                                        //decimal amount = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges[0].Amount; // 90
                                        //string chargeDetail = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges[0].ChargeDetail; // blank
                                        //string foreignCurrencyCode = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges[0].ForeignCurrencyCode; // MYR
                                        //decimal foreignAmount = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges[0].ForeignAmount; // 90

                                        bookingJourneyContainer.CarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                        bookingJourneyContainer.FlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                        bookingJourneyContainer.STA = Response.Booking.Journeys[j].Segments[k].STA;
                                        bookingJourneyContainer.STD = Response.Booking.Journeys[j].Segments[k].STD;
                                        bookingJourneyContainer.Flag = (byte)Response.Booking.Journeys[j].Segments[k].Fares[0].FareSequence;
                                        bookingJourneyContainer.FareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                        bookingJourneyContainer.FareClass = Response.Booking.Journeys[j].Segments[k].Fares[0].FareClassOfService;
                                        bookingJourneyContainer.ArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                        bookingJourneyContainer.DepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        bookingJourneyContainer.OpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                        bookingJourneyContainer.EquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType;
                                        bookingJourneyContainer.FlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                        bookingJourneyContainer.ServiceFee = serviceFee;
                                        bookingJourneyContainer.VATFee = vatFee;
                                        bookingJourneyContainer.ChargeFee = chargeFee;
                                        bookingJourneyContainer.SPLFee = splFee;
                                        bookingJourneyContainer.SSRChrg = ssrFee1;
                                        bookingJourneyContainer.SeatChrg = seatFee1;
                                        bookingJourneyContainer.InfantChrg = infantFee1;
                                        bookingJourneyContainer.OtherFee = otherFee;
                                        bookingJourneyContainer.ProcessFee = processFee;
                                        bookingJourneyContainer.DiscFee = discFee;
                                        bookingJourneyContainer.PromoDiscFee = promoDiscFee;
                                        bookingJourneyContainer.NameChangeChrg = nameChangeFee;
                                    }
                                    if (k == 1)
                                    {
                                        for (int m = 0; m < Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares.Length; m++)
                                        {
                                            if (Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].PaxType == "ADT")
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.AdtFarePrice = charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.AdtDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.AdtPromoDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.AdtTaxChrg = charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.AdtFuelChrg = charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg = charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.AdtFarePrice += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.AdtTaxChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.AdtFuelChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.AdtServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                            else
                                            {
                                                int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                if (length > 0) bookingJourneyContainer.ChdFarePrice += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                if (length > 1) bookingJourneyContainer.ChdTaxChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                if (length > 2) bookingJourneyContainer.ChdFuelChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                if (length > 3)
                                                {
                                                    for (int c = 3; c < length; c++)
                                                    {
                                                        bookingJourneyContainer.ChdServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                    }
                                                }
                                            }
                                        }
                                        bookingJourneyContainer.OverridedCarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                        bookingJourneyContainer.OverridedFlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                        bookingJourneyContainer.OverridedSTA = Response.Booking.Journeys[j].Segments[k].STA;
                                        bookingJourneyContainer.OverridedSTD = Response.Booking.Journeys[j].Segments[k].STD;
                                        bookingJourneyContainer.OverridedFareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                        bookingJourneyContainer.OverridedFareClass = Response.Booking.Journeys[j].Segments[k].Fares[0].FareClassOfService;
                                        bookingJourneyContainer.OverridedArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                        bookingJourneyContainer.OverridedDepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        bookingJourneyContainer.OverridedOpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                        bookingJourneyContainer.OverridedEquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType;
                                        bookingJourneyContainer.OverridedFlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                    }
                                    break;
                                case 1:
                                    if (k == 0)
                                    {
                                        for (int m = 0; m < Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares.Length; m++)
                                        {
                                            if (Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].PaxType == "ADT")
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.AdtFarePrice = charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.AdtDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.AdtPromoDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.AdtTaxChrg = charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.AdtFuelChrg = charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg = charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.AdtFarePrice = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.AdtTaxChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.AdtFuelChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.AdtServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                            else
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.ChdFarePrice = charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.ChdDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.ChdPromoDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.ChdTaxChrg = charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.ChdFuelChrg = charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg = charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.ChdServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.ChdServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.ChdFarePrice = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.ChdTaxChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.ChdFuelChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.ChdServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                        }

                                        //int cntPaxFare = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares.Length; // 1
                                        //int serviceCharge = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges.Length; // 1
                                        //string paxType = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].PaxType; // ADT
                                        //string currencyCode = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges[0].CurrencyCode; // MYR
                                        //decimal amount = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges[0].Amount; // 90
                                        //string chargeDetail = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges[0].ChargeDetail; // blank
                                        //string foreignCurrencyCode = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges[0].ForeignCurrencyCode; // MYR
                                        //decimal foreignAmount = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[0].ServiceCharges[0].ForeignAmount; // 90

                                        bookingJourneyContainer.CarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                        bookingJourneyContainer.FlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                        bookingJourneyContainer.STA = Response.Booking.Journeys[j].Segments[k].STA;
                                        bookingJourneyContainer.STD = Response.Booking.Journeys[j].Segments[k].STD;
                                        bookingJourneyContainer.Flag = (byte)Response.Booking.Journeys[j].Segments[k].Fares[0].FareSequence;
                                        bookingJourneyContainer.FareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                        bookingJourneyContainer.FareClass = Response.Booking.Journeys[j].Segments[k].Fares[0].FareClassOfService;
                                        bookingJourneyContainer.ArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                        bookingJourneyContainer.DepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        bookingJourneyContainer.OpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                        bookingJourneyContainer.EquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType;
                                        bookingJourneyContainer.FlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                        bookingJourneyContainer.ServiceFee = 0;
                                        bookingJourneyContainer.VATFee = 0;
                                        bookingJourneyContainer.ChargeFee = 0;
                                        bookingJourneyContainer.SPLFee = 0;
                                        bookingJourneyContainer.OtherFee = 0;
                                        bookingJourneyContainer.SSRChrg = ssrFee2;
                                        bookingJourneyContainer.SeatChrg = seatFee2;
                                        bookingJourneyContainer.InfantChrg = infantFee2;
                                        bookingJourneyContainer.ProcessFee = 0;
                                        bookingJourneyContainer.DiscFee = 0;
                                        bookingJourneyContainer.PromoDiscFee = 0;
                                        bookingJourneyContainer.NameChangeChrg = 0;
                                    }
                                    if (k == 1)
                                    {
                                        for (int m = 0; m < Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares.Length; m++)
                                        {
                                            if (Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].PaxType == "ADT")
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.AdtFarePrice += charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.AdtDiscChrg -= charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.AdtPromoDiscChrg -= charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.AdtTaxChrg += charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.AdtFuelChrg += charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg += charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.AdtFarePrice += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.AdtTaxChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.AdtFuelChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3) bookingJourneyContainer.AdtServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[3].Amount;
                                            }
                                            else
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.ChdFarePrice += charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.ChdDiscChrg -= charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.ChdPromoDiscChrg -= charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.ChdTaxChrg += charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.ChdFuelChrg += charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg += charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.ChdServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.ChdServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.ChdFarePrice += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.ChdTaxChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.ChdFuelChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3) bookingJourneyContainer.ChdServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[3].Amount;
                                            }
                                        }
                                        bookingJourneyContainer.OverridedCarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                        bookingJourneyContainer.OverridedFlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                        bookingJourneyContainer.OverridedSTA = Response.Booking.Journeys[j].Segments[k].STA;
                                        bookingJourneyContainer.OverridedSTD = Response.Booking.Journeys[j].Segments[k].STD;
                                        bookingJourneyContainer.OverridedFareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                        bookingJourneyContainer.OverridedFareClass = Response.Booking.Journeys[j].Segments[k].Fares[0].FareClassOfService;
                                        bookingJourneyContainer.OverridedArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                        bookingJourneyContainer.OverridedDepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        bookingJourneyContainer.OverridedOpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                        bookingJourneyContainer.OverridedEquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType;
                                        bookingJourneyContainer.OverridedFlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                    }
                                    break;
                            }
                        }
                        //load booking Journey
                        bookingJourneyContainer.RecordLocator = Response.Booking.RecordLocator;
                        bookingJourneyContainer.BookingID = Response.Booking.BookingID;
                        bookingJourneyContainer.JourneySellKey = Response.Booking.Journeys[j].JourneySellKey;

                        //check duration

                        bookingJourneyContainer.CurrencyCode = Response.Booking.CurrencyCode;
                        ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");

                        string SellSessionID = apiBooking.AgentLogon();

                        Navitaire.UtilitiesManager.GetExternalRatesListResponseData RateResponse = apiBooking.GetExternalRateList(SellSessionID);
                        //string req = GetXMLString(RateResponse);
                        string curr = bookingJourneyContainer.CurrencyCode;
                        decimal currRate = 1;
                        if (curr != "MYR")
                        {
                            for (int i = 0; i < RateResponse.ExternalRateList.Length; i++)
                            {
                                if (RateResponse.ExternalRateList[i].QuotedCurrency == curr && RateResponse.ExternalRateList[i].CollectedCurrency == "MYR")
                                {
                                    currRate = RateResponse.ExternalRateList[i].ExchangeRate;
                                }
                            }
                        }
                        bookingJourneyContainer.ExchangeRate = currRate;
                        bookingJourneyContainer.AdtPax = paxADT;
                        bookingJourneyContainer.ChdPax = paxCHD;

                        if (lstBookingJourneyContainer.FindIndex(item => item.JourneySellKey == bookingJourneyContainer.JourneySellKey) < 0)
                            lstBookingJourneyContainer.Add(bookingJourneyContainer);

                        //int a = lstBookingJourneyContainer.FindIndex(item => item.JourneySellKey == bookingJourneyContainer.JourneySellKey);
                        //    lstBookingJourneyContainer.Add(bookingJourneyContainer);
                    }

                    HttpContext.Current.Session.Remove("BookingJourneyContainers");
                    if (lstBookingJourneyContainer != null)
                    {
                        HttpContext.Current.Session.Add("BookingJourneyContainers", lstBookingJourneyContainer);
                    }
                    #endregion
                    //end getting booking journey details

                    //begin getting payment details
                    #region getPaymentDetails
                    PaymentContainer paymentContainer = new PaymentContainer();
                    for (int i = 0; i < Response.Booking.Payments.Length; i++)
                    {
                        paymentContainer = new PaymentContainer();
                        paymentContainer.AuthorizationCode = Response.Booking.Payments[i].AuthorizationCode;
                        paymentContainer.AccountNumber = Response.Booking.Payments[i].AccountNumber;
                        paymentContainer.MerchantID = Response.Booking.Payments[i].PaymentID.ToString();
                        paymentContainer.AccountNumberID = Response.Booking.Payments[i].AccountNumberID;
                        //paymentContainer.CollectedAmount = Response.Booking.Payments[i].CollectedAmount;
                        paymentContainer.CollectedAmount = Response.Booking.Payments[i].PaymentAmount;
                        paymentContainer.CurrencyCode = Response.Booking.Payments[i].CurrencyCode;
                        paymentContainer.PaymentAmount = Response.Booking.Payments[i].PaymentAmount;
                        paymentContainer.PaymentMethodCode = Response.Booking.Payments[i].PaymentMethodCode;
                        paymentContainer.PaymentMethodType = Convert.ToInt32(Response.Booking.Payments[i].PaymentMethodType);
                        paymentContainer.PaymentNumber = Response.Booking.Payments[i].PaymentNumber;
                        paymentContainer.PaymentStatus = Convert.ToInt32(Response.Booking.Payments[i].Status);
                        paymentContainer.PaymentText = Response.Booking.Payments[i].PaymentText; //aded by diana 20170404, to retrieve fee type
                        paymentContainer.PaymentDate = Response.Booking.Payments[i].ApprovalDate;
                        paymentContainer.RecordLocator = PNR;
                        //added by ketee 20130625
                        //Get Currecy Rate List 20130625
                        Navitaire.UtilitiesManager.GetExternalRatesListResponseData RateResponse = ApiBook.GetExternalRateList("");
                        decimal currRate = 1;
                        if (paymentContainer.CurrencyCode != "MYR")
                        {
                            for (int k = 0; k < RateResponse.ExternalRateList.Length; k++)
                            {
                                if (RateResponse.ExternalRateList[k].QuotedCurrency == paymentContainer.CurrencyCode && RateResponse.ExternalRateList[k].CollectedCurrency == "MYR")
                                {
                                    currRate = RateResponse.ExternalRateList[k].ExchangeRate;
                                }
                            }
                        }
                        paymentContainer.CurrencyRate = currRate;

                        lstPaymentContainer.Add(paymentContainer);
                    }

                    HttpContext.Current.Session.Remove("PaymentContainers");
                    if (lstPaymentContainer != null)
                    {
                        HttpContext.Current.Session.Add("PaymentContainers", lstPaymentContainer);
                    }
                    if (lstBookingJourneyContainer != null && lstPaymentContainer != null)
                    {
                        return true;
                    }
                    #endregion
                    //end getting payment details
                }
                return false;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
        }

        //insert into transdetails list
        public void AssignBookingJourneyDetails(string transID, byte seqNo, BookingJourneyContainer bookingJourney, string PNR, string commandType, ref List<BookingTransactionDetail> listBookingJourney)
        {
            BookingTransactionDetail bookDTLInfo = new BookingTransactionDetail();
            bookDTLInfo.TransID = transID;
            bookDTLInfo.RecordLocator = PNR;
            bookDTLInfo.SeqNo = seqNo;
            bookDTLInfo.FareClass = bookingJourney.FareClass;
            bookDTLInfo.FlightNo = bookingJourney.FlightNumber;
            bookDTLInfo.Origin = bookingJourney.DepartureStation;
            bookDTLInfo.Transit = bookingJourney.OverridedDepartureStation;
            bookDTLInfo.Destination = bookingJourney.ArrivalStation;
            bookDTLInfo.DepatureDate = bookingJourney.STD;
            bookDTLInfo.ArrivalDate = bookingJourney.STA;
            bookDTLInfo.DepatureDate2 = bookingJourney.OverridedSTD;
            bookDTLInfo.ArrivalDate2 = bookingJourney.OverridedSTA;
            bookDTLInfo.FlightDura = bookingJourney.FlightDura;
            bookDTLInfo.FlightDura2 = bookingJourney.FlightDura2;
            bookDTLInfo.SellKey = bookingJourney.FareSellKey;
            bookDTLInfo.OverridedSellKey = bookingJourney.OverridedFareSellKey;
            if (bookDTLInfo.Transit != null && bookDTLInfo.Transit != "")
            {
                bookDTLInfo.Destination = bookingJourney.OverridedArrivalStation;
                bookDTLInfo.Transit = bookingJourney.OverridedDepartureStation;
            }

            bookDTLInfo.PaxAdult = bookingJourney.AdtPax;
            bookDTLInfo.PaxChild = bookingJourney.ChdPax;
            if (bookingJourney.AdtFarePrice != 0)
                bookDTLInfo.FarePerPax = bookingJourney.AdtFarePrice;
            else
                bookDTLInfo.FarePerPax = bookingJourney.ChdFarePrice;

            bookDTLInfo.LineTax = (bookingJourney.AdtTaxChrg + bookingJourney.AdtFuelChrg) * bookingJourney.AdtPax + (bookingJourney.ChdTaxChrg + bookingJourney.ChdFuelChrg) * bookingJourney.ChdPax;
            bookDTLInfo.LineDisc = bookingJourney.AdtDiscChrg * bookingJourney.AdtPax + bookingJourney.ChdDiscChrg * bookingJourney.ChdPax;
            bookDTLInfo.LinePromoDisc = bookingJourney.AdtPromoDiscChrg * bookingJourney.AdtPax + bookingJourney.ChdPromoDiscChrg * bookingJourney.ChdPax;
            bookDTLInfo.LineOth = bookingJourney.AdtServChrg * bookingJourney.AdtPax + bookingJourney.ChdServChrg * bookingJourney.ChdPax;
            bookDTLInfo.LinePaxFee = bookingJourney.PaxFeeChrg;
            bookDTLInfo.LineSSR = bookingJourney.SSRChrg;
            bookDTLInfo.LineSeat = bookingJourney.SeatChrg;
            bookDTLInfo.LineNameChange = bookingJourney.NameChangeChrg;
            bookDTLInfo.LineInfant = bookingJourney.InfantChrg;
            //bookDTLInfo.LineFee = bookingJourney.ServiceFee * (bookDTLInfo.PaxAdult + bookDTLInfo.PaxChild);
            //bookDTLInfo.LineVAT = bookingJourney.VATFee * (bookDTLInfo.PaxAdult + bookDTLInfo.PaxChild);
            //bookDTLInfo.LineCharge = bookingJourney.ChargeFee * (bookDTLInfo.PaxAdult + bookDTLInfo.PaxChild);
            //bookDTLInfo.LineOth += bookingJourney.OtherFee * (bookDTLInfo.PaxAdult + bookDTLInfo.PaxChild);
            //bookDTLInfo.LineOth += bookingJourney.SPLFee;

            bookDTLInfo.LineFee = bookingJourney.ServiceFee;
            bookDTLInfo.LineVAT = bookingJourney.VATFee;
            bookDTLInfo.LineCharge = bookingJourney.ChargeFee;
            bookDTLInfo.LineOth += bookingJourney.OtherFee;
            bookDTLInfo.LineOth += bookingJourney.SPLFee;
            bookDTLInfo.LineProcess += bookingJourney.ProcessFee;
            bookDTLInfo.LineDisc += bookingJourney.DiscFee;
            bookDTLInfo.LinePromoDisc += bookingJourney.PromoDiscFee;

            bookDTLInfo.LineTotal = bookDTLInfo.FarePerPax * (bookDTLInfo.PaxAdult + bookDTLInfo.PaxChild) + bookDTLInfo.LineTax + bookDTLInfo.LinePaxFee + bookDTLInfo.LineDisc + bookDTLInfo.LinePromoDisc + bookDTLInfo.LineOth + bookDTLInfo.LineProcess + bookDTLInfo.LineSSR + bookDTLInfo.LineSeat + bookDTLInfo.LineNameChange + bookDTLInfo.LineInfant + bookDTLInfo.LineFee + bookDTLInfo.LineVAT + bookDTLInfo.LineCharge;

            bookDTLInfo.Currency = bookingJourney.CurrencyCode;
            bookDTLInfo.CommandType = commandType;
            listBookingJourney.Add(bookDTLInfo);
        }

        #endregion

        #region BookingSSR
        //public bool SaveSSR(Bk_transssr Bk_transssrCont, EnumSaveType saveType, string message, bool BatchExecute = false, bool Commit = false)
        //{


        //    bool functionReturnValue = false;
        //    string strSQL = "";

        //    functionReturnValue = false;
        //    try
        //    {
        //        if (Bk_transssrCont != null)
        //        {
        //            if (Commit)
        //            {
        //                switch (saveType)
        //                {
        //                    case EnumSaveType.Update:
        //                        string strSQLDelete = "";
        //                        strSQLDelete = "DELETE BK_TRANSSSR WHERE TransID = '" + Bk_transssrCont.TransID + "' AND RecordLocator = '" + Bk_transssrCont.RecordLocator + "'";
        //                        objDCom.Execute(strSQLDelete, DataAccess.EnumRtnType.rtNone, CommandType.Text);
        //                        break;
        //                }

        //            }

        //            if (StartConnection(EnumIsoState.StateUpdatetable) == true)
        //            {
        //                try
        //                {
        //                    StartSQLControl();
        //                    objSQL.AddField("SeqNo", Bk_transssrCont.SeqNo, SQLControl.EnumDataType.dtNumeric);
        //                    objSQL.AddField("SubSeqNo", Bk_transssrCont.SubSeqNo, SQLControl.EnumDataType.dtNumeric);
        //                    objSQL.AddField("SSRQty", Bk_transssrCont.SSRQty, SQLControl.EnumDataType.dtNumeric);
        //                    objSQL.AddField("SSRRate", Bk_transssrCont.SSRRate, SQLControl.EnumDataType.dtNumeric);
        //                    objSQL.AddField("TotAmt1", Bk_transssrCont.TotAmt1, SQLControl.EnumDataType.dtNumeric);
        //                    objSQL.AddField("TotAmt2", Bk_transssrCont.TotAmt2, SQLControl.EnumDataType.dtNumeric);
        //                    objSQL.AddField("TotAmt3", Bk_transssrCont.TotAmt3, SQLControl.EnumDataType.dtNumeric);
        //                    objSQL.AddField("IsOverride", Bk_transssrCont.IsOverride, SQLControl.EnumDataType.dtNumeric);
        //                    objSQL.AddField("TransVoid", Bk_transssrCont.TransVoid, SQLControl.EnumDataType.dtNumeric);
        //                    objSQL.AddField("AttemptCount", Bk_transssrCont.AttemptCount, SQLControl.EnumDataType.dtNumeric);
        //                    //'.AddField("rowguid", Bk_transssrCont.rowguid, SQLControl.EnumDataType.dtString)
        //                    objSQL.AddField("CreateBy", Bk_transssrCont.CreateBy, SQLControl.EnumDataType.dtStringN);
        //                    objSQL.AddField("SyncCreate", Bk_transssrCont.SyncCreate, SQLControl.EnumDataType.dtDateTime);
        //                    objSQL.AddField("SyncLastUpd", Bk_transssrCont.SyncLastUpd, SQLControl.EnumDataType.dtDateTime);
        //                    objSQL.AddField("LastSyncBy", Bk_transssrCont.LastSyncBy, SQLControl.EnumDataType.dtStringN);
        //                    objSQL.AddField("RecordLocator", Bk_transssrCont.RecordLocator, SQLControl.EnumDataType.dtString);
        //                    objSQL.AddField("TransID", Bk_transssrCont.TransID, SQLControl.EnumDataType.dtString);
        //                    objSQL.AddField("CarrierCode", Bk_transssrCont.CarrierCode, SQLControl.EnumDataType.dtString);
        //                    objSQL.AddField("FlightNo", Bk_transssrCont.FlightNo, SQLControl.EnumDataType.dtString);
        //                    objSQL.AddField("Origin", Bk_transssrCont.Origin, SQLControl.EnumDataType.dtString);
        //                    objSQL.AddField("Destination", Bk_transssrCont.Destination, SQLControl.EnumDataType.dtString);
        //                    objSQL.AddField("PassengerID", Bk_transssrCont.PassengerID, SQLControl.EnumDataType.dtString);
        //                    objSQL.AddField("SSRCode", Bk_transssrCont.SSRCode, SQLControl.EnumDataType.dtString);
        //                    switch (saveType)
        //                    {
        //                        case EnumSaveType.Insert:
        //                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSSSR", string.Empty);
        //                            break;
        //                        case EnumSaveType.Update:
        //                            strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSSSR", string.Empty);
        //                            break;
        //                        //strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSSSR", "BK_TRANSSSR.TransID='" + Bk_transssrCont.TransID + "' AND PassengerID = '" + Bk_transssrCont.PassengerID + "' AND RecordLocator = '"+ Bk_transssrCont.RecordLocator +"'");
        //                        //break;
        //                    }
        //                    if (BatchExecute)
        //                    {
        //                        lstSQL.Add(strSQL);
        //                        if (Commit)
        //                        {

        //                            objDCom.BatchExecute(lstSQL, CommandType.Text, true);
        //                            lstSQL = new ArrayList();
        //                        }
        //                    }
        //                    else
        //                    {
        //                        //execute
        //                        objDCom.Execute(strSQL, DataAccess.EnumRtnType.rtNone, CommandType.Text);
        //                    }
        //                    //lstSQL.Add(strSQL);
        //                    //objDCom.BatchExecute(lstSQL, CommandType.Text, true);
        //                }
        //                catch (Exception axExecute)
        //                {
        //                    if (saveType == EnumSaveType.Insert)
        //                    {
        //                        message = axExecute.Message.ToString();
        //                        throw new ApplicationException("210002 " + axExecute.Message.ToString());
        //                    }
        //                    else
        //                    {
        //                        message = axExecute.Message.ToString();
        //                        throw new ApplicationException("210004 " + axExecute.Message.ToString());
        //                    }
        //                }
        //                finally
        //                {
        //                    objSQL.Dispose();
        //                }
        //                return true;
        //            }
        //        }
        //    }
        //    catch (ApplicationException axAssign)
        //    {
        //        //Throw axAssign
        //        message = axAssign.Message.ToString();
        //        return false;
        //    }
        //    catch (SystemException exAssign)
        //    {
        //        //Throw exAssign
        //        message = exAssign.Message.ToString();
        //        return false;
        //    }
        //    finally
        //    {
        //        Bk_transssrCont = null;
        //        EndSQLControl();
        //        EndConnection();
        //    }
        //    return functionReturnValue;
        //}

        //public bool SaveSSRManageCommit(List<Bk_transssr> listAll, EnumSaveType saveType, string PNR, string message, bool BatchExecute = false)
        //{
        //    bool functionReturnValue = false;
        //    string strSQL = "";

        //    functionReturnValue = false;
        //    try
        //    {
        //        if (listAll != null)
        //        {

        //            if (StartConnection(EnumIsoState.StateUpdatetable) == true)
        //            {
        //                try
        //                {
        //                    switch (saveType)
        //                    {
        //                        case EnumSaveType.Update:
        //                            string strSQLDelete = "";
        //                            strSQLDelete = "DELETE BK_TRANSSSR WHERE TransID = '" + listAll[0].TransID + "' AND RecordLocator = '" + PNR + "'";
        //                            lstSQL.Add(strSQLDelete);
        //                            //objDCom.Execute(strSQLDelete, DataAccess.EnumRtnType.rtNone, CommandType.Text);
        //                            break;
        //                    }

        //                    foreach (Bk_transssr Bk_transssrCont in listAll)
        //                    {
        //                        //if (Bk_transssrCont.RecordLocator == PNR)
        //                        //{
        //                        StartSQLControl();
        //                        objSQL.AddField("SeqNo", Bk_transssrCont.SeqNo, SQLControl.EnumDataType.dtNumeric);
        //                        objSQL.AddField("SubSeqNo", Bk_transssrCont.SubSeqNo, SQLControl.EnumDataType.dtNumeric);
        //                        objSQL.AddField("SSRQty", Bk_transssrCont.SSRQty, SQLControl.EnumDataType.dtNumeric);
        //                        objSQL.AddField("SSRRate", Bk_transssrCont.SSRRate, SQLControl.EnumDataType.dtNumeric);
        //                        objSQL.AddField("TotAmt1", Bk_transssrCont.TotAmt1, SQLControl.EnumDataType.dtNumeric);
        //                        objSQL.AddField("TotAmt2", Bk_transssrCont.TotAmt2, SQLControl.EnumDataType.dtNumeric);
        //                        objSQL.AddField("TotAmt3", Bk_transssrCont.TotAmt3, SQLControl.EnumDataType.dtNumeric);
        //                        objSQL.AddField("IsOverride", Bk_transssrCont.IsOverride, SQLControl.EnumDataType.dtNumeric);
        //                        objSQL.AddField("TransVoid", Bk_transssrCont.TransVoid, SQLControl.EnumDataType.dtNumeric);
        //                        objSQL.AddField("AttemptCount", Bk_transssrCont.AttemptCount, SQLControl.EnumDataType.dtNumeric);
        //                        //'.AddField("rowguid", Bk_transssrCont.rowguid, SQLControl.EnumDataType.dtString)
        //                        objSQL.AddField("CreateBy", Bk_transssrCont.CreateBy, SQLControl.EnumDataType.dtStringN);
        //                        objSQL.AddField("SyncCreate", Bk_transssrCont.SyncCreate, SQLControl.EnumDataType.dtDateTime);
        //                        objSQL.AddField("SyncLastUpd", Bk_transssrCont.SyncLastUpd, SQLControl.EnumDataType.dtDateTime);
        //                        objSQL.AddField("LastSyncBy", Bk_transssrCont.LastSyncBy, SQLControl.EnumDataType.dtStringN);
        //                        objSQL.AddField("RecordLocator", Bk_transssrCont.RecordLocator, SQLControl.EnumDataType.dtString);
        //                        objSQL.AddField("TransID", Bk_transssrCont.TransID, SQLControl.EnumDataType.dtString);
        //                        objSQL.AddField("CarrierCode", Bk_transssrCont.CarrierCode, SQLControl.EnumDataType.dtString);
        //                        objSQL.AddField("FlightNo", Bk_transssrCont.FlightNo, SQLControl.EnumDataType.dtString);
        //                        objSQL.AddField("Origin", Bk_transssrCont.Origin, SQLControl.EnumDataType.dtString);
        //                        objSQL.AddField("Destination", Bk_transssrCont.Destination, SQLControl.EnumDataType.dtString);
        //                        objSQL.AddField("PassengerID", Bk_transssrCont.PassengerID, SQLControl.EnumDataType.dtString);
        //                        objSQL.AddField("SSRCode", Bk_transssrCont.SSRCode, SQLControl.EnumDataType.dtString);
        //                        switch (saveType)
        //                        {
        //                            case EnumSaveType.Insert:
        //                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSSSR", string.Empty);
        //                                break;
        //                            case EnumSaveType.Update:
        //                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSSSR", string.Empty);
        //                                break;
        //                            //strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSSSR", "BK_TRANSSSR.TransID='" + Bk_transssrCont.TransID + "' AND PassengerID = '" + Bk_transssrCont.PassengerID + "' AND RecordLocator = '"+ Bk_transssrCont.RecordLocator +"'");
        //                            //break;
        //                        }
        //                        lstSQL.Add(strSQL);
        //                        //}
        //                    }

        //                    if (BatchExecute)
        //                    {
        //                        objDCom.BatchExecute(lstSQL, CommandType.Text, true);
        //                        lstSQL = new ArrayList();
        //                    }
        //                    else
        //                    {
        //                        //execute
        //                        objDCom.Execute(strSQL, DataAccess.EnumRtnType.rtNone, CommandType.Text);
        //                    }
        //                }
        //                catch (Exception axExecute)
        //                {
        //                    if (saveType == EnumSaveType.Insert)
        //                    {
        //                        message = axExecute.Message.ToString();
        //                        throw new ApplicationException("210002 " + axExecute.Message.ToString());
        //                    }
        //                    else
        //                    {
        //                        message = axExecute.Message.ToString();
        //                        throw new ApplicationException("210004 " + axExecute.Message.ToString());
        //                    }
        //                }
        //                finally
        //                {
        //                    objSQL.Dispose();
        //                }
        //                return true;
        //            }
        //        }
        //    }
        //    catch (ApplicationException axAssign)
        //    {
        //        //Throw axAssign
        //        message = axAssign.Message.ToString();
        //        return false;
        //    }
        //    catch (SystemException exAssign)
        //    {
        //        //Throw exAssign
        //        message = exAssign.Message.ToString();
        //        return false;
        //    }
        //    finally
        //    {
        //        listAll = null;
        //        EndSQLControl();
        //        EndConnection();
        //    }
        //    return functionReturnValue;
        //}

        public DataTable GetDetailSSRbyCode(string SSRCode, string itemcategory)
        {
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            if (StartConnection() == true)
            {
                StartSQLControl();
                strSQL = "SELECT MIN(ItemCode) ItemCode,ItemDesc FROM ITEM where ItemCode IN(" + SSRCode + ") AND ItmCatgCode = '" + itemcategory + "' AND Flag = 1 AND Active = 1 GROUP BY ItemDesc ORDER BY ItemCode";
                dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                if (dt.Rows.Count > 0)
                {
                    return dt;
                }
                else
                {
                    return null;
                }
            }
            else
            {
                throw new Exception("No Connection");
            }
            EndSQLControl();
            EndConnection();
        }

        public DataTable GetDetailFeeCodeMaster(string codetype, Boolean Order = true)
        {
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            try
            {
                strSQL = "SELECT Code, CodeType, CodeDesc FROM CODEMASTER where CodeType = '" + codetype + "'";
                dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                if (dt != null && dt.Rows.Count > 0)
                {
                    return dt;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                throw ex;
                return null;
            }

        }

        public DataTable GetDetailSSRbyCat(string itemcategory, Boolean Order = true)
        {
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            try
            {
                strSQL = "SELECT MIN(ItemCode) ItemCode,ItemDesc FROM ITEM where ItmCatgCode = '" + itemcategory + "' AND Flag = 1 AND Active = 1 GROUP BY ItemDesc ORDER BY ItemCode";
                dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                if (dt != null && dt.Rows.Count > 0)
                {
                    return dt;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                throw ex;
                return null;
            }

        }

        public DataTable GetDetailSSR(string itemcategory, Boolean Order = true)
        {
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            if (StartConnection() == true)
            {
                StartSQLControl();
                strSQL = "SELECT ItemCode,ItemDesc FROM ITEM where ItmCatgCode = '" + itemcategory + "' AND Flag = 1 AND Active = 1 ORDER BY ItemCode";
                dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                if (dt.Rows.Count > 0)
                {
                    return dt;
                }
                else
                {
                    return null;
                }
            }
            else
            {
                throw new Exception("No Connection");
            }
            EndSQLControl();
            EndConnection();
        }

        //public List<Bk_transssr> GetAllBK_TRANSSSR(string TransID, string PNR)
        //{
        //    Bk_transssr objBK_TransSSR_Info;
        //    List<Bk_transssr> objListBK_TRANSSSR_Info = new List<Bk_transssr>();
        //    DataTable dt;
        //    DateTime dateValue;
        //    String strSQL = string.Empty;
        //    decimal number;
        //    try
        //    {
        //        string strfilter = "";
        //        strfilter = "WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND LEN(LTRIM(RTRIM(Recordlocator))) >= 6  AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "'";
        //        strSQL = "SELECT * FROM BK_TRANSSSR " + strfilter;
        //        dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
        //        if (dt != null && dt.Rows.Count > 0)
        //        {
        //            foreach (DataRow drRow in dt.Rows)
        //            {
        //                objBK_TransSSR_Info = new Bk_transssr();
        //                objBK_TransSSR_Info.TransID = (string)drRow["TransID"];
        //                objBK_TransSSR_Info.RecordLocator = (string)drRow["RecordLocator"];
        //                objBK_TransSSR_Info.PassengerID = (string)drRow["PassengerID"];
        //                objBK_TransSSR_Info.CarrierCode = (string)drRow["CarrierCode"];
        //                objBK_TransSSR_Info.FlightNo = (string)drRow["FlightNo"];
        //                objBK_TransSSR_Info.Origin = (string)drRow["Origin"];
        //                objBK_TransSSR_Info.Destination = (string)drRow["Destination"];
        //                objBK_TransSSR_Info.SeqNo = (int)drRow["SeqNo"];
        //                objBK_TransSSR_Info.SSRCode = (string)drRow["SSRCode"];
        //                objBK_TransSSR_Info.SSRRate = (decimal)drRow["SSRRate"];
        //                if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TransSSR_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
        //                objListBK_TRANSSSR_Info.Add(objBK_TransSSR_Info);
        //            }
        //            return objListBK_TRANSSSR_Info;
        //        }
        //        else
        //        {
        //            return null;
        //            throw new ApplicationException("BK_TRANSSSR does not exist.");
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }
        //}

        #endregion

        #region Add-On
        #region "Data Manipulation-Add,Edit,Del"
        private bool Save(Bk_transaddon Bk_transaddonCont, SQLControl.EnumSQLType pType, ref string message, bool BatchExecute = false, bool Commit = false, ArrayList BatchList = null)
        {
            //ArrayList BatchList = new ArrayList();
            bool functionReturnValue = false;
            string strSQL = "";
            functionReturnValue = false;
            try
            {
                if (Bk_transaddonCont == null)
                {
                    //Message return
                }
                else
                {

                    if (Commit)
                    {
                        switch (pType)
                        {
                            case SQLControl.EnumSQLType.stUpdate:
                                string strSQLDelete = "";
                                strSQLDelete = "DELETE BK_TRANSADDON WHERE TransID = '" + Bk_transaddonCont.TransID + "' AND RecordLocator = '" + Bk_transaddonCont.RecordLocator + "'";
                                objDCom.Execute(strSQLDelete, DataAccess.EnumRtnType.rtNone, CommandType.Text);
                                break;
                        }

                    }

                    if (StartConnection(EnumIsoState.StateUpdatetable) == true)
                    {
                        StartSQLControl();
                        var _with3 = objSQL;
                        _with3.TableName = "Bk_transaddon";
                        _with3.AddField("TripMode", Bk_transaddonCont.TripMode, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("CarrierCode", Bk_transaddonCont.CarrierCode, SQLControl.EnumDataType.dtString);
                        _with3.AddField("FlightNo", Bk_transaddonCont.FlightNo, SQLControl.EnumDataType.dtStringN);
                        _with3.AddField("Origin", Bk_transaddonCont.Origin, SQLControl.EnumDataType.dtString);
                        _with3.AddField("Destination", Bk_transaddonCont.Destination, SQLControl.EnumDataType.dtString);
                        _with3.AddField("BaggageCode", Bk_transaddonCont.BaggageCode, SQLControl.EnumDataType.dtString);
                        _with3.AddField("BaggageAmt", Bk_transaddonCont.BaggageAmt, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("MealTotalAmt", Bk_transaddonCont.MealTotalAmt, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("MealCount", Bk_transaddonCont.MealCount, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("MealCode1", Bk_transaddonCont.MealCode1, SQLControl.EnumDataType.dtString);
                        _with3.AddField("MealQty1", Bk_transaddonCont.MealQty1, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("MealRate1", Bk_transaddonCont.MealRate1, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("MealSubTotal1", Bk_transaddonCont.MealSubTotal1, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("MealCode2", Bk_transaddonCont.MealCode2, SQLControl.EnumDataType.dtString);
                        _with3.AddField("MealQty2", Bk_transaddonCont.MealQty2, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("MealRate2", Bk_transaddonCont.MealRate2, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("MealSubTotal2", Bk_transaddonCont.MealSubTotal2, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("MealCode3", Bk_transaddonCont.MealCode3, SQLControl.EnumDataType.dtString);
                        _with3.AddField("MealQty3", Bk_transaddonCont.MealQty3, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("MealRate3", Bk_transaddonCont.MealRate3, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("MealSubTotal3", Bk_transaddonCont.MealSubTotal3, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("MealCode4", Bk_transaddonCont.MealCode4, SQLControl.EnumDataType.dtString);
                        _with3.AddField("MealQty4", Bk_transaddonCont.MealQty4, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("MealRate4", Bk_transaddonCont.MealRate4, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("MealSubTotal4", Bk_transaddonCont.MealSubTotal4, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("DrinkTotalAmt", Bk_transaddonCont.DrinkTotalAmt, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("DrinkCount", Bk_transaddonCont.DrinkCount, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("DrinkCode1", Bk_transaddonCont.DrinkCode1, SQLControl.EnumDataType.dtString);
                        _with3.AddField("DrinkQty1", Bk_transaddonCont.DrinkQty1, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("DrinkRate1", Bk_transaddonCont.DrinkRate1, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("DrinkSubTotal1", Bk_transaddonCont.DrinkSubTotal1, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("DrinkCode2", Bk_transaddonCont.DrinkCode2, SQLControl.EnumDataType.dtString);
                        _with3.AddField("DrinkQty2", Bk_transaddonCont.DrinkQty2, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("DrinkRate2", Bk_transaddonCont.DrinkRate2, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("DrinkSubTotal2", Bk_transaddonCont.DrinkSubTotal2, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("DrinkCode3", Bk_transaddonCont.DrinkCode3, SQLControl.EnumDataType.dtString);
                        _with3.AddField("DrinkQty3", Bk_transaddonCont.DrinkQty3, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("DrinkRate3", Bk_transaddonCont.DrinkRate3, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("DrinkSubTotal3", Bk_transaddonCont.DrinkSubTotal3, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("DrinkCode4", Bk_transaddonCont.DrinkCode4, SQLControl.EnumDataType.dtString);
                        _with3.AddField("DrinkQty4", Bk_transaddonCont.DrinkQty4, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("DrinkRate4", Bk_transaddonCont.DrinkRate4, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("DrinkSubTotal4", Bk_transaddonCont.DrinkSubTotal4, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("SportCode", Bk_transaddonCont.SportCode, SQLControl.EnumDataType.dtString);
                        _with3.AddField("SportAmt", Bk_transaddonCont.SportAmt, SQLControl.EnumDataType.dtNumeric);
                        //_with3.AddField("InsureCode", Bk_transaddonCont.InsureCode, SQLControl.EnumDataType.dtString);//added by romy for Insure
                        //_with3.AddField("InsureAmt", Bk_transaddonCont.InsureAmt, SQLControl.EnumDataType.dtNumeric);//added by romy for Insure
                        _with3.AddField("KitCode", Bk_transaddonCont.KitCode, SQLControl.EnumDataType.dtString);
                        _with3.AddField("KitAmt", Bk_transaddonCont.KitAmt, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("DutyCode", Bk_transaddonCont.DutyCode, SQLControl.EnumDataType.dtString);
                        _with3.AddField("DutyAmt", Bk_transaddonCont.DutyAmt, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("InfantCode", Bk_transaddonCont.InfantCode, SQLControl.EnumDataType.dtString);
                        _with3.AddField("InfantAmt", Bk_transaddonCont.InfantAmt, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("TotalAmount", Bk_transaddonCont.TotalAmount, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("IsOverride", Bk_transaddonCont.IsOverride, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("TransVoid", Bk_transaddonCont.TransVoid, SQLControl.EnumDataType.dtNumeric);
                        _with3.AddField("AttemptCount", Bk_transaddonCont.AttemptCount, SQLControl.EnumDataType.dtNumeric);
                        //_with3.AddField("rowguid", Bk_transaddonCont.rowguid, SQLControl.EnumDataType.dtString);
                        _with3.AddField("CreateBy", Bk_transaddonCont.CreateBy, SQLControl.EnumDataType.dtStringN);
                        _with3.AddField("SyncCreate", Bk_transaddonCont.SyncCreate, SQLControl.EnumDataType.dtDateTime);
                        _with3.AddField("SyncLastUpd", Bk_transaddonCont.SyncLastUpd, SQLControl.EnumDataType.dtDateTime);
                        _with3.AddField("LastSyncBy", Bk_transaddonCont.LastSyncBy, SQLControl.EnumDataType.dtStringN);

                        switch (pType)
                        {
                            case SQLControl.EnumSQLType.stInsert:
                                _with3.AddField("RecordLocator", Bk_transaddonCont.RecordLocator, SQLControl.EnumDataType.dtString);
                                _with3.AddField("TransID", Bk_transaddonCont.TransID, SQLControl.EnumDataType.dtString);
                                _with3.AddField("PassengerID", Bk_transaddonCont.PassengerID, SQLControl.EnumDataType.dtString);
                                _with3.AddField("Segment", Bk_transaddonCont.Segment, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("SeqNo", Bk_transaddonCont.SeqNo, SQLControl.EnumDataType.dtNumeric);
                                strSQL = _with3.BuildSQL(SQLControl.EnumSQLType.stInsert);

                                break;
                            case SQLControl.EnumSQLType.stUpdate:
                                //strSQL = _with3.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSADDON", "RecordLocator = '" + Bk_transaddonCont.RecordLocator + "' AND TransID = '" + Bk_transaddonCont.TransID + "' AND PassengerID = '" + Bk_transaddonCont.PassengerID + "' AND Segment = '" + Bk_transaddonCont.Segment + "' AND SeqNo = '" + Bk_transaddonCont.SeqNo + "'");
                                _with3.AddField("RecordLocator", Bk_transaddonCont.RecordLocator, SQLControl.EnumDataType.dtString);
                                _with3.AddField("TransID", Bk_transaddonCont.TransID, SQLControl.EnumDataType.dtString);
                                _with3.AddField("PassengerID", Bk_transaddonCont.PassengerID, SQLControl.EnumDataType.dtString);
                                _with3.AddField("Segment", Bk_transaddonCont.Segment, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("SeqNo", Bk_transaddonCont.SeqNo, SQLControl.EnumDataType.dtNumeric);
                                strSQL = _with3.BuildSQL(SQLControl.EnumSQLType.stInsert);
                                break;
                        }
                        try
                        {
                            if (BatchExecute)
                            {
                                lstSQL.Add(strSQL);
                                if (Commit)
                                {
                                    objDCom.BatchExecute(lstSQL, CommandType.Text, true);
                                    lstSQL = null;
                                }
                            }
                            else
                            {
                                //execute
                                objDCom.Execute(strSQL, DataAccess.EnumRtnType.rtNone, CommandType.Text);
                            }
                        }
                        catch (Exception axExecute)
                        {
                            if (pType == SQLControl.EnumSQLType.stInsert)
                            {
                                message = axExecute.Message.ToString();
                                throw new ApplicationException("210002 " + axExecute.Message.ToString());
                            }
                            else
                            {
                                message = axExecute.Message.ToString();
                                throw new ApplicationException("210004 " + axExecute.Message.ToString());
                            }
                        }
                        finally
                        {
                            objSQL.Dispose();
                        }
                        return true;
                    }
                }
            }
            catch (ApplicationException axAssign)
            {
                //Throw axAssign
                message = axAssign.Message.ToString();
                return false;
            }
            catch (SystemException exAssign)
            {
                //Throw exAssign
                message = exAssign.Message.ToString();
                return false;
            }
            finally
            {
                Bk_transaddonCont = null;
                EndSQLControl();
                EndConnection();
            }
            return functionReturnValue;
        }

        private bool SaveManageAddOn(List<Bk_transaddon> listAll, string PNR, SQLControl.EnumSQLType pType, ref string message, bool BatchExecute = false)
        {
            //ArrayList BatchList = new ArrayList();
            bool functionReturnValue = false;
            string strSQL = "";
            functionReturnValue = false;
            try
            {
                if (listAll == null)
                {
                    //Message return
                }
                else
                {

                    if (listAll != null)
                    {
                        switch (pType)
                        {
                            case SQLControl.EnumSQLType.stUpdate:
                                string strSQLDelete = "";
                                strSQLDelete = "DELETE BK_TRANSADDON WHERE TransID = '" + listAll[0].TransID + "' AND RecordLocator = '" + PNR + "'";
                                //objDCom.Execute(strSQLDelete, DataAccess.EnumRtnType.rtNone, CommandType.Text);
                                lstSQL.Add(strSQLDelete);
                                break;
                        }

                        foreach (Bk_transaddon Bk_transaddonCont in listAll)
                        {
                            if (Bk_transaddonCont.RecordLocator == PNR)
                            {
                                StartSQLControl();
                                var _with3 = objSQL;
                                _with3.TableName = "Bk_transaddon";
                                _with3.AddField("TripMode", Bk_transaddonCont.TripMode, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("CarrierCode", Bk_transaddonCont.CarrierCode, SQLControl.EnumDataType.dtString);
                                _with3.AddField("FlightNo", Bk_transaddonCont.FlightNo, SQLControl.EnumDataType.dtStringN);
                                _with3.AddField("Origin", Bk_transaddonCont.Origin, SQLControl.EnumDataType.dtString);
                                _with3.AddField("Destination", Bk_transaddonCont.Destination, SQLControl.EnumDataType.dtString);
                                _with3.AddField("BaggageCode", Bk_transaddonCont.BaggageCode, SQLControl.EnumDataType.dtString);
                                _with3.AddField("BaggageAmt", Bk_transaddonCont.BaggageAmt, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("MealTotalAmt", Bk_transaddonCont.MealTotalAmt, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("MealCount", Bk_transaddonCont.MealCount, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("MealCode1", Bk_transaddonCont.MealCode1, SQLControl.EnumDataType.dtString);
                                _with3.AddField("MealQty1", Bk_transaddonCont.MealQty1, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("MealRate1", Bk_transaddonCont.MealRate1, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("MealSubTotal1", Bk_transaddonCont.MealSubTotal1, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("MealCode2", Bk_transaddonCont.MealCode2, SQLControl.EnumDataType.dtString);
                                _with3.AddField("MealQty2", Bk_transaddonCont.MealQty2, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("MealRate2", Bk_transaddonCont.MealRate2, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("MealSubTotal2", Bk_transaddonCont.MealSubTotal2, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("MealCode3", Bk_transaddonCont.MealCode3, SQLControl.EnumDataType.dtString);
                                _with3.AddField("MealQty3", Bk_transaddonCont.MealQty3, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("MealRate3", Bk_transaddonCont.MealRate3, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("MealSubTotal3", Bk_transaddonCont.MealSubTotal3, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("MealCode4", Bk_transaddonCont.MealCode4, SQLControl.EnumDataType.dtString);
                                _with3.AddField("MealQty4", Bk_transaddonCont.MealQty4, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("MealRate4", Bk_transaddonCont.MealRate4, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("MealSubTotal4", Bk_transaddonCont.MealSubTotal4, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("DrinkTotalAmt", Bk_transaddonCont.DrinkTotalAmt, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("DrinkCount", Bk_transaddonCont.DrinkCount, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("DrinkCode1", Bk_transaddonCont.DrinkCode1, SQLControl.EnumDataType.dtString);
                                _with3.AddField("DrinkQty1", Bk_transaddonCont.DrinkQty1, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("DrinkRate1", Bk_transaddonCont.DrinkRate1, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("DrinkSubTotal1", Bk_transaddonCont.DrinkSubTotal1, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("DrinkCode2", Bk_transaddonCont.DrinkCode2, SQLControl.EnumDataType.dtString);
                                _with3.AddField("DrinkQty2", Bk_transaddonCont.DrinkQty2, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("DrinkRate2", Bk_transaddonCont.DrinkRate2, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("DrinkSubTotal2", Bk_transaddonCont.DrinkSubTotal2, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("DrinkCode3", Bk_transaddonCont.DrinkCode3, SQLControl.EnumDataType.dtString);
                                _with3.AddField("DrinkQty3", Bk_transaddonCont.DrinkQty3, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("DrinkRate3", Bk_transaddonCont.DrinkRate3, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("DrinkSubTotal3", Bk_transaddonCont.DrinkSubTotal3, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("DrinkCode4", Bk_transaddonCont.DrinkCode4, SQLControl.EnumDataType.dtString);
                                _with3.AddField("DrinkQty4", Bk_transaddonCont.DrinkQty4, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("DrinkRate4", Bk_transaddonCont.DrinkRate4, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("DrinkSubTotal4", Bk_transaddonCont.DrinkSubTotal4, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("SportCode", Bk_transaddonCont.SportCode, SQLControl.EnumDataType.dtString);
                                _with3.AddField("SportAmt", Bk_transaddonCont.SportAmt, SQLControl.EnumDataType.dtNumeric);
                                //_with3.AddField("InsureCode", Bk_transaddonCont.InsureCode, SQLControl.EnumDataType.dtString);//added by romy for insure
                                //_with3.AddField("InsureAmt", Bk_transaddonCont.InsureAmt, SQLControl.EnumDataType.dtNumeric);//added by romy for insure
                                _with3.AddField("KitCode", Bk_transaddonCont.KitCode, SQLControl.EnumDataType.dtString);
                                _with3.AddField("KitAmt", Bk_transaddonCont.KitAmt, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("DutyCode", Bk_transaddonCont.DutyCode, SQLControl.EnumDataType.dtString);
                                _with3.AddField("DutyAmt", Bk_transaddonCont.DutyAmt, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("InfantCode", Bk_transaddonCont.InfantCode, SQLControl.EnumDataType.dtString);
                                _with3.AddField("InfantAmt", Bk_transaddonCont.InfantAmt, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("TotalAmount", Bk_transaddonCont.TotalAmount, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("IsOverride", Bk_transaddonCont.IsOverride, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("TransVoid", Bk_transaddonCont.TransVoid, SQLControl.EnumDataType.dtNumeric);
                                _with3.AddField("AttemptCount", Bk_transaddonCont.AttemptCount, SQLControl.EnumDataType.dtNumeric);
                                //_with3.AddField("rowguid", Bk_transaddonCont.rowguid, SQLControl.EnumDataType.dtString);
                                _with3.AddField("CreateBy", Bk_transaddonCont.CreateBy, SQLControl.EnumDataType.dtStringN);
                                _with3.AddField("SyncCreate", Bk_transaddonCont.SyncCreate, SQLControl.EnumDataType.dtDateTime);
                                _with3.AddField("SyncLastUpd", Bk_transaddonCont.SyncLastUpd, SQLControl.EnumDataType.dtDateTime);
                                _with3.AddField("LastSyncBy", Bk_transaddonCont.LastSyncBy, SQLControl.EnumDataType.dtStringN);

                                switch (pType)
                                {
                                    case SQLControl.EnumSQLType.stInsert:
                                        _with3.AddField("RecordLocator", Bk_transaddonCont.RecordLocator, SQLControl.EnumDataType.dtString);
                                        _with3.AddField("TransID", Bk_transaddonCont.TransID, SQLControl.EnumDataType.dtString);
                                        _with3.AddField("PassengerID", Bk_transaddonCont.PassengerID, SQLControl.EnumDataType.dtString);
                                        _with3.AddField("Segment", Bk_transaddonCont.Segment, SQLControl.EnumDataType.dtNumeric);
                                        _with3.AddField("SeqNo", Bk_transaddonCont.SeqNo, SQLControl.EnumDataType.dtNumeric);
                                        strSQL = _with3.BuildSQL(SQLControl.EnumSQLType.stInsert);

                                        break;
                                    case SQLControl.EnumSQLType.stUpdate:
                                        //strSQL = _with3.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSADDON", "RecordLocator = '" + Bk_transaddonCont.RecordLocator + "' AND TransID = '" + Bk_transaddonCont.TransID + "' AND PassengerID = '" + Bk_transaddonCont.PassengerID + "' AND Segment = '" + Bk_transaddonCont.Segment + "' AND SeqNo = '" + Bk_transaddonCont.SeqNo + "'");
                                        _with3.AddField("RecordLocator", Bk_transaddonCont.RecordLocator, SQLControl.EnumDataType.dtString);
                                        _with3.AddField("TransID", Bk_transaddonCont.TransID, SQLControl.EnumDataType.dtString);
                                        _with3.AddField("PassengerID", Bk_transaddonCont.PassengerID, SQLControl.EnumDataType.dtString);
                                        _with3.AddField("Segment", Bk_transaddonCont.Segment, SQLControl.EnumDataType.dtNumeric);
                                        _with3.AddField("SeqNo", Bk_transaddonCont.SeqNo, SQLControl.EnumDataType.dtNumeric);
                                        strSQL = _with3.BuildSQL(SQLControl.EnumSQLType.stInsert);
                                        break;
                                }
                                lstSQL.Add(strSQL);
                            }
                        }
                        try
                        {
                            if (BatchExecute)
                            {
                                objDCom.BatchExecute(lstSQL, CommandType.Text, true);
                                lstSQL = new ArrayList();
                            }
                            else
                            {
                                //execute
                                objDCom.Execute(strSQL, DataAccess.EnumRtnType.rtNone, CommandType.Text);
                            }
                        }
                        catch (Exception axExecute)
                        {
                            if (pType == SQLControl.EnumSQLType.stInsert)
                            {
                                message = axExecute.Message.ToString();
                                throw new ApplicationException("210002 " + axExecute.Message.ToString());
                            }
                            else
                            {
                                message = axExecute.Message.ToString();
                                throw new ApplicationException("210004 " + axExecute.Message.ToString());
                            }
                        }
                        finally
                        {
                            objSQL.Dispose();
                        }
                        return true;
                    }
                }
            }
            catch (ApplicationException axAssign)
            {
                //Throw axAssign
                message = axAssign.Message.ToString();
                return false;
            }
            catch (SystemException exAssign)
            {
                //Throw exAssign
                message = exAssign.Message.ToString();
                return false;
            }
            finally
            {
                listAll = null;
                EndSQLControl();
                EndConnection();
            }
            return functionReturnValue;
        }

        //ADD
        public bool Insert(Bk_transaddon Bk_transaddonCont, string message, bool BatchExecute = false, bool Commit = false, ArrayList BatchList = null)
        {
            return Save(Bk_transaddonCont, SQLControl.EnumSQLType.stInsert, ref message, BatchExecute, Commit, BatchList);
        }

        //AMEND
        public bool Update(Bk_transaddon Bk_transaddonCont, string message, bool BatchExecute = false, bool Commit = false, ArrayList BatchList = null)
        {
            return Save(Bk_transaddonCont, SQLControl.EnumSQLType.stUpdate, ref message, BatchExecute, Commit, BatchList);
        }

        public bool UpdateManage(List<Bk_transaddon> ListBk_transaddonCont, string PNR, string message, bool BatchExecute = false)
        {
            return SaveManageAddOn(ListBk_transaddonCont, PNR, SQLControl.EnumSQLType.stUpdate, ref message, BatchExecute);
        }

        public bool Delete(Bk_transaddon Bk_transaddonCont, ref string message)
        {
            bool functionReturnValue = false;
            string strSQL = null;
            bool blnFound = false;
            bool blnInUse = false;
            System.Data.SqlClient.SqlDataReader rdr = default(System.Data.SqlClient.SqlDataReader);
            functionReturnValue = false;
            blnFound = false;
            blnInUse = false;
            try
            {
                if (Bk_transaddonCont == null)
                {
                    //Error Message
                }
                else
                {
                    if (StartConnection(EnumIsoState.StateUpdatetable) == true)
                    {
                        StartSQLControl();
                        strSQL = BuildDelete("BK_TRANSADDON", "RecordLocator = '" + Bk_transaddonCont.RecordLocator + "' AND TransID = '" + Bk_transaddonCont.TransID + "' AND PassengerID = '" + Bk_transaddonCont.PassengerID + "' AND Segment = '" + Bk_transaddonCont.Segment + "' AND SeqNo = '" + Bk_transaddonCont.SeqNo + "'");

                        try
                        {
                            //execute
                            objDCom.Execute(strSQL, DataAccess.EnumRtnType.rtNone, CommandType.Text);
                            return true;
                        }
                        catch (Exception exExecute)
                        {
                            message = exExecute.Message.ToString();
                            return false;
                            //Throw New ApplicationException("210006 " & exExecute.Message.ToString())
                        }
                    }
                }

            }
            catch (ApplicationException axDelete)
            {
                message = axDelete.Message.ToString();
                return false;
                //Throw axDelete
            }
            catch (Exception exDelete)
            {
                message = exDelete.Message.ToString();
                return false;
                //Throw exDelete
            }
            finally
            {
                Bk_transaddonCont = null;
                rdr = null;
                EndSQLControl();
                EndConnection();
            }
            return functionReturnValue;
        }
        #endregion

        #region "Data Selection"
        public Bk_transaddon GetBK_TRANSADDON(System.String RecordLocator, System.String TransID, System.String PassengerID, System.Int32 Segment, System.Int32 SeqNo)
        {
            Bk_transaddon rBk_transaddon = null;
            DataTable dtTemp = null;
            List<string> lstField = new List<string>();
            string strSQL = null;

            try
            {
                if (StartConnection() == true)
                {
                    strSQL = ("SELECT * FROM BK_TRANSADDON WHERE RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, RecordLocator) + "' AND TransID = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND PassengerID = '" + PassengerID + "' AND Segment = '" + Segment + "' AND SeqNo = '" + SeqNo + "'");
                    dtTemp = (DataTable)objDCom.Execute(strSQL, DataAccess.EnumRtnType.rtDataTable, CommandType.Text, "BK_TRANSADDON");
                    int rowCount = 0;
                    if (dtTemp == null == false)
                    {
                        if (dtTemp.Rows.Count > 0)
                        {
                            dynamic drRow = dtTemp.Rows[0];
                            rBk_transaddon = new Bk_transaddon();
                            rBk_transaddon.RecordLocator = drRow.Item("RecordLocator");
                            rBk_transaddon.TransID = drRow.Item("TransID");
                            rBk_transaddon.PassengerID = drRow.Item("PassengerID");
                            rBk_transaddon.Segment = drRow.Item("Segment");
                            rBk_transaddon.SeqNo = drRow.Item("SeqNo");
                            rBk_transaddon.TripMode = drRow.Item("TripMode");
                            rBk_transaddon.CarrierCode = drRow.Item("CarrierCode");
                            rBk_transaddon.FlightNo = drRow.Item("FlightNo");
                            rBk_transaddon.Origin = drRow.Item("Origin");
                            rBk_transaddon.Destination = drRow.Item("Destination");
                            rBk_transaddon.BaggageCode = drRow.Item("BaggageCode");
                            rBk_transaddon.BaggageAmt = drRow.Item("BaggageAmt");
                            rBk_transaddon.MealTotalAmt = drRow.Item("MealTotalAmt");
                            rBk_transaddon.MealCount = drRow.Item("MealCount");
                            rBk_transaddon.MealCode1 = drRow.Item("MealCode1");
                            rBk_transaddon.MealQty1 = drRow.Item("MealQty1");
                            rBk_transaddon.MealRate1 = drRow.Item("MealRate1");
                            rBk_transaddon.MealSubTotal1 = drRow.Item("MealSubTotal1");
                            rBk_transaddon.MealCode2 = drRow.Item("MealCode2");
                            rBk_transaddon.MealQty2 = drRow.Item("MealQty2");
                            rBk_transaddon.MealRate2 = drRow.Item("MealRate2");
                            rBk_transaddon.MealSubTotal2 = drRow.Item("MealSubTotal2");
                            rBk_transaddon.MealCode3 = drRow.Item("MealCode3");
                            rBk_transaddon.MealQty3 = drRow.Item("MealQty3");
                            rBk_transaddon.MealRate3 = drRow.Item("MealRate3");
                            rBk_transaddon.MealSubTotal3 = drRow.Item("MealSubTotal3");
                            rBk_transaddon.MealCode4 = drRow.Item("MealCode4");
                            rBk_transaddon.MealQty4 = drRow.Item("MealQty4");
                            rBk_transaddon.MealRate4 = drRow.Item("MealRate4");
                            rBk_transaddon.MealSubTotal4 = drRow.Item("MealSubTotal4");
                            rBk_transaddon.DrinkTotalAmt = drRow.Item("DrinkTotalAmt");
                            rBk_transaddon.DrinkCount = drRow.Item("DrinkCount");
                            rBk_transaddon.DrinkCode1 = drRow.Item("DrinkCode1");
                            rBk_transaddon.DrinkQty1 = drRow.Item("DrinkQty1");
                            rBk_transaddon.DrinkRate1 = drRow.Item("DrinkRate1");
                            rBk_transaddon.DrinkSubTotal1 = drRow.Item("DrinkSubTotal1");
                            rBk_transaddon.DrinkCode2 = drRow.Item("DrinkCode2");
                            rBk_transaddon.DrinkQty2 = drRow.Item("DrinkQty2");
                            rBk_transaddon.DrinkRate2 = drRow.Item("DrinkRate2");
                            rBk_transaddon.DrinkSubTotal2 = drRow.Item("DrinkSubTotal2");
                            rBk_transaddon.DrinkCode3 = drRow.Item("DrinkCode3");
                            rBk_transaddon.DrinkQty3 = drRow.Item("DrinkQty3");
                            rBk_transaddon.DrinkRate3 = drRow.Item("DrinkRate3");
                            rBk_transaddon.DrinkSubTotal3 = drRow.Item("DrinkSubTotal3");
                            rBk_transaddon.DrinkCode4 = drRow.Item("DrinkCode4");
                            rBk_transaddon.DrinkQty4 = drRow.Item("DrinkQty4");
                            rBk_transaddon.DrinkRate4 = drRow.Item("DrinkRate4");
                            rBk_transaddon.DrinkSubTotal4 = drRow.Item("DrinkSubTotal4");
                            rBk_transaddon.SportCode = drRow.Item("SportCode");
                            rBk_transaddon.SportAmt = drRow.Item("SportAmt");
                            rBk_transaddon.KitCode = drRow.Item("KitCode");
                            rBk_transaddon.KitAmt = drRow.Item("KitAmt");
                            rBk_transaddon.DutyCode = drRow.Item("DutyCode");
                            rBk_transaddon.DutyAmt = drRow.Item("DutyAmt");
                            rBk_transaddon.InfantCode = drRow.Item("InfantCode");
                            rBk_transaddon.InfantAmt = drRow.Item("InfantAmt");
                            rBk_transaddon.TotalAmount = drRow.Item("TotalAmount");
                            rBk_transaddon.IsOverride = drRow.Item("IsOverride");
                            rBk_transaddon.TransVoid = drRow.Item("TransVoid");
                            rBk_transaddon.AttemptCount = drRow.Item("AttemptCount");
                            rBk_transaddon.rowguid = drRow.Item("rowguid");
                            rBk_transaddon.CreateBy = drRow.Item("CreateBy");
                            rBk_transaddon.SyncCreate = drRow.Item("SyncCreate");
                            rBk_transaddon.SyncLastUpd = drRow.Item("SyncLastUpd");
                            rBk_transaddon.LastSyncBy = drRow.Item("LastSyncBy");
                        }
                        else
                        {
                            rBk_transaddon = null;
                        }
                    }
                    else
                    {
                        rBk_transaddon = null;
                    }
                }
                return rBk_transaddon;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                rBk_transaddon = null;
                dtTemp = null;
                EndSQLControl();
                EndConnection();
            }
        }

        public List<Bk_transaddon> GetBK_TRANSADDON(System.String RecordLocator, System.String TransID, System.String PassengerID, System.Int32 Segment, System.Int32 SeqNo, bool DecendingOrder)
        {
            Bk_transaddon rBk_transaddon = null;
            List<Bk_transaddon> lstBk_transaddon = new List<Bk_transaddon>();
            DataTable dtTemp = null;
            List<string> lstField = new List<string>();
            string strSQL = null;
            string strDesc = "";
            try
            {
                if (StartConnection() == true)
                {

                    if (DecendingOrder)
                    {
                        strDesc = " Order by RecordLocator, TransID, PassengerID, Segment, SeqNo DESC";
                    }
                    strSQL = ("SELECT * FROM BK_TRANSADDON WHERE RecordLocator='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, RecordLocator) + "' AND TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' AND PassengerID = '" + PassengerID + "' AND Segment = '" + Segment + "' AND SeqNo = '" + SeqNo + "'" + strDesc);
                    dtTemp = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dtTemp.Rows.Count > 0)
                    {
                        foreach (DataRow drRow in dtTemp.Rows)
                        {
                            rBk_transaddon = new Bk_transaddon();
                            rBk_transaddon.RecordLocator = drRow["RecordLocator"].ToString();
                            rBk_transaddon.TransID = drRow["TransID"].ToString();
                            rBk_transaddon.PassengerID = drRow["PassengerID"].ToString();
                            rBk_transaddon.Segment = (int)drRow["Segment"];
                            rBk_transaddon.SeqNo = (int)drRow["SeqNo"];
                            rBk_transaddon.TripMode = (byte)drRow["TripMode"];
                            rBk_transaddon.CarrierCode = drRow["CarrierCode"].ToString();
                            rBk_transaddon.FlightNo = drRow["FlightNo"].ToString();
                            rBk_transaddon.Origin = drRow["Origin"].ToString();
                            rBk_transaddon.Destination = drRow["Destination"].ToString();
                            rBk_transaddon.BaggageCode = drRow["BaggageCode"].ToString();
                            rBk_transaddon.BaggageAmt = (decimal)drRow["BaggageAmt"];
                            rBk_transaddon.MealTotalAmt = (decimal)drRow["MealTotalAmt"];
                            rBk_transaddon.MealCount = (int)drRow["MealCount"];
                            rBk_transaddon.MealCode1 = drRow["MealCode1"].ToString();
                            rBk_transaddon.MealQty1 = (decimal)drRow["MealQty1"];
                            rBk_transaddon.MealRate1 = (decimal)drRow["MealRate1"];
                            rBk_transaddon.MealSubTotal1 = (decimal)drRow["MealSubTotal1"];
                            rBk_transaddon.MealCode2 = drRow["MealCode2"].ToString();
                            rBk_transaddon.MealQty2 = (decimal)drRow["MealQty2"];
                            rBk_transaddon.MealRate2 = (decimal)drRow["MealRate2"];
                            rBk_transaddon.MealSubTotal2 = (decimal)drRow["MealSubTotal2"];
                            rBk_transaddon.MealCode3 = drRow["MealCode3"].ToString();
                            rBk_transaddon.MealQty3 = (decimal)drRow["MealQty3"];
                            rBk_transaddon.MealRate3 = (decimal)drRow["MealRate3"];
                            rBk_transaddon.MealSubTotal3 = (decimal)drRow["MealSubTotal3"];
                            rBk_transaddon.MealCode4 = drRow["MealCode4"].ToString();
                            rBk_transaddon.MealQty4 = (decimal)drRow["MealQty4"];
                            rBk_transaddon.MealRate4 = (decimal)drRow["MealRate4"];
                            rBk_transaddon.MealSubTotal4 = (decimal)drRow["MealSubTotal4"];
                            rBk_transaddon.DrinkTotalAmt = (decimal)drRow["DrinkTotalAmt"];
                            rBk_transaddon.DrinkCount = (int)drRow["DrinkCount"];
                            rBk_transaddon.DrinkCode1 = drRow["DrinkCode1"].ToString();
                            rBk_transaddon.DrinkQty1 = (decimal)drRow["DrinkQty1"];
                            rBk_transaddon.DrinkRate1 = (decimal)drRow["DrinkRate1"];
                            rBk_transaddon.DrinkSubTotal1 = (decimal)drRow["DrinkSubTotal1"];
                            rBk_transaddon.DrinkCode2 = drRow["DrinkCode2"].ToString();
                            rBk_transaddon.DrinkQty2 = (decimal)drRow["DrinkQty2"];
                            rBk_transaddon.DrinkRate2 = (decimal)drRow["DrinkRate2"];
                            rBk_transaddon.DrinkSubTotal2 = (decimal)drRow["DrinkSubTotal2"];
                            rBk_transaddon.DrinkCode3 = drRow["DrinkCode3"].ToString();
                            rBk_transaddon.DrinkQty3 = (decimal)drRow["DrinkQty3"];
                            rBk_transaddon.DrinkRate3 = (decimal)drRow["DrinkRate3"];
                            rBk_transaddon.DrinkSubTotal3 = (decimal)drRow["DrinkSubTotal3"];
                            rBk_transaddon.DrinkCode4 = drRow["DrinkCode4"].ToString();
                            rBk_transaddon.DrinkQty4 = (decimal)drRow["DrinkQty4"];
                            rBk_transaddon.DrinkRate4 = (decimal)drRow["DrinkRate4"];
                            rBk_transaddon.DrinkSubTotal4 = (decimal)drRow["DrinkSubTotal4"];
                            rBk_transaddon.SportCode = drRow["SportCode"].ToString();
                            rBk_transaddon.SportAmt = (decimal)drRow["SportAmt"];
                            rBk_transaddon.KitCode = drRow["KitCode"].ToString();
                            rBk_transaddon.KitAmt = (decimal)drRow["KitAmt"];
                            rBk_transaddon.DutyCode = drRow["DutyCode"].ToString();
                            rBk_transaddon.DutyAmt = (decimal)drRow["DutyAmt"];
                            rBk_transaddon.InfantCode = drRow["InfantCode"].ToString();
                            rBk_transaddon.InfantAmt = (decimal)drRow["InfantAmt"];
                            rBk_transaddon.TotalAmount = (decimal)drRow["TotalAmount"];
                            rBk_transaddon.IsOverride = (byte)drRow["IsOverride"];
                            rBk_transaddon.TransVoid = (byte)drRow["TransVoid"];
                            rBk_transaddon.AttemptCount = (byte)drRow["AttemptCount"];
                            //rBk_transaddon.rowguid = drRow["rowguid"];
                            rBk_transaddon.CreateBy = drRow["CreateBy"].ToString();
                            rBk_transaddon.SyncCreate = (DateTime)drRow["SyncCreate"];
                            rBk_transaddon.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                            rBk_transaddon.LastSyncBy = drRow["LastSyncBy"].ToString();
                            lstBk_transaddon.Add(rBk_transaddon);
                        }

                    }
                    else
                    {
                        rBk_transaddon = null;
                        return null;
                    }
                    //return lstBk_transaddon;
                }
                return lstBk_transaddon;
            }
            catch (Exception ex)
            {
                return null;
                throw ex;

            }
            finally
            {
                rBk_transaddon = null;
                lstBk_transaddon = null;
                lstField = null;
                EndSQLControl();
                EndConnection();
            }
        }

        public DataTable GetBK_TRANSADDONList(string FieldCond = null, string SQL = null)
        {
            string cond = "";
            if (StartConnection() == true)
            {
                if (SQL == null | SQL == string.Empty)
                {
                    if (FieldCond != null)
                    {
                        cond = FieldCond;
                    }
                    strSQL = "SELECT * FROM BK_TRANSADDON " + cond;
                }
                else
                {
                    strSQL = SQL;
                }
                return (DataTable)objDCom.Execute(strSQL, DataAccess.EnumRtnType.rtDataTable, CommandType.Text, "BK_TRANSADDON");

            }
            else
            {
                return null;
            }
            EndConnection();
        }


        #endregion

        #endregion
        //added by diana 20131115 - check valid session for agent and admin
        #region CheckValidSession
        public Boolean checkValidSession(string username, DateTime syncLastUpd)
        {
            ABS.Logic.GroupBooking.Agent.AgentProfileControl objAgentProfile = new ABS.Logic.GroupBooking.Agent.AgentProfileControl();
            ABS.Logic.GroupBooking.Agent.AgentProfile agProfileInfo = new ABS.Logic.GroupBooking.Agent.AgentProfile();
            agProfileInfo = objAgentProfile.GetSingleAgentProfile(username);
            if (agProfileInfo != null)
            {
                if (syncLastUpd == agProfileInfo.SyncLastUpd)
                {
                    return true;
                }
            }
            return false;
        }
        public Boolean checkValidAdminSession(string username, DateTime lastLoginTime)
        {
            ABS.Logic.GroupBooking.Agent.AdminControl objAdmin = new ABS.Logic.GroupBooking.Agent.AdminControl();
            ABS.Logic.GroupBooking.Agent.USRPROFILE_Info UsrInfo = new ABS.Logic.GroupBooking.Agent.USRPROFILE_Info();
            UsrInfo = objAdmin.GetSingleUSRPROFILE(username, "USRPROFILE.UserName");
            if (UsrInfo != null)
            {
                if (lastLoginTime == UsrInfo.LastLogin)
                {
                    return true;
                }
            }
            return false;
        }
        #endregion

        public string EncryptSHA1(string str)
        {
            string rethash = "";
            try
            {
                System.Security.Cryptography.SHA1 hash = System.Security.Cryptography.SHA1.Create();
                System.Text.ASCIIEncoding encoder = new System.Text.ASCIIEncoding();
                byte[] combined = encoder.GetBytes(str);
                hash.ComputeHash(combined);
                rethash = Convert.ToBase64String(hash.Hash);
            }
            catch (Exception ex)
            {
                string strerr = "Error in HashCode : " + ex.Message;
            }
            return rethash;
        }

        public string EncryptMD5(string str)
        {
            System.Security.Cryptography.MD5CryptoServiceProvider hash = new System.Security.Cryptography.MD5CryptoServiceProvider();
            byte[] tBytes = Encoding.ASCII.GetBytes(str);
            byte[] hBytes = hash.ComputeHash(tBytes);

            StringBuilder sb = new StringBuilder();
            for (int c = 0; c < hBytes.Length; c++)
                sb.AppendFormat("{0:x2}", hBytes[c]);

            return (sb.ToString());
        }

        public int GetTotalBookingByOptGroup(string optGroup, string CarrierCode, string FlightNumber)
        {
            int totalBook = 0;
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    strSQL = "SELECT SUM(BK_TRANSMAIN.TransTotalPAX) AS Total FROM BK_TRANSDTL,BK_TRANSMAIN,OPTGroup ";
                    strSQL += " WHERE BK_TRANSMAIN.TransStatus != 0 AND BK_TRANSMAIN.TransID = BK_TRANSDTL.TransID AND CAST(BK_TRANSMAIN.BookingDate AS DATE) = CAST(GETDATE() AS DATE) ";
                    strSQL += " AND OPTGroup.CarrierCode = BK_TRANSDTL.CarrierCode AND OPTGroup.GroupName = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, optGroup) + "'";
                    strSQL += " AND BK_TRANSDTL.FlightNo='" + FlightNumber + "' AND BK_TRANSDTL.CarrierCode='" + CarrierCode + "' AND BK_TRANSDTL.DetailCollectedAmt > 0";
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0]["Total"] != DBNull.Value)
                        {
                            return Convert.ToInt32(dt.Rows[0]["Total"]);
                        }
                        else
                        {
                            return -1;
                        }
                    }
                    else
                    {
                        return 0;
                    }
                }
                return 0;
            }
            catch (Exception ex)
            {
                return -1;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }

        }

        //added by diana 20170404, to retrieve total additional charges
        public decimal GetTotalAddFee(string TransID, string RecordLocator = "")
        {
            int totalBook = 0;
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    strSQL = "SELECT ISNULL(SUM(TenderAmt),0) AS TotalAmount FROM BK_TRANSTENDER "; // WHERE FeeType != '' ";
                    strSQL += "WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "' ";
                    if (RecordLocator != "") strSQL += "AND RecordLocator = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, RecordLocator) + "'";

                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        return Convert.ToInt32(dt.Rows[0]["TotalAmount"]);
                    }
                    else
                    {
                        return 0;
                    }
                }
                return 0;
            }
            catch (Exception ex)
            {
                return -1;
            }

        }

        public int getTotalFlightChangeCount()
        {
            int totalChange = 0;
            String strSQL = string.Empty;
            DataTable dt = new DataTable();
            try
            {
                if (StartConnection(EnumIsoState.StateUpdatetable, false) == true)
                {
                    StartSQLControl();

                    strSQL = "SELECT COUNT(BK_TRANSMAIN.TRANSID) AS Total FROM BK_TRANSMAIN WHERE BK_TRANSMAIN.TransRemark2 = 'Change Flight' AND CAST(BK_TRANSMAIN.SyncLastUpd AS DATE) = CAST(GETDATE() AS DATE)";
                    dt = objDCom.Execute(strSQL, System.Data.CommandType.Text, true);
                    if (dt.Rows.Count > 0)
                    {
                        return Convert.ToInt32(dt.Rows[0]["Total"]);
                    }
                    else
                    {
                        return 0;
                    }
                }
                return 0;
            }
            catch (Exception ex)
            {
                return -1;
            }
        }

        #region "Cancel Process"
        public Boolean CancelBookingByPNR(string AgentID, string PNR)
        {
            List<ABS.Logic.GroupBooking.Booking.BookingTransactionDetail> BookingTransactionDetail;
            BookingTransactionDetail = Get_TRANSDTL(AgentID, PNR);
            return CancelProcess(BookingTransactionDetail, AgentID);
        }

        public Boolean CancelProcess(List<BookingTransactionDetail> detailDatas, string AgentID)
        {
            string errMessage = "";
            BookingTransactionMain headerData = new BookingTransactionMain();
            //List<BookingTransactionDetail> detailDatas = new List<BookingTransactionDetail>();
            List<BookingTransactionDetail> listDetailDatas = new List<BookingTransactionDetail>();
            BookingTransactionDetail detailInfo = new BookingTransactionDetail();
            List<BookingTransTender> paymentData = new List<BookingTransTender>();
            ABS.Logic.GroupBooking.Booking.RequestApp ReqInfo = new ABS.Logic.GroupBooking.Booking.RequestApp();
            ABS.Navitaire.APIBooking absNavitaire = new ABS.Navitaire.APIBooking("");
            string TransID = "";

            //added by ketee, amount paid
            decimal CollectedAmount = 0;
            //added by ketee, return false if no booking cancelled, 20170420
            Boolean cancelled = false;

            try
            {

                //detailDatas = BookingDetailFilter(TransID);

                if (detailDatas != null)
                {
                    foreach (BookingTransactionDetail detail in detailDatas)
                    {
                        errMessage = "";
                        if (detail.RecordLocator.Trim().Length >= 6)
                        {
                            ABS.Navitaire.BookingManager.GetBookingResponse resp = absNavitaire.GetBookingResponseByPNR(detail.RecordLocator.Trim());
                            if (resp != null && resp.Booking != null)
                            {
                                CollectedAmount = resp.Booking.BookingSum.TotalCost - resp.Booking.BookingSum.BalanceDue;
                            }
                            TransID = detail.TransID;
                            string signature = absNavitaire.AgentLogon();
                            absNavitaire.CancelJourney(detail.RecordLocator, -detail.CollectedAmount, detail.Currency, signature, ref errMessage); //cancel journey to api
                            if (errMessage == "")
                            {
                                detail.LastSyncBy = AgentID;
                                detail.SyncLastUpd = DateTime.Now;
                                detail.TransVoid = 1;
                                listDetailDatas.Add(detail);
                                SetTransDetailStatus(detail.SellKey, 1);
                                cancelled = true;
                            }
                            else
                            {
                                log.Info(this, "Cancellation Error: " + errMessage + " PNR: " + detail.RecordLocator);
                                return false;
                            }
                        }
                    }

                    //if (listDetailDatas.Count > 0 && TransID != "")
                    //{
                    //    //update status on local
                    //    headerData = objBooking.GetSingleBK_TRANSMAIN(TransID);
                    //    headerData.TransStatus = 4;
                    //    headerData.CancelDate = DateTime.Now;

                    //    //headerData.TransRemark1 = memoRemarks.Text;

                    //    paymentData = objBooking.GetAllBK_TRANSTENDERFilter(TransID);
                    //    //AdminSet = (AdminSet)Session["AdminSet"];


                    //    //ReqInfo.Remark = memoRemarks.Text;
                    //    ReqInfo.ReqType = "C";
                    //    ReqInfo.LastSyncBy = AgentSet.AgentID;
                    //    ReqInfo.ApprovedBy = AgentSet.AgentID;
                    //    ReqInfo.ApprovedDate = DateTime.Now;
                    //    if (objBooking.UpdateTransMainPaymentCancelApprove(headerData, listDetailDatas, paymentData, ReqInfo, ABS.Logic.GroupBooking.Booking.BookingControl.EnumSaveType.Update))
                    //    {
                    //        //must success
                    //    }
                    //    else
                    //    {
                    //        //failed sql
                    //        return false;
                    //    }
                    //}
                    //else
                    //{
                    //    //failed, no record sent to api
                    //    return false;
                    //}
                }
                return cancelled;
                //objBooking.CancelTransaction(TransID, AgentSet.AgentID, ref intError, ref strErrorDesc);
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }

        }
        #endregion

        #region "AutoCancel"
        //retrieve journey and payment from navitaire
        public Boolean RetrieveBookingDetailsByPNR(Navitaire.APIBooking ApiBook, ref Navitaire.BookingManager.GetBookingResponse Response, string PNR, string TransID, int cnt = 0)
        {
            List<BookingJourneyContainer> lstBookingJourneyContainer = new List<BookingJourneyContainer>();
            List<PaymentContainer> lstPaymentContainer = new List<PaymentContainer>();
            //change to new add-On table, Tyas
            //Bk_transssr BK_TRANSSSRInfo = new Bk_transssr();
            //List<Bk_transssr> listbk_transssrinfo = new List<Bk_transssr>();
            Bk_transaddon BK_TRANSSSRInfo1 = new Bk_transaddon();
            Bk_transaddon BK_TRANSSSRInfo2 = new Bk_transaddon();
            Bk_transaddon BK_TRANSSSRInfo3 = new Bk_transaddon();
            Bk_transaddon BK_TRANSSSRInfo4 = new Bk_transaddon();
            DataTable dtArrayBaggage = (DataTable)HttpContext.Current.Application["dtArrayBaggage"];
            DataTable dtArraySport = (DataTable)HttpContext.Current.Application["dtArraySport"];
            DataTable dtArrayInsure = (DataTable)HttpContext.Current.Session["dtArrayInsure"];//added by romy for insure
            DataTable dtArrayKit = (DataTable)HttpContext.Current.Application["dtArrayKit"];
            DataTable dtArrayDrink = (DataTable)HttpContext.Current.Application["dtArrayDrink"];
            DataTable dtArrayMeal = (DataTable)HttpContext.Current.Application["dtArrayMeal"];
            DataTable dtArrayDuty = (DataTable)HttpContext.Current.Application["dtArrayDuty"];
            List<Bk_transaddon> listbk_transssrinfo = new List<Bk_transaddon>();
            try
            {
                string errMsg = "";

                //try to call for 1 time for 1 transid
                //Navitaire.APIBooking ApiBook = new Navitaire.APIBooking("");
                //Navitaire.BookingManager.GetBookingResponse Response = new Navitaire.BookingManager.GetBookingResponse();

                //log.Info(this,"Object ApiBook created - PNR : " + PNR);
                Response = ApiBook.GetBookingResponseByPNR(PNR);
                string resp = GetXMLString(Response);
                //log.Info(this,"Response retrieve - PNR : " + PNR);
                if (Response != null)
                {
                    if (Response.Booking == null)
                    {
                        return false;
                        log.Info(this, "RetrieveBookingDetailsByPNR - Booking status is pending. PNR:" + PNR + ", TransactionID:" + TransID);
                        cnt += 1;
                        if (cnt <= 5)
                        {
                            return RetrieveBookingDetailsByPNR(ApiBook, ref Response, PNR, TransID, cnt);
                        }
                        else
                        {
                            return false;
                        }
                    }

                    int paxADT = 0, paxCHD = 0;
                    decimal serviceFee = 0;
                    decimal vatFee = 0;
                    decimal chargeFee = 0;
                    decimal otherFee = 0;
                    decimal processFee = 0;
                    decimal nameChangeFee = 0;
                    decimal splFee = 0;
                    decimal ssrFee1 = 0; //going
                    decimal ssrFee2 = 0; //return
                    decimal seatFee1 = 0; //going
                    decimal seatFee2 = 0; //return
                    decimal infantFee1 = 0; //going
                    decimal infantFee2 = 0; //return
                    string feeCode = "";
                    string SSRCode = "";
                    decimal feeAmount = 0;
                    decimal SSRAmount = 0;
                    decimal InsureAmount = 0;
                    decimal InsureAmt = 0;
                    decimal discFee = 0;
                    decimal promoDiscFee = 0;
                    string feeChargeType = "";

                    DataTable dtTFOth = new DataTable();
                    if (HttpContext.Current.Session["dataTransFeesOthers"] != null)
                    {
                        dtTFOth = (DataTable)HttpContext.Current.Session["dataTransFeesOthers"];
                    }
                    else
                    {
                        dtTFOth = dtTransFees();
                    }
                    DataRow rowTFOth;
                    int SeqNoTemp = 0;

                    //get rate list
                    //string SellSessionID = ApiBook.AgentLogon();
                    //Navitaire.UtilitiesManager.GetExternalRatesListResponseData RateResponse = ApiBook.GetExternalRateList(SellSessionID);
                    //string req = GetXMLString(RateResponse);

                    #region "Load Booking"
                    BookingContainer bookingContainer = new BookingContainer();
                    bookingContainer.RecordLocator = Response.Booking.RecordLocator;
                    bookingContainer.BookingID = Response.Booking.BookingID;
                    bookingContainer.CurrencyCode = Response.Booking.CurrencyCode;
                    bookingContainer.BookingStatus = Response.Booking.BookingInfo.BookingStatus.ToString();
                    bookingContainer.ExpiredDate = Response.Booking.BookingInfo.ExpiredDate;
                    bookingContainer.PaidStatus = Response.Booking.BookingInfo.PaidStatus.ToString(); //UnderPaid, FullInPaid, OverPaid

                    if (bookingContainer != null) //if got booking
                    {
                        HttpContext.Current.Session.Remove("BookingContainers");
                        HttpContext.Current.Session.Add("BookingContainers", bookingContainer);
                    }

                    //remark by ketee 2016-02-09
                    if (bookingContainer.BookingStatus.ToLower() == "closed")
                    {
                        return true;
                    }
                    //decimal currRate = 1;
                    //if (bookingContainer.CurrencyCode != "MYR")
                    //{
                    //    for (int i = 0; i < RateResponse.ExternalRateList.Length; i++)
                    //    {
                    //        if (RateResponse.ExternalRateList[i].QuotedCurrency == bookingContainer.CurrencyCode && RateResponse.ExternalRateList[i].CollectedCurrency == "MYR")
                    //        {
                    //            currRate = RateResponse.ExternalRateList[i].ExchangeRate;
                    //            break;
                    //        }
                    //    }
                    //}
                    //bookingContainer.ExchangeRate = currRate;
                    #endregion

                    //change to new add-On table, Tyas
                    //#region "Load Passenger Fee"
                    ////retrieve arrival, departure
                    //string Departure = "", Arrival = "", TransitDepart = "", TransitReturn = "";
                    //for (int j = 0; j < Response.Booking.Journeys.Length; j++)
                    //{
                    //    for (int k = 0; k < Response.Booking.Journeys[j].Segments.Length; k++)
                    //    {
                    //        switch (j)
                    //        {
                    //            case 0:
                    //                if (k == 0)
                    //                {
                    //                    Departure = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                    //                    Arrival = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                    //                }
                    //                else if (k == 1)
                    //                {
                    //                    TransitDepart = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                    //                    Arrival = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                    //                }
                    //                break;
                    //            case 1:
                    //                if (k == 0)
                    //                {
                    //                    Arrival = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                    //                }
                    //                else if (k == 1)
                    //                {
                    //                    TransitReturn = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                    //                }
                    //                break;
                    //            default:
                    //                break;

                    //        }
                    //    }
                    //}

                    //int inft = 0;
                    //foreach (Passenger itemPassenger in Response.Booking.Passengers)
                    //{
                    //    if (itemPassenger.PassengerTypeInfos[0].PaxType == "ADT")
                    //    {
                    //        paxADT++;
                    //    }
                    //    else
                    //    {
                    //        paxCHD++;
                    //    }

                    //    foreach (PassengerFee itemPassengerFee in itemPassenger.PassengerFees)
                    //    {
                    //        if (itemPassengerFee.SSRCode == "INFT")
                    //        {
                    //            inft = 1;
                    //        }
                    //        else
                    //        {
                    //            inft = 0;
                    //        }
                    //        foreach (BookingServiceCharge itemServiceCharge in itemPassengerFee.ServiceCharges)
                    //        {
                    //            BK_TRANSSSRInfo = new Bk_transssr();
                    //            BK_TRANSSSRInfo.PassengerID = itemPassenger.PassengerNumber.ToString();
                    //            BK_TRANSSSRInfo.RecordLocator = PNR;
                    //            feeCode = itemServiceCharge.ChargeCode;
                    //            feeAmount = itemServiceCharge.Amount;
                    //            feeChargeType = itemServiceCharge.ChargeType.ToString();

                    //            if (itemPassengerFee.FeeType == FeeType.SSRFee)
                    //            {
                    //                if (feeChargeType.ToUpper() == "DISCOUNT")
                    //                {
                    //                    feeAmount = 0 - feeAmount;
                    //                }
                    //                if (itemPassengerFee.FlightReference != "")
                    //                {
                    //                    if (itemPassengerFee.FlightReference.Substring(16, 6) == Departure + Arrival || itemPassengerFee.FlightReference.Substring(16, 6) == Departure + TransitDepart || itemPassengerFee.FlightReference.Substring(16, 6) == TransitDepart + Arrival)
                    //                    {
                    //                        if (inft == 1)
                    //                            infantFee1 += feeAmount;
                    //                        else
                    //                        {
                    //                            ssrFee1 += feeAmount;
                    //                            BK_TRANSSSRInfo.SSRRate = feeAmount;
                    //                            BK_TRANSSSRInfo.SSRCode = feeCode;
                    //                            BK_TRANSSSRInfo.Origin = itemPassengerFee.FlightReference.Substring(16, 3);
                    //                            BK_TRANSSSRInfo.Destination = itemPassengerFee.FlightReference.Substring(19, 3);
                    //                            BK_TRANSSSRInfo.CarrierCode = itemPassengerFee.FlightReference.Substring(9, 2);
                    //                            if (itemPassengerFee.FlightReference.Substring(11, 1).ToString() == " ")
                    //                            {
                    //                                BK_TRANSSSRInfo.FlightNo = itemPassengerFee.FlightReference.Substring(12, 3);
                    //                            }
                    //                            else
                    //                            {
                    //                                BK_TRANSSSRInfo.FlightNo = itemPassengerFee.FlightReference.Substring(11, 4);
                    //                            }

                    //                            listbk_transssrinfo.Add(BK_TRANSSSRInfo);
                    //                        }
                    //                    }
                    //                    else if (itemPassengerFee.FlightReference.Substring(16, 6) == Arrival + Departure || itemPassengerFee.FlightReference.Substring(16, 6) == TransitReturn + Departure || itemPassengerFee.FlightReference.Substring(16, 6) == Arrival + TransitReturn)
                    //                    {
                    //                        if (inft == 1)
                    //                            infantFee2 += feeAmount;
                    //                        else
                    //                        {
                    //                            ssrFee2 += feeAmount;
                    //                            BK_TRANSSSRInfo.SSRRate = feeAmount;
                    //                            BK_TRANSSSRInfo.SSRCode = feeCode;
                    //                            BK_TRANSSSRInfo.Origin = itemPassengerFee.FlightReference.Substring(16, 3);
                    //                            BK_TRANSSSRInfo.Destination = itemPassengerFee.FlightReference.Substring(19, 3);
                    //                            BK_TRANSSSRInfo.CarrierCode = itemPassengerFee.FlightReference.Substring(9, 2);
                    //                            if (itemPassengerFee.FlightReference.Substring(11, 1).ToString() == " ")
                    //                            {
                    //                                BK_TRANSSSRInfo.FlightNo = itemPassengerFee.FlightReference.Substring(12, 3);
                    //                            }
                    //                            else
                    //                            {
                    //                                BK_TRANSSSRInfo.FlightNo = itemPassengerFee.FlightReference.Substring(11, 4);
                    //                            }

                    //                            listbk_transssrinfo.Add(BK_TRANSSSRInfo);
                    //                        }
                    //                    }
                    //                }
                    //            }
                    //            else if (itemPassengerFee.FeeType == FeeType.SeatFee)
                    //            {
                    //                if (feeChargeType.ToUpper() == "DISCOUNT")
                    //                {
                    //                    feeAmount = 0 - feeAmount;
                    //                }
                    //                if (itemPassengerFee.FlightReference != "")
                    //                {

                    //                    if (itemPassengerFee.FlightReference.Substring(16, 6) == Departure + Arrival || itemPassengerFee.FlightReference.Substring(16, 6) == Departure + TransitDepart || itemPassengerFee.FlightReference.Substring(16, 6) == TransitDepart + Arrival)
                    //                        seatFee1 += feeAmount;
                    //                    else if (itemPassengerFee.FlightReference.Substring(16, 6) == Arrival + Departure || itemPassengerFee.FlightReference.Substring(16, 6) == TransitReturn + Departure || itemPassengerFee.FlightReference.Substring(16, 6) == Arrival + TransitReturn)
                    //                        seatFee2 += feeAmount;
                    //                }
                    //            }
                    //            else if (itemPassengerFee.FeeType == FeeType.PaymentFee)
                    //            {
                    //                if (feeChargeType.ToUpper() == "DISCOUNT")
                    //                {
                    //                    feeAmount = 0 - feeAmount;
                    //                }
                    //                processFee += feeAmount;
                    //            }
                    //            else if (itemPassengerFee.FeeCode == "NCF")
                    //            {
                    //                if (feeChargeType.ToUpper() == "DISCOUNT")
                    //                {
                    //                    feeAmount = 0 - feeAmount;
                    //                }
                    //                nameChangeFee += feeAmount;
                    //            }
                    //            else if (feeChargeType.ToUpper() == "DISCOUNT")
                    //            {
                    //                discFee -= feeAmount;
                    //            }
                    //            else if (feeChargeType.ToUpper() == "PROMOTIONDISCOUNT")
                    //            {
                    //                promoDiscFee -= feeAmount;
                    //            }
                    //            else
                    //            {
                    //                switch (feeCode)
                    //                {
                    //                    case "SVCF":
                    //                        serviceFee += feeAmount;
                    //                        break;
                    //                    case "VAT":
                    //                        vatFee += feeAmount;
                    //                        break;
                    //                    case "CHG":
                    //                        chargeFee += feeAmount;
                    //                        break;
                    //                    case "SPL":
                    //                        splFee += feeAmount;
                    //                        break;
                    //                    //case "NCF":
                    //                    //    nameChangeFee += feeAmount;
                    //                    //    break;
                    //                    //case "CONA":
                    //                    //    processFee += feeAmount;
                    //                    //    break;
                    //                    default:
                    //                        otherFee += feeAmount;
                    //                        break;
                    //                }
                    //            }
                    //        }
                    //    }
                    //}


                    //#endregion
                    #region "Load Passenger Fee"
                    //retrieve arrival, departure
                    string Departure = "", Arrival = "", TransitDepart = "", TransitReturn = "";
                    for (int j = 0; j < Response.Booking.Journeys.Length; j++)
                    {
                        for (int k = 0; k < Response.Booking.Journeys[j].Segments.Length; k++)
                        {
                            switch (j)
                            {
                                case 0:
                                    if (k == 0)
                                    {
                                        Departure = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        Arrival = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                    }
                                    else if (k == 1)
                                    {
                                        TransitDepart = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        Arrival = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                    }
                                    break;
                                case 1:
                                    if (k == 0)
                                    {
                                        Arrival = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                    }
                                    else if (k == 1)
                                    {
                                        TransitReturn = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                    }
                                    break;
                                default:
                                    break;

                            }
                        }
                    }

                    int inft = 0;
                    int index = 0;


                    foreach (Passenger itemPassenger in Response.Booking.Passengers)
                    {
                        BK_TRANSSSRInfo1 = new Bk_transaddon();
                        BK_TRANSSSRInfo2 = new Bk_transaddon();
                        BK_TRANSSSRInfo3 = new Bk_transaddon();
                        BK_TRANSSSRInfo4 = new Bk_transaddon();


                        if (itemPassenger.PassengerTypeInfos[0].PaxType == "ADT")
                        {
                            paxADT++;
                        }
                        else
                        {
                            paxCHD++;
                        }

                        foreach (PassengerFee itemPassengerFee in itemPassenger.PassengerFees)
                        {
                            if (itemPassengerFee.SSRCode == "INFT")
                            {
                                inft = 1;
                            }
                            else
                            {
                                inft = 0;
                            }

                            SSRAmount = 0;
                            SSRCode = "";
                            InsureAmt = 0;
                            foreach (BookingServiceCharge itemServiceCharge in itemPassengerFee.ServiceCharges)
                            {
                                feeCode = itemServiceCharge.ChargeCode;
                                feeAmount = itemServiceCharge.Amount;
                                feeChargeType = itemServiceCharge.ChargeType.ToString();

                                if (itemPassengerFee.FeeType == FeeType.SSRFee)
                                {
                                    if (feeChargeType.ToUpper() == "DISCOUNT")
                                    {
                                        feeAmount = 0 - feeAmount;
                                    }
                                    if (itemPassengerFee.FlightReference != "")
                                    {

                                        SSRAmount += itemServiceCharge.Amount;
                                        SSRCode = itemPassengerFee.SSRCode;
                                    }
                                }
                                //added by romy, 20170913, insurance
                                else if (itemPassengerFee.FeeCode == "INSA" || itemPassengerFee.FeeCode == "INSB" || itemPassengerFee.FeeCode == "INSC")
                                {
                                    if (feeChargeType.ToUpper() == "DISCOUNT")
                                    {
                                        feeAmount = 0 - feeAmount;
                                    }
                                    if (itemPassengerFee.FlightReference == "")
                                    {
                                        InsureAmt -= itemServiceCharge.Amount;
                                        //SSRCode = itemPassengerFee.FeeCode;
                                    }
                                }
                                else if (itemPassengerFee.FeeType == FeeType.SeatFee)
                                {
                                    if (feeChargeType.ToUpper() == "DISCOUNT")
                                    {
                                        feeAmount = 0 - feeAmount;
                                    }
                                    if (itemPassengerFee.FlightReference != "")
                                    {

                                        if (itemPassengerFee.FlightReference.Substring(16, 6) == Departure + Arrival || itemPassengerFee.FlightReference.Substring(16, 6) == Departure + TransitDepart || itemPassengerFee.FlightReference.Substring(16, 6) == TransitDepart + Arrival)
                                            seatFee1 += feeAmount;
                                        else if (itemPassengerFee.FlightReference.Substring(16, 6) == Arrival + Departure || itemPassengerFee.FlightReference.Substring(16, 6) == TransitReturn + Departure || itemPassengerFee.FlightReference.Substring(16, 6) == Arrival + TransitReturn)
                                            seatFee2 += feeAmount;
                                    }
                                }
                                else if (itemPassengerFee.FeeType == FeeType.PaymentFee)
                                {
                                    if (feeChargeType.ToUpper() == "DISCOUNT")
                                    {
                                        feeAmount = 0 - feeAmount;
                                    }
                                    processFee += feeAmount;
                                }
                                else if (itemPassengerFee.FeeCode == "NCF")
                                {
                                    if (feeChargeType.ToUpper() == "DISCOUNT")
                                    {
                                        feeAmount = 0 - feeAmount;
                                    }
                                    nameChangeFee += feeAmount;
                                }
                                else if (feeChargeType.ToUpper() == "DISCOUNT")
                                {
                                    discFee -= feeAmount;

                                    if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                    {
                                        int found = 0;
                                        for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                        {

                                            if (dtTFOth.Rows[i]["FeeCode"].ToString() == itemServiceCharge.ChargeCode.ToString() && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                            {
                                                dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + feeAmount;
                                                dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (feeAmount);
                                                found = 1;
                                                break;
                                            }

                                        }
                                        if (found == 0)
                                        {
                                            if (dtTFOth.Rows.Count == 0) SeqNoTemp = 1;
                                            else
                                            {
                                                SeqNoTemp += 1;
                                            }

                                            rowTFOth = dtTFOth.NewRow();
                                            rowTFOth["SeqNo"] = SeqNoTemp;
                                            rowTFOth["PaxType"] = "ADT";
                                            rowTFOth["FeeCode"] = feeCode;
                                            rowTFOth["FeeDesc"] = Departure + "-" + Arrival;
                                            rowTFOth["Origin"] = Departure;
                                            rowTFOth["Transit"] = TransitDepart;

                                            rowTFOth["Destination"] = Arrival;
                                            rowTFOth["FeeType"] = feeChargeType;
                                            rowTFOth["FeeQty"] = Response.Booking.Passengers.Length;
                                            rowTFOth["FeeRate"] = feeAmount;
                                            rowTFOth["RecordLocator"] = Response.Booking.RecordLocator;
                                            rowTFOth["FeeAmt"] = feeAmount;
                                            dtTFOth.Rows.Add(rowTFOth);
                                        }
                                    }
                                    else
                                    {
                                        if (dtTFOth.Rows.Count == 0) SeqNoTemp = 1;
                                        else
                                        {
                                            SeqNoTemp += 1;
                                        }

                                        rowTFOth = dtTFOth.NewRow();
                                        rowTFOth["SeqNo"] = SeqNoTemp;
                                        rowTFOth["PaxType"] = "ADT";
                                        rowTFOth["FeeCode"] = feeCode;
                                        rowTFOth["FeeDesc"] = Departure + "-" + Arrival;
                                        rowTFOth["Origin"] = Departure;
                                        rowTFOth["Transit"] = TransitDepart;

                                        rowTFOth["Destination"] = Arrival;
                                        rowTFOth["FeeType"] = feeChargeType;
                                        rowTFOth["FeeQty"] = Response.Booking.Passengers.Length;
                                        rowTFOth["FeeRate"] = feeAmount;
                                        rowTFOth["RecordLocator"] = Response.Booking.RecordLocator;
                                        rowTFOth["FeeAmt"] = feeAmount;
                                        dtTFOth.Rows.Add(rowTFOth);
                                    }
                                }
                                else if (feeChargeType.ToUpper() == "PROMOTIONDISCOUNT")
                                {
                                    promoDiscFee -= feeAmount;
                                }
                                else
                                {
                                    switch (feeCode)
                                    {
                                        case "SVCF":
                                            serviceFee += feeAmount;
                                            break;
                                        case "VAT":
                                            vatFee += feeAmount;
                                            break;
                                        case "CHG":
                                            chargeFee += feeAmount;

                                            if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                            {
                                                int found = 0;
                                                for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                {

                                                    if (dtTFOth.Rows[i]["FeeCode"].ToString() == itemServiceCharge.ChargeCode.ToString() && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                    {
                                                        dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + feeAmount;
                                                        dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (feeAmount);
                                                        found = 1;
                                                        break;
                                                    }

                                                }
                                                if (found == 0)
                                                {
                                                    if (dtTFOth.Rows.Count == 0) SeqNoTemp = 1;
                                                    else
                                                    {
                                                        SeqNoTemp += 1;
                                                    }

                                                    rowTFOth = dtTFOth.NewRow();
                                                    rowTFOth["SeqNo"] = SeqNoTemp;
                                                    rowTFOth["PaxType"] = "ADT";
                                                    rowTFOth["FeeCode"] = feeCode;
                                                    rowTFOth["FeeDesc"] = Departure + "-" + Arrival;
                                                    rowTFOth["Origin"] = Departure;
                                                    rowTFOth["Transit"] = TransitDepart;

                                                    rowTFOth["Destination"] = Arrival;
                                                    rowTFOth["FeeType"] = feeChargeType;
                                                    rowTFOth["FeeQty"] = Response.Booking.Passengers.Length;
                                                    rowTFOth["FeeRate"] = feeAmount;
                                                    rowTFOth["RecordLocator"] = Response.Booking.RecordLocator;
                                                    rowTFOth["FeeAmt"] = feeAmount;
                                                    dtTFOth.Rows.Add(rowTFOth);
                                                }
                                            }
                                            else
                                            {
                                                if (dtTFOth.Rows.Count == 0) SeqNoTemp = 1;
                                                else
                                                {
                                                    SeqNoTemp += 1;
                                                }

                                                rowTFOth = dtTFOth.NewRow();
                                                rowTFOth["SeqNo"] = SeqNoTemp;
                                                rowTFOth["PaxType"] = "ADT";
                                                rowTFOth["FeeCode"] = feeCode;
                                                rowTFOth["FeeDesc"] = Departure + "-" + Arrival;
                                                rowTFOth["Origin"] = Departure;
                                                rowTFOth["Transit"] = TransitDepart;

                                                rowTFOth["Destination"] = Arrival;
                                                rowTFOth["FeeType"] = feeChargeType;
                                                rowTFOth["FeeQty"] = Response.Booking.Passengers.Length;
                                                rowTFOth["FeeRate"] = feeAmount;
                                                rowTFOth["RecordLocator"] = Response.Booking.RecordLocator;
                                                rowTFOth["FeeAmt"] = feeAmount;
                                                dtTFOth.Rows.Add(rowTFOth);
                                            }
                                            break;
                                        case "SPL":
                                            splFee += feeAmount;

                                            if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                            {
                                                int found = 0;
                                                for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                {

                                                    if (dtTFOth.Rows[i]["FeeCode"].ToString() == itemServiceCharge.ChargeCode.ToString() && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                    {
                                                        dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + feeAmount;
                                                        dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (feeAmount);
                                                        found = 1;
                                                        break;
                                                    }

                                                }
                                                if (found == 0)
                                                {
                                                    if (dtTFOth.Rows.Count == 0) SeqNoTemp = 1;
                                                    else
                                                    {
                                                        SeqNoTemp += 1;
                                                    }

                                                    rowTFOth = dtTFOth.NewRow();
                                                    rowTFOth["SeqNo"] = SeqNoTemp;
                                                    rowTFOth["PaxType"] = "ADT";
                                                    rowTFOth["FeeCode"] = feeCode;
                                                    rowTFOth["FeeDesc"] = Departure + "-" + Arrival;
                                                    rowTFOth["Origin"] = Departure;
                                                    rowTFOth["Transit"] = TransitDepart;

                                                    rowTFOth["Destination"] = Arrival;
                                                    rowTFOth["FeeType"] = feeChargeType;
                                                    rowTFOth["FeeQty"] = Response.Booking.Passengers.Length;
                                                    rowTFOth["FeeRate"] = feeAmount;
                                                    rowTFOth["RecordLocator"] = Response.Booking.RecordLocator;
                                                    rowTFOth["FeeAmt"] = feeAmount;
                                                    dtTFOth.Rows.Add(rowTFOth);
                                                }
                                            }
                                            else
                                            {
                                                if (dtTFOth.Rows.Count == 0) SeqNoTemp = 1;
                                                else
                                                {
                                                    SeqNoTemp += 1;
                                                }

                                                rowTFOth = dtTFOth.NewRow();
                                                rowTFOth["SeqNo"] = SeqNoTemp;
                                                rowTFOth["PaxType"] = "ADT";
                                                rowTFOth["FeeCode"] = feeCode;
                                                rowTFOth["FeeDesc"] = Departure + "-" + Arrival;
                                                rowTFOth["Origin"] = Departure;
                                                rowTFOth["Transit"] = TransitDepart;

                                                rowTFOth["Destination"] = Arrival;
                                                rowTFOth["FeeType"] = feeChargeType;
                                                rowTFOth["FeeQty"] = Response.Booking.Passengers.Length;
                                                rowTFOth["FeeRate"] = feeAmount;
                                                rowTFOth["RecordLocator"] = Response.Booking.RecordLocator;
                                                rowTFOth["FeeAmt"] = feeAmount;
                                                dtTFOth.Rows.Add(rowTFOth);
                                            }
                                            break;
                                        //case "NCF":
                                        //    nameChangeFee += feeAmount;
                                        //    break;
                                        //case "CONA":
                                        //    processFee += feeAmount;
                                        //    break;
                                        default:
                                            otherFee += feeAmount;


                                            if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                            {
                                                int found = 0;
                                                for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                {

                                                    if (dtTFOth.Rows[i]["FeeCode"].ToString() == itemServiceCharge.ChargeCode.ToString() && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                    {
                                                        dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + feeAmount;
                                                        dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (feeAmount);
                                                        found = 1;
                                                        break;
                                                    }

                                                }
                                                if (found == 0)
                                                {
                                                    if (dtTFOth.Rows.Count == 0) SeqNoTemp = 1;
                                                    else
                                                    {
                                                        SeqNoTemp += 1;
                                                    }

                                                    rowTFOth = dtTFOth.NewRow();
                                                    rowTFOth["SeqNo"] = SeqNoTemp;
                                                    rowTFOth["PaxType"] = "ADT";
                                                    rowTFOth["FeeCode"] = feeCode;
                                                    rowTFOth["FeeDesc"] = Departure + "-" + Arrival;
                                                    rowTFOth["Origin"] = Departure;
                                                    rowTFOth["Transit"] = TransitDepart;

                                                    rowTFOth["Destination"] = Arrival;
                                                    rowTFOth["FeeType"] = feeChargeType;
                                                    rowTFOth["FeeQty"] = Response.Booking.Passengers.Length;
                                                    rowTFOth["FeeRate"] = feeAmount;
                                                    rowTFOth["RecordLocator"] = Response.Booking.RecordLocator;
                                                    rowTFOth["FeeAmt"] = feeAmount;
                                                    dtTFOth.Rows.Add(rowTFOth);
                                                }
                                            }
                                            else
                                            {
                                                if (dtTFOth.Rows.Count == 0) SeqNoTemp = 1;
                                                else
                                                {
                                                    SeqNoTemp += 1;
                                                }

                                                rowTFOth = dtTFOth.NewRow();
                                                rowTFOth["SeqNo"] = SeqNoTemp;
                                                rowTFOth["PaxType"] = "ADT";
                                                rowTFOth["FeeCode"] = feeCode;
                                                rowTFOth["FeeDesc"] = Departure + "-" + Arrival;
                                                rowTFOth["Origin"] = Departure;
                                                rowTFOth["Transit"] = TransitDepart;

                                                rowTFOth["Destination"] = Arrival;
                                                rowTFOth["FeeType"] = feeChargeType;
                                                rowTFOth["FeeQty"] = Response.Booking.Passengers.Length;
                                                rowTFOth["FeeRate"] = feeAmount;
                                                rowTFOth["RecordLocator"] = Response.Booking.RecordLocator;
                                                rowTFOth["FeeAmt"] = feeAmount;
                                                dtTFOth.Rows.Add(rowTFOth);
                                            }
                                            break;
                                    }
                                }
                            }



                            if (itemPassengerFee.FlightReference.Trim() != "")
                            {
                                if (itemPassengerFee.FlightReference.Length > 16 && itemPassengerFee.FlightReference.Substring(16, 3) == Departure)
                                {
                                    if (inft == 1)
                                    {
                                        infantFee1 += SSRAmount;
                                        BK_TRANSSSRInfo1.InfantAmt = SSRAmount;
                                        BK_TRANSSSRInfo1.InfantCode = SSRCode;
                                    }
                                    else
                                    {
                                        ssrFee1 += SSRAmount;

                                        if (dtArrayBaggage != null && dtArrayBaggage.Rows.Count > 0 && (dtArrayBaggage.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))
                                        {
                                            BK_TRANSSSRInfo1.BaggageAmt = SSRAmount;
                                            BK_TRANSSSRInfo1.BaggageCode = SSRCode;
                                        }
                                        else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo1.DrinkCode1 == null || (BK_TRANSSSRInfo1.DrinkCode1 != null && BK_TRANSSSRInfo1.DrinkCode1 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo1.DrinkRate1 = SSRAmount;
                                            BK_TRANSSSRInfo1.DrinkCode1 = SSRCode;
                                            BK_TRANSSSRInfo1.DrinkQty1 += 1;
                                            BK_TRANSSSRInfo1.DrinkSubTotal1 = (BK_TRANSSSRInfo1.DrinkRate1 * BK_TRANSSSRInfo1.DrinkQty1);
                                        }
                                        else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo1.DrinkCode2 == null || (BK_TRANSSSRInfo1.DrinkCode2 != null && BK_TRANSSSRInfo1.DrinkCode2 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo1.DrinkRate2 = SSRAmount;
                                            BK_TRANSSSRInfo1.DrinkCode2 = SSRCode;
                                            BK_TRANSSSRInfo1.DrinkQty2 += 1;
                                            BK_TRANSSSRInfo1.DrinkSubTotal1 = (BK_TRANSSSRInfo1.DrinkRate2 * BK_TRANSSSRInfo1.DrinkQty2);
                                        }
                                        else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo1.DrinkCode3 == null || (BK_TRANSSSRInfo1.DrinkCode3 != null && BK_TRANSSSRInfo1.DrinkCode3 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo1.DrinkRate3 = SSRAmount;
                                            BK_TRANSSSRInfo1.DrinkCode3 = SSRCode;
                                            BK_TRANSSSRInfo1.DrinkQty3 += 1;
                                            BK_TRANSSSRInfo1.DrinkSubTotal3 = (BK_TRANSSSRInfo1.DrinkRate3 * BK_TRANSSSRInfo1.DrinkQty3);
                                        }
                                        else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo1.DrinkCode4 == null || (BK_TRANSSSRInfo1.DrinkCode4 != null && BK_TRANSSSRInfo1.DrinkCode4 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo1.DrinkRate4 = SSRAmount;
                                            BK_TRANSSSRInfo1.DrinkCode4 = SSRCode;
                                            BK_TRANSSSRInfo1.DrinkQty4 += 1;
                                            BK_TRANSSSRInfo1.DrinkSubTotal4 = (BK_TRANSSSRInfo1.DrinkRate4 * BK_TRANSSSRInfo1.DrinkQty4);
                                        }
                                        else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo1.MealCode1 == null || (BK_TRANSSSRInfo1.MealCode1 != null && BK_TRANSSSRInfo1.MealCode1 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo1.MealRate1 = SSRAmount;
                                            BK_TRANSSSRInfo1.MealCode1 = SSRCode;
                                            BK_TRANSSSRInfo1.MealQty1 += 1;
                                            BK_TRANSSSRInfo1.MealSubTotal1 = (BK_TRANSSSRInfo1.MealRate1 * BK_TRANSSSRInfo1.MealQty1);
                                        }
                                        else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo1.MealCode2 == null || (BK_TRANSSSRInfo1.MealCode2 != null && BK_TRANSSSRInfo1.MealCode2 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo1.MealRate2 = SSRAmount;
                                            BK_TRANSSSRInfo1.MealCode2 = SSRCode;
                                            BK_TRANSSSRInfo1.MealQty2 += 1;
                                            BK_TRANSSSRInfo1.MealSubTotal2 = (BK_TRANSSSRInfo1.MealRate2 * BK_TRANSSSRInfo1.MealQty2);
                                        }
                                        else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo1.MealCode3 == null || (BK_TRANSSSRInfo1.MealCode3 != null && BK_TRANSSSRInfo1.MealCode3 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo1.MealRate3 = SSRAmount;
                                            BK_TRANSSSRInfo1.MealCode3 = SSRCode;
                                            BK_TRANSSSRInfo1.MealQty3 += 1;
                                            BK_TRANSSSRInfo1.MealSubTotal3 = (BK_TRANSSSRInfo1.MealRate3 * BK_TRANSSSRInfo1.MealQty3);
                                        }
                                        else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo1.MealCode4 == null || (BK_TRANSSSRInfo1.MealCode4 != null && BK_TRANSSSRInfo1.MealCode4 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo1.MealRate4 = SSRAmount;
                                            BK_TRANSSSRInfo1.MealCode4 = SSRCode;
                                            BK_TRANSSSRInfo1.MealQty4 += 1;
                                            BK_TRANSSSRInfo1.MealSubTotal4 = (BK_TRANSSSRInfo1.MealRate4 * BK_TRANSSSRInfo1.MealQty4);
                                        }
                                        else if (dtArraySport != null && dtArraySport.Rows.Count > 0 && (dtArraySport.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))
                                        {
                                            BK_TRANSSSRInfo1.SportAmt = SSRAmount;
                                            BK_TRANSSSRInfo1.SportCode = SSRCode;
                                        }
                                        else if (dtArrayInsure != null && dtArrayInsure.Rows.Count > 0 && (dtArrayInsure.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))//added by romy, 20170814, insurance
                                        {
                                            BK_TRANSSSRInfo1.InsureAmt = SSRAmount;
                                            BK_TRANSSSRInfo1.InsureCode = SSRCode;
                                        }
                                        else if (dtArrayKit != null && dtArrayKit.Rows.Count > 0 && (dtArrayKit.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))
                                        {
                                            BK_TRANSSSRInfo1.KitAmt = SSRAmount;
                                            BK_TRANSSSRInfo1.KitCode = SSRCode;
                                        }
                                        else if (dtArrayDuty != null && dtArrayDuty.Rows.Count > 0 && (dtArrayDuty.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))
                                        {
                                            BK_TRANSSSRInfo1.DutyAmt = SSRAmount;
                                            BK_TRANSSSRInfo1.DutyCode = SSRCode;
                                        }

                                    }
                                    BK_TRANSSSRInfo1.Segment = 0;
                                    BK_TRANSSSRInfo1.SeqNo = 0;
                                    BK_TRANSSSRInfo1.TripMode = 0;
                                    BK_TRANSSSRInfo1.Origin = itemPassengerFee.FlightReference.Substring(16, 3);
                                    BK_TRANSSSRInfo1.Destination = itemPassengerFee.FlightReference.Substring(19, 3);
                                    BK_TRANSSSRInfo1.CarrierCode = itemPassengerFee.FlightReference.Substring(9, 2);
                                    if (itemPassengerFee.FlightReference.Substring(11, 1).ToString() == " ")
                                    {
                                        BK_TRANSSSRInfo1.FlightNo = itemPassengerFee.FlightReference.Substring(12, 3);
                                    }
                                    else
                                    {
                                        BK_TRANSSSRInfo1.FlightNo = itemPassengerFee.FlightReference.Substring(11, 4);
                                    }

                                    //listbk_transssrinfo.Add(BK_TRANSSSRInfo);

                                }
                                else if (itemPassengerFee.FlightReference.Length > 16 && itemPassengerFee.FlightReference.Substring(16, 6) == TransitDepart + Arrival)
                                {
                                    if (inft == 1)
                                    {
                                        infantFee1 += SSRAmount;
                                        BK_TRANSSSRInfo2.InfantAmt = SSRAmount;
                                        BK_TRANSSSRInfo2.InfantCode = SSRCode;
                                    }
                                    else
                                    {
                                        ssrFee1 += SSRAmount;
                                        if (dtArrayBaggage != null && dtArrayBaggage.Rows.Count > 0 && (dtArrayBaggage.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))
                                        {
                                            BK_TRANSSSRInfo2.BaggageAmt = SSRAmount;
                                            BK_TRANSSSRInfo2.BaggageCode = SSRCode;
                                        }
                                        else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo2.DrinkCode1 == null || (BK_TRANSSSRInfo2.DrinkCode1 != null && BK_TRANSSSRInfo2.DrinkCode1 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo2.DrinkRate1 = SSRAmount;
                                            BK_TRANSSSRInfo2.DrinkCode1 = SSRCode;
                                            BK_TRANSSSRInfo2.DrinkQty1 += 1;
                                            BK_TRANSSSRInfo2.DrinkSubTotal1 = (BK_TRANSSSRInfo2.DrinkRate1 * BK_TRANSSSRInfo2.DrinkQty1);
                                        }
                                        else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo2.DrinkCode2 == null || (BK_TRANSSSRInfo2.DrinkCode2 != null && BK_TRANSSSRInfo2.DrinkCode2 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo2.DrinkRate2 = SSRAmount;
                                            BK_TRANSSSRInfo2.DrinkCode2 = SSRCode;
                                            BK_TRANSSSRInfo2.DrinkQty2 += 1;
                                            BK_TRANSSSRInfo2.DrinkSubTotal2 = (BK_TRANSSSRInfo2.DrinkRate2 * BK_TRANSSSRInfo2.DrinkQty2);
                                        }
                                        else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo2.DrinkCode3 == null || (BK_TRANSSSRInfo2.DrinkCode3 != null && BK_TRANSSSRInfo2.DrinkCode3 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo2.DrinkRate3 = SSRAmount;
                                            BK_TRANSSSRInfo2.DrinkCode3 = SSRCode;
                                            BK_TRANSSSRInfo2.DrinkQty3 += 1;
                                            BK_TRANSSSRInfo2.DrinkSubTotal3 = (BK_TRANSSSRInfo2.DrinkRate3 * BK_TRANSSSRInfo2.DrinkQty3);
                                        }
                                        else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo2.DrinkCode4 == null || (BK_TRANSSSRInfo2.DrinkCode4 != null && BK_TRANSSSRInfo2.DrinkCode4 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo2.DrinkRate4 = SSRAmount;
                                            BK_TRANSSSRInfo2.DrinkCode4 = SSRCode;
                                            BK_TRANSSSRInfo2.DrinkQty4 += 1;
                                            BK_TRANSSSRInfo2.DrinkSubTotal4 = (BK_TRANSSSRInfo2.DrinkRate4 * BK_TRANSSSRInfo2.DrinkQty4);
                                        }
                                        else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo2.MealCode1 == null || (BK_TRANSSSRInfo2.MealCode1 != null && BK_TRANSSSRInfo2.MealCode1 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo2.MealRate1 = SSRAmount;
                                            BK_TRANSSSRInfo2.MealCode1 = SSRCode;
                                            BK_TRANSSSRInfo2.MealQty1 += 1;
                                            BK_TRANSSSRInfo2.MealSubTotal1 = (BK_TRANSSSRInfo2.MealRate1 * BK_TRANSSSRInfo2.MealQty1);
                                        }
                                        else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo2.MealCode2 == null || (BK_TRANSSSRInfo2.MealCode2 != null && BK_TRANSSSRInfo2.MealCode2 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo2.MealRate2 = SSRAmount;
                                            BK_TRANSSSRInfo2.MealCode2 = SSRCode;
                                            BK_TRANSSSRInfo2.MealQty2 += 1;
                                            BK_TRANSSSRInfo2.MealSubTotal2 = (BK_TRANSSSRInfo2.MealRate2 * BK_TRANSSSRInfo2.MealQty2);
                                        }
                                        else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo2.MealCode3 == null || (BK_TRANSSSRInfo2.MealCode3 != null && BK_TRANSSSRInfo2.MealCode3 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo2.MealRate3 = SSRAmount;
                                            BK_TRANSSSRInfo2.MealCode3 = SSRCode;
                                            BK_TRANSSSRInfo2.MealQty3 += 1;
                                            BK_TRANSSSRInfo2.MealSubTotal3 = (BK_TRANSSSRInfo2.MealRate3 * BK_TRANSSSRInfo2.MealQty3);
                                        }
                                        else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo2.MealCode4 == null || (BK_TRANSSSRInfo2.MealCode4 != null && BK_TRANSSSRInfo2.MealCode4 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo2.MealRate4 = SSRAmount;
                                            BK_TRANSSSRInfo2.MealCode4 = SSRCode;
                                            BK_TRANSSSRInfo2.MealQty4 += 1;
                                            BK_TRANSSSRInfo2.MealSubTotal4 = (BK_TRANSSSRInfo2.MealRate4 * BK_TRANSSSRInfo2.MealQty4);
                                        }
                                        else if (dtArraySport != null && dtArraySport.Rows.Count > 0 && (dtArraySport.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))
                                        {
                                            BK_TRANSSSRInfo2.SportAmt = SSRAmount;
                                            BK_TRANSSSRInfo2.SportCode = SSRCode;
                                        }
                                        else if (dtArrayInsure != null && dtArrayInsure.Rows.Count > 0 && (dtArrayInsure.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))//added by romy, 20170814, insurance
                                        {
                                            BK_TRANSSSRInfo2.InsureAmt = SSRAmount;
                                            BK_TRANSSSRInfo2.InsureCode = SSRCode;
                                        }
                                        else if (dtArrayKit != null && dtArrayKit.Rows.Count > 0 && (dtArrayKit.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))
                                        {
                                            BK_TRANSSSRInfo2.KitAmt = SSRAmount;
                                            BK_TRANSSSRInfo2.KitCode = SSRCode;
                                        }
                                        else if (dtArrayDuty != null && dtArrayDuty.Rows.Count > 0 && (dtArrayDuty.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))
                                        {
                                            BK_TRANSSSRInfo2.DutyAmt = SSRAmount;
                                            BK_TRANSSSRInfo2.DutyCode = SSRCode;
                                        }
                                    }

                                    BK_TRANSSSRInfo2.Segment = 1;
                                    BK_TRANSSSRInfo2.SeqNo = 1;
                                    BK_TRANSSSRInfo2.TripMode = 0;
                                    BK_TRANSSSRInfo2.Origin = itemPassengerFee.FlightReference.Substring(16, 3);
                                    BK_TRANSSSRInfo2.Destination = itemPassengerFee.FlightReference.Substring(19, 3);
                                    BK_TRANSSSRInfo2.CarrierCode = itemPassengerFee.FlightReference.Substring(9, 2);
                                    if (itemPassengerFee.FlightReference.Substring(11, 1).ToString() == " ")
                                    {
                                        BK_TRANSSSRInfo2.FlightNo = itemPassengerFee.FlightReference.Substring(12, 3);
                                    }
                                    else
                                    {
                                        BK_TRANSSSRInfo2.FlightNo = itemPassengerFee.FlightReference.Substring(11, 4);
                                    }

                                    //listbk_transssrinfo.Add(BK_TRANSSSRInfo);

                                }
                                else if (itemPassengerFee.FlightReference.Length > 16 && itemPassengerFee.FlightReference.Substring(16, 3) == Arrival)
                                {
                                    if (inft == 1)
                                    {
                                        infantFee2 += SSRAmount;
                                        BK_TRANSSSRInfo3.InfantAmt = SSRAmount;
                                        BK_TRANSSSRInfo3.InfantCode = SSRCode;
                                    }
                                    else
                                    {
                                        ssrFee2 += SSRAmount;
                                        if (dtArrayBaggage != null && dtArrayBaggage.Rows.Count > 0 && (dtArrayBaggage.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))
                                        {
                                            BK_TRANSSSRInfo3.BaggageAmt = SSRAmount;
                                            BK_TRANSSSRInfo3.BaggageCode = SSRCode;
                                        }
                                        else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo3.DrinkCode1 == null || (BK_TRANSSSRInfo3.DrinkCode1 != null && BK_TRANSSSRInfo3.DrinkCode1 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo3.DrinkRate1 = SSRAmount;
                                            BK_TRANSSSRInfo3.DrinkCode1 = SSRCode;
                                            BK_TRANSSSRInfo3.DrinkQty1 += 1;
                                            BK_TRANSSSRInfo3.DrinkSubTotal1 = (BK_TRANSSSRInfo3.DrinkRate1 * BK_TRANSSSRInfo3.DrinkQty1);
                                        }
                                        else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo3.DrinkCode2 == null || (BK_TRANSSSRInfo3.DrinkCode2 != null && BK_TRANSSSRInfo3.DrinkCode2 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo3.DrinkRate2 = SSRAmount;
                                            BK_TRANSSSRInfo3.DrinkCode2 = SSRCode;
                                            BK_TRANSSSRInfo3.DrinkQty2 += 1;
                                            BK_TRANSSSRInfo3.DrinkSubTotal1 = (BK_TRANSSSRInfo3.DrinkRate2 * BK_TRANSSSRInfo3.DrinkQty2);
                                        }
                                        else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo3.DrinkCode3 == null || (BK_TRANSSSRInfo3.DrinkCode3 != null && BK_TRANSSSRInfo3.DrinkCode3 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo3.DrinkRate3 = SSRAmount;
                                            BK_TRANSSSRInfo3.DrinkCode3 = SSRCode;
                                            BK_TRANSSSRInfo3.DrinkQty3 += 1;
                                            BK_TRANSSSRInfo3.DrinkSubTotal3 = (BK_TRANSSSRInfo3.DrinkRate3 * BK_TRANSSSRInfo3.DrinkQty3);
                                        }
                                        else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo3.DrinkCode4 == null || (BK_TRANSSSRInfo3.DrinkCode4 != null && BK_TRANSSSRInfo3.DrinkCode4 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo3.DrinkRate4 = SSRAmount;
                                            BK_TRANSSSRInfo3.DrinkCode4 = SSRCode;
                                            BK_TRANSSSRInfo3.DrinkQty4 += 1;
                                            BK_TRANSSSRInfo3.DrinkSubTotal4 = (BK_TRANSSSRInfo3.DrinkRate4 * BK_TRANSSSRInfo3.DrinkQty4);
                                        }
                                        else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo3.MealCode1 == null || (BK_TRANSSSRInfo3.MealCode1 != null && BK_TRANSSSRInfo3.MealCode1 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo3.MealRate1 = SSRAmount;
                                            BK_TRANSSSRInfo3.MealCode1 = SSRCode;
                                            BK_TRANSSSRInfo3.MealQty1 += 1;
                                            BK_TRANSSSRInfo3.MealSubTotal1 = (BK_TRANSSSRInfo3.MealRate1 * BK_TRANSSSRInfo3.MealQty1);
                                        }
                                        else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo3.MealCode2 == null || (BK_TRANSSSRInfo3.MealCode2 != null && BK_TRANSSSRInfo3.MealCode2 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo3.MealRate2 = SSRAmount;
                                            BK_TRANSSSRInfo3.MealCode2 = SSRCode;
                                            BK_TRANSSSRInfo3.MealQty2 += 1;
                                            BK_TRANSSSRInfo3.MealSubTotal2 = (BK_TRANSSSRInfo3.MealRate2 * BK_TRANSSSRInfo3.MealQty2);
                                        }
                                        else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo3.MealCode3 == null || (BK_TRANSSSRInfo3.MealCode3 != null && BK_TRANSSSRInfo3.MealCode3 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo3.MealRate3 = SSRAmount;
                                            BK_TRANSSSRInfo3.MealCode3 = SSRCode;
                                            BK_TRANSSSRInfo3.MealQty3 += 1;
                                            BK_TRANSSSRInfo3.MealSubTotal3 = (BK_TRANSSSRInfo3.MealRate3 * BK_TRANSSSRInfo3.MealQty3);
                                        }
                                        else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo3.MealCode4 == null || (BK_TRANSSSRInfo3.MealCode4 != null && BK_TRANSSSRInfo3.MealCode4 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo3.MealRate4 = SSRAmount;
                                            BK_TRANSSSRInfo3.MealCode4 = SSRCode;
                                            BK_TRANSSSRInfo3.MealQty4 += 1;
                                            BK_TRANSSSRInfo3.MealSubTotal4 = (BK_TRANSSSRInfo3.MealRate4 * BK_TRANSSSRInfo3.MealQty4);
                                        }
                                        else if (dtArraySport != null && dtArraySport.Rows.Count > 0 && (dtArraySport.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))
                                        {
                                            BK_TRANSSSRInfo3.SportAmt = SSRAmount;
                                            BK_TRANSSSRInfo3.SportCode = SSRCode;
                                        }
                                        else if (dtArrayInsure != null && dtArrayInsure.Rows.Count > 0 && (dtArrayInsure.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))//added by romy, 20170814, insurance
                                        {
                                            BK_TRANSSSRInfo3.InsureAmt = SSRAmount;
                                            BK_TRANSSSRInfo3.InsureCode = SSRCode;
                                        }
                                        else if (dtArrayKit != null && dtArrayKit.Rows.Count > 0 && (dtArrayKit.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))
                                        {
                                            BK_TRANSSSRInfo3.KitAmt = SSRAmount;
                                            BK_TRANSSSRInfo3.KitCode = SSRCode;
                                        }
                                        else if (dtArrayDuty != null && dtArrayDuty.Rows.Count > 0 && (dtArrayDuty.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))
                                        {
                                            BK_TRANSSSRInfo3.DutyAmt = SSRAmount;
                                            BK_TRANSSSRInfo3.DutyCode = SSRCode;
                                        }
                                        BK_TRANSSSRInfo3.Segment = 0;
                                        if (TransitDepart != "")
                                        {
                                            BK_TRANSSSRInfo3.SeqNo = 2;
                                        }
                                        else
                                        {
                                            BK_TRANSSSRInfo3.SeqNo = 1;
                                        }

                                    }
                                    BK_TRANSSSRInfo3.TripMode = 1;
                                    BK_TRANSSSRInfo3.Origin = itemPassengerFee.FlightReference.Substring(16, 3);
                                    BK_TRANSSSRInfo3.Destination = itemPassengerFee.FlightReference.Substring(19, 3);
                                    BK_TRANSSSRInfo3.CarrierCode = itemPassengerFee.FlightReference.Substring(9, 2);
                                    if (itemPassengerFee.FlightReference.Substring(11, 1).ToString() == " ")
                                    {
                                        BK_TRANSSSRInfo3.FlightNo = itemPassengerFee.FlightReference.Substring(12, 3);
                                    }
                                    else
                                    {
                                        BK_TRANSSSRInfo3.FlightNo = itemPassengerFee.FlightReference.Substring(11, 4);
                                    }

                                }
                                else if (itemPassengerFee.FlightReference.Length > 16 && itemPassengerFee.FlightReference.Substring(16, 6) == TransitReturn + Departure)
                                {
                                    if (inft == 1)
                                    {
                                        infantFee2 += SSRAmount;
                                        BK_TRANSSSRInfo4.InfantAmt = SSRAmount;
                                        BK_TRANSSSRInfo4.InfantCode = SSRCode;
                                    }
                                    else
                                    {
                                        ssrFee2 += SSRAmount;
                                        if (dtArrayBaggage != null && dtArrayBaggage.Rows.Count > 0 && (dtArrayBaggage.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))
                                        {
                                            BK_TRANSSSRInfo4.BaggageAmt = SSRAmount;
                                            BK_TRANSSSRInfo4.BaggageCode = SSRCode;
                                        }
                                        else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo4.DrinkCode1 == null || (BK_TRANSSSRInfo4.DrinkCode1 != null && BK_TRANSSSRInfo4.DrinkCode1 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo4.DrinkRate1 = SSRAmount;
                                            BK_TRANSSSRInfo4.DrinkCode1 = SSRCode;
                                            BK_TRANSSSRInfo4.DrinkQty1 += 1;
                                            BK_TRANSSSRInfo4.DrinkSubTotal1 = (BK_TRANSSSRInfo4.DrinkRate1 * BK_TRANSSSRInfo4.DrinkQty1);
                                        }
                                        else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo4.DrinkCode2 == null || (BK_TRANSSSRInfo4.DrinkCode2 != null && BK_TRANSSSRInfo4.DrinkCode2 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo4.DrinkRate2 = SSRAmount;
                                            BK_TRANSSSRInfo4.DrinkCode2 = SSRCode;
                                            BK_TRANSSSRInfo4.DrinkQty2 += 1;
                                            BK_TRANSSSRInfo4.DrinkSubTotal1 = (BK_TRANSSSRInfo4.DrinkRate2 * BK_TRANSSSRInfo4.DrinkQty2);
                                        }
                                        else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo4.DrinkCode3 == null || (BK_TRANSSSRInfo4.DrinkCode3 != null && BK_TRANSSSRInfo4.DrinkCode3 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo4.DrinkRate3 = SSRAmount;
                                            BK_TRANSSSRInfo4.DrinkCode3 = SSRCode;
                                            BK_TRANSSSRInfo4.DrinkQty3 += 1;
                                            BK_TRANSSSRInfo4.DrinkSubTotal3 = (BK_TRANSSSRInfo4.DrinkRate3 * BK_TRANSSSRInfo4.DrinkQty3);
                                        }
                                        else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo4.DrinkCode4 == null || (BK_TRANSSSRInfo4.DrinkCode4 != null && BK_TRANSSSRInfo4.DrinkCode4 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo4.DrinkRate4 = SSRAmount;
                                            BK_TRANSSSRInfo4.DrinkCode4 = SSRCode;
                                            BK_TRANSSSRInfo4.DrinkQty4 += 1;
                                            BK_TRANSSSRInfo4.DrinkSubTotal4 = (BK_TRANSSSRInfo4.DrinkRate4 * BK_TRANSSSRInfo4.DrinkQty4);
                                        }
                                        else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo4.MealCode1 == null || (BK_TRANSSSRInfo4.MealCode1 != null && BK_TRANSSSRInfo4.MealCode1 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo4.MealRate1 = SSRAmount;
                                            BK_TRANSSSRInfo4.MealCode1 = SSRCode;
                                            BK_TRANSSSRInfo4.MealQty1 += 1;
                                            BK_TRANSSSRInfo4.MealSubTotal1 = (BK_TRANSSSRInfo4.MealRate1 * BK_TRANSSSRInfo4.MealQty1);
                                        }
                                        else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo4.MealCode2 == null || (BK_TRANSSSRInfo4.MealCode2 != null && BK_TRANSSSRInfo4.MealCode2 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo4.MealRate2 = SSRAmount;
                                            BK_TRANSSSRInfo4.MealCode2 = SSRCode;
                                            BK_TRANSSSRInfo4.MealQty2 += 1;
                                            BK_TRANSSSRInfo4.MealSubTotal2 = (BK_TRANSSSRInfo4.MealRate2 * BK_TRANSSSRInfo4.MealQty2);
                                        }
                                        else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo4.MealCode3 == null || (BK_TRANSSSRInfo4.MealCode3 != null && BK_TRANSSSRInfo4.MealCode3 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo4.MealRate3 = SSRAmount;
                                            BK_TRANSSSRInfo4.MealCode3 = SSRCode;
                                            BK_TRANSSSRInfo4.MealQty3 += 1;
                                            BK_TRANSSSRInfo4.MealSubTotal3 = (BK_TRANSSSRInfo4.MealRate3 * BK_TRANSSSRInfo4.MealQty3);
                                        }
                                        else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo4.MealCode4 == null || (BK_TRANSSSRInfo4.MealCode4 != null && BK_TRANSSSRInfo4.MealCode4 == SSRCode.ToString())))
                                        {
                                            BK_TRANSSSRInfo4.MealRate4 = SSRAmount;
                                            BK_TRANSSSRInfo4.MealCode4 = SSRCode;
                                            BK_TRANSSSRInfo4.MealQty4 += 1;
                                            BK_TRANSSSRInfo4.MealSubTotal4 = (BK_TRANSSSRInfo4.MealRate4 * BK_TRANSSSRInfo4.MealQty4);
                                        }
                                        else if (dtArraySport != null && dtArraySport.Rows.Count > 0 && (dtArraySport.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))
                                        {
                                            BK_TRANSSSRInfo4.SportAmt = SSRAmount;
                                            BK_TRANSSSRInfo4.SportCode = SSRCode;
                                        }
                                        else if (dtArrayInsure != null && dtArrayInsure.Rows.Count > 0 && (dtArrayInsure.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))//added by romy, 20170814, insurance
                                        {
                                            BK_TRANSSSRInfo4.InsureAmt = SSRAmount;
                                            BK_TRANSSSRInfo4.InsureCode = SSRCode;
                                        }
                                        else if (dtArrayKit != null && dtArrayKit.Rows.Count > 0 && (dtArrayKit.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))
                                        {
                                            BK_TRANSSSRInfo4.KitAmt = SSRAmount;
                                            BK_TRANSSSRInfo4.KitCode = SSRCode;
                                        }
                                        else if (dtArrayDuty != null && dtArrayDuty.Rows.Count > 0 && (dtArrayDuty.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))
                                        {
                                            BK_TRANSSSRInfo4.DutyAmt = SSRAmount;
                                            BK_TRANSSSRInfo4.DutyCode = SSRCode;
                                        }

                                    }
                                    BK_TRANSSSRInfo4.Segment = 1;
                                    if (TransitDepart != "")
                                    {
                                        BK_TRANSSSRInfo4.SeqNo = 3;
                                    }
                                    else
                                    {
                                        BK_TRANSSSRInfo4.SeqNo = 2;
                                    }

                                    BK_TRANSSSRInfo4.TripMode = 1;
                                    BK_TRANSSSRInfo4.Origin = itemPassengerFee.FlightReference.Substring(16, 3);
                                    BK_TRANSSSRInfo4.Destination = itemPassengerFee.FlightReference.Substring(19, 3);
                                    BK_TRANSSSRInfo4.CarrierCode = itemPassengerFee.FlightReference.Substring(9, 2);
                                    if (itemPassengerFee.FlightReference.Substring(11, 1).ToString() == " ")
                                    {
                                        BK_TRANSSSRInfo4.FlightNo = itemPassengerFee.FlightReference.Substring(12, 3);
                                    }
                                    else
                                    {
                                        BK_TRANSSSRInfo4.FlightNo = itemPassengerFee.FlightReference.Substring(11, 4);
                                    }

                                }
                            }
                            //added by romy, 20170913, insurance
                            //20171106
                            else
                            {
                                //InsureAmount += SSRAmount;
                                InsureAmount += InsureAmt;
                                if (dtArrayInsure != null && dtArrayInsure.Rows.Count > 0 && (dtArrayInsure.Select("ItemCode = '" + SSRCode.ToString() + "'").Length != 0))
                                {
                                    BK_TRANSSSRInfo1.InsureAmt = SSRAmount;
                                    BK_TRANSSSRInfo1.InsureCode = SSRCode;
                                }
                                BK_TRANSSSRInfo1.Segment = 0;
                                BK_TRANSSSRInfo1.SeqNo = 0;
                                BK_TRANSSSRInfo1.TripMode = 0;
                            }
                        }
                        if (BK_TRANSSSRInfo1.BaggageCode != null || BK_TRANSSSRInfo1.DrinkCode1 != null || BK_TRANSSSRInfo1.DutyCode != null || BK_TRANSSSRInfo1.InfantCode != null || BK_TRANSSSRInfo1.KitCode != null || BK_TRANSSSRInfo1.MealCode1 != null || BK_TRANSSSRInfo1.SportCode != null || BK_TRANSSSRInfo1.InsureCode != null || BK_TRANSSSRInfo1.InfantCode != null)//edited by romy, 20170814, insurance
                        {
                            BK_TRANSSSRInfo1.PassengerID = itemPassenger.PassengerNumber.ToString();
                            BK_TRANSSSRInfo1.RecordLocator = PNR;
                            BK_TRANSSSRInfo1.MealTotalAmt = (BK_TRANSSSRInfo1.MealSubTotal1 + BK_TRANSSSRInfo1.MealSubTotal2 + BK_TRANSSSRInfo1.MealSubTotal3 + BK_TRANSSSRInfo1.MealSubTotal4);
                            BK_TRANSSSRInfo1.MealCount = Convert.ToInt16(BK_TRANSSSRInfo1.MealQty1 + BK_TRANSSSRInfo1.MealQty2 + BK_TRANSSSRInfo1.MealQty3 + BK_TRANSSSRInfo1.MealQty4);
                            BK_TRANSSSRInfo1.DrinkTotalAmt = (BK_TRANSSSRInfo1.DrinkSubTotal1 + BK_TRANSSSRInfo1.DrinkSubTotal2 + BK_TRANSSSRInfo1.DrinkSubTotal3 + BK_TRANSSSRInfo1.DrinkSubTotal4);
                            BK_TRANSSSRInfo1.DrinkCount = Convert.ToInt16(BK_TRANSSSRInfo1.DrinkQty1 + BK_TRANSSSRInfo1.DrinkQty2 + BK_TRANSSSRInfo1.DrinkQty3 + BK_TRANSSSRInfo1.DrinkQty4);
                            BK_TRANSSSRInfo1.TotalAmount = (BK_TRANSSSRInfo1.MealTotalAmt + BK_TRANSSSRInfo1.DrinkTotalAmt + BK_TRANSSSRInfo1.DutyAmt + BK_TRANSSSRInfo1.KitAmt + BK_TRANSSSRInfo1.SportAmt + BK_TRANSSSRInfo1.InsureAmt + BK_TRANSSSRInfo1.BaggageAmt + BK_TRANSSSRInfo1.InfantAmt);

                            listbk_transssrinfo.Add(BK_TRANSSSRInfo1);
                        }
                        if (BK_TRANSSSRInfo2.BaggageCode != null || BK_TRANSSSRInfo2.DrinkCode1 != null || BK_TRANSSSRInfo2.DutyCode != null || BK_TRANSSSRInfo2.InfantCode != null || BK_TRANSSSRInfo2.KitCode != null || BK_TRANSSSRInfo2.MealCode1 != null || BK_TRANSSSRInfo2.SportCode != null || BK_TRANSSSRInfo2.InsureCode != null || BK_TRANSSSRInfo2.InfantCode != null)//edited by romy, 20170814, insurance
                        {
                            BK_TRANSSSRInfo2.PassengerID = itemPassenger.PassengerNumber.ToString();
                            BK_TRANSSSRInfo2.RecordLocator = PNR;
                            BK_TRANSSSRInfo2.MealTotalAmt = (BK_TRANSSSRInfo2.MealSubTotal1 + BK_TRANSSSRInfo2.MealSubTotal2 + BK_TRANSSSRInfo2.MealSubTotal3 + BK_TRANSSSRInfo2.MealSubTotal4);
                            BK_TRANSSSRInfo2.MealCount = Convert.ToInt16(BK_TRANSSSRInfo2.MealQty1 + BK_TRANSSSRInfo2.MealQty2 + BK_TRANSSSRInfo2.MealQty3 + BK_TRANSSSRInfo2.MealQty4);
                            BK_TRANSSSRInfo2.DrinkTotalAmt = (BK_TRANSSSRInfo2.DrinkSubTotal1 + BK_TRANSSSRInfo2.DrinkSubTotal2 + BK_TRANSSSRInfo2.DrinkSubTotal3 + BK_TRANSSSRInfo2.DrinkSubTotal4);
                            BK_TRANSSSRInfo2.DrinkCount = Convert.ToInt16(BK_TRANSSSRInfo2.DrinkQty1 + BK_TRANSSSRInfo2.DrinkQty2 + BK_TRANSSSRInfo2.DrinkQty3 + BK_TRANSSSRInfo2.DrinkQty4);
                            BK_TRANSSSRInfo2.TotalAmount = (BK_TRANSSSRInfo2.MealTotalAmt + BK_TRANSSSRInfo2.DrinkTotalAmt + BK_TRANSSSRInfo2.DutyAmt + BK_TRANSSSRInfo2.KitAmt + BK_TRANSSSRInfo2.SportAmt + BK_TRANSSSRInfo2.InsureAmt + BK_TRANSSSRInfo2.BaggageAmt + BK_TRANSSSRInfo2.InfantAmt);

                            listbk_transssrinfo.Add(BK_TRANSSSRInfo2);
                        }
                        if (BK_TRANSSSRInfo3.BaggageCode != null || BK_TRANSSSRInfo3.DrinkCode1 != null || BK_TRANSSSRInfo3.DutyCode != null || BK_TRANSSSRInfo3.InfantCode != null || BK_TRANSSSRInfo3.KitCode != null || BK_TRANSSSRInfo3.MealCode1 != null || BK_TRANSSSRInfo3.SportCode != null || BK_TRANSSSRInfo3.InsureCode != null || BK_TRANSSSRInfo3.InfantCode != null)//edited by romy, 20170814, insurance
                        {
                            BK_TRANSSSRInfo3.PassengerID = itemPassenger.PassengerNumber.ToString();
                            BK_TRANSSSRInfo3.RecordLocator = PNR;
                            BK_TRANSSSRInfo3.MealTotalAmt = (BK_TRANSSSRInfo3.MealSubTotal1 + BK_TRANSSSRInfo3.MealSubTotal2 + BK_TRANSSSRInfo3.MealSubTotal3 + BK_TRANSSSRInfo3.MealSubTotal4);
                            BK_TRANSSSRInfo3.MealCount = Convert.ToInt16(BK_TRANSSSRInfo3.MealQty1 + BK_TRANSSSRInfo3.MealQty2 + BK_TRANSSSRInfo3.MealQty3 + BK_TRANSSSRInfo3.MealQty4);
                            BK_TRANSSSRInfo3.DrinkTotalAmt = (BK_TRANSSSRInfo3.DrinkSubTotal1 + BK_TRANSSSRInfo3.DrinkSubTotal2 + BK_TRANSSSRInfo3.DrinkSubTotal3 + BK_TRANSSSRInfo3.DrinkSubTotal4);
                            BK_TRANSSSRInfo3.DrinkCount = Convert.ToInt16(BK_TRANSSSRInfo3.DrinkQty1 + BK_TRANSSSRInfo3.DrinkQty2 + BK_TRANSSSRInfo3.DrinkQty3 + BK_TRANSSSRInfo3.DrinkQty4);
                            BK_TRANSSSRInfo3.TotalAmount = (BK_TRANSSSRInfo3.MealTotalAmt + BK_TRANSSSRInfo3.DrinkTotalAmt + BK_TRANSSSRInfo3.DutyAmt + BK_TRANSSSRInfo3.KitAmt + BK_TRANSSSRInfo3.SportAmt + BK_TRANSSSRInfo3.InsureAmt + BK_TRANSSSRInfo3.BaggageAmt + BK_TRANSSSRInfo3.InfantAmt);

                            listbk_transssrinfo.Add(BK_TRANSSSRInfo3);
                        }
                        if (BK_TRANSSSRInfo4.BaggageCode != null || BK_TRANSSSRInfo4.DrinkCode1 != null || BK_TRANSSSRInfo4.DutyCode != null || BK_TRANSSSRInfo4.InfantCode != null || BK_TRANSSSRInfo4.KitCode != null || BK_TRANSSSRInfo4.MealCode1 != null || BK_TRANSSSRInfo4.SportCode != null || BK_TRANSSSRInfo4.InsureCode != null || BK_TRANSSSRInfo4.InfantCode != null)//edited by romy, 20170814, insurance
                        {
                            BK_TRANSSSRInfo4.PassengerID = itemPassenger.PassengerNumber.ToString();
                            BK_TRANSSSRInfo4.RecordLocator = PNR;
                            BK_TRANSSSRInfo4.MealTotalAmt = (BK_TRANSSSRInfo4.MealSubTotal1 + BK_TRANSSSRInfo4.MealSubTotal2 + BK_TRANSSSRInfo4.MealSubTotal3 + BK_TRANSSSRInfo4.MealSubTotal4);
                            BK_TRANSSSRInfo4.MealCount = Convert.ToInt16(BK_TRANSSSRInfo4.MealQty1 + BK_TRANSSSRInfo4.MealQty2 + BK_TRANSSSRInfo4.MealQty3 + BK_TRANSSSRInfo4.MealQty4);
                            BK_TRANSSSRInfo4.DrinkTotalAmt = (BK_TRANSSSRInfo4.DrinkSubTotal1 + BK_TRANSSSRInfo4.DrinkSubTotal2 + BK_TRANSSSRInfo4.DrinkSubTotal3 + BK_TRANSSSRInfo4.DrinkSubTotal4);
                            BK_TRANSSSRInfo4.DrinkCount = Convert.ToInt16(BK_TRANSSSRInfo4.DrinkQty1 + BK_TRANSSSRInfo4.DrinkQty2 + BK_TRANSSSRInfo4.DrinkQty3 + BK_TRANSSSRInfo4.DrinkQty4);
                            BK_TRANSSSRInfo4.TotalAmount = (BK_TRANSSSRInfo4.MealTotalAmt + BK_TRANSSSRInfo4.DrinkTotalAmt + BK_TRANSSSRInfo4.DutyAmt + BK_TRANSSSRInfo4.KitAmt + BK_TRANSSSRInfo4.SportAmt + BK_TRANSSSRInfo4.InsureAmt + BK_TRANSSSRInfo4.BaggageAmt + BK_TRANSSSRInfo4.InfantAmt);

                            listbk_transssrinfo.Add(BK_TRANSSSRInfo4);
                        }

                    }


                    #endregion

                    #region "Load Journey"
                    BookingJourneyContainer bookingJourneyContainer = new BookingJourneyContainer();

                    for (int j = 0; j < Response.Booking.Journeys.Length; j++)
                    {
                        bookingJourneyContainer = new BookingJourneyContainer();
                        for (int k = 0; k < Response.Booking.Journeys[j].Segments.Length; k++)
                        {
                            switch (j)
                            {
                                case 0:
                                    if (k == 0)
                                    {
                                        for (int m = 0; m < Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares.Length; m++)
                                        {
                                            if (Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].PaxType == "ADT")
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.AdtFarePrice = charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.AdtDiscChrg = 0 - charges.Amount;

                                                            if (dtTFOth.Rows.Count == 0) SeqNoTemp = 1;
                                                            else
                                                            {
                                                                SeqNoTemp += 1;
                                                            }

                                                            rowTFOth = dtTFOth.NewRow();
                                                            rowTFOth["SeqNo"] = SeqNoTemp;
                                                            rowTFOth["PaxType"] = "ADT";
                                                            rowTFOth["FeeCode"] = charges.ChargeCode;
                                                            rowTFOth["FeeDesc"] = charges.ChargeDetail;
                                                            rowTFOth["Origin"] = Response.Booking.Journeys[j].Segments[0].DepartureStation;
                                                            if (Response.Booking.Journeys[j].Segments.Length > 1)
                                                            {
                                                                rowTFOth["Destination"] = Response.Booking.Journeys[j].Segments[1].ArrivalStation;
                                                                rowTFOth["Transit"] = Response.Booking.Journeys[j].Segments[0].ArrivalStation;
                                                            }
                                                            else
                                                            {
                                                                rowTFOth["Destination"] = Response.Booking.Journeys[j].Segments[0].ArrivalStation;
                                                            }
                                                            rowTFOth["FeeType"] = charges.ChargeType;
                                                            rowTFOth["FeeQty"] = Response.Booking.Passengers.Length;
                                                            rowTFOth["FeeRate"] = 0 - charges.Amount;
                                                            rowTFOth["RecordLocator"] = Response.Booking.RecordLocator;
                                                            rowTFOth["FeeAmt"] = Response.Booking.Passengers.Length * (0 - charges.Amount);
                                                            dtTFOth.Rows.Add(rowTFOth);
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.AdtPromoDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.AdtTaxChrg = charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.AdtFuelChrg = charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg = charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.AdtServChrg += charges.Amount;

                                                                    if (dtTFOth.Rows.Count == 0) SeqNoTemp = 1;
                                                                    else
                                                                    {
                                                                        SeqNoTemp += 1;
                                                                    }

                                                                    rowTFOth = dtTFOth.NewRow();
                                                                    rowTFOth["SeqNo"] = SeqNoTemp;
                                                                    rowTFOth["PaxType"] = "ADT";
                                                                    rowTFOth["FeeCode"] = charges.ChargeCode;
                                                                    rowTFOth["FeeDesc"] = charges.ChargeDetail;
                                                                    rowTFOth["FeeType"] = charges.ChargeType;
                                                                    rowTFOth["Origin"] = Response.Booking.Journeys[j].Segments[0].DepartureStation;
                                                                    if (Response.Booking.Journeys[j].Segments.Length > 1)
                                                                    {
                                                                        rowTFOth["Destination"] = Response.Booking.Journeys[j].Segments[1].ArrivalStation;
                                                                        rowTFOth["Transit"] = Response.Booking.Journeys[j].Segments[0].ArrivalStation;
                                                                    }
                                                                    else
                                                                    {
                                                                        rowTFOth["Destination"] = Response.Booking.Journeys[j].Segments[0].ArrivalStation;
                                                                    }
                                                                    rowTFOth["FeeQty"] = Response.Booking.Passengers.Length;
                                                                    rowTFOth["FeeRate"] = charges.Amount;
                                                                    rowTFOth["RecordLocator"] = Response.Booking.RecordLocator;
                                                                    rowTFOth["FeeAmt"] = Response.Booking.Passengers.Length * charges.Amount;
                                                                    dtTFOth.Rows.Add(rowTFOth);
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                            if (dtTFOth.Rows.Count == 0) SeqNoTemp = 1;
                                                            else
                                                            {
                                                                SeqNoTemp += 1;
                                                            }

                                                            rowTFOth = dtTFOth.NewRow();
                                                            rowTFOth["SeqNo"] = SeqNoTemp;
                                                            rowTFOth["PaxType"] = "ADT";
                                                            rowTFOth["FeeCode"] = charges.ChargeCode;
                                                            rowTFOth["FeeDesc"] = charges.ChargeDetail;
                                                            rowTFOth["Origin"] = Response.Booking.Journeys[j].Segments[0].DepartureStation;
                                                            if (Response.Booking.Journeys[j].Segments.Length > 1)
                                                            {
                                                                rowTFOth["Destination"] = Response.Booking.Journeys[j].Segments[1].ArrivalStation;
                                                                rowTFOth["Transit"] = Response.Booking.Journeys[j].Segments[0].ArrivalStation;
                                                            }
                                                            else
                                                            {
                                                                rowTFOth["Destination"] = Response.Booking.Journeys[j].Segments[0].ArrivalStation;
                                                            }
                                                            rowTFOth["FeeType"] = charges.ChargeType;
                                                            rowTFOth["FeeQty"] = Response.Booking.Passengers.Length;
                                                            rowTFOth["FeeRate"] = charges.Amount;
                                                            rowTFOth["RecordLocator"] = Response.Booking.RecordLocator;
                                                            rowTFOth["FeeAmt"] = Response.Booking.Passengers.Length * charges.Amount;
                                                            dtTFOth.Rows.Add(rowTFOth);

                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.AdtFarePrice = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.AdtTaxChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.AdtFuelChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.AdtServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                            else
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.ChdFarePrice = charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.ChdDiscChrg = 0 - charges.Amount;

                                                            if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                                            {
                                                                for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                                {
                                                                    if (dtTFOth.Rows[i]["FeeCode"].ToString() == charges.ChargeType.ToString() && dtTFOth.Rows[i]["Origin"] == Response.Booking.Journeys[j].Segments[k].DepartureStation && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                                    {
                                                                        dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + charges.Amount;
                                                                        dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (Response.Booking.Passengers.Length * charges.Amount);
                                                                    }
                                                                }
                                                            }

                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.ChdPromoDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.ChdTaxChrg = charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.ChdFuelChrg = charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg = charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.ChdServChrg += charges.Amount;

                                                                    if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                                                    {
                                                                        for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                                        {
                                                                            if (dtTFOth.Rows[i]["FeeCode"].ToString() == charges.ChargeType.ToString() && dtTFOth.Rows[i]["Origin"] == Response.Booking.Journeys[j].Segments[k].DepartureStation && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                                            {
                                                                                dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + charges.Amount;
                                                                                dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (Response.Booking.Passengers.Length * charges.Amount);
                                                                            }
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.ChdServChrg += charges.Amount;

                                                            if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                                            {
                                                                for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                                {
                                                                    if (dtTFOth.Rows[i]["FeeCode"].ToString() == charges.ChargeType.ToString() && dtTFOth.Rows[i]["Origin"] == Response.Booking.Journeys[j].Segments[k].DepartureStation && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                                    {
                                                                        dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + charges.Amount;
                                                                        dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (Response.Booking.Passengers.Length * charges.Amount);
                                                                    }
                                                                }
                                                            }
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.ChdFarePrice = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.ChdTaxChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.ChdFuelChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.ChdServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                        }

                                        bookingJourneyContainer.CarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                        bookingJourneyContainer.FlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                        bookingJourneyContainer.STA = Response.Booking.Journeys[j].Segments[k].STA;
                                        bookingJourneyContainer.STD = Response.Booking.Journeys[j].Segments[k].STD;
                                        bookingJourneyContainer.Flag = (byte)Response.Booking.Journeys[j].Segments[k].Fares[0].FareSequence;
                                        bookingJourneyContainer.FareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                        bookingJourneyContainer.FareClass = Response.Booking.Journeys[j].Segments[k].Fares[0].FareClassOfService;
                                        bookingJourneyContainer.ArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                        bookingJourneyContainer.DepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        bookingJourneyContainer.OpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                        bookingJourneyContainer.EquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType;
                                        bookingJourneyContainer.FlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                        bookingJourneyContainer.ServiceFee = serviceFee;
                                        bookingJourneyContainer.VATFee = vatFee;
                                        bookingJourneyContainer.ChargeFee = chargeFee;
                                        bookingJourneyContainer.SPLFee = splFee;
                                        bookingJourneyContainer.SSRChrg = ssrFee1;
                                        bookingJourneyContainer.SeatChrg = seatFee1;
                                        bookingJourneyContainer.InfantChrg = infantFee1;
                                        bookingJourneyContainer.InsureChrg = InsureAmount;
                                        bookingJourneyContainer.OtherFee = otherFee;
                                        bookingJourneyContainer.ProcessFee = processFee;
                                        bookingJourneyContainer.DiscFee = discFee;
                                        bookingJourneyContainer.PromoDiscFee = promoDiscFee;
                                        bookingJourneyContainer.NameChangeChrg = nameChangeFee;
                                    }
                                    if (k == 1)
                                    {
                                        for (int m = 0; m < Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares.Length; m++)
                                        {
                                            if (Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].PaxType == "ADT")
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.AdtFarePrice += charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.AdtDiscChrg -= charges.Amount;

                                                            if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                                            {
                                                                for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                                {
                                                                    if (dtTFOth.Rows[i]["FeeCode"].ToString() == charges.ChargeType.ToString() && dtTFOth.Rows[i]["Origin"] == Response.Booking.Journeys[j].Segments[0].ArrivalStation && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                                    {
                                                                        dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + charges.Amount;
                                                                        dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (Response.Booking.Passengers.Length * charges.Amount);
                                                                    }
                                                                }
                                                            }
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.AdtPromoDiscChrg -= charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.AdtTaxChrg += charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.AdtFuelChrg += charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg += charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.AdtServChrg += charges.Amount;

                                                                    if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                                                    {
                                                                        for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                                        {
                                                                            if (dtTFOth.Rows[i]["FeeCode"].ToString() == charges.ChargeType.ToString() && dtTFOth.Rows[i]["Origin"] == Response.Booking.Journeys[j].Segments[0].ArrivalStation && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                                            {
                                                                                dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + charges.Amount;
                                                                                dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (Response.Booking.Passengers.Length * charges.Amount);
                                                                            }
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.AdtServChrg += charges.Amount;

                                                            if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                                            {
                                                                for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                                {
                                                                    if (dtTFOth.Rows[i]["FeeCode"].ToString() == charges.ChargeType.ToString() && dtTFOth.Rows[i]["Origin"] == Response.Booking.Journeys[j].Segments[0].ArrivalStation && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                                    {
                                                                        dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + charges.Amount;
                                                                        dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (Response.Booking.Passengers.Length * charges.Amount);
                                                                    }
                                                                }
                                                            }
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.AdtFarePrice += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.AdtTaxChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.AdtFuelChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.AdtServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                            else
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.ChdFarePrice += charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.ChdDiscChrg -= charges.Amount;


                                                            if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                                            {
                                                                for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                                {
                                                                    if (dtTFOth.Rows[i]["FeeCode"].ToString() == charges.ChargeType.ToString() && dtTFOth.Rows[i]["Origin"] == Response.Booking.Journeys[j].Segments[0].ArrivalStation && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                                    {
                                                                        dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + charges.Amount;
                                                                        dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (Response.Booking.Passengers.Length * charges.Amount);
                                                                    }
                                                                }
                                                            }
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.ChdPromoDiscChrg -= charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.ChdTaxChrg += charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.ChdFuelChrg += charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg += charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.ChdServChrg += charges.Amount;

                                                                    if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                                                    {
                                                                        for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                                        {
                                                                            if (dtTFOth.Rows[i]["FeeCode"].ToString() == charges.ChargeType.ToString() && dtTFOth.Rows[i]["Origin"] == Response.Booking.Journeys[j].Segments[0].ArrivalStation && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                                            {
                                                                                dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + charges.Amount;
                                                                                dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (Response.Booking.Passengers.Length * charges.Amount);
                                                                            }
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.ChdServChrg += charges.Amount;

                                                            if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                                            {
                                                                for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                                {
                                                                    if (dtTFOth.Rows[i]["FeeCode"].ToString() == charges.ChargeType.ToString() && dtTFOth.Rows[i]["Origin"] == Response.Booking.Journeys[j].Segments[0].ArrivalStation && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                                    {
                                                                        dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + charges.Amount;
                                                                        dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (Response.Booking.Passengers.Length * charges.Amount);
                                                                    }
                                                                }
                                                            }
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.ChdFarePrice += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.ChdTaxChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.ChdFuelChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.ChdServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                        }
                                        bookingJourneyContainer.OverridedCarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                        bookingJourneyContainer.OverridedFlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                        bookingJourneyContainer.OverridedSTA = Response.Booking.Journeys[j].Segments[k].STA;
                                        bookingJourneyContainer.OverridedSTD = Response.Booking.Journeys[j].Segments[k].STD;
                                        bookingJourneyContainer.OverridedFareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                        bookingJourneyContainer.OverridedFareClass = Response.Booking.Journeys[j].Segments[k].Fares[0].FareClassOfService;
                                        bookingJourneyContainer.OverridedArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                        bookingJourneyContainer.OverridedDepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        bookingJourneyContainer.OverridedOpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                        bookingJourneyContainer.OverridedEquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType;
                                        bookingJourneyContainer.OverridedFlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                    }
                                    break;
                                case 1:
                                    if (k == 0)
                                    {
                                        for (int m = 0; m < Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares.Length; m++)
                                        {
                                            if (Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].PaxType == "ADT")
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.AdtFarePrice = charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.AdtDiscChrg = 0 - charges.Amount;

                                                            if (dtTFOth.Rows.Count == 0) SeqNoTemp = 1;
                                                            else
                                                            {
                                                                SeqNoTemp += 1;
                                                            }

                                                            rowTFOth = dtTFOth.NewRow();
                                                            rowTFOth["SeqNo"] = SeqNoTemp;
                                                            rowTFOth["PaxType"] = "ADT";
                                                            rowTFOth["FeeCode"] = charges.ChargeCode;
                                                            rowTFOth["FeeDesc"] = charges.ChargeDetail;
                                                            rowTFOth["Origin"] = Response.Booking.Journeys[j].Segments[0].DepartureStation;
                                                            if (Response.Booking.Journeys[j].Segments.Length > 1)
                                                            {
                                                                rowTFOth["Destination"] = Response.Booking.Journeys[j].Segments[1].ArrivalStation;
                                                                rowTFOth["Transit"] = Response.Booking.Journeys[j].Segments[0].ArrivalStation;
                                                            }
                                                            else
                                                            {
                                                                rowTFOth["Destination"] = Response.Booking.Journeys[j].Segments[0].ArrivalStation;
                                                            }
                                                            rowTFOth["FeeType"] = charges.ChargeType;
                                                            rowTFOth["FeeQty"] = Response.Booking.Passengers.Length;
                                                            rowTFOth["FeeRate"] = charges.Amount;
                                                            rowTFOth["RecordLocator"] = Response.Booking.RecordLocator;
                                                            rowTFOth["FeeAmt"] = Response.Booking.Passengers.Length * charges.Amount;
                                                            dtTFOth.Rows.Add(rowTFOth);
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.AdtPromoDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.AdtTaxChrg = charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.AdtFuelChrg = charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg = charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.AdtServChrg += charges.Amount;

                                                                    if (dtTFOth.Rows.Count == 0) SeqNoTemp = 1;
                                                                    else
                                                                    {
                                                                        SeqNoTemp += 1;
                                                                    }

                                                                    rowTFOth = dtTFOth.NewRow();
                                                                    rowTFOth["SeqNo"] = SeqNoTemp;
                                                                    rowTFOth["PaxType"] = "ADT";
                                                                    rowTFOth["FeeCode"] = charges.ChargeCode;
                                                                    rowTFOth["FeeDesc"] = charges.ChargeDetail;
                                                                    rowTFOth["Origin"] = Response.Booking.Journeys[j].Segments[0].DepartureStation;
                                                                    if (Response.Booking.Journeys[j].Segments.Length > 1)
                                                                    {
                                                                        rowTFOth["Destination"] = Response.Booking.Journeys[j].Segments[1].ArrivalStation;
                                                                        rowTFOth["Transit"] = Response.Booking.Journeys[j].Segments[0].ArrivalStation;
                                                                    }
                                                                    else
                                                                    {
                                                                        rowTFOth["Destination"] = Response.Booking.Journeys[j].Segments[0].ArrivalStation;
                                                                    }
                                                                    rowTFOth["FeeType"] = charges.ChargeType;
                                                                    rowTFOth["FeeQty"] = Response.Booking.Passengers.Length;
                                                                    rowTFOth["FeeRate"] = charges.Amount;
                                                                    rowTFOth["RecordLocator"] = Response.Booking.RecordLocator;
                                                                    rowTFOth["FeeAmt"] = Response.Booking.Passengers.Length * charges.Amount;
                                                                    dtTFOth.Rows.Add(rowTFOth);
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.AdtServChrg += charges.Amount;

                                                            if (dtTFOth.Rows.Count == 0) SeqNoTemp = 1;
                                                            else
                                                            {
                                                                SeqNoTemp += 1;
                                                            }

                                                            rowTFOth = dtTFOth.NewRow();
                                                            rowTFOth["SeqNo"] = SeqNoTemp;
                                                            rowTFOth["PaxType"] = "ADT";
                                                            rowTFOth["FeeCode"] = charges.ChargeCode;
                                                            rowTFOth["FeeDesc"] = charges.ChargeDetail;
                                                            rowTFOth["Origin"] = Response.Booking.Journeys[j].Segments[0].DepartureStation;
                                                            if (Response.Booking.Journeys[j].Segments.Length > 1)
                                                            {
                                                                rowTFOth["Destination"] = Response.Booking.Journeys[j].Segments[1].ArrivalStation;
                                                                rowTFOth["Transit"] = Response.Booking.Journeys[j].Segments[0].ArrivalStation;
                                                            }
                                                            else
                                                            {
                                                                rowTFOth["Destination"] = Response.Booking.Journeys[j].Segments[0].ArrivalStation;
                                                            }
                                                            rowTFOth["FeeType"] = charges.ChargeType;
                                                            rowTFOth["FeeQty"] = Response.Booking.Passengers.Length;
                                                            rowTFOth["FeeRate"] = charges.Amount;
                                                            rowTFOth["RecordLocator"] = Response.Booking.RecordLocator;
                                                            rowTFOth["FeeAmt"] = Response.Booking.Passengers.Length * charges.Amount;
                                                            dtTFOth.Rows.Add(rowTFOth);
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.AdtFarePrice = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.AdtTaxChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.AdtFuelChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.AdtServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                            else
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.ChdFarePrice = charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.ChdDiscChrg = 0 - charges.Amount;


                                                            if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                                            {
                                                                for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                                {
                                                                    if (dtTFOth.Rows[i]["FeeCode"].ToString() == charges.ChargeType.ToString() && dtTFOth.Rows[i]["Origin"] == Response.Booking.Journeys[j].Segments[k].DepartureStation && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                                    {
                                                                        dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + charges.Amount;
                                                                        dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (Response.Booking.Passengers.Length * charges.Amount);
                                                                    }
                                                                }
                                                            }
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.ChdPromoDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.ChdTaxChrg = charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.ChdFuelChrg = charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg = charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.ChdServChrg += charges.Amount;

                                                                    if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                                                    {
                                                                        for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                                        {
                                                                            if (dtTFOth.Rows[i]["FeeCode"].ToString() == charges.ChargeType.ToString() && dtTFOth.Rows[i]["Origin"] == Response.Booking.Journeys[j].Segments[k].DepartureStation && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                                            {
                                                                                dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + charges.Amount;
                                                                                dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (Response.Booking.Passengers.Length * charges.Amount);
                                                                            }
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.ChdServChrg += charges.Amount;

                                                            if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                                            {
                                                                for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                                {
                                                                    if (dtTFOth.Rows[i]["FeeCode"].ToString() == charges.ChargeType.ToString() && dtTFOth.Rows[i]["Origin"] == Response.Booking.Journeys[j].Segments[k].DepartureStation && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                                    {
                                                                        dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + charges.Amount;
                                                                        dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (Response.Booking.Passengers.Length * charges.Amount);
                                                                    }
                                                                }
                                                            }
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.ChdFarePrice = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.ChdTaxChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.ChdFuelChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.ChdServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                        }

                                        bookingJourneyContainer.CarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                        bookingJourneyContainer.FlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                        bookingJourneyContainer.STA = Response.Booking.Journeys[j].Segments[k].STA;
                                        bookingJourneyContainer.STD = Response.Booking.Journeys[j].Segments[k].STD;
                                        bookingJourneyContainer.Flag = (byte)Response.Booking.Journeys[j].Segments[k].Fares[0].FareSequence;
                                        bookingJourneyContainer.FareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                        bookingJourneyContainer.FareClass = Response.Booking.Journeys[j].Segments[k].Fares[0].FareClassOfService;
                                        bookingJourneyContainer.ArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                        bookingJourneyContainer.DepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        bookingJourneyContainer.OpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                        bookingJourneyContainer.EquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType;
                                        bookingJourneyContainer.FlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                        bookingJourneyContainer.ServiceFee = 0;
                                        bookingJourneyContainer.VATFee = 0;
                                        bookingJourneyContainer.ChargeFee = 0;
                                        bookingJourneyContainer.SPLFee = 0;
                                        bookingJourneyContainer.SSRChrg = ssrFee2;
                                        bookingJourneyContainer.SeatChrg = seatFee2;
                                        bookingJourneyContainer.InfantChrg = infantFee2;
                                        bookingJourneyContainer.OtherFee = 0;
                                        bookingJourneyContainer.ProcessFee = 0;
                                        bookingJourneyContainer.DiscFee = 0;
                                        bookingJourneyContainer.PromoDiscFee = 0;
                                        bookingJourneyContainer.NameChangeChrg = 0;
                                    }
                                    if (k == 1)
                                    {
                                        for (int m = 0; m < Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares.Length; m++)
                                        {
                                            if (Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].PaxType == "ADT")
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.AdtFarePrice += charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.AdtDiscChrg -= charges.Amount;

                                                            if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                                            {
                                                                for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                                {
                                                                    if (dtTFOth.Rows[i]["FeeCode"].ToString() == charges.ChargeType.ToString() && dtTFOth.Rows[i]["Origin"] == Response.Booking.Journeys[j].Segments[0].ArrivalStation && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                                    {
                                                                        dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + charges.Amount;
                                                                        dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (Response.Booking.Passengers.Length * charges.Amount);
                                                                    }
                                                                }
                                                            }
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.AdtPromoDiscChrg -= charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.AdtTaxChrg += charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.AdtFuelChrg += charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg += charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.AdtServChrg += charges.Amount;

                                                                    if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                                                    {
                                                                        for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                                        {
                                                                            if (dtTFOth.Rows[i]["FeeCode"].ToString() == charges.ChargeType.ToString() && dtTFOth.Rows[i]["Origin"] == Response.Booking.Journeys[j].Segments[0].ArrivalStation && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                                            {
                                                                                dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + charges.Amount;
                                                                                dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (Response.Booking.Passengers.Length * charges.Amount);
                                                                            }
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.AdtServChrg += charges.Amount;

                                                            if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                                            {
                                                                for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                                {
                                                                    if (dtTFOth.Rows[i]["FeeCode"].ToString() == charges.ChargeType.ToString() && dtTFOth.Rows[i]["Origin"] == Response.Booking.Journeys[j].Segments[0].ArrivalStation && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                                    {
                                                                        dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + charges.Amount;
                                                                        dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (Response.Booking.Passengers.Length * charges.Amount);
                                                                    }
                                                                }
                                                            }
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.AdtFarePrice += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.AdtTaxChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.AdtFuelChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3) bookingJourneyContainer.AdtServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[3].Amount;
                                            }
                                            else
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.ChdFarePrice += charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.ChdDiscChrg -= charges.Amount;

                                                            if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                                            {
                                                                for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                                {
                                                                    if (dtTFOth.Rows[i]["FeeCode"].ToString() == charges.ChargeType.ToString() && dtTFOth.Rows[i]["Origin"] == Response.Booking.Journeys[j].Segments[0].ArrivalStation && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                                    {
                                                                        dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + charges.Amount;
                                                                        dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (Response.Booking.Passengers.Length * charges.Amount);
                                                                    }
                                                                }
                                                            }
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.ChdPromoDiscChrg -= charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.ChdTaxChrg += charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.ChdFuelChrg += charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg += charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.ChdServChrg += charges.Amount;

                                                                    if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                                                    {
                                                                        for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                                        {
                                                                            if (dtTFOth.Rows[i]["FeeCode"].ToString() == charges.ChargeType.ToString() && dtTFOth.Rows[i]["Origin"] == Response.Booking.Journeys[j].Segments[0].ArrivalStation && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                                            {
                                                                                dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + charges.Amount;
                                                                                dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (Response.Booking.Passengers.Length * charges.Amount);
                                                                            }
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.ChdServChrg += charges.Amount;

                                                            if (dtTFOth != null && dtTFOth.Rows.Count > 0)
                                                            {
                                                                for (int i = 0; i < dtTFOth.Rows.Count; i++)
                                                                {
                                                                    if (dtTFOth.Rows[i]["FeeCode"].ToString() == charges.ChargeType.ToString() && dtTFOth.Rows[i]["Origin"] == Response.Booking.Journeys[j].Segments[0].ArrivalStation && dtTFOth.Rows[i]["RecordLocator"].ToString() == Response.Booking.RecordLocator)
                                                                    {
                                                                        dtTFOth.Rows[i]["FeeRate"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeRate"]) + charges.Amount;
                                                                        dtTFOth.Rows[i]["FeeAmt"] = Convert.ToDecimal(dtTFOth.Rows[i]["FeeAmt"]) + (Response.Booking.Passengers.Length * charges.Amount);
                                                                    }
                                                                }
                                                            }
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.ChdFarePrice += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.ChdTaxChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.ChdFuelChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3) bookingJourneyContainer.ChdServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[3].Amount;
                                            }
                                        }
                                        bookingJourneyContainer.OverridedCarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                        bookingJourneyContainer.OverridedFlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                        bookingJourneyContainer.OverridedSTA = Response.Booking.Journeys[j].Segments[k].STA;
                                        bookingJourneyContainer.OverridedSTD = Response.Booking.Journeys[j].Segments[k].STD;
                                        bookingJourneyContainer.OverridedFareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                        bookingJourneyContainer.OverridedFareClass = Response.Booking.Journeys[j].Segments[k].Fares[0].FareClassOfService;
                                        bookingJourneyContainer.OverridedArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                        bookingJourneyContainer.OverridedDepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        bookingJourneyContainer.OverridedOpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                        bookingJourneyContainer.OverridedEquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType;
                                        bookingJourneyContainer.OverridedFlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                    }
                                    break;
                            }
                        }

                        //load booking Journey
                        bookingJourneyContainer.JourneySellKey = Response.Booking.Journeys[j].JourneySellKey;
                        bookingJourneyContainer.AdtPax = paxADT;
                        bookingJourneyContainer.ChdPax = paxCHD;
                        bookingJourneyContainer.CurrencyCode = Response.Booking.CurrencyCode;

                        //check duration

                        if (lstBookingJourneyContainer.FindIndex(item => item.JourneySellKey == bookingJourneyContainer.JourneySellKey) < 0)
                            lstBookingJourneyContainer.Add(bookingJourneyContainer);

                        if (dtTFOth.Rows.Count > 0)
                        {
                            HttpContext.Current.Session.Remove("dataTransFeesOthers");
                            HttpContext.Current.Session.Add("dataTransFeesOthers", dtTFOth);
                        }
                    }
                    #endregion

                    #region "Load Payment"
                    PaymentContainer paymentContainer = new PaymentContainer();
                    for (int i = 0; i < Response.Booking.Payments.Length; i++)
                    {
                        paymentContainer = new PaymentContainer();
                        paymentContainer.AuthorizationCode = Response.Booking.Payments[i].AuthorizationCode;
                        paymentContainer.AccountNumber = Response.Booking.Payments[i].AccountNumber;
                        paymentContainer.MerchantID = Response.Booking.Payments[i].PaymentID.ToString();
                        paymentContainer.AccountNumberID = Response.Booking.Payments[i].AccountNumberID;
                        paymentContainer.CollectedAmount = Response.Booking.Payments[i].PaymentAmount;
                        paymentContainer.CurrencyCode = Response.Booking.Payments[i].CurrencyCode;
                        paymentContainer.PaymentAmount = Response.Booking.Payments[i].PaymentAmount;
                        paymentContainer.PaymentMethodCode = Response.Booking.Payments[i].PaymentMethodCode;
                        paymentContainer.PaymentMethodType = Convert.ToInt32(Response.Booking.Payments[i].PaymentMethodType);
                        paymentContainer.PaymentNumber = Response.Booking.Payments[i].PaymentNumber;
                        paymentContainer.PaymentStatus = Convert.ToInt32(Response.Booking.Payments[i].Status);
                        paymentContainer.PaymentText = Response.Booking.Payments[i].PaymentText; //aded by diana 20170404, to retrieve fee type
                        paymentContainer.PaymentDate = Response.Booking.Payments[i].ApprovalDate;
                        paymentContainer.RecordLocator = PNR;

                        //decimal currRate = 1;
                        //if (paymentContainer.CurrencyCode != "MYR")
                        //{
                        //    for (int k = 0; k < RateResponse.ExternalRateList.Length; k++)
                        //    {
                        //        if (RateResponse.ExternalRateList[k].QuotedCurrency == paymentContainer.CurrencyCode && RateResponse.ExternalRateList[k].CollectedCurrency == "MYR")
                        //        {
                        //            currRate = RateResponse.ExternalRateList[k].ExchangeRate;
                        //            break;
                        //        }
                        //    }
                        //}
                        //paymentContainer.CurrencyRate = currRate;

                        lstPaymentContainer.Add(paymentContainer);
                    }
                    #endregion

                    if (lstBookingJourneyContainer != null) //if got journey
                    {
                        HttpContext.Current.Session.Remove("BookingJourneyContainers");
                        HttpContext.Current.Session.Add("BookingJourneyContainers", lstBookingJourneyContainer);
                    }

                    if (lstPaymentContainer != null) //if got payment
                    {
                        HttpContext.Current.Session.Remove("PaymentContainers");
                        HttpContext.Current.Session.Add("PaymentContainers", lstPaymentContainer);
                    }

                    if (listbk_transssrinfo != null) //if got journey
                    {
                        HttpContext.Current.Session.Remove("BK_TransSSRContainer");
                        HttpContext.Current.Session.Add("BK_TransSSRContainer", listbk_transssrinfo);
                    }

                    return true;
                    //if (lstBookingJourneyContainer != null && lstPaymentContainer != null)
                    //    return true;
                    //else
                    //    return false;

                }
                else //iterative loop until 5 times if return null
                {
                    cnt += 1;
                    if (cnt <= 5)
                    {
                        return RetrieveBookingDetailsByPNR(ApiBook, ref Response, PNR, TransID, cnt);
                    }
                    else
                    {
                        return false;
                    }
                }

            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                cnt += 1;
                if (cnt <= 5)
                {
                    return RetrieveBookingDetailsByPNR(ApiBook, ref Response, PNR, TransID, cnt);
                }
                else
                {
                    return false;
                }
            }
        }

        //change to new add-On table, Tyas
        public Boolean RetrieveBookingDetailsByPNRNew(Navitaire.APIBooking ApiBook, ref Navitaire.BookingManager.GetBookingResponse Response, string PNR, string TransID, int cnt = 0)
        {
            List<BookingJourneyContainer> lstBookingJourneyContainer = new List<BookingJourneyContainer>();
            List<PaymentContainer> lstPaymentContainer = new List<PaymentContainer>();
            Bk_transaddon BK_TRANSSSRInfo1 = new Bk_transaddon();
            Bk_transaddon BK_TRANSSSRInfo2 = new Bk_transaddon();
            Bk_transaddon BK_TRANSSSRInfo3 = new Bk_transaddon();
            Bk_transaddon BK_TRANSSSRInfo4 = new Bk_transaddon();
            DataTable dtArrayBaggage = (DataTable)HttpContext.Current.Session["dtArrayBaggage"];
            DataTable dtArraySport = (DataTable)HttpContext.Current.Session["dtArraySport"];
            DataTable dtArrayKit = (DataTable)HttpContext.Current.Session["dtArrayKit"];
            DataTable dtArrayDrink = (DataTable)HttpContext.Current.Session["dtArrayDrink"];
            DataTable dtArrayMeal = (DataTable)HttpContext.Current.Session["dtArrayMeal"];
            DataTable dtArrayDuty = (DataTable)HttpContext.Current.Session["dtArrayDuty"];
            List<Bk_transaddon> listbk_transssrinfo = new List<Bk_transaddon>();
            try
            {
                string errMsg = "";

                //try to call for 1 time for 1 transid
                //Navitaire.APIBooking ApiBook = new Navitaire.APIBooking("");
                //Navitaire.BookingManager.GetBookingResponse Response = new Navitaire.BookingManager.GetBookingResponse();

                //log.Info(this,"Object ApiBook created - PNR : " + PNR);
                Response = ApiBook.GetBookingResponseByPNR(PNR);
                //string resp = GetXMLString(Response);
                //log.Info(this,"Response retrieve - PNR : " + PNR);
                if (Response != null)
                {
                    if (Response.Booking == null)
                    {
                        return false;
                        log.Info(this, "RetrieveBookingDetailsByPNR - Booking status is pending. PNR:" + PNR + ", TransactionID:" + TransID);
                        cnt += 1;
                        if (cnt <= 5)
                        {
                            return RetrieveBookingDetailsByPNR(ApiBook, ref Response, PNR, TransID, cnt);
                        }
                        else
                        {
                            return false;
                        }
                    }

                    int paxADT = 0, paxCHD = 0;
                    decimal serviceFee = 0;
                    decimal vatFee = 0;
                    decimal chargeFee = 0;
                    decimal otherFee = 0;
                    decimal processFee = 0;
                    decimal nameChangeFee = 0;
                    decimal splFee = 0;
                    decimal ssrFee1 = 0; //going
                    decimal ssrFee2 = 0; //return
                    decimal seatFee1 = 0; //going
                    decimal seatFee2 = 0; //return
                    decimal infantFee1 = 0; //going
                    decimal infantFee2 = 0; //return
                    string feeCode = "";
                    decimal feeAmount = 0;
                    decimal discFee = 0;
                    decimal promoDiscFee = 0;
                    string feeChargeType = "";

                    //get rate list
                    //string SellSessionID = ApiBook.AgentLogon();
                    //Navitaire.UtilitiesManager.GetExternalRatesListResponseData RateResponse = ApiBook.GetExternalRateList(SellSessionID);
                    //string req = GetXMLString(RateResponse);

                    #region "Load Booking"
                    BookingContainer bookingContainer = new BookingContainer();
                    bookingContainer.RecordLocator = Response.Booking.RecordLocator;
                    bookingContainer.BookingID = Response.Booking.BookingID;
                    bookingContainer.CurrencyCode = Response.Booking.CurrencyCode;
                    bookingContainer.BookingStatus = Response.Booking.BookingInfo.BookingStatus.ToString();
                    bookingContainer.ExpiredDate = Response.Booking.BookingInfo.ExpiredDate;
                    bookingContainer.PaidStatus = Response.Booking.BookingInfo.PaidStatus.ToString(); //UnderPaid, FullInPaid, OverPaid

                    if (bookingContainer != null) //if got booking
                    {
                        HttpContext.Current.Session.Remove("BookingContainers");
                        HttpContext.Current.Session.Add("BookingContainers", bookingContainer);
                    }

                    //remark by ketee 2016-02-09
                    if (bookingContainer.BookingStatus.ToLower() == "closed")
                    {
                        return true;
                    }
                    //decimal currRate = 1;
                    //if (bookingContainer.CurrencyCode != "MYR")
                    //{
                    //    for (int i = 0; i < RateResponse.ExternalRateList.Length; i++)
                    //    {
                    //        if (RateResponse.ExternalRateList[i].QuotedCurrency == bookingContainer.CurrencyCode && RateResponse.ExternalRateList[i].CollectedCurrency == "MYR")
                    //        {
                    //            currRate = RateResponse.ExternalRateList[i].ExchangeRate;
                    //            break;
                    //        }
                    //    }
                    //}
                    //bookingContainer.ExchangeRate = currRate;
                    #endregion

                    #region "Load Passenger Fee"
                    //retrieve arrival, departure
                    string Departure = "", Arrival = "", TransitDepart = "", TransitReturn = "";
                    for (int j = 0; j < Response.Booking.Journeys.Length; j++)
                    {
                        for (int k = 0; k < Response.Booking.Journeys[j].Segments.Length; k++)
                        {
                            switch (j)
                            {
                                case 0:
                                    if (k == 0)
                                    {
                                        Departure = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        Arrival = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                    }
                                    else if (k == 1)
                                    {
                                        TransitDepart = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        Arrival = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                    }
                                    break;
                                case 1:
                                    if (k == 0)
                                    {
                                        Arrival = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                    }
                                    else if (k == 1)
                                    {
                                        TransitReturn = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                    }
                                    break;
                                default:
                                    break;

                            }
                        }
                    }

                    int inft = 0;
                    int index = 0;


                    foreach (Passenger itemPassenger in Response.Booking.Passengers)
                    {
                        BK_TRANSSSRInfo1 = new Bk_transaddon();
                        BK_TRANSSSRInfo2 = new Bk_transaddon();
                        BK_TRANSSSRInfo3 = new Bk_transaddon();
                        BK_TRANSSSRInfo4 = new Bk_transaddon();


                        if (itemPassenger.PassengerTypeInfos[0].PaxType == "ADT")
                        {
                            paxADT++;
                        }
                        else
                        {
                            paxCHD++;
                        }

                        foreach (PassengerFee itemPassengerFee in itemPassenger.PassengerFees)
                        {
                            if (itemPassengerFee.SSRCode == "INFT")
                            {
                                inft = 1;
                            }
                            else
                            {
                                inft = 0;
                            }
                            foreach (BookingServiceCharge itemServiceCharge in itemPassengerFee.ServiceCharges)
                            {
                                feeCode = itemServiceCharge.ChargeCode;
                                feeAmount = itemServiceCharge.Amount;
                                feeChargeType = itemServiceCharge.ChargeType.ToString();

                                if (itemPassengerFee.FeeType == FeeType.SSRFee)
                                {
                                    if (feeChargeType.ToUpper() == "DISCOUNT")
                                    {
                                        feeAmount = 0 - feeAmount;
                                    }
                                    if (itemPassengerFee.FlightReference != "")
                                    {

                                        if (itemPassengerFee.FlightReference.Substring(16, 6) == Departure + Arrival || itemPassengerFee.FlightReference.Substring(16, 6) == Departure + TransitDepart)
                                        {
                                            if (inft == 1)
                                            {
                                                infantFee1 += feeAmount;
                                                BK_TRANSSSRInfo1.InfantAmt = feeAmount;
                                                BK_TRANSSSRInfo1.InfantCode = feeCode;
                                            }
                                            else
                                            {
                                                ssrFee1 += feeAmount;

                                                if (dtArrayBaggage != null && dtArrayBaggage.Rows.Count > 0 && (dtArrayBaggage.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0))
                                                {
                                                    BK_TRANSSSRInfo1.BaggageAmt = feeAmount;
                                                    BK_TRANSSSRInfo1.BaggageCode = feeCode;
                                                }
                                                else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo1.DrinkCode1 == null || (BK_TRANSSSRInfo1.DrinkCode1 != null && BK_TRANSSSRInfo1.DrinkCode1 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo1.DrinkRate1 = feeAmount;
                                                    BK_TRANSSSRInfo1.DrinkCode1 = feeCode;
                                                    BK_TRANSSSRInfo1.DrinkQty1 += 1;
                                                    BK_TRANSSSRInfo1.DrinkSubTotal1 = (BK_TRANSSSRInfo1.DrinkRate1 * BK_TRANSSSRInfo1.DrinkQty1);
                                                }
                                                else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo1.DrinkCode2 == null || (BK_TRANSSSRInfo1.DrinkCode2 != null && BK_TRANSSSRInfo1.DrinkCode2 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo1.DrinkRate2 = feeAmount;
                                                    BK_TRANSSSRInfo1.DrinkCode2 = feeCode;
                                                    BK_TRANSSSRInfo1.DrinkQty2 += 1;
                                                    BK_TRANSSSRInfo1.DrinkSubTotal1 = (BK_TRANSSSRInfo1.DrinkRate2 * BK_TRANSSSRInfo1.DrinkQty2);
                                                }
                                                else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo1.DrinkCode3 == null || (BK_TRANSSSRInfo1.DrinkCode3 != null && BK_TRANSSSRInfo1.DrinkCode3 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo1.DrinkRate3 = feeAmount;
                                                    BK_TRANSSSRInfo1.DrinkCode3 = feeCode;
                                                    BK_TRANSSSRInfo1.DrinkQty3 += 1;
                                                    BK_TRANSSSRInfo1.DrinkSubTotal3 = (BK_TRANSSSRInfo1.DrinkRate3 * BK_TRANSSSRInfo1.DrinkQty3);
                                                }
                                                else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo1.DrinkCode4 == null || (BK_TRANSSSRInfo1.DrinkCode4 != null && BK_TRANSSSRInfo1.DrinkCode4 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo1.DrinkRate4 = feeAmount;
                                                    BK_TRANSSSRInfo1.DrinkCode4 = feeCode;
                                                    BK_TRANSSSRInfo1.DrinkQty4 += 1;
                                                    BK_TRANSSSRInfo1.DrinkSubTotal4 = (BK_TRANSSSRInfo1.DrinkRate4 * BK_TRANSSSRInfo1.DrinkQty4);
                                                }
                                                else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo1.MealCode1 == null || (BK_TRANSSSRInfo1.MealCode1 != null && BK_TRANSSSRInfo1.MealCode1 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo1.MealRate1 = feeAmount;
                                                    BK_TRANSSSRInfo1.MealCode1 = feeCode;
                                                    BK_TRANSSSRInfo1.MealQty1 += 1;
                                                    BK_TRANSSSRInfo1.MealSubTotal1 = (BK_TRANSSSRInfo1.MealRate1 * BK_TRANSSSRInfo1.MealQty1);
                                                }
                                                else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo1.MealCode2 == null || (BK_TRANSSSRInfo1.MealCode2 != null && BK_TRANSSSRInfo1.MealCode2 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo1.MealRate2 = feeAmount;
                                                    BK_TRANSSSRInfo1.MealCode2 = feeCode;
                                                    BK_TRANSSSRInfo1.MealQty2 += 1;
                                                    BK_TRANSSSRInfo1.MealSubTotal2 = (BK_TRANSSSRInfo1.MealRate2 * BK_TRANSSSRInfo1.MealQty2);
                                                }
                                                else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo1.MealCode3 == null || (BK_TRANSSSRInfo1.MealCode3 != null && BK_TRANSSSRInfo1.MealCode3 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo1.MealRate3 = feeAmount;
                                                    BK_TRANSSSRInfo1.MealCode3 = feeCode;
                                                    BK_TRANSSSRInfo1.MealQty3 += 1;
                                                    BK_TRANSSSRInfo1.MealSubTotal3 = (BK_TRANSSSRInfo1.MealRate3 * BK_TRANSSSRInfo1.MealQty3);
                                                }
                                                else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo1.MealCode4 == null || (BK_TRANSSSRInfo1.MealCode4 != null && BK_TRANSSSRInfo1.MealCode4 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo1.MealRate4 = feeAmount;
                                                    BK_TRANSSSRInfo1.MealCode4 = feeCode;
                                                    BK_TRANSSSRInfo1.MealQty4 += 1;
                                                    BK_TRANSSSRInfo1.MealSubTotal4 = (BK_TRANSSSRInfo1.MealRate4 * BK_TRANSSSRInfo1.MealQty4);
                                                }
                                                else if (dtArraySport != null && dtArraySport.Rows.Count > 0 && (dtArraySport.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0))
                                                {
                                                    BK_TRANSSSRInfo1.SportAmt = feeAmount;
                                                    BK_TRANSSSRInfo1.SportCode = feeCode;
                                                }
                                                else if (dtArrayKit != null && dtArrayKit.Rows.Count > 0 && (dtArrayKit.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0))
                                                {
                                                    BK_TRANSSSRInfo1.KitAmt = feeAmount;
                                                    BK_TRANSSSRInfo1.KitCode = feeCode;
                                                }
                                                else if (dtArrayDuty != null && dtArrayDuty.Rows.Count > 0 && (dtArrayDuty.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0))
                                                {
                                                    BK_TRANSSSRInfo1.DutyAmt = feeAmount;
                                                    BK_TRANSSSRInfo1.DutyCode = feeCode;
                                                }

                                                BK_TRANSSSRInfo1.Segment = 0;
                                                BK_TRANSSSRInfo1.SeqNo = 0;
                                                BK_TRANSSSRInfo1.TripMode = 0;
                                                BK_TRANSSSRInfo1.Origin = itemPassengerFee.FlightReference.Substring(16, 3);
                                                BK_TRANSSSRInfo1.Destination = itemPassengerFee.FlightReference.Substring(19, 3);
                                                BK_TRANSSSRInfo1.CarrierCode = itemPassengerFee.FlightReference.Substring(9, 2);
                                                if (itemPassengerFee.FlightReference.Substring(11, 1).ToString() == " ")
                                                {
                                                    BK_TRANSSSRInfo1.FlightNo = itemPassengerFee.FlightReference.Substring(12, 3);
                                                }
                                                else
                                                {
                                                    BK_TRANSSSRInfo1.FlightNo = itemPassengerFee.FlightReference.Substring(11, 4);
                                                }

                                                //listbk_transssrinfo.Add(BK_TRANSSSRInfo);
                                            }
                                        }
                                        else if (itemPassengerFee.FlightReference.Substring(16, 6) == TransitDepart + Arrival)
                                        {
                                            if (inft == 1)
                                            {
                                                infantFee1 += feeAmount;
                                                BK_TRANSSSRInfo2.InfantAmt = feeAmount;
                                                BK_TRANSSSRInfo2.InfantCode = feeCode;
                                            }
                                            else
                                            {
                                                ssrFee1 += feeAmount;
                                                if (dtArrayBaggage != null && dtArrayBaggage.Rows.Count > 0 && (dtArrayBaggage.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0))
                                                {
                                                    BK_TRANSSSRInfo2.BaggageAmt = feeAmount;
                                                    BK_TRANSSSRInfo2.BaggageCode = feeCode;
                                                }
                                                else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo2.DrinkCode1 == null || (BK_TRANSSSRInfo2.DrinkCode1 != null && BK_TRANSSSRInfo2.DrinkCode1 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo2.DrinkRate1 = feeAmount;
                                                    BK_TRANSSSRInfo2.DrinkCode1 = feeCode;
                                                    BK_TRANSSSRInfo2.DrinkQty1 += 1;
                                                    BK_TRANSSSRInfo2.DrinkSubTotal1 = (BK_TRANSSSRInfo2.DrinkRate1 * BK_TRANSSSRInfo2.DrinkQty1);
                                                }
                                                else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo2.DrinkCode2 == null || (BK_TRANSSSRInfo2.DrinkCode2 != null && BK_TRANSSSRInfo2.DrinkCode2 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo2.DrinkRate2 = feeAmount;
                                                    BK_TRANSSSRInfo2.DrinkCode2 = feeCode;
                                                    BK_TRANSSSRInfo2.DrinkQty2 += 1;
                                                    BK_TRANSSSRInfo2.DrinkSubTotal2 = (BK_TRANSSSRInfo2.DrinkRate2 * BK_TRANSSSRInfo2.DrinkQty2);
                                                }
                                                else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo2.DrinkCode3 == null || (BK_TRANSSSRInfo2.DrinkCode3 != null && BK_TRANSSSRInfo2.DrinkCode3 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo2.DrinkRate3 = feeAmount;
                                                    BK_TRANSSSRInfo2.DrinkCode3 = feeCode;
                                                    BK_TRANSSSRInfo2.DrinkQty3 += 1;
                                                    BK_TRANSSSRInfo2.DrinkSubTotal3 = (BK_TRANSSSRInfo2.DrinkRate3 * BK_TRANSSSRInfo2.DrinkQty3);
                                                }
                                                else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo2.DrinkCode4 == null || (BK_TRANSSSRInfo2.DrinkCode4 != null && BK_TRANSSSRInfo2.DrinkCode4 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo2.DrinkRate4 = feeAmount;
                                                    BK_TRANSSSRInfo2.DrinkCode4 = feeCode;
                                                    BK_TRANSSSRInfo2.DrinkQty4 += 1;
                                                    BK_TRANSSSRInfo2.DrinkSubTotal4 = (BK_TRANSSSRInfo2.DrinkRate4 * BK_TRANSSSRInfo2.DrinkQty4);
                                                }
                                                else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo2.MealCode1 == null || (BK_TRANSSSRInfo2.MealCode1 != null && BK_TRANSSSRInfo2.MealCode1 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo2.MealRate1 = feeAmount;
                                                    BK_TRANSSSRInfo2.MealCode1 = feeCode;
                                                    BK_TRANSSSRInfo2.MealQty1 += 1;
                                                    BK_TRANSSSRInfo2.MealSubTotal1 = (BK_TRANSSSRInfo2.MealRate1 * BK_TRANSSSRInfo2.MealQty1);
                                                }
                                                else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo2.MealCode2 == null || (BK_TRANSSSRInfo2.MealCode2 != null && BK_TRANSSSRInfo2.MealCode2 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo2.MealRate2 = feeAmount;
                                                    BK_TRANSSSRInfo2.MealCode2 = feeCode;
                                                    BK_TRANSSSRInfo2.MealQty2 += 1;
                                                    BK_TRANSSSRInfo2.MealSubTotal2 = (BK_TRANSSSRInfo2.MealRate2 * BK_TRANSSSRInfo2.MealQty2);
                                                }
                                                else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo2.MealCode3 == null || (BK_TRANSSSRInfo2.MealCode3 != null && BK_TRANSSSRInfo2.MealCode3 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo2.MealRate3 = feeAmount;
                                                    BK_TRANSSSRInfo2.MealCode3 = feeCode;
                                                    BK_TRANSSSRInfo2.MealQty3 += 1;
                                                    BK_TRANSSSRInfo2.MealSubTotal3 = (BK_TRANSSSRInfo2.MealRate3 * BK_TRANSSSRInfo2.MealQty3);
                                                }
                                                else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo2.MealCode4 == null || (BK_TRANSSSRInfo2.MealCode4 != null && BK_TRANSSSRInfo2.MealCode4 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo2.MealRate4 = feeAmount;
                                                    BK_TRANSSSRInfo2.MealCode4 = feeCode;
                                                    BK_TRANSSSRInfo2.MealQty4 += 1;
                                                    BK_TRANSSSRInfo2.MealSubTotal4 = (BK_TRANSSSRInfo2.MealRate4 * BK_TRANSSSRInfo2.MealQty4);
                                                }
                                                else if (dtArraySport != null && dtArraySport.Rows.Count > 0 && (dtArraySport.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0))
                                                {
                                                    BK_TRANSSSRInfo2.SportAmt = feeAmount;
                                                    BK_TRANSSSRInfo2.SportCode = feeCode;
                                                }
                                                else if (dtArrayKit != null && dtArrayKit.Rows.Count > 0 && (dtArrayKit.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0))
                                                {
                                                    BK_TRANSSSRInfo2.KitAmt = feeAmount;
                                                    BK_TRANSSSRInfo2.KitCode = feeCode;
                                                }
                                                else if (dtArrayDuty != null && dtArrayDuty.Rows.Count > 0 && (dtArrayDuty.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0))
                                                {
                                                    BK_TRANSSSRInfo2.DutyAmt = feeAmount;
                                                    BK_TRANSSSRInfo2.DutyCode = feeCode;
                                                }

                                                BK_TRANSSSRInfo2.Segment = 1;
                                                BK_TRANSSSRInfo2.SeqNo = 1;
                                                BK_TRANSSSRInfo2.TripMode = 0;
                                                BK_TRANSSSRInfo2.Origin = itemPassengerFee.FlightReference.Substring(16, 3);
                                                BK_TRANSSSRInfo2.Destination = itemPassengerFee.FlightReference.Substring(19, 3);
                                                BK_TRANSSSRInfo2.CarrierCode = itemPassengerFee.FlightReference.Substring(9, 2);
                                                if (itemPassengerFee.FlightReference.Substring(11, 1).ToString() == " ")
                                                {
                                                    BK_TRANSSSRInfo2.FlightNo = itemPassengerFee.FlightReference.Substring(12, 3);
                                                }
                                                else
                                                {
                                                    BK_TRANSSSRInfo2.FlightNo = itemPassengerFee.FlightReference.Substring(11, 4);
                                                }

                                                //listbk_transssrinfo.Add(BK_TRANSSSRInfo);
                                            }
                                        }
                                        else if (itemPassengerFee.FlightReference.Substring(16, 6) == Arrival + Departure || itemPassengerFee.FlightReference.Substring(16, 6) == Arrival + TransitReturn)
                                        {
                                            if (inft == 1)
                                            {
                                                infantFee2 += feeAmount;
                                                BK_TRANSSSRInfo3.InfantAmt = feeAmount;
                                                BK_TRANSSSRInfo3.InfantCode = feeCode;
                                            }
                                            else
                                            {
                                                ssrFee2 += feeAmount;
                                                if (dtArrayBaggage != null && dtArrayBaggage.Rows.Count > 0 && (dtArrayBaggage.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0))
                                                {
                                                    BK_TRANSSSRInfo3.BaggageAmt = feeAmount;
                                                    BK_TRANSSSRInfo3.BaggageCode = feeCode;
                                                }
                                                else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo3.DrinkCode1 == null || (BK_TRANSSSRInfo3.DrinkCode1 != null && BK_TRANSSSRInfo3.DrinkCode1 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo3.DrinkRate1 = feeAmount;
                                                    BK_TRANSSSRInfo3.DrinkCode1 = feeCode;
                                                    BK_TRANSSSRInfo3.DrinkQty1 += 1;
                                                    BK_TRANSSSRInfo3.DrinkSubTotal1 = (BK_TRANSSSRInfo3.DrinkRate1 * BK_TRANSSSRInfo3.DrinkQty1);
                                                }
                                                else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo3.DrinkCode2 == null || (BK_TRANSSSRInfo3.DrinkCode2 != null && BK_TRANSSSRInfo3.DrinkCode2 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo3.DrinkRate2 = feeAmount;
                                                    BK_TRANSSSRInfo3.DrinkCode2 = feeCode;
                                                    BK_TRANSSSRInfo3.DrinkQty2 += 1;
                                                    BK_TRANSSSRInfo3.DrinkSubTotal1 = (BK_TRANSSSRInfo3.DrinkRate2 * BK_TRANSSSRInfo3.DrinkQty2);
                                                }
                                                else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo3.DrinkCode3 == null || (BK_TRANSSSRInfo3.DrinkCode3 != null && BK_TRANSSSRInfo3.DrinkCode3 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo3.DrinkRate3 = feeAmount;
                                                    BK_TRANSSSRInfo3.DrinkCode3 = feeCode;
                                                    BK_TRANSSSRInfo3.DrinkQty3 += 1;
                                                    BK_TRANSSSRInfo3.DrinkSubTotal3 = (BK_TRANSSSRInfo3.DrinkRate3 * BK_TRANSSSRInfo3.DrinkQty3);
                                                }
                                                else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo3.DrinkCode4 == null || (BK_TRANSSSRInfo3.DrinkCode4 != null && BK_TRANSSSRInfo3.DrinkCode4 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo3.DrinkRate4 = feeAmount;
                                                    BK_TRANSSSRInfo3.DrinkCode4 = feeCode;
                                                    BK_TRANSSSRInfo3.DrinkQty4 += 1;
                                                    BK_TRANSSSRInfo3.DrinkSubTotal4 = (BK_TRANSSSRInfo3.DrinkRate4 * BK_TRANSSSRInfo3.DrinkQty4);
                                                }
                                                else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo3.MealCode1 == null || (BK_TRANSSSRInfo3.MealCode1 != null && BK_TRANSSSRInfo3.MealCode1 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo3.MealRate1 = feeAmount;
                                                    BK_TRANSSSRInfo3.MealCode1 = feeCode;
                                                    BK_TRANSSSRInfo3.MealQty1 += 1;
                                                    BK_TRANSSSRInfo3.MealSubTotal1 = (BK_TRANSSSRInfo3.MealRate1 * BK_TRANSSSRInfo3.MealQty1);
                                                }
                                                else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo3.MealCode2 == null || (BK_TRANSSSRInfo3.MealCode2 != null && BK_TRANSSSRInfo3.MealCode2 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo3.MealRate2 = feeAmount;
                                                    BK_TRANSSSRInfo3.MealCode2 = feeCode;
                                                    BK_TRANSSSRInfo3.MealQty2 += 1;
                                                    BK_TRANSSSRInfo3.MealSubTotal2 = (BK_TRANSSSRInfo3.MealRate2 * BK_TRANSSSRInfo3.MealQty2);
                                                }
                                                else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo3.MealCode3 == null || (BK_TRANSSSRInfo3.MealCode3 != null && BK_TRANSSSRInfo3.MealCode3 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo3.MealRate3 = feeAmount;
                                                    BK_TRANSSSRInfo3.MealCode3 = feeCode;
                                                    BK_TRANSSSRInfo3.MealQty3 += 1;
                                                    BK_TRANSSSRInfo3.MealSubTotal3 = (BK_TRANSSSRInfo3.MealRate3 * BK_TRANSSSRInfo3.MealQty3);
                                                }
                                                else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo3.MealCode4 == null || (BK_TRANSSSRInfo3.MealCode4 != null && BK_TRANSSSRInfo3.MealCode4 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo3.MealRate4 = feeAmount;
                                                    BK_TRANSSSRInfo3.MealCode4 = feeCode;
                                                    BK_TRANSSSRInfo3.MealQty4 += 1;
                                                    BK_TRANSSSRInfo3.MealSubTotal4 = (BK_TRANSSSRInfo3.MealRate4 * BK_TRANSSSRInfo3.MealQty4);
                                                }
                                                else if (dtArraySport != null && dtArraySport.Rows.Count > 0 && (dtArraySport.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0))
                                                {
                                                    BK_TRANSSSRInfo3.SportAmt = feeAmount;
                                                    BK_TRANSSSRInfo3.SportCode = feeCode;
                                                }
                                                else if (dtArrayKit != null && dtArrayKit.Rows.Count > 0 && (dtArrayKit.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0))
                                                {
                                                    BK_TRANSSSRInfo3.KitAmt = feeAmount;
                                                    BK_TRANSSSRInfo3.KitCode = feeCode;
                                                }
                                                else if (dtArrayDuty != null && dtArrayDuty.Rows.Count > 0 && (dtArrayDuty.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0))
                                                {
                                                    BK_TRANSSSRInfo3.DutyAmt = feeAmount;
                                                    BK_TRANSSSRInfo3.DutyCode = feeCode;
                                                }
                                                BK_TRANSSSRInfo3.Segment = 0;
                                                if (TransitDepart != "")
                                                {
                                                    BK_TRANSSSRInfo3.SeqNo = 2;
                                                }
                                                else
                                                {
                                                    BK_TRANSSSRInfo3.SeqNo = 1;
                                                }

                                                BK_TRANSSSRInfo3.TripMode = 1;
                                                BK_TRANSSSRInfo3.Origin = itemPassengerFee.FlightReference.Substring(16, 3);
                                                BK_TRANSSSRInfo3.Destination = itemPassengerFee.FlightReference.Substring(19, 3);
                                                BK_TRANSSSRInfo3.CarrierCode = itemPassengerFee.FlightReference.Substring(9, 2);
                                                if (itemPassengerFee.FlightReference.Substring(11, 1).ToString() == " ")
                                                {
                                                    BK_TRANSSSRInfo3.FlightNo = itemPassengerFee.FlightReference.Substring(12, 3);
                                                }
                                                else
                                                {
                                                    BK_TRANSSSRInfo3.FlightNo = itemPassengerFee.FlightReference.Substring(11, 4);
                                                }
                                            }
                                        }
                                        else if (itemPassengerFee.FlightReference.Substring(16, 6) == TransitReturn + Departure)
                                        {
                                            if (inft == 1)
                                            {
                                                infantFee2 += feeAmount;
                                                BK_TRANSSSRInfo4.InfantAmt = feeAmount;
                                                BK_TRANSSSRInfo4.InfantCode = feeCode;
                                            }
                                            else
                                            {
                                                ssrFee2 += feeAmount;
                                                if (dtArrayBaggage != null && dtArrayBaggage.Rows.Count > 0 && (dtArrayBaggage.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0))
                                                {
                                                    BK_TRANSSSRInfo4.BaggageAmt = feeAmount;
                                                    BK_TRANSSSRInfo4.BaggageCode = feeCode;
                                                }
                                                else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo4.DrinkCode1 == null || (BK_TRANSSSRInfo4.DrinkCode1 != null && BK_TRANSSSRInfo4.DrinkCode1 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo4.DrinkRate1 = feeAmount;
                                                    BK_TRANSSSRInfo4.DrinkCode1 = feeCode;
                                                    BK_TRANSSSRInfo4.DrinkQty1 += 1;
                                                    BK_TRANSSSRInfo4.DrinkSubTotal1 = (BK_TRANSSSRInfo4.DrinkRate1 * BK_TRANSSSRInfo4.DrinkQty1);
                                                }
                                                else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo4.DrinkCode2 == null || (BK_TRANSSSRInfo4.DrinkCode2 != null && BK_TRANSSSRInfo4.DrinkCode2 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo4.DrinkRate2 = feeAmount;
                                                    BK_TRANSSSRInfo4.DrinkCode2 = feeCode;
                                                    BK_TRANSSSRInfo4.DrinkQty2 += 1;
                                                    BK_TRANSSSRInfo4.DrinkSubTotal1 = (BK_TRANSSSRInfo4.DrinkRate2 * BK_TRANSSSRInfo4.DrinkQty2);
                                                }
                                                else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo4.DrinkCode3 == null || (BK_TRANSSSRInfo4.DrinkCode3 != null && BK_TRANSSSRInfo4.DrinkCode3 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo4.DrinkRate3 = feeAmount;
                                                    BK_TRANSSSRInfo4.DrinkCode3 = feeCode;
                                                    BK_TRANSSSRInfo4.DrinkQty3 += 1;
                                                    BK_TRANSSSRInfo4.DrinkSubTotal3 = (BK_TRANSSSRInfo4.DrinkRate3 * BK_TRANSSSRInfo4.DrinkQty3);
                                                }
                                                else if (dtArrayDrink != null && dtArrayDrink.Rows.Count > 0 && (dtArrayDrink.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo4.DrinkCode4 == null || (BK_TRANSSSRInfo4.DrinkCode4 != null && BK_TRANSSSRInfo4.DrinkCode4 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo4.DrinkRate4 = feeAmount;
                                                    BK_TRANSSSRInfo4.DrinkCode4 = feeCode;
                                                    BK_TRANSSSRInfo4.DrinkQty4 += 1;
                                                    BK_TRANSSSRInfo4.DrinkSubTotal4 = (BK_TRANSSSRInfo4.DrinkRate4 * BK_TRANSSSRInfo4.DrinkQty4);
                                                }
                                                else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo4.MealCode1 == null || (BK_TRANSSSRInfo4.MealCode1 != null && BK_TRANSSSRInfo4.MealCode1 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo4.MealRate1 = feeAmount;
                                                    BK_TRANSSSRInfo4.MealCode1 = feeCode;
                                                    BK_TRANSSSRInfo4.MealQty1 += 1;
                                                    BK_TRANSSSRInfo4.MealSubTotal1 = (BK_TRANSSSRInfo4.MealRate1 * BK_TRANSSSRInfo4.MealQty1);
                                                }
                                                else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo4.MealCode2 == null || (BK_TRANSSSRInfo4.MealCode2 != null && BK_TRANSSSRInfo4.MealCode2 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo4.MealRate2 = feeAmount;
                                                    BK_TRANSSSRInfo4.MealCode2 = feeCode;
                                                    BK_TRANSSSRInfo4.MealQty2 += 1;
                                                    BK_TRANSSSRInfo4.MealSubTotal2 = (BK_TRANSSSRInfo4.MealRate2 * BK_TRANSSSRInfo4.MealQty2);
                                                }
                                                else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo4.MealCode3 == null || (BK_TRANSSSRInfo4.MealCode3 != null && BK_TRANSSSRInfo4.MealCode3 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo4.MealRate3 = feeAmount;
                                                    BK_TRANSSSRInfo4.MealCode3 = feeCode;
                                                    BK_TRANSSSRInfo4.MealQty3 += 1;
                                                    BK_TRANSSSRInfo4.MealSubTotal3 = (BK_TRANSSSRInfo4.MealRate3 * BK_TRANSSSRInfo4.MealQty3);
                                                }
                                                else if (dtArrayMeal != null && dtArrayMeal.Rows.Count > 0 && (dtArrayMeal.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0) && (BK_TRANSSSRInfo4.MealCode4 == null || (BK_TRANSSSRInfo4.MealCode4 != null && BK_TRANSSSRInfo4.MealCode4 == feeCode.ToString())))
                                                {
                                                    BK_TRANSSSRInfo4.MealRate4 = feeAmount;
                                                    BK_TRANSSSRInfo4.MealCode4 = feeCode;
                                                    BK_TRANSSSRInfo4.MealQty4 += 1;
                                                    BK_TRANSSSRInfo4.MealSubTotal4 = (BK_TRANSSSRInfo4.MealRate4 * BK_TRANSSSRInfo4.MealQty4);
                                                }
                                                else if (dtArraySport != null && dtArraySport.Rows.Count > 0 && (dtArraySport.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0))
                                                {
                                                    BK_TRANSSSRInfo4.SportAmt = feeAmount;
                                                    BK_TRANSSSRInfo4.SportCode = feeCode;
                                                }
                                                else if (dtArrayKit != null && dtArrayKit.Rows.Count > 0 && (dtArrayKit.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0))
                                                {
                                                    BK_TRANSSSRInfo4.KitAmt = feeAmount;
                                                    BK_TRANSSSRInfo4.KitCode = feeCode;
                                                }
                                                else if (dtArrayDuty != null && dtArrayDuty.Rows.Count > 0 && (dtArrayDuty.Select("ItemCode = '" + feeCode.ToString() + "'").Length != 0))
                                                {
                                                    BK_TRANSSSRInfo4.DutyAmt = feeAmount;
                                                    BK_TRANSSSRInfo4.DutyCode = feeCode;
                                                }

                                                BK_TRANSSSRInfo4.Segment = 1;
                                                if (TransitDepart != "")
                                                {
                                                    BK_TRANSSSRInfo4.SeqNo = 3;
                                                }
                                                else
                                                {
                                                    BK_TRANSSSRInfo4.SeqNo = 2;
                                                }

                                                BK_TRANSSSRInfo4.TripMode = 1;
                                                BK_TRANSSSRInfo4.Origin = itemPassengerFee.FlightReference.Substring(16, 3);
                                                BK_TRANSSSRInfo4.Destination = itemPassengerFee.FlightReference.Substring(19, 3);
                                                BK_TRANSSSRInfo4.CarrierCode = itemPassengerFee.FlightReference.Substring(9, 2);
                                                if (itemPassengerFee.FlightReference.Substring(11, 1).ToString() == " ")
                                                {
                                                    BK_TRANSSSRInfo4.FlightNo = itemPassengerFee.FlightReference.Substring(12, 3);
                                                }
                                                else
                                                {
                                                    BK_TRANSSSRInfo4.FlightNo = itemPassengerFee.FlightReference.Substring(11, 4);
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (itemPassengerFee.FeeType == FeeType.SeatFee)
                                {
                                    if (feeChargeType.ToUpper() == "DISCOUNT")
                                    {
                                        feeAmount = 0 - feeAmount;
                                    }
                                    if (itemPassengerFee.FlightReference != "")
                                    {

                                        if (itemPassengerFee.FlightReference.Substring(16, 6) == Departure + Arrival || itemPassengerFee.FlightReference.Substring(16, 6) == Departure + TransitDepart || itemPassengerFee.FlightReference.Substring(16, 6) == TransitDepart + Arrival)
                                            seatFee1 += feeAmount;
                                        else if (itemPassengerFee.FlightReference.Substring(16, 6) == Arrival + Departure || itemPassengerFee.FlightReference.Substring(16, 6) == TransitReturn + Departure || itemPassengerFee.FlightReference.Substring(16, 6) == Arrival + TransitReturn)
                                            seatFee2 += feeAmount;
                                    }
                                }
                                else if (itemPassengerFee.FeeType == FeeType.PaymentFee)
                                {
                                    if (feeChargeType.ToUpper() == "DISCOUNT")
                                    {
                                        feeAmount = 0 - feeAmount;
                                    }
                                    processFee += feeAmount;
                                }
                                else if (itemPassengerFee.FeeCode == "NCF")
                                {
                                    if (feeChargeType.ToUpper() == "DISCOUNT")
                                    {
                                        feeAmount = 0 - feeAmount;
                                    }
                                    nameChangeFee += feeAmount;
                                }
                                else if (feeChargeType.ToUpper() == "DISCOUNT")
                                {
                                    discFee -= feeAmount;
                                }
                                else if (feeChargeType.ToUpper() == "PROMOTIONDISCOUNT")
                                {
                                    promoDiscFee -= feeAmount;
                                }
                                else
                                {
                                    switch (feeCode)
                                    {
                                        case "SVCF":
                                            serviceFee += feeAmount;
                                            break;
                                        case "VAT":
                                            vatFee += feeAmount;
                                            break;
                                        case "CHG":
                                            chargeFee += feeAmount;
                                            break;
                                        case "SPL":
                                            splFee += feeAmount;
                                            break;
                                        //case "NCF":
                                        //    nameChangeFee += feeAmount;
                                        //    break;
                                        //case "CONA":
                                        //    processFee += feeAmount;
                                        //    break;
                                        default:
                                            otherFee += feeAmount;
                                            break;
                                    }
                                }
                            }

                        }
                        if (BK_TRANSSSRInfo1.BaggageCode != null || BK_TRANSSSRInfo1.DrinkCode1 != null || BK_TRANSSSRInfo1.DutyCode != null || BK_TRANSSSRInfo1.InfantCode != null || BK_TRANSSSRInfo1.KitCode != null || BK_TRANSSSRInfo1.MealCode1 != null || BK_TRANSSSRInfo1.SportCode != null)
                        {
                            BK_TRANSSSRInfo1.PassengerID = itemPassenger.PassengerNumber.ToString();
                            BK_TRANSSSRInfo1.RecordLocator = PNR;
                            BK_TRANSSSRInfo1.MealTotalAmt = (BK_TRANSSSRInfo1.MealSubTotal1 + BK_TRANSSSRInfo1.MealSubTotal2 + BK_TRANSSSRInfo1.MealSubTotal3 + BK_TRANSSSRInfo1.MealSubTotal4);
                            BK_TRANSSSRInfo1.MealCount = Convert.ToInt16(BK_TRANSSSRInfo1.MealQty1 + BK_TRANSSSRInfo1.MealQty2 + BK_TRANSSSRInfo1.MealQty3 + BK_TRANSSSRInfo1.MealQty4);
                            BK_TRANSSSRInfo1.DrinkTotalAmt = (BK_TRANSSSRInfo1.DrinkSubTotal1 + BK_TRANSSSRInfo1.DrinkSubTotal2 + BK_TRANSSSRInfo1.DrinkSubTotal3 + BK_TRANSSSRInfo1.DrinkSubTotal4);
                            BK_TRANSSSRInfo1.DrinkCount = Convert.ToInt16(BK_TRANSSSRInfo1.DrinkQty1 + BK_TRANSSSRInfo1.DrinkQty2 + BK_TRANSSSRInfo1.DrinkQty3 + BK_TRANSSSRInfo1.DrinkQty4);
                            BK_TRANSSSRInfo1.TotalAmount = (BK_TRANSSSRInfo1.MealTotalAmt + BK_TRANSSSRInfo1.DrinkTotalAmt + BK_TRANSSSRInfo1.DutyAmt + BK_TRANSSSRInfo1.KitAmt + BK_TRANSSSRInfo1.SportAmt + BK_TRANSSSRInfo1.BaggageAmt + BK_TRANSSSRInfo1.InfantAmt);

                            listbk_transssrinfo.Add(BK_TRANSSSRInfo1);
                        }
                        if (BK_TRANSSSRInfo2.BaggageCode != null || BK_TRANSSSRInfo2.DrinkCode1 != null || BK_TRANSSSRInfo2.DutyCode != null || BK_TRANSSSRInfo2.InfantCode != null || BK_TRANSSSRInfo2.KitCode != null || BK_TRANSSSRInfo2.MealCode1 != null || BK_TRANSSSRInfo2.SportCode != null)
                        {
                            BK_TRANSSSRInfo2.PassengerID = itemPassenger.PassengerNumber.ToString();
                            BK_TRANSSSRInfo2.RecordLocator = PNR;
                            BK_TRANSSSRInfo2.MealTotalAmt = (BK_TRANSSSRInfo2.MealSubTotal1 + BK_TRANSSSRInfo2.MealSubTotal2 + BK_TRANSSSRInfo2.MealSubTotal3 + BK_TRANSSSRInfo2.MealSubTotal4);
                            BK_TRANSSSRInfo2.MealCount = Convert.ToInt16(BK_TRANSSSRInfo2.MealQty1 + BK_TRANSSSRInfo2.MealQty2 + BK_TRANSSSRInfo2.MealQty3 + BK_TRANSSSRInfo2.MealQty4);
                            BK_TRANSSSRInfo2.DrinkTotalAmt = (BK_TRANSSSRInfo2.DrinkSubTotal1 + BK_TRANSSSRInfo2.DrinkSubTotal2 + BK_TRANSSSRInfo2.DrinkSubTotal3 + BK_TRANSSSRInfo2.DrinkSubTotal4);
                            BK_TRANSSSRInfo2.DrinkCount = Convert.ToInt16(BK_TRANSSSRInfo2.DrinkQty1 + BK_TRANSSSRInfo2.DrinkQty2 + BK_TRANSSSRInfo2.DrinkQty3 + BK_TRANSSSRInfo2.DrinkQty4);
                            BK_TRANSSSRInfo2.TotalAmount = (BK_TRANSSSRInfo2.MealTotalAmt + BK_TRANSSSRInfo2.DrinkTotalAmt + BK_TRANSSSRInfo2.DutyAmt + BK_TRANSSSRInfo2.KitAmt + BK_TRANSSSRInfo2.SportAmt + BK_TRANSSSRInfo2.BaggageAmt + BK_TRANSSSRInfo2.InfantAmt);

                            listbk_transssrinfo.Add(BK_TRANSSSRInfo2);
                        }
                        if (BK_TRANSSSRInfo3.BaggageCode != null || BK_TRANSSSRInfo3.DrinkCode1 != null || BK_TRANSSSRInfo3.DutyCode != null || BK_TRANSSSRInfo3.InfantCode != null || BK_TRANSSSRInfo3.KitCode != null || BK_TRANSSSRInfo3.MealCode1 != null || BK_TRANSSSRInfo3.SportCode != null)
                        {
                            BK_TRANSSSRInfo3.PassengerID = itemPassenger.PassengerNumber.ToString();
                            BK_TRANSSSRInfo3.RecordLocator = PNR;
                            BK_TRANSSSRInfo3.MealTotalAmt = (BK_TRANSSSRInfo3.MealSubTotal1 + BK_TRANSSSRInfo3.MealSubTotal2 + BK_TRANSSSRInfo3.MealSubTotal3 + BK_TRANSSSRInfo3.MealSubTotal4);
                            BK_TRANSSSRInfo3.MealCount = Convert.ToInt16(BK_TRANSSSRInfo3.MealQty1 + BK_TRANSSSRInfo3.MealQty2 + BK_TRANSSSRInfo3.MealQty3 + BK_TRANSSSRInfo3.MealQty4);
                            BK_TRANSSSRInfo3.DrinkTotalAmt = (BK_TRANSSSRInfo3.DrinkSubTotal1 + BK_TRANSSSRInfo3.DrinkSubTotal2 + BK_TRANSSSRInfo3.DrinkSubTotal3 + BK_TRANSSSRInfo3.DrinkSubTotal4);
                            BK_TRANSSSRInfo3.DrinkCount = Convert.ToInt16(BK_TRANSSSRInfo3.DrinkQty1 + BK_TRANSSSRInfo3.DrinkQty2 + BK_TRANSSSRInfo3.DrinkQty3 + BK_TRANSSSRInfo3.DrinkQty4);
                            BK_TRANSSSRInfo3.TotalAmount = (BK_TRANSSSRInfo3.MealTotalAmt + BK_TRANSSSRInfo3.DrinkTotalAmt + BK_TRANSSSRInfo3.DutyAmt + BK_TRANSSSRInfo3.KitAmt + BK_TRANSSSRInfo3.SportAmt + BK_TRANSSSRInfo3.BaggageAmt + BK_TRANSSSRInfo3.InfantAmt);

                            listbk_transssrinfo.Add(BK_TRANSSSRInfo3);
                        }
                        if (BK_TRANSSSRInfo4.BaggageCode != null || BK_TRANSSSRInfo4.DrinkCode1 != null || BK_TRANSSSRInfo4.DutyCode != null || BK_TRANSSSRInfo4.InfantCode != null || BK_TRANSSSRInfo4.KitCode != null || BK_TRANSSSRInfo4.MealCode1 != null || BK_TRANSSSRInfo4.SportCode != null)
                        {
                            BK_TRANSSSRInfo4.PassengerID = itemPassenger.PassengerNumber.ToString();
                            BK_TRANSSSRInfo4.RecordLocator = PNR;
                            BK_TRANSSSRInfo4.MealTotalAmt = (BK_TRANSSSRInfo4.MealSubTotal1 + BK_TRANSSSRInfo4.MealSubTotal2 + BK_TRANSSSRInfo4.MealSubTotal3 + BK_TRANSSSRInfo4.MealSubTotal4);
                            BK_TRANSSSRInfo4.MealCount = Convert.ToInt16(BK_TRANSSSRInfo4.MealQty1 + BK_TRANSSSRInfo4.MealQty2 + BK_TRANSSSRInfo4.MealQty3 + BK_TRANSSSRInfo4.MealQty4);
                            BK_TRANSSSRInfo4.DrinkTotalAmt = (BK_TRANSSSRInfo4.DrinkSubTotal1 + BK_TRANSSSRInfo4.DrinkSubTotal2 + BK_TRANSSSRInfo4.DrinkSubTotal3 + BK_TRANSSSRInfo4.DrinkSubTotal4);
                            BK_TRANSSSRInfo4.DrinkCount = Convert.ToInt16(BK_TRANSSSRInfo4.DrinkQty1 + BK_TRANSSSRInfo4.DrinkQty2 + BK_TRANSSSRInfo4.DrinkQty3 + BK_TRANSSSRInfo4.DrinkQty4);
                            BK_TRANSSSRInfo4.TotalAmount = (BK_TRANSSSRInfo4.MealTotalAmt + BK_TRANSSSRInfo4.DrinkTotalAmt + BK_TRANSSSRInfo4.DutyAmt + BK_TRANSSSRInfo4.KitAmt + BK_TRANSSSRInfo4.SportAmt + BK_TRANSSSRInfo4.BaggageAmt + BK_TRANSSSRInfo4.InfantAmt);

                            listbk_transssrinfo.Add(BK_TRANSSSRInfo4);
                        }

                    }


                    #endregion

                    #region "Load Journey"
                    BookingJourneyContainer bookingJourneyContainer = new BookingJourneyContainer();
                    for (int j = 0; j < Response.Booking.Journeys.Length; j++)
                    {
                        bookingJourneyContainer = new BookingJourneyContainer();
                        for (int k = 0; k < Response.Booking.Journeys[j].Segments.Length; k++)
                        {
                            switch (j)
                            {
                                case 0:
                                    if (k == 0)
                                    {
                                        for (int m = 0; m < Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares.Length; m++)
                                        {
                                            if (Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].PaxType == "ADT")
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.AdtFarePrice = charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.AdtDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.AdtPromoDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.AdtTaxChrg = charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.AdtFuelChrg = charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg = charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.AdtFarePrice = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.AdtTaxChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.AdtFuelChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.AdtServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                            else
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.ChdFarePrice = charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.ChdDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.ChdPromoDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.ChdTaxChrg = charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.ChdFuelChrg = charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg = charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.ChdServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.ChdServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.ChdFarePrice = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.ChdTaxChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.ChdFuelChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.ChdServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                        }

                                        bookingJourneyContainer.CarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                        bookingJourneyContainer.FlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                        bookingJourneyContainer.STA = Response.Booking.Journeys[j].Segments[k].STA;
                                        bookingJourneyContainer.STD = Response.Booking.Journeys[j].Segments[k].STD;
                                        bookingJourneyContainer.Flag = (byte)Response.Booking.Journeys[j].Segments[k].Fares[0].FareSequence;
                                        bookingJourneyContainer.FareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                        bookingJourneyContainer.FareClass = Response.Booking.Journeys[j].Segments[k].Fares[0].FareClassOfService;
                                        bookingJourneyContainer.ArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                        bookingJourneyContainer.DepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        bookingJourneyContainer.OpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                        bookingJourneyContainer.EquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType;
                                        bookingJourneyContainer.FlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                        bookingJourneyContainer.ServiceFee = serviceFee;
                                        bookingJourneyContainer.VATFee = vatFee;
                                        bookingJourneyContainer.ChargeFee = chargeFee;
                                        bookingJourneyContainer.SPLFee = splFee;
                                        bookingJourneyContainer.SSRChrg = ssrFee1;
                                        bookingJourneyContainer.SeatChrg = seatFee1;
                                        bookingJourneyContainer.InfantChrg = infantFee1;
                                        bookingJourneyContainer.OtherFee = otherFee;
                                        bookingJourneyContainer.ProcessFee = processFee;
                                        bookingJourneyContainer.DiscFee = discFee;
                                        bookingJourneyContainer.PromoDiscFee = promoDiscFee;
                                        bookingJourneyContainer.NameChangeChrg = nameChangeFee;
                                    }
                                    if (k == 1)
                                    {
                                        for (int m = 0; m < Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares.Length; m++)
                                        {
                                            if (Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].PaxType == "ADT")
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.AdtFarePrice += charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.AdtDiscChrg -= charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.AdtPromoDiscChrg -= charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.AdtTaxChrg += charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.AdtFuelChrg += charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg += charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.AdtFarePrice += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.AdtTaxChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.AdtFuelChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.AdtServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                            else
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.ChdFarePrice += charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.ChdDiscChrg -= charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.ChdPromoDiscChrg -= charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.ChdTaxChrg += charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.ChdFuelChrg += charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg += charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.ChdServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.ChdServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.ChdFarePrice += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.ChdTaxChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.ChdFuelChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.ChdServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                        }
                                        bookingJourneyContainer.OverridedCarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                        bookingJourneyContainer.OverridedFlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                        bookingJourneyContainer.OverridedSTA = Response.Booking.Journeys[j].Segments[k].STA;
                                        bookingJourneyContainer.OverridedSTD = Response.Booking.Journeys[j].Segments[k].STD;
                                        bookingJourneyContainer.OverridedFareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                        bookingJourneyContainer.OverridedFareClass = Response.Booking.Journeys[j].Segments[k].Fares[0].FareClassOfService;
                                        bookingJourneyContainer.OverridedArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                        bookingJourneyContainer.OverridedDepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        bookingJourneyContainer.OverridedOpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                        bookingJourneyContainer.OverridedEquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType;
                                        bookingJourneyContainer.OverridedFlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                    }
                                    break;
                                case 1:
                                    if (k == 0)
                                    {
                                        for (int m = 0; m < Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares.Length; m++)
                                        {
                                            if (Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].PaxType == "ADT")
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.AdtFarePrice = charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.AdtDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.AdtPromoDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.AdtTaxChrg = charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.AdtFuelChrg = charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg = charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.AdtFarePrice = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.AdtTaxChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.AdtFuelChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.AdtServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                            else
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.ChdFarePrice = charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.ChdDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.ChdPromoDiscChrg = 0 - charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.ChdTaxChrg = charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.ChdFuelChrg = charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg = charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.ChdServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.ChdServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.ChdFarePrice = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.ChdTaxChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.ChdFuelChrg = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3)
                                                //{
                                                //    for (int c = 3; c < length; c++)
                                                //    {
                                                //        bookingJourneyContainer.ChdServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[c].Amount;
                                                //    }
                                                //}
                                            }
                                        }

                                        bookingJourneyContainer.CarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                        bookingJourneyContainer.FlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                        bookingJourneyContainer.STA = Response.Booking.Journeys[j].Segments[k].STA;
                                        bookingJourneyContainer.STD = Response.Booking.Journeys[j].Segments[k].STD;
                                        bookingJourneyContainer.Flag = (byte)Response.Booking.Journeys[j].Segments[k].Fares[0].FareSequence;
                                        bookingJourneyContainer.FareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                        bookingJourneyContainer.FareClass = Response.Booking.Journeys[j].Segments[k].Fares[0].FareClassOfService;
                                        bookingJourneyContainer.ArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                        bookingJourneyContainer.DepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        bookingJourneyContainer.OpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                        bookingJourneyContainer.EquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType;
                                        bookingJourneyContainer.FlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                        bookingJourneyContainer.ServiceFee = 0;
                                        bookingJourneyContainer.VATFee = 0;
                                        bookingJourneyContainer.ChargeFee = 0;
                                        bookingJourneyContainer.SPLFee = 0;
                                        bookingJourneyContainer.SSRChrg = ssrFee2;
                                        bookingJourneyContainer.SeatChrg = seatFee2;
                                        bookingJourneyContainer.InfantChrg = infantFee2;
                                        bookingJourneyContainer.OtherFee = 0;
                                        bookingJourneyContainer.ProcessFee = 0;
                                        bookingJourneyContainer.DiscFee = 0;
                                        bookingJourneyContainer.PromoDiscFee = 0;
                                        bookingJourneyContainer.NameChangeChrg = 0;
                                    }
                                    if (k == 1)
                                    {
                                        for (int m = 0; m < Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares.Length; m++)
                                        {
                                            if (Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].PaxType == "ADT")
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.AdtFarePrice += charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.AdtDiscChrg -= charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.AdtPromoDiscChrg -= charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.AdtTaxChrg += charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.AdtFuelChrg += charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg += charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.AdtServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.AdtFarePrice += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.AdtTaxChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.AdtFuelChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3) bookingJourneyContainer.AdtServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[3].Amount;
                                            }
                                            else
                                            {
                                                foreach (BookingServiceCharge charges in Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges)
                                                {
                                                    switch (charges.ChargeType.ToString().ToUpper())
                                                    {
                                                        case "FAREPRICE":
                                                            bookingJourneyContainer.ChdFarePrice += charges.Amount;
                                                            break;
                                                        case "DISCOUNT":
                                                            bookingJourneyContainer.ChdDiscChrg -= charges.Amount;
                                                            break;
                                                        case "PROMOTIONDISCOUNT":
                                                            bookingJourneyContainer.ChdPromoDiscChrg -= charges.Amount;
                                                            break;
                                                        case "TRAVELFEE":
                                                            switch (charges.ChargeCode.ToString().ToUpper())
                                                            {
                                                                case "APT":
                                                                case "ATF":
                                                                case "APTF":
                                                                    bookingJourneyContainer.ChdTaxChrg += charges.Amount;
                                                                    break;
                                                                case "FUEL":
                                                                    bookingJourneyContainer.ChdFuelChrg += charges.Amount;
                                                                    break;
                                                                case "PSCH":
                                                                case "PSH":
                                                                    bookingJourneyContainer.PaxFeeChrg += charges.Amount;
                                                                    break;
                                                                default:
                                                                    bookingJourneyContainer.ChdServChrg += charges.Amount;
                                                                    break;
                                                            }
                                                            break;
                                                        default:
                                                            bookingJourneyContainer.ChdServChrg += charges.Amount;
                                                            break;
                                                    }
                                                }
                                                //int length = Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges.Length;
                                                //if (length > 0) bookingJourneyContainer.ChdFarePrice += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[0].Amount;
                                                //if (length > 1) bookingJourneyContainer.ChdTaxChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[1].Amount;
                                                //if (length > 2) bookingJourneyContainer.ChdFuelChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[2].Amount;
                                                //if (length > 3) bookingJourneyContainer.ChdServChrg += Response.Booking.Journeys[j].Segments[k].Fares[0].PaxFares[m].ServiceCharges[3].Amount;
                                            }
                                        }
                                        bookingJourneyContainer.OverridedCarrierCode = Response.Booking.Journeys[j].Segments[k].FlightDesignator.CarrierCode;
                                        bookingJourneyContainer.OverridedFlightNumber = Response.Booking.Journeys[j].Segments[k].FlightDesignator.FlightNumber;
                                        bookingJourneyContainer.OverridedSTA = Response.Booking.Journeys[j].Segments[k].STA;
                                        bookingJourneyContainer.OverridedSTD = Response.Booking.Journeys[j].Segments[k].STD;
                                        bookingJourneyContainer.OverridedFareSellKey = Response.Booking.Journeys[j].Segments[k].Fares[0].FareSellKey;
                                        bookingJourneyContainer.OverridedFareClass = Response.Booking.Journeys[j].Segments[k].Fares[0].FareClassOfService;
                                        bookingJourneyContainer.OverridedArrivalStation = Response.Booking.Journeys[j].Segments[k].ArrivalStation;
                                        bookingJourneyContainer.OverridedDepartureStation = Response.Booking.Journeys[j].Segments[k].DepartureStation;
                                        bookingJourneyContainer.OverridedOpSuffix = Response.Booking.Journeys[j].Segments[k].Legs[0].FlightDesignator.OpSuffix;
                                        bookingJourneyContainer.OverridedEquipmentType = Response.Booking.Journeys[j].Segments[k].Legs[0].LegInfo.EquipmentType;
                                        bookingJourneyContainer.OverridedFlightDesignator = Response.Booking.Journeys[j].Segments[k].FlightDesignator;
                                    }
                                    break;
                            }
                        }

                        //load booking Journey
                        bookingJourneyContainer.JourneySellKey = Response.Booking.Journeys[j].JourneySellKey;
                        bookingJourneyContainer.AdtPax = paxADT;
                        bookingJourneyContainer.ChdPax = paxCHD;

                        //check duration

                        if (lstBookingJourneyContainer.FindIndex(item => item.JourneySellKey == bookingJourneyContainer.JourneySellKey) < 0)
                            lstBookingJourneyContainer.Add(bookingJourneyContainer);
                    }
                    #endregion

                    #region "Load Payment"
                    PaymentContainer paymentContainer = new PaymentContainer();
                    for (int i = 0; i < Response.Booking.Payments.Length; i++)
                    {
                        paymentContainer = new PaymentContainer();
                        paymentContainer.AuthorizationCode = Response.Booking.Payments[i].AuthorizationCode;
                        paymentContainer.AccountNumber = Response.Booking.Payments[i].AccountNumber;
                        paymentContainer.MerchantID = Response.Booking.Payments[i].PaymentID.ToString();
                        paymentContainer.AccountNumberID = Response.Booking.Payments[i].AccountNumberID;
                        paymentContainer.CollectedAmount = Response.Booking.Payments[i].PaymentAmount;
                        paymentContainer.CurrencyCode = Response.Booking.Payments[i].CurrencyCode;
                        paymentContainer.PaymentAmount = Response.Booking.Payments[i].PaymentAmount;
                        paymentContainer.PaymentMethodCode = Response.Booking.Payments[i].PaymentMethodCode;
                        paymentContainer.PaymentMethodType = Convert.ToInt32(Response.Booking.Payments[i].PaymentMethodType);
                        paymentContainer.PaymentNumber = Response.Booking.Payments[i].PaymentNumber;
                        paymentContainer.PaymentStatus = Convert.ToInt32(Response.Booking.Payments[i].Status);
                        paymentContainer.PaymentText = Response.Booking.Payments[i].PaymentText; //aded by diana 20170404, to retrieve fee type
                        paymentContainer.PaymentDate = Response.Booking.Payments[i].ApprovalDate;
                        paymentContainer.RecordLocator = PNR;

                        //decimal currRate = 1;
                        //if (paymentContainer.CurrencyCode != "MYR")
                        //{
                        //    for (int k = 0; k < RateResponse.ExternalRateList.Length; k++)
                        //    {
                        //        if (RateResponse.ExternalRateList[k].QuotedCurrency == paymentContainer.CurrencyCode && RateResponse.ExternalRateList[k].CollectedCurrency == "MYR")
                        //        {
                        //            currRate = RateResponse.ExternalRateList[k].ExchangeRate;
                        //            break;
                        //        }
                        //    }
                        //}
                        //paymentContainer.CurrencyRate = currRate;

                        lstPaymentContainer.Add(paymentContainer);
                    }
                    #endregion

                    if (lstBookingJourneyContainer != null) //if got journey
                    {
                        HttpContext.Current.Session.Remove("BookingJourneyContainers");
                        HttpContext.Current.Session.Add("BookingJourneyContainers", lstBookingJourneyContainer);
                    }

                    if (lstPaymentContainer != null) //if got payment
                    {
                        HttpContext.Current.Session.Remove("PaymentContainers");
                        HttpContext.Current.Session.Add("PaymentContainers", lstPaymentContainer);
                    }

                    if (listbk_transssrinfo != null) //if got journey
                    {
                        HttpContext.Current.Session.Remove("BK_TransSSRContainer");
                        HttpContext.Current.Session.Add("BK_TransSSRContainer", listbk_transssrinfo);
                    }

                    return true;
                    //if (lstBookingJourneyContainer != null && lstPaymentContainer != null)
                    //    return true;
                    //else
                    //    return false;

                }
                else //iterative loop until 5 times if return null
                {
                    cnt += 1;
                    if (cnt <= 5)
                    {
                        return RetrieveBookingDetailsByPNR(ApiBook, ref Response, PNR, TransID, cnt);
                    }
                    else
                    {
                        return false;
                    }
                }

            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                cnt += 1;
                if (cnt <= 5)
                {
                    return RetrieveBookingDetailsByPNR(ApiBook, ref Response, PNR, TransID, cnt);
                }
                else
                {
                    return false;
                }
            }
        }

        public Boolean UpdateAllBookingJourneyDetailsforDevide(ListTransaction TransactionInfo, string AgentName, string AgentID, Boolean VerifyDetails = false)
        {
            try
            {
                Navitaire.APIBooking ApiBook = new Navitaire.APIBooking("");
                Navitaire.BookingManager.GetBookingResponse Response = new Navitaire.BookingManager.GetBookingResponse();

                string TransID = TransactionInfo.TransID;
                string PNR = "";
                string currencyCode = "";
                decimal exchangeRate = 1;
                string bookingStatus = "";
                //added by ketee
                string checkBookingStatus = "";
                DateTime expiredDate = DateTime.Now.AddDays(1);
                DateTime stdDate = DateTime.Now;
                bool change = false;

                Decimal totalPaid = 0;
                int totalPax = 0;
                decimal totalTransAmountAll = 0;
                decimal totalTransAmount = 0;
                decimal totalAmountGoing = 0;
                decimal totalAmountReturn = 0;
                decimal totalTransSubTotal = 0;
                decimal totalTransTotalFee = 0;
                decimal totalTransTotalTax = 0;
                decimal totalTransTotalPaxFee = 0;
                decimal totalTransTotalOth = 0;
                decimal totalTransTotalProcess = 0;
                decimal totalTransTotalSSR = 0;
                decimal totalTransTotalSeat = 0;
                decimal totalTransTotalNameChange = 0;
                decimal totalTransTotalInfant = 0;
                decimal totalTransTotalDisc = 0;
                decimal totalTransTotalPromoDisc = 0;
                //decimal payDueAmount1 = 0;
                //decimal payDueAmount2 = 0;
                //decimal payDueAmount3 = 0;

                BookingContainer BookingContainers = new BookingContainer(); //for booking details
                List<BookingJourneyContainer> listBookingJourneyContainers = new List<BookingJourneyContainer>(); //for journey list
                List<PaymentContainer> listPaymentContainers = new List<PaymentContainer>(); //for payment list

                List<BookingTransactionDetail> listBookingJourney = new List<BookingTransactionDetail>();
                List<BookingTransTender> listBookTransTenderInfo = new List<BookingTransTender>();
                BookingTransactionDetail lstBooking = new BookingTransactionDetail();

                BookingTransactionDetail bookDTLInfo = new BookingTransactionDetail();
                BookingTransactionMain bookHDRInfo = new BookingTransactionMain();
                BookingTransTender bookTransTenderInfo = new BookingTransTender();

                LoadDataDevide(TransID, true); //grab transmain & transdtlcombinePNR


                if (HttpContext.Current.Session["TransMain"] != null && HttpContext.Current.Session["TransDetail"] != null)
                {

                    DataTable dtTransMain = this.dtTransMain();
                    if (HttpContext.Current.Session["TransMain"] != null)
                        dtTransMain = (DataTable)HttpContext.Current.Session["TransMain"];//insert transmain into datatable

                    DataTable dtTransDetail = this.dtTransDetail();
                    if (HttpContext.Current.Session["TransDetail"] != null)
                        dtTransDetail = (DataTable)HttpContext.Current.Session["TransDetail"];//insert transdtlcombinePNR into datatable

                    List<BookingTransactionDetail> listBookingDetail = new List<BookingTransactionDetail>();
                    //listBookingDetail = GetAllBK_TRANSDTLFilterAll(TransID, 0);//grab distinct PNR
                    listBookingDetail = GetAllBK_TRANSDTLFilterAll(TransID);//grab distinct PNR

                    List<BookingTransTender> listTransTender = new List<BookingTransTender>();
                    listTransTender = GetAllBK_TRANSTENDERFilter(TransID);//grab tender list

                    List<BookingTransactionDetail> lstbookDTLInfo = new List<BookingTransactionDetail>();
                    lstbookDTLInfo = new List<BookingTransactionDetail>();

                    int rowBookingJourneySeqNo = 1;
                    int cnt = 0;
                    int z = 0;

                    for (int i = 0; i < dtTransDetail.Rows.Count; i++)
                    {
                        PNR = dtTransDetail.Rows[i]["RecordLocator"].ToString();
                        if (PNR.Trim().Length < 6)//will not continue if PNR is not valid
                        {
                            rowBookingJourneySeqNo += Convert.ToInt16(dtTransDetail.Rows[i]["CntRec"].ToString());
                            continue;
                        }

                        //log.Info(this,"Entering GetBookingJourneyDetailsByPNR - PNR : " + PNR);
                        if (RetrieveBookingDetailsByPNR(ApiBook, ref Response, PNR, TransID)) //send apibook and response object
                        {
                            //log.Info(this,"End Retrieve GetBookingJourneyDetailsByPNR - succeed - PNR : " + PNR);

                            //check to exit if last synchronize date > Navitaire modified date 
                            //if (Convert.ToDateTime(dtTransMain.Rows[0]["SyncLastUpd"]) > Response.Booking.BookingInfo.ModifiedDate)
                            //{
                            //    return true;
                            //}


                            #region "Booking"
                            string bookingRecordLocator = "";
                            if (HttpContext.Current.Session["BookingContainers"] != null) //grabbing currencyCode, rate, status, expirydate
                            {
                                BookingContainers = (BookingContainer)HttpContext.Current.Session["BookingContainers"];
                                currencyCode = BookingContainers.CurrencyCode;
                                //exchangeRate = BookingContainers.ExchangeRate;
                                bookingStatus = BookingContainers.BookingStatus;
                                expiredDate = BookingContainers.ExpiredDate;
                                bookingRecordLocator = BookingContainers.RecordLocator;
                            }
                            #endregion

                            //Remark by ketee, 20160209
                            if (bookingStatus.ToLower() != "confirmed") //if journey is not confirmed, no need to change details and payment, just change to transvoid=1
                            {
                                List<BookingTransactionDetail> ListJourney = new List<BookingTransactionDetail>();
                                ListJourney = AssignBK_TRANSDTL(PNR, TransID, ref listBookingJourney, ref rowBookingJourneySeqNo, 1, 0);
                                if (ListJourney != null) lstbookDTLInfo.AddRange(ListJourney);
                                if (checkBookingStatus == "")
                                {
                                    checkBookingStatus = bookingStatus;
                                }
                                else
                                {
                                    if (checkBookingStatus != bookingStatus)
                                    {
                                        checkBookingStatus = bookingStatus;
                                    }
                                }
                                continue;
                            }

                            #region "Journey"
                            if (HttpContext.Current.Session["BookingJourneyContainers"] != null) //grabbing journey details
                            {
                                listBookingJourneyContainers = (List<BookingJourneyContainer>)HttpContext.Current.Session["BookingJourneyContainers"];
                                foreach (BookingJourneyContainer rowBookingJourney in listBookingJourneyContainers)
                                {
                                    //insert bookingdetail into listBookingJourney
                                    if (rowBookingJourneySeqNo % 2 == 1) { stdDate = rowBookingJourney.STD; change = true; }

                                    //added by diana 20140516, differentiate oneWay and ReturnWay
                                    int cnts = 0;
                                    foreach (BookingTransactionDetail bkDetail in listBookingDetail)
                                    {
                                        if (bkDetail.RecordLocator == bookingRecordLocator)
                                        {
                                            cnts += 1;
                                        }
                                    }

                                    int iIndex = -1;
                                    if (cnts >= 2)
                                        iIndex = listBookingDetail.FindIndex(p => p.SeqNo % 2 == rowBookingJourneySeqNo % 2 && p.RecordLocator == bookingRecordLocator);
                                    else
                                        iIndex = listBookingDetail.FindIndex(p => p.RecordLocator == bookingRecordLocator);

                                    //int iIndex = listBookingDetail.FindIndex(p => p.SeqNo % 2 == rowBookingJourneySeqNo % 2 && p.RecordLocator == bookingRecordLocator);
                                    if (iIndex >= 0)
                                    {
                                        BookingTransactionDetail bookingJourney = listBookingDetail[iIndex];
                                        AssignBookingJourneyList(TransID, Convert.ToByte(bookingJourney.SeqNo), rowBookingJourney, PNR, "update", ref listBookingJourney);
                                    }
                                    else
                                    {
                                        AssignBookingJourneyList(TransID, Convert.ToByte(rowBookingJourneySeqNo), rowBookingJourney, PNR, "insert", ref listBookingJourney);
                                    }
                                    rowBookingJourneySeqNo++;
                                }

                                //recalculate pax details and insert into dtTransDetail
                                if (listBookingJourney.Count > 0)
                                {
                                    dtTransDetail.Rows[i]["PaxAdult"] = 0;
                                    dtTransDetail.Rows[i]["PaxChild"] = 0;
                                    dtTransDetail.Rows[i]["LineTotal"] = 0;
                                    dtTransDetail.Rows[i]["LineFee"] = 0;
                                    dtTransDetail.Rows[i]["LineOth"] = 0;
                                    dtTransDetail.Rows[i]["LineProcess"] = 0;
                                    dtTransDetail.Rows[i]["LineSSR"] = 0;
                                    dtTransDetail.Rows[i]["LineSeat"] = 0;
                                    dtTransDetail.Rows[i]["LineNameChange"] = 0;
                                    dtTransDetail.Rows[i]["LineInfant"] = 0;
                                    dtTransDetail.Rows[i]["LineDisc"] = 0;
                                    dtTransDetail.Rows[i]["LinePromoDisc"] = 0;
                                    dtTransDetail.Rows[i]["LineTax"] = 0;
                                    dtTransDetail.Rows[i]["LinePaxFee"] = 0;
                                    for (z = cnt; z < listBookingJourney.Count; z++)
                                    {
                                        BookingTransactionDetail pBookingTransDetail = new BookingTransactionDetail();
                                        pBookingTransDetail = listBookingJourney[z];

                                        dtTransDetail.Rows[i]["PaxAdult"] = Convert.ToInt16(dtTransDetail.Rows[i]["PaxAdult"].ToString()) + Convert.ToInt16(pBookingTransDetail.PaxAdult.ToString());
                                        dtTransDetail.Rows[i]["PaxChild"] = Convert.ToInt16(dtTransDetail.Rows[i]["PaxChild"].ToString()) + Convert.ToInt16(pBookingTransDetail.PaxChild.ToString());
                                        dtTransDetail.Rows[i]["LineTotal"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineTotal.ToString());
                                        dtTransDetail.Rows[i]["LineFee"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineFee"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineFee.ToString());
                                        dtTransDetail.Rows[i]["LineOth"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineOth"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineOth.ToString());
                                        dtTransDetail.Rows[i]["LineProcess"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineProcess"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineProcess.ToString());
                                        dtTransDetail.Rows[i]["LineSSR"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineSSR"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineSSR.ToString());
                                        dtTransDetail.Rows[i]["LineSeat"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineSeat"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineSeat.ToString());
                                        dtTransDetail.Rows[i]["LineNameChange"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineNameChange"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineNameChange.ToString());
                                        dtTransDetail.Rows[i]["LineInfant"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineInfant"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineInfant.ToString());
                                        dtTransDetail.Rows[i]["LineDisc"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineDisc"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineDisc.ToString());
                                        dtTransDetail.Rows[i]["LinePromoDisc"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LinePromoDisc"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LinePromoDisc.ToString());
                                        dtTransDetail.Rows[i]["LineTax"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineTax"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineTax.ToString());
                                        dtTransDetail.Rows[i]["LinePaxFee"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LinePaxFee"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LinePaxFee.ToString());
                                    }
                                    cnt = z;
                                }
                                //end recalculate pax details and insert into dtTransDetail

                            }
                            else
                            {
                                return false;
                            }
                            #endregion

                            #region "Payment"
                            if (VerifyDetails)
                            {
                                totalPax += Convert.ToInt16(dtTransDetail.Rows[i]["PaxAdult"].ToString()) + Convert.ToInt16(dtTransDetail.Rows[i]["PaxChild"].ToString());
                                totalTransAmount += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());
                                totalTransTotalFee += Convert.ToDecimal(dtTransDetail.Rows[i]["LineFee"].ToString());
                                totalTransTotalOth += Convert.ToDecimal(dtTransDetail.Rows[i]["LineOth"].ToString());
                                totalTransTotalProcess += Convert.ToDecimal(dtTransDetail.Rows[i]["LineProcess"].ToString());
                                totalTransTotalSSR += Convert.ToDecimal(dtTransDetail.Rows[i]["LineSSR"].ToString());
                                totalTransTotalSeat += Convert.ToDecimal(dtTransDetail.Rows[i]["LineSeat"].ToString());
                                totalTransTotalNameChange += Convert.ToDecimal(dtTransDetail.Rows[i]["LineNameChange"].ToString());
                                totalTransTotalInfant += Convert.ToDecimal(dtTransDetail.Rows[i]["LineInfant"].ToString());
                                totalTransTotalDisc += Convert.ToDecimal(dtTransDetail.Rows[i]["LineDisc"].ToString());
                                totalTransTotalPromoDisc += Convert.ToDecimal(dtTransDetail.Rows[i]["LinePromoDisc"].ToString());
                                totalTransTotalTax += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTax"].ToString());
                                totalTransTotalPaxFee += Convert.ToDecimal(dtTransDetail.Rows[i]["LinePaxFee"].ToString());
                                totalTransSubTotal += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());
                                //if (totalPax > 0)
                                //{
                                //    payDueAmount1 += Convert.ToDecimal(dtTransDetail.Rows[i]["PayDueAmount1"].ToString());
                                //    payDueAmount2 += Convert.ToDecimal(dtTransDetail.Rows[i]["PayDueAmount2"].ToString());
                                //    payDueAmount3 += Convert.ToDecimal(dtTransDetail.Rows[i]["PayDueAmount3"].ToString());
                                //}
                            }
                            totalTransAmountAll += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());
                            if (HttpContext.Current.Session["PaymentContainers"] != null) //grabbing payment details
                            {
                                listPaymentContainers = (List<PaymentContainer>)HttpContext.Current.Session["PaymentContainers"];
                                DataTable dtKeyField = new DataTable();
                                dtKeyField = GetKeyFieldDetailByPNR(PNR);
                                decimal paymentAmount = 0, feeAmount = 0, totPaymentAmount = 0, leftPayDetail = 0, totalPNRAmount = 0, currencyRate = 0;

                                foreach (PaymentContainer rowPayment in listPaymentContainers)
                                {
                                    int paymentStatus = 0;
                                    string authorizationcode = "";
                                    string accountNumber = "";
                                    string merchantID = "";
                                    long accountNumberID = 0;
                                    byte transVoid = 1;
                                    paymentAmount = rowPayment.CollectedAmount;
                                    paymentStatus = rowPayment.PaymentStatus;
                                    authorizationcode = rowPayment.AuthorizationCode;
                                    accountNumber = rowPayment.AccountNumber;
                                    merchantID = rowPayment.MerchantID;
                                    accountNumberID = rowPayment.AccountNumberID;
                                    //currencyRate = rowPayment.CurrencyRate;

                                    //totalPaid += paymentAmount;
                                    if (rowPayment.PaymentStatus == 3)
                                    {
                                        transVoid = 0;
                                        totalPaid += paymentAmount;
                                        totalPNRAmount += paymentAmount;
                                    }

                                    int iIndex = listTransTender.FindIndex(p => p.SeqNo == Convert.ToInt32(rowPayment.PaymentNumber) && p.RecordLocator == rowPayment.RecordLocator);
                                    if (iIndex >= 0)
                                    {
                                        BookingTransTender bookingTender = listTransTender[iIndex];
                                        AssignPaymentList(TransID, Convert.ToByte(bookingTender.SeqNo), paymentAmount, feeAmount, totPaymentAmount, rowPayment.CurrencyCode, rowPayment.CurrencyCode, bookingTender.TenderID, rowPayment.PaymentText, rowPayment.AccountNumber, rowPayment.AuthorizationCode, rowPayment.MerchantID, bookingTender.CreateBy, PNR, transVoid, "update", rowPayment.PaymentDate, ref listBookTransTenderInfo, bookingTender.ExchgRate);
                                        exchangeRate = listTransTender[iIndex].ExchgRate;
                                    }
                                    else
                                    {
                                        AssignPaymentList(TransID, Convert.ToByte(rowPayment.PaymentNumber), paymentAmount, feeAmount, totPaymentAmount, rowPayment.CurrencyCode, rowPayment.CurrencyCode, getTenderIDbyDesc(rowPayment.PaymentMethodCode), rowPayment.PaymentText, rowPayment.AccountNumber, rowPayment.AuthorizationCode, rowPayment.MerchantID, AgentName, PNR, transVoid, "insert", rowPayment.PaymentDate, ref listBookTransTenderInfo, exchangeRate);
                                    }
                                }


                                //need to change/combine to listBookingJourney
                                int goingreturn = 0;
                                string strOrigin = "";
                                //Added by ketee, wait for 1 sec 20160226
                                Thread.Sleep(1000);
                                for (int ctrDetail = 0; ctrDetail < dtKeyField.Rows.Count; ctrDetail++)
                                {

                                    string RecordLocator = dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString();
                                    //TransID = dtKeyField.Rows[ctrDetail]["TransID"].ToString();
                                    byte SeqNo = Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]);

                                    bookDTLInfo = new BookingTransactionDetail();
                                    bookDTLInfo = GetSingleJourneyBK_TRANSDTL(listBookingJourney, RecordLocator, TransID, SeqNo);

                                    if (totalPNRAmount > bookDTLInfo.LineTotal)
                                    {
                                        leftPayDetail = totalPNRAmount - bookDTLInfo.LineTotal;
                                        totalPNRAmount = bookDTLInfo.LineTotal;
                                        AssignJourneyTransDetail(listBookingJourney, ref lstbookDTLInfo, dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString(), dtKeyField.Rows[ctrDetail]["TransID"].ToString(), Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]), AgentName, totalPNRAmount, PNR);
                                        //totalPaid += paymentAmount;
                                        totalPNRAmount = leftPayDetail;
                                    }
                                    else
                                    {
                                        AssignJourneyTransDetail(listBookingJourney, ref lstbookDTLInfo, dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString(), dtKeyField.Rows[ctrDetail]["TransID"].ToString(), Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]), AgentName, totalPNRAmount, PNR);
                                        //totalPaid += paymentAmount;
                                        totalPNRAmount = 0;
                                    }

                                    //total up total going and total return
                                    //start added by Agus
                                    if (strOrigin == "") strOrigin = bookDTLInfo.Origin;
                                    if (bookDTLInfo.Origin == strOrigin) goingreturn = 0;
                                    else goingreturn = 1;
                                    //end added by Agus
                                    if (VerifyDetails)
                                    {
                                        if (goingreturn == 0)
                                        {
                                            totalAmountGoing += bookDTLInfo.LineTotal;
                                        }
                                        else
                                        {
                                            totalAmountReturn += bookDTLInfo.LineTotal;
                                        }
                                    }

                                }



                            }
                            else
                            {
                                return false;
                            }
                            #endregion

                        }
                        else //if no response, no need to change details, just increase attemptcount in details
                        {
                            List<BookingTransactionDetail> ListJourney = new List<BookingTransactionDetail>();
                            ListJourney = AssignBK_TRANSDTL(PNR, TransID, ref listBookingJourney, ref rowBookingJourneySeqNo, 0, 1);
                            if (ListJourney != null) lstbookDTLInfo.AddRange(ListJourney);
                            //rowBookingJourneySeqNo += Convert.ToInt16(dtTransDetail.Rows[i]["CntRec"].ToString()); //if response is null, continue seqno
                            //log.Info(this,"End Retrieve GetBookingJourneyDetailsByPNR - no journey - PNR : " + PNR);
                        }
                    }

                    //set transtatus by comparing totalcollected and totalamount
                    byte TransStatus = 1;
                    //Added by ketee, Set as status closed, 20160209
                    if (checkBookingStatus.ToLower() == "closed")
                    {
                        //Set as Status Closed
                        TransStatus = 8;
                    }
                    if (totalTransAmount > 0 && totalPaid >= totalTransAmount)
                    {
                        TransStatus = 2;
                    }
                    else
                    {
                        if (totalTransAmount == 0 && totalTransAmountAll > 0 && totalPaid >= totalTransAmountAll)
                        {
                            TransStatus = 2;
                        }
                    }
                    //end set transtatus by comparing totalcollected and totalamount

                    //update pay due amount to previous PNR
                    if (HttpContext.Current.Session["OldBookingDetails"] != null && lstbookDTLInfo != null && lstbookDTLInfo.Count > 0)
                    {
                        List<BookingTransactionDetail> lstOldBookingDetails = new List<BookingTransactionDetail>();
                        lstOldBookingDetails = (List<BookingTransactionDetail>)HttpContext.Current.Session["OldBookingDetails"];
                        if (lstOldBookingDetails != null && lstOldBookingDetails.Count > 0)
                        {
                            int ind = 0;
                            foreach (BookingTransactionDetail bkDetail in lstbookDTLInfo)
                            {
                                foreach (BookingTransactionDetail bkOldDetail in lstOldBookingDetails)
                                {
                                    if (bkDetail.RecordLocator == bkOldDetail.RecordLocator)
                                    {
                                        lstbookDTLInfo[ind].PayDueAmount1 = bkOldDetail.PayDueAmount1;
                                        lstbookDTLInfo[ind].PayDueAmount2 = bkOldDetail.PayDueAmount2;
                                        lstbookDTLInfo[ind].PayDueAmount3 = bkOldDetail.PayDueAmount3;
                                    }
                                }
                                ind += 1;
                            }
                        }
                    }

                    string Scheme = "";
                    string GroupName = "";
                    if (dtTransMain.Rows.Count > 0 && dtTransDetail.Rows.Count > 0 && lstbookDTLInfo != null && lstbookDTLInfo.Count > 0)
                    {
                        bookHDRInfo = GetSingleBK_TRANSMAIN(TransID, Convert.ToByte(dtTransMain.Rows[0]["TransType"]), dtTransMain.Rows[0]["AgentID"].ToString(), dtTransMain.Rows[0]["AgentCatgID"].ToString(), Convert.ToDateTime(dtTransMain.Rows[0]["BookingDate"]));
                        bookHDRInfo.Currency = currencyCode;
                        bookHDRInfo.CurrencyPaid = currencyCode;
                        //bookHDRInfo.ExchangeRate = exchangeRate;

                        if (change == true) bookHDRInfo.STDDate = stdDate;

                        #region "Scheme"
                        GeneralControl objGeneral = new GeneralControl();
                        GroupName = objGeneral.getOPTGroupByCarrierCode(lstbookDTLInfo[0].CarrierCode);

                        PaymentControl objPayment = new PaymentControl();
                        Scheme = objPayment.GetScheme(bookHDRInfo.STDDate, bookHDRInfo.BookingDate, GroupName, TransID);

                        bookHDRInfo.PayScheme = Scheme;

                        PaymentInfo paymentInfo = new PaymentInfo();
                        paymentInfo = objPayment.GetPaymentScheme(Scheme, GroupName, TransID);

                        if (paymentInfo.Code_1 == "DOB")
                        {
                            bookHDRInfo.PaymentDateEx1 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_1);
                            //remark by ketee, 20160222
                            //bookHDRInfo.ExpiryDate = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_1);
                        }
                        else if (paymentInfo.Code_1 == "STD")
                        {
                            bookHDRInfo.PaymentDateEx1 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_1);
                            //remark by ketee, 20160222
                            //bookHDRInfo.ExpiryDate = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_1);
                        }
                        if (paymentInfo.Code_2 == "DOB")
                        {
                            bookHDRInfo.PaymentDateEx2 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_2);
                        }
                        else if (paymentInfo.Code_2 == "STD")
                        {
                            bookHDRInfo.PaymentDateEx2 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_2);
                        }
                        if (paymentInfo.Code_3 == "DOB")
                        {
                            bookHDRInfo.PaymentDateEx3 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_3);
                        }
                        else if (paymentInfo.Code_3 == "STD")
                        {
                            bookHDRInfo.PaymentDateEx3 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_3);
                        }
                        #endregion

                        bookHDRInfo.CurReminderDate = bookHDRInfo.ExpiryDate.Date.AddDays(-5);
                    }

                    if (dtTransMain.Rows.Count > 0)
                    {
                        AssignJourneyTransMain(ref bookHDRInfo, TransID, dtTransMain.Rows[0]["AgentID"].ToString(), dtTransMain.Rows[0]["AgentCatgID"].ToString(), Convert.ToByte(dtTransMain.Rows[0]["TransType"]), Convert.ToDateTime(dtTransMain.Rows[0]["BookingDate"]), TransStatus, AgentName, 2, totalPaid, "", "", totalPax, totalTransAmount, totalTransTotalFee, totalTransTotalTax, totalTransTotalPaxFee, totalTransTotalOth, totalTransTotalSSR, totalTransTotalSeat, totalTransTotalNameChange, totalTransTotalInfant, totalTransTotalDisc, totalTransTotalPromoDisc, totalTransTotalProcess, totalTransSubTotal, totalAmountGoing, totalAmountReturn);
                        UpdatePassengerDetails(TransID, AgentName, AgentID, true);
                    }

                    //if (bookHDRInfo != null && lstbookDTLInfo != null && listBookTransTenderInfo != null)
                    if (bookHDRInfo != null)
                    {
                        List<BookingTransactionDetail> ExpiredPNRs = new List<BookingTransactionDetail>();
                        if (UpdateDatabaseDetails(bookHDRInfo, lstbookDTLInfo, listBookTransTenderInfo, ABS.Logic.GroupBooking.Booking.BookingControl.EnumSaveType.Update, ref ExpiredPNRs, true) == false)
                        {
                            return false; // transaction failed
                        }
                        else
                        {

                            return true;
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        public Boolean UpdateAllBookingJourneyDetails(ListTransaction TransactionInfo, string AgentName, string AgentID, ref List<BookingTransactionDetail> VoidPNRs, ref List<BookingTransactionDetail> ExpiredPNRs, Boolean VerifyDetails = false, Boolean AutoCancel = false, int Mode = 0)
        {
            //added by romy, performance monitoring
            var profiler = MiniProfiler.Current;
            try
            {
                Navitaire.APIBooking ApiBook = new Navitaire.APIBooking("");
                Navitaire.BookingManager.GetBookingResponse Response = new Navitaire.BookingManager.GetBookingResponse();
                HttpContext.Current.Session["dataTransFeesOthers"] = null;
                string TransID = TransactionInfo.TransID;
                string PNR = "";
                string currencyCode = "";
                decimal exchangeRate = 1;
                string bookingStatus = "";
                //added by ketee
                string checkBookingStatus = "";
                DateTime expiredDate = DateTime.Now.AddDays(1);
                DateTime stdDate = DateTime.Now;
                bool change = false;
                string SellKey = "", Transit = ""; ;
                Decimal totalPaid = 0;
                int totalPax = 0;
                decimal totalTransAmountAll = 0;
                decimal totalTransAmount = 0;
                decimal totalAmountGoing = 0;
                decimal totalAmountReturn = 0;
                decimal totalTransSubTotal = 0;
                decimal totalTransTotalFee = 0;
                decimal totalTransTotalTax = 0;
                decimal totalTransTotalPaxFee = 0;
                decimal totalTransTotalOth = 0;
                decimal totalTransTotalProcess = 0;
                decimal totalTransInsure = 0;
                decimal totalTransTotalSSR = 0;
                decimal totalTransTotalInsure = 0;
                decimal totalTransTotalSeat = 0;
                decimal totalTransTotalNameChange = 0;
                decimal totalTransTotalInfant = 0;
                decimal totalTransTotalDisc = 0;
                decimal totalTransTotalPromoDisc = 0;
                decimal payDueAmount1 = 0;
                decimal payDueAmount2 = 0;
                decimal payDueAmount3 = 0;
                decimal collectedamount = 0;
                DateTime payDueDate1 = DateTime.Now;
                DateTime payDueDate2 = DateTime.Now;
                DateTime payDueDate3 = DateTime.Now;

                BookingContainer BookingContainers = new BookingContainer(); //for booking details
                List<BookingJourneyContainer> listBookingJourneyContainers = new List<BookingJourneyContainer>(); //for journey list
                List<PaymentContainer> listPaymentContainers = new List<PaymentContainer>(); //for payment list

                List<BookingTransactionDetail> listBookingJourney = new List<BookingTransactionDetail>();
                List<BookingTransactionDetail> listBookingJourneyPNR = new List<BookingTransactionDetail>();
                List<BookingTransTender> listBookTransTenderInfo = new List<BookingTransTender>();
                BookingTransactionDetail lstBooking = new BookingTransactionDetail();

                BookingTransactionDetail bookDTLInfo = new BookingTransactionDetail();
                BookingTransactionMain bookHDRInfo = new BookingTransactionMain();
                BookingTransTender bookTransTenderInfo = new BookingTransTender();

                using (profiler.Step("LoadData"))
                {
                    LoadData(TransID); //grab transmain & transdtlcombinePNR
                }

                if (HttpContext.Current.Session["TransMain"] != null && HttpContext.Current.Session["TransDetail"] != null)
                {
                    DataTable dtTransMain = this.dtTransMain();
                    if (HttpContext.Current.Session["TransMain"] != null)
                        dtTransMain = (DataTable)HttpContext.Current.Session["TransMain"];//insert transmain into datatable

                    DataTable dtTransDetail = this.dtTransDetail();
                    if (HttpContext.Current.Session["TransDetail"] != null)
                        dtTransDetail = (DataTable)HttpContext.Current.Session["TransDetail"];//insert transdtlcombinePNR into datatable

                    List<BookingTransactionDetail> listBookingDetail = new List<BookingTransactionDetail>();
                    //listBookingDetail = GetAllBK_TRANSDTLFilterAll(TransID, 0);//grab distinct PNR
                    using (profiler.Step("GetAllBK_TRANSDTLFilterAll"))
                    {
                        listBookingDetail = GetAllBK_TRANSDTLFilterAll(TransID);//grab distinct PNR
                    }

                    int px = 0;
                    //added by diana 20170405, to recalculate payment schedule with valid PNR only
                    ArrayList PNRList = new ArrayList();
                    Decimal TotalBaseFare = 0, FlightDuration = 0;
                    //foreach (BookingTransactionDetail bookDTL in listBookingDetail)
                    //{
                    //    listBookingDetail[px].IsLatest = 0;
                    //    if (!PNRList.Contains(bookDTL.RecordLocator) && bookDTL.RecordLocator.Trim().Length >= 6)
                    //    {
                    //        payDueAmount1 += bookDTL.PayDueAmount1;
                    //        payDueAmount2 += bookDTL.PayDueAmount2;
                    //        payDueAmount3 += bookDTL.PayDueAmount3;
                    //        PNRList.Add(bookDTL.RecordLocator);

                    //        payDueDate1 = bookDTL.PayDueDate1;
                    //        payDueDate2 = bookDTL.PayDueDate2;
                    //        payDueDate3 = bookDTL.PayDueDate3;

                    //        TotalBaseFare += bookDTL.LineFlight;
                    //        //Origin = bookDTL.Origin;
                    //        if (px == 0)
                    //        {
                    //            FlightDuration = bookDTL.FlightDuration;
                    //            SellKey = bookDTL.SellKey;
                    //            Transit = bookDTL.Transit;
                    //        }

                    //    }
                    //    px++;
                    //}

                    listBookingDetail.FirstOrDefault().IsLatest = 0;
                    FlightDuration = listBookingDetail[0].FlightDuration;
                    SellKey = listBookingDetail[0].SellKey;
                    Transit = listBookingDetail[0].Transit;

                    string GroupName;// = objGeneral.getOPTGroupByCarrierCode(listBookingDetail[0].CarrierCode);
                    using (profiler.Step("getOPTGroupByCarrierCode"))
                    {
                        GroupName = objGeneral.getOPTGroupByCarrierCode(listBookingDetail[0].CarrierCode);
                    }
                    string strOrigin = "";
                    List<BookingTransTender> listTransTender = new List<BookingTransTender>();
                    using (profiler.Step("GetAllBK_TRANSTENDERFilter"))
                    {
                        listTransTender = GetAllBK_TRANSTENDERFilter(TransID);//grab tender list
                    }

                    List<BookingTransactionDetail> lstbookDTLInfo = new List<BookingTransactionDetail>();
                    List<BookingTransactionDetail> listBookingDetailCombine = new List<BookingTransactionDetail>();
                    lstbookDTLInfo = new List<BookingTransactionDetail>();

                    Bk_transssr BK_TRANSSSRInfo = new Bk_transssr();
                    //change to new add-On table, Tyas
                    //List<Bk_transssr> listbk_transssrinfo = new List<Bk_transssr>();
                    List<Bk_transaddon> listbk_transssrinfo = new List<Bk_transaddon>();
                    List<Bk_transaddon> listbk_transssrinfoallPNR = new List<Bk_transaddon>();

                    decimal forfeitedamount = 0;
                    int rowBookingJourneySeqNo = 1;
                    int cnt = 0;
                    int z = 0;

                    for (int i = 0; i < dtTransDetail.Rows.Count; i++)
                    {
                        //payDueAmount1 += Convert.ToDecimal(dtTransDetail.Rows[i]["PayDueAmount1"]);
                        //payDueAmount2 += Convert.ToDecimal(dtTransDetail.Rows[i]["PayDueAmount2"]);
                        //payDueAmount3 += Convert.ToDecimal(dtTransDetail.Rows[i]["PayDueAmount3"]);
                        //payDueDate1 = Convert.ToDateTime(dtTransDetail.Rows[i]["payDueDate1"]);
                        //payDueDate2 = Convert.ToDateTime(dtTransDetail.Rows[i]["payDueDate2"]);
                        //payDueDate3 = Convert.ToDateTime(dtTransDetail.Rows[i]["payDueDate3"]);

                        PNR = dtTransDetail.Rows[i]["RecordLocator"].ToString();
                        if (PNR.Trim().Length < 6)//will not continue if PNR is not valid
                        {
                            rowBookingJourneySeqNo += Convert.ToInt16(dtTransDetail.Rows[i]["CntRec"].ToString());
                            continue;
                        }

                        //log.Info(this,"Entering GetBookingJourneyDetailsByPNR - PNR : " + PNR);
                        using (profiler.Step("RetrieveBookingDetailsByPNR"))
                        {
                            if (RetrieveBookingDetailsByPNR(ApiBook, ref Response, PNR, TransID)) //send apibook and response object
                            {
                                dtTransDetail.Rows[i]["IsLatest"] = 1; //indicator whether success or fail in retrieving latest data from navitaire
                                //log.Info(this,"End Retrieve GetBookingJourneyDetailsByPNR - succeed - PNR : " + PNR);

                                //check to exit if last synchronize date > Navitaire modified date 
                                //if (Convert.ToDateTime(dtTransMain.Rows[0]["SyncLastUpd"]) > Response.Booking.BookingInfo.ModifiedDate)
                                //{
                                //    return true;
                                //}
                                #region "Booking"
                                string bookingRecordLocator = "";
                                using (profiler.Step("BookingStep"))
                                {
                                    if (HttpContext.Current.Session["BookingContainers"] != null) //grabbing currencyCode, rate, status, expirydate
                                    {
                                        BookingContainers = (BookingContainer)HttpContext.Current.Session["BookingContainers"];
                                        currencyCode = BookingContainers.CurrencyCode;
                                        //exchangeRate = BookingContainers.ExchangeRate;
                                        bookingStatus = BookingContainers.BookingStatus;
                                        expiredDate = BookingContainers.ExpiredDate;
                                        bookingRecordLocator = BookingContainers.RecordLocator;
                                    }
                                }
                                #endregion



                                //Remark by ketee, 20160209
                                //added by ketee, verify if journey empty, set transvoid = 1, 20170911
                                if (HttpContext.Current.Session["BookingJourneyContainers"] != null)
                                {
                                    listBookingJourneyContainers = (List<BookingJourneyContainer>)HttpContext.Current.Session["BookingJourneyContainers"];
                                }
                                if (bookingStatus.ToLower() != "confirmed" || listBookingJourneyContainers.Count == 0) //if journey is not confirmed, no need to change details and payment, just change to transvoid=1
                                {
                                    List<BookingTransactionDetail> ListJourney = new List<BookingTransactionDetail>();
                                    ListJourney = AssignBK_TRANSDTL(PNR, TransID, ref listBookingJourney, ref rowBookingJourneySeqNo, 1, 0);
                                    if (ListJourney != null) lstbookDTLInfo.AddRange(ListJourney);
                                    if (checkBookingStatus == "")
                                    {
                                        checkBookingStatus = bookingStatus;
                                    }
                                    else
                                    {
                                        if (checkBookingStatus != bookingStatus)
                                        {
                                            checkBookingStatus = bookingStatus;
                                        }
                                    }
                                    continue;
                                }

                                #region "SSR"
                                //change to new add-On table, Tyas
                                //if (HttpContext.Current.Session["BK_TransSSRContainer"] != null) //grabbing currencyCode, rate, status, expirydate
                                //{
                                //    listbk_transssrinfo = (List<Bk_transssr>)HttpContext.Current.Session["BK_TransSSRContainer"];
                                //    foreach (Bk_transssr TransSSR in listbk_transssrinfo)
                                //    {
                                //        TransSSR.SeqNo = Convert.ToInt16(TransSSR.PassengerID);
                                //        TransSSR.TransID = TransID;
                                //        TransSSR.SyncCreate = DateTime.Now;
                                //        TransSSR.SyncLastUpd = DateTime.Now;
                                //        TransSSR.LastSyncBy = AgentName;
                                //    }
                                //    HttpContext.Current.Session["BK_TransSSRContainer"] = listbk_transssrinfo;
                                //}

                                //if (listbk_transssrinfo.Count > 0)
                                //{
                                //    SaveSSRManageCommit(listbk_transssrinfo, ABS.Logic.GroupBooking.Booking.BookingControl.EnumSaveType.Update, PNR, "", true);
                                //}

                                using (profiler.Step("SSRStep"))
                                {
                                    if (HttpContext.Current.Session["BK_TransSSRContainer"] != null) //grabbing currencyCode, rate, status, expirydate
                                    {
                                        listbk_transssrinfo = (List<Bk_transaddon>)HttpContext.Current.Session["BK_TransSSRContainer"];
                                        int foundnull = listbk_transssrinfo.Count(item => item.BaggageCode == null && item.DrinkCode1 == null && item.KitCode == null && item.MealCode1 == null && item.SportCode == null && item.InfantCode == null && item.InsureCode == null);//edited by romy for insure
                                        int found = listbk_transssrinfo.Count(item => item.BaggageCode != null && item.DrinkCode1 != null && item.KitCode != null && item.MealCode1 != null && item.SportCode != null && item.InfantCode != null && item.InsureCode != null && item.BaggageCode.ToString() == "" && item.DrinkCode1.ToString() == "" && item.KitCode.ToString() == "" && item.MealCode1.ToString() == "" && item.SportCode.ToString() == "" && item.InfantCode.ToString() == "" && item.InsureCode.ToString() == "");//edited by romy for insure
                                        if (foundnull == 0 && found == 0)
                                        {
                                            foreach (Bk_transaddon TransSSR in listbk_transssrinfo)
                                            {

                                                TransSSR.TransID = TransID;
                                                TransSSR.SyncCreate = DateTime.Now;
                                                TransSSR.SyncLastUpd = DateTime.Now;
                                                TransSSR.LastSyncBy = AgentName;
                                            }
                                            HttpContext.Current.Session["BK_TransSSRContainer"] = listbk_transssrinfo;
                                            listbk_transssrinfoallPNR.AddRange(listbk_transssrinfo);
                                        }
                                    }
                                }
                                #endregion

                                #region "Journey"
                                using (profiler.Step("JourneyStep"))
                                {
                                    if (HttpContext.Current.Session["BookingJourneyContainers"] != null) //grabbing journey details
                                    {
                                        listBookingJourneyContainers = (List<BookingJourneyContainer>)HttpContext.Current.Session["BookingJourneyContainers"];
                                        foreach (BookingJourneyContainer rowBookingJourney in listBookingJourneyContainers)
                                        {
                                            //insert bookingdetail into listBookingJourney
                                            if (rowBookingJourneySeqNo % 2 == 1) { stdDate = rowBookingJourney.STD; change = true; }

                                            //added by diana 20140516, differentiate oneWay and ReturnWay
                                            int cnts = 0;
                                            foreach (BookingTransactionDetail bkDetail in listBookingDetail)
                                            {
                                                if (bkDetail.RecordLocator == bookingRecordLocator)
                                                {
                                                    cnts += 1;
                                                }
                                            }

                                            int iIndex = -1;
                                            if (cnts >= 2)
                                                iIndex = listBookingDetail.FindIndex(p => p.SeqNo % 2 == rowBookingJourneySeqNo % 2 && p.RecordLocator == bookingRecordLocator);
                                            else
                                                iIndex = listBookingDetail.FindIndex(p => p.RecordLocator == bookingRecordLocator);

                                            //int iIndex = listBookingDetail.FindIndex(p => p.SeqNo % 2 == rowBookingJourneySeqNo % 2 && p.RecordLocator == bookingRecordLocator);
                                            if (iIndex >= 0)
                                            {
                                                BookingTransactionDetail bookingJourney = listBookingDetail[iIndex];
                                                using (profiler.Step("AssignBookingJourneyList"))
                                                {
                                                    AssignBookingJourneyList(TransID, Convert.ToByte(bookingJourney.SeqNo), rowBookingJourney, PNR, "update", ref listBookingJourney, 1);
                                                }
                                            }
                                            else
                                            {
                                                using (profiler.Step("AssignBookingJourneyList"))
                                                {
                                                    AssignBookingJourneyList(TransID, Convert.ToByte(rowBookingJourneySeqNo), rowBookingJourney, PNR, "insert", ref listBookingJourney, 1);
                                                }
                                            }
                                            rowBookingJourneySeqNo++;
                                        }

                                        //recalculate pax details and insert into dtTransDetail
                                        if (listBookingJourney.Count > 0)
                                        {
                                            listBookingJourneyPNR = listBookingJourney.Where(w => w.RecordLocator == PNR).ToList();
                                            dtTransDetail.Rows[i]["PaxAdult"] = 0;
                                            dtTransDetail.Rows[i]["PaxChild"] = 0;
                                            dtTransDetail.Rows[i]["LineTotal"] = 0;
                                            dtTransDetail.Rows[i]["LineFee"] = 0;
                                            dtTransDetail.Rows[i]["LineOth"] = 0;
                                            dtTransDetail.Rows[i]["LineProcess"] = 0;
                                            dtTransDetail.Rows[i]["LineSSR"] = 0;
                                            dtTransDetail.Rows[i]["LineSeat"] = 0;
                                            dtTransDetail.Rows[i]["LineNameChange"] = 0;
                                            dtTransDetail.Rows[i]["LineInfant"] = 0;
                                            dtTransDetail.Rows[i]["LineDisc"] = 0;
                                            dtTransDetail.Rows[i]["LinePromoDisc"] = 0;
                                            dtTransDetail.Rows[i]["LineTax"] = 0;
                                            dtTransDetail.Rows[i]["LinePaxFee"] = 0;
                                            dtTransDetail.Rows[i]["LineInsureFee"] = 0;
                                            for (z = 0; z < listBookingJourneyPNR.Count; z++)
                                            {
                                                BookingTransactionDetail pBookingTransDetail = new BookingTransactionDetail();
                                                pBookingTransDetail = listBookingJourneyPNR[z];

                                                dtTransDetail.Rows[i]["PaxAdult"] = Convert.ToInt16(dtTransDetail.Rows[i]["PaxAdult"].ToString()) + Convert.ToInt16(pBookingTransDetail.PaxAdult.ToString());
                                                dtTransDetail.Rows[i]["PaxChild"] = Convert.ToInt16(dtTransDetail.Rows[i]["PaxChild"].ToString()) + Convert.ToInt16(pBookingTransDetail.PaxChild.ToString());
                                                dtTransDetail.Rows[i]["LineTotal"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineTotal.ToString());
                                                dtTransDetail.Rows[i]["LineFee"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineFee"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineFee.ToString());
                                                dtTransDetail.Rows[i]["LineOth"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineOth"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineOth.ToString());
                                                dtTransDetail.Rows[i]["LineProcess"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineProcess"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineProcess.ToString());
                                                dtTransDetail.Rows[i]["LineSSR"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineSSR"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineSSR.ToString());
                                                dtTransDetail.Rows[i]["LineSeat"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineSeat"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineSeat.ToString());
                                                dtTransDetail.Rows[i]["LineNameChange"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineNameChange"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineNameChange.ToString());
                                                dtTransDetail.Rows[i]["LineInfant"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineInfant"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineInfant.ToString());
                                                dtTransDetail.Rows[i]["LineDisc"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineDisc"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineDisc.ToString());
                                                dtTransDetail.Rows[i]["LinePromoDisc"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LinePromoDisc"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LinePromoDisc.ToString());
                                                dtTransDetail.Rows[i]["LineTax"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineTax"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineTax.ToString());
                                                dtTransDetail.Rows[i]["LinePaxFee"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LinePaxFee"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LinePaxFee.ToString());
                                                dtTransDetail.Rows[i]["LineInsureFee"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineInsureFee"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineInsureFee.ToString());


                                            }
                                            //cnt = z;
                                        }
                                        //end recalculate pax details and insert into dtTransDetail

                                    }
                                    else
                                    {
                                        return false;
                                    }
                                }
                                #endregion

                                #region "Payment"
                                using (profiler.Step("PaymentStep"))
                                {
                                    if (VerifyDetails)
                                    {
                                        totalPax += Convert.ToInt16(dtTransDetail.Rows[i]["PaxAdult"].ToString()) + Convert.ToInt16(dtTransDetail.Rows[i]["PaxChild"].ToString());
                                        totalTransAmount += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());
                                        totalTransTotalFee += Convert.ToDecimal(dtTransDetail.Rows[i]["LineFee"].ToString());
                                        totalTransTotalOth += Convert.ToDecimal(dtTransDetail.Rows[i]["LineOth"].ToString());
                                        totalTransTotalProcess += Convert.ToDecimal(dtTransDetail.Rows[i]["LineProcess"].ToString());
                                        totalTransTotalSSR += Convert.ToDecimal(dtTransDetail.Rows[i]["LineSSR"].ToString());
                                        totalTransTotalInsure += Convert.ToDecimal(dtTransDetail.Rows[i]["LineInsureFee"].ToString());
                                        totalTransTotalSeat += Convert.ToDecimal(dtTransDetail.Rows[i]["LineSeat"].ToString());
                                        totalTransTotalNameChange += Convert.ToDecimal(dtTransDetail.Rows[i]["LineNameChange"].ToString());
                                        totalTransTotalInfant += Convert.ToDecimal(dtTransDetail.Rows[i]["LineInfant"].ToString());
                                        totalTransTotalDisc += Convert.ToDecimal(dtTransDetail.Rows[i]["LineDisc"].ToString());
                                        totalTransTotalPromoDisc += Convert.ToDecimal(dtTransDetail.Rows[i]["LinePromoDisc"].ToString());
                                        totalTransTotalTax += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTax"].ToString());
                                        totalTransTotalPaxFee += Convert.ToDecimal(dtTransDetail.Rows[i]["LinePaxFee"].ToString());
                                        totalTransSubTotal += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());
                                    }
                                    totalTransAmountAll += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());

                                    if (HttpContext.Current.Session["PaymentContainers"] != null) //grabbing payment details
                                    {
                                        listPaymentContainers = (List<PaymentContainer>)HttpContext.Current.Session["PaymentContainers"];
                                        DataTable dtKeyField = new DataTable();
                                        //Add param TransID by Tyas, 
                                        dtKeyField = GetKeyFieldDetailByPNR(PNR, TransID);
                                        decimal paymentAmount = 0, feeAmount = 0, totPaymentAmount = 0, leftPayDetail = 0, totalPNRAmount = 0, totalPNRAmountwithoutWF = 0, currencyRate = 0;

                                        foreach (PaymentContainer rowPayment in listPaymentContainers)
                                        {
                                            int paymentStatus = 0;
                                            string authorizationcode = "";
                                            string accountNumber = "";
                                            string merchantID = "";
                                            long accountNumberID = 0;
                                            byte transVoid = 1;

                                            paymentAmount = rowPayment.CollectedAmount;
                                            paymentStatus = rowPayment.PaymentStatus;
                                            authorizationcode = rowPayment.AuthorizationCode;
                                            accountNumber = rowPayment.AccountNumber;
                                            merchantID = rowPayment.MerchantID;
                                            accountNumberID = rowPayment.AccountNumberID;
                                            //if (rowPayment.PaymentMethodCode.Trim() == "WF")
                                            //{
                                            //    forfeitedamount = rowPayment.PaymentAmount;
                                            //    listBookingDetail.Where(w => w.RecordLocator == PNR).ToList().FirstOrDefault().ForfeitedAmount += (lstbookDTLInfo.Where(item => item.RecordLocator == PNR).Sum(item => item.LineTotal) - listBookingDetail.Where(item => item.RecordLocator == PNR).Sum(item => item.LineTotal));
                                            //}
                                            //currencyRate = rowPayment.CurrencyRate;

                                            //totalPaid += paymentAmount;
                                            if (rowPayment.PaymentStatus == 3)
                                            {
                                                transVoid = 0;
                                                totalPaid += paymentAmount;
                                                totalPNRAmount += paymentAmount;

                                                if (paymentAmount > 0)
                                                {
                                                    totalPNRAmountwithoutWF += paymentAmount;
                                                }
                                            }


                                            //added by ketee, check if tender list is not null, 20170308
                                            int iIndex = -1;
                                            if (listTransTender != null && listTransTender.Count > 0)
                                            {
                                                iIndex = listTransTender.FindIndex(p => p.SeqNo == Convert.ToInt32(rowPayment.PaymentNumber) && p.RecordLocator == rowPayment.RecordLocator);
                                            }

                                            if (iIndex >= 0)
                                            {
                                                BookingTransTender bookingTender = listTransTender[iIndex];
                                                using (profiler.Step("AssignPaymentList"))
                                                {
                                                    AssignPaymentList(TransID, Convert.ToByte(bookingTender.SeqNo), paymentAmount, feeAmount, totPaymentAmount, rowPayment.CurrencyCode, rowPayment.CurrencyCode, bookingTender.TenderID, rowPayment.PaymentText, rowPayment.AccountNumber, rowPayment.AuthorizationCode, rowPayment.MerchantID, bookingTender.CreateBy, PNR, transVoid, "update", rowPayment.PaymentDate, ref listBookTransTenderInfo, bookingTender.ExchgRate);
                                                }
                                                exchangeRate = listTransTender[iIndex].ExchgRate;
                                            }
                                            else
                                            {
                                                using (profiler.Step("AssignPaymentList"))
                                                {
                                                    AssignPaymentList(TransID, Convert.ToByte(rowPayment.PaymentNumber), paymentAmount, feeAmount, totPaymentAmount, rowPayment.CurrencyCode, rowPayment.CurrencyCode, getTenderIDbyDesc(rowPayment.PaymentMethodCode), rowPayment.PaymentText, rowPayment.AccountNumber, rowPayment.AuthorizationCode, rowPayment.MerchantID, AgentName, PNR, transVoid, "insert", rowPayment.PaymentDate, ref listBookTransTenderInfo, exchangeRate);
                                                }
                                            }
                                        }

                                        HttpContext.Current.Session["PaidAmount" + PNR] = totalPNRAmountwithoutWF;
                                        //need to change/combine to listBookingJourney
                                        int goingreturn = 0;

                                        //Added by ketee, wait for 1 sec 20160226
                                        //Thread.Sleep(1000);
                                        if (dtKeyField != null && dtKeyField.Rows.Count > 0)
                                        {
                                            for (int ctrDetail = 0; ctrDetail < dtKeyField.Rows.Count; ctrDetail++)
                                            {

                                                string RecordLocator = dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString();
                                                //TransID = dtKeyField.Rows[ctrDetail]["TransID"].ToString();
                                                byte SeqNo = Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]);

                                                bookDTLInfo = new BookingTransactionDetail();
                                                bookDTLInfo = GetSingleJourneyBK_TRANSDTL(listBookingJourney, RecordLocator, TransID, SeqNo);

                                                if (totalPNRAmount > bookDTLInfo.LineTotal)
                                                {
                                                    leftPayDetail = totalPNRAmount - bookDTLInfo.LineTotal;
                                                    totalPNRAmount = bookDTLInfo.LineTotal;
                                                    using (profiler.Step("AssignJourneyTransDetail"))
                                                    {
                                                        AssignJourneyTransDetail(listBookingJourney, ref lstbookDTLInfo, dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString(), dtKeyField.Rows[ctrDetail]["TransID"].ToString(), Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]), AgentName, totalPNRAmount, PNR, payDueAmount1, payDueAmount2, payDueAmount3, payDueDate1, payDueDate2, payDueDate3);
                                                    }
                                                    //totalPaid += paymentAmount;
                                                    totalPNRAmount = leftPayDetail;
                                                }
                                                else
                                                {
                                                    using (profiler.Step("AssignJourneyTransDetail"))
                                                    {
                                                        AssignJourneyTransDetail(listBookingJourney, ref lstbookDTLInfo, dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString(), dtKeyField.Rows[ctrDetail]["TransID"].ToString(), Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]), AgentName, totalPNRAmount, PNR, payDueAmount1, payDueAmount2, payDueAmount3, payDueDate1, payDueDate2, payDueDate3);
                                                    }
                                                    //totalPaid += paymentAmount;
                                                    totalPNRAmount = 0;
                                                }

                                                //total up total going and total return
                                                //start added by Agus
                                                if (strOrigin == "") strOrigin = bookDTLInfo.Origin;
                                                if (bookDTLInfo.Origin == strOrigin) goingreturn = 0;
                                                else goingreturn = 1;
                                                //end added by Agus
                                                if (VerifyDetails)
                                                {
                                                    if (goingreturn == 0)
                                                    {
                                                        totalAmountGoing += bookDTLInfo.LineTotal;
                                                    }
                                                    else
                                                    {
                                                        totalAmountReturn += bookDTLInfo.LineTotal;
                                                    }
                                                }

                                            }
                                        }


                                    }
                                    else
                                    {
                                        return false;
                                    }
                                }
                                #endregion

                            }
                            else //if no response, no need to change details, just increase attemptcount in details
                            {
                                List<BookingTransactionDetail> ListJourney = new List<BookingTransactionDetail>();
                                using (profiler.Step("AssignBK_TRANSDTL"))
                                {
                                    ListJourney = AssignBK_TRANSDTL(PNR, TransID, ref listBookingJourney, ref rowBookingJourneySeqNo, 0, 1);
                                }
                                if (ListJourney != null)
                                {
                                    lstbookDTLInfo.AddRange(ListJourney);
                                    VoidPNRs.AddRange(ListJourney);
                                }
                                //rowBookingJourneySeqNo += Convert.ToInt16(dtTransDetail.Rows[i]["CntRec"].ToString()); //if response is null, continue seqno
                                //log.Info(this,"End Retrieve GetBookingJourneyDetailsByPNR - no journey - PNR : " + PNR);
                            }
                        }
                        using (profiler.Step("listBookingDetail"))
                        {
                            if (listBookingDetail.Where(item => item.RecordLocator == PNR).Sum(item => item.LineTotal) != lstbookDTLInfo.Where(item => item.RecordLocator == PNR).Sum(item => item.LineTotal) && (lstbookDTLInfo.Where(item => item.RecordLocator == PNR).Sum(item => item.LineTotal) - listBookingDetail.Where(item => item.RecordLocator == PNR).Sum(item => item.LineTotal) < 0 && ((listBookingDetail.Where(item => item.RecordLocator == PNR).Select(ou => ou.LinePaxFee).LastOrDefault() == 0 && listBookingDetail.Where(item => item.RecordLocator == PNR).Count() > 1) || (listBookingDetail.Where(item => item.RecordLocator == PNR).Count() == 1 && listBookingDetail.Where(item => item.RecordLocator == PNR).Select(ou => ou.LinePaxFee).LastOrDefault() != 0))))
                            {
                                if (listBookingDetail.Where(item => item.RecordLocator == PNR).Count() > 1 && listBookingDetail.Where(item => item.RecordLocator == PNR).FirstOrDefault().LineTotal == (lstbookDTLInfo.Where(item => item.RecordLocator == PNR).Sum(item => item.LineTotal)))
                                {

                                }
                                else
                                {
                                    forfeitedamount += (lstbookDTLInfo.Where(item => item.RecordLocator == PNR).Sum(item => item.LineTotal) - listBookingDetail.Where(item => item.RecordLocator == PNR).Sum(item => item.LineTotal));
                                    if (listBookingDetail.Where(w => w.RecordLocator == PNR).ToList().FirstOrDefault() != null && lstbookDTLInfo != null)
                                        listBookingDetail.Where(w => w.RecordLocator == PNR).ToList().FirstOrDefault().ForfeitedAmount += (lstbookDTLInfo.Where(item => item.RecordLocator == PNR).Sum(item => item.LineTotal) - listBookingDetail.Where(item => item.RecordLocator == PNR).Sum(item => item.LineTotal));
                                    lstbookDTLInfo.Where(w => w.RecordLocator == PNR).ToList().FirstOrDefault().ForfeitedAmount = listBookingDetail.Where(w => w.RecordLocator == PNR).ToList().FirstOrDefault().ForfeitedAmount;
                                }
                            }
                        }

                        decimal CollectedAmount = listBookingDetail.Where(item => item.RecordLocator == PNR).Sum(item => item.CollectedAmount);
                        payDueAmount3 += listBookingDetail.Where(item => item.RecordLocator == PNR).Max(item => item.PayDueAmount3);
                        payDueAmount2 += listBookingDetail.Where(item => item.RecordLocator == PNR).Max(item => item.PayDueAmount2);
                        payDueAmount1 += listBookingDetail.Where(item => item.RecordLocator == PNR).Max(item => item.PayDueAmount1);
                        DateTime PayDueDate1 = listBookingDetail.Where(item => item.RecordLocator == PNR).Max(item => item.PayDueDate1);
                        DateTime PayDueDate2 = listBookingDetail.Where(item => item.RecordLocator == PNR).Max(item => item.PayDueDate2);
                        DateTime PayDueDate3 = listBookingDetail.Where(item => item.RecordLocator == PNR).Max(item => item.PayDueDate3);
                        Decimal totalAmountwithoutWF = 0;
                        if (HttpContext.Current.Session["PaidAmount" + PNR] != null)
                        {
                            totalAmountwithoutWF = Convert.ToDecimal(HttpContext.Current.Session["PaidAmount" + PNR]);
                        }

                        lstbookDTLInfo.Where(w => w.RecordLocator == PNR && totalAmountwithoutWF >= listBookingDetail.Where(item => item.RecordLocator == PNR).Max(item => item.PayDueAmount1)).ToList().ForEach(s => s.NextDueDate = PayDueDate2);
                        lstbookDTLInfo.Where(w => w.RecordLocator == PNR && totalAmountwithoutWF >= (listBookingDetail.Where(item => item.RecordLocator == PNR).Max(item => item.PayDueAmount1) + listBookingDetail.Where(item => item.RecordLocator == PNR).Max(item => item.PayDueAmount2))).ToList().ForEach(s => s.NextDueDate = PayDueDate3);

                        if (lstbookDTLInfo.Max(item => item.NextDueDate) == DateTime.MinValue)
                        {
                            lstbookDTLInfo.Where(w => w.RecordLocator == PNR).ToList().ForEach(s => s.NextDueDate = PayDueDate3);
                        }



                    }

                    //set transtatus by comparing totalcollected and totalamount
                    byte TransStatus = 1;
                    //Added by ketee, Set as status closed, 20160209
                    if (checkBookingStatus.ToLower() == "closed")
                    {
                        //Set as Status Closed
                        TransStatus = 8;
                    }
                    if (totalTransAmount > 0 && totalPaid >= totalTransAmount)
                    {
                        TransStatus = 2;
                    }
                    else
                    {
                        if (totalTransAmount == 0 && totalTransAmountAll > 0 && totalPaid >= totalTransAmountAll)
                        {
                            TransStatus = 2;
                        }
                    }
                    //end set transtatus by comparing totalcollected and totalamount

                    //string Scheme = "";
                    string AgentCountryCode = "", CountryCode = "";
                    DataTable dtLimit = new DataTable();

                    if (dtTransMain.Rows.Count > 0 && dtTransDetail.Rows.Count > 0 && lstbookDTLInfo != null && lstbookDTLInfo.Count > 0)
                    {

                        //collectedamount = lstbookDTLInfo.Select(x => x.CollectedAmount).Sum();

                        using (profiler.Step("GetSingleBK_TRANSMAIN"))
                        {
                            bookHDRInfo = GetSingleBK_TRANSMAIN(TransID, Convert.ToByte(dtTransMain.Rows[0]["TransType"]), dtTransMain.Rows[0]["AgentID"].ToString(), dtTransMain.Rows[0]["AgentCatgID"].ToString(), Convert.ToDateTime(dtTransMain.Rows[0]["BookingDate"]));
                        }
                        if (bookHDRInfo != null)
                        {
                            bookHDRInfo.Currency = currencyCode;
                            bookHDRInfo.CurrencyPaid = currencyCode;
                            //bookHDRInfo.CollectedAmt = collectedamount;

                            using (profiler.Step("AssignJourneyTransMain"))
                            {
                                AssignJourneyTransMain(ref bookHDRInfo, TransID, dtTransMain.Rows[0]["AgentID"].ToString(), dtTransMain.Rows[0]["AgentCatgID"].ToString(), Convert.ToByte(dtTransMain.Rows[0]["TransType"]), Convert.ToDateTime(dtTransMain.Rows[0]["BookingDate"]), TransStatus, AgentName, 2, totalPaid, "", "", totalPax, totalTransAmount, totalTransTotalInsure, totalTransTotalFee, totalTransTotalTax, totalTransTotalPaxFee, totalTransTotalOth, totalTransTotalSSR, totalTransTotalSeat, totalTransTotalNameChange, totalTransTotalInfant, totalTransTotalDisc, totalTransTotalPromoDisc, totalTransTotalProcess, totalTransSubTotal, totalAmountGoing, totalAmountReturn);
                            }

                            bookHDRInfo.ExpiryDate = lstbookDTLInfo.Max(item => item.NextDueDate);

                            bookHDRInfo.PaymentAmtEx1 = payDueAmount1;
                            bookHDRInfo.PaymentAmtEx2 = payDueAmount2;
                            bookHDRInfo.PaymentAmtEx3 = payDueAmount3;
                            bookHDRInfo.ForfeitedAmount = forfeitedamount;

                            //listBookingDetail = listBookingDetail.Where(x => x.RecordLocator.Trim().Length >= 6).ToList();
                            //TotalBaseFare = lstbookDTLInfo.Where(s => s.TransVoid == 0).Select(x => x.FarePerPax).Sum() * (lstbookDTLInfo.Where(r => r.Origin == lstbookDTLInfo[0].Origin && r.TransVoid == 0).FirstOrDefault().PaxAdult + lstbookDTLInfo.Where(r => r.Origin == lstbookDTLInfo[0].Origin && r.TransVoid == 0).FirstOrDefault().PaxChild);
                            ////if ((bookHDRInfo.TransSubTotal - (bookHDRInfo.PaymentAmtEx1 + bookHDRInfo.PaymentAmtEx2 + bookHDRInfo.PaymentAmtEx3)) < 0)
                            ////{
                            //decimal PaymentAmtEx1 = 0;
                            //decimal PaymentAmtEx2 = 0;
                            //decimal PaymentAmtEx3 = 0;
                            //decimal TotalDeposit = 0, RemainDeposit = 0, minDeposit = 0, maxDeposit = 0, checkMin = 0, checkMax = 0, curMinDeposit = 0, curMaxDeposit = 0;
                            //PaymentInfo paymentInfo = new PaymentInfo();
                            //if (HttpContext.Current.Session["CountryCode"].ToString() != null)
                            //    AgentCountryCode = HttpContext.Current.Session["CountryCode"].ToString();
                            //if (HttpContext.Current.Session["Country"] != null)
                            //{
                            //    CountryCode = HttpContext.Current.Session["Country"].ToString().Substring(0, 2);
                            //}
                            //else
                            //{
                            //    if (lstbookDTLInfo.Count > 0)
                            //    {
                            //        CountryCode = objGeneral.GetCountryCodeByCode(lstbookDTLInfo[0].Origin);
                            //    }
                            //}
                            //PaymentControl objPayment = new PaymentControl();
                            //paymentInfo = objPayment.GetPaymentScheme(bookHDRInfo.PayScheme, GroupName, TransID, CountryCode, currencyCode, AgentCountryCode);
                            //if (paymentInfo.PaymentType == "DEPO")
                            //{
                            //    dtLimit = objGeneral.getDepositLimit(TransID, TotalBaseFare, (lstbookDTLInfo.Where(r => r.Origin == lstbookDTLInfo[0].Origin && r.TransVoid == 0).Select(x => x.PaxAdult).Sum() + lstbookDTLInfo.Where(r => r.Origin == lstbookDTLInfo[0].Origin && r.TransVoid == 0).Select(x => x.PaxChild).Sum()), currencyCode, strOrigin, GroupName, FlightDuration, SellKey, Transit);
                            //    if (dtLimit != null && dtLimit.Rows.Count > 0)
                            //    {
                            //        checkMin = Decimal.Parse(dtLimit.Rows[0]["CheckMin"].ToString());
                            //        minDeposit = Decimal.Parse(dtLimit.Rows[0]["MinDeposit"].ToString()) * (lstbookDTLInfo.Where(r => r.Origin == lstbookDTLInfo[0].Origin && r.TransVoid == 0).Select(x => x.PaxAdult).Sum() + lstbookDTLInfo.Where(r => r.Origin == lstbookDTLInfo[0].Origin && r.TransVoid == 0).Select(x => x.PaxChild).Sum());
                            //        checkMax = Decimal.Parse(dtLimit.Rows[0]["CheckMax"].ToString());
                            //        maxDeposit = Decimal.Parse(dtLimit.Rows[0]["MaxDeposit"].ToString()) * (lstbookDTLInfo.Where(r => r.Origin == lstbookDTLInfo[0].Origin && r.TransVoid == 0).Select(x => x.PaxAdult).Sum() + lstbookDTLInfo.Where(r => r.Origin == lstbookDTLInfo[0].Origin && r.TransVoid == 0).Select(x => x.PaxChild).Sum());
                            //        if (Decimal.Parse(dtLimit.Rows[0]["ValueType"].ToString()) == 0)
                            //            TotalDeposit = Math.Round(Decimal.Parse(dtLimit.Rows[0]["DepositValueOld"].ToString()) * (lstbookDTLInfo.Where(r => r.Origin == lstbookDTLInfo[0].Origin && r.TransVoid == 0).Select(x => x.PaxAdult).Sum() + lstbookDTLInfo.Where(r => r.Origin == lstbookDTLInfo[0].Origin && r.TransVoid == 0).Select(x => x.PaxChild).Sum()), 2);
                            //        else
                            //            TotalDeposit = Math.Round(Decimal.Parse(dtLimit.Rows[0]["DepositValue"].ToString()) * TotalBaseFare / 100, 2);

                            //        //TotalDeposit = Math.Round((TotalDeposit * paymentInfo.Percentage_1) / 100, 2);

                            //        if (checkMin == 1 || checkMax == 1)
                            //        {
                            //            if (checkMin == 1 && TotalDeposit < minDeposit)
                            //            {
                            //                TotalDeposit = minDeposit;
                            //            }
                            //            else if (checkMax == 1 && TotalDeposit > maxDeposit)
                            //            {
                            //                TotalDeposit = maxDeposit;
                            //            }
                            //        }
                            //        RemainDeposit = TotalDeposit;
                            //    }
                            //}

                            //decimal BaseFare = 0, deposit = 0, FullPrice = 0;
                            //int cntIndex = 0;
                            //listBookingDetailCombine = GetAllBK_TRANSDTLFlightGrp(TransID);
                            //listBookingDetailCombine = listBookingDetailCombine.Where(x => x.RecordLocator.Trim().Length >= 6).ToList();

                            //foreach (BookingTransactionDetail bookDetail in listBookingDetailCombine)
                            //{
                            //    if (lstbookDTLInfo.Where(r => r.RecordLocator == bookDetail.RecordLocator).FirstOrDefault().TransVoid == 0)
                            //    {
                            //        BaseFare = lstbookDTLInfo.Where(r => r.RecordLocator == bookDetail.RecordLocator).Select(x => x.FarePerPax).Sum();
                            //        BaseFare = BaseFare * (lstbookDTLInfo.Where(r => r.RecordLocator == bookDetail.RecordLocator).Select(x => x.PaxAdult).Max() + lstbookDTLInfo.Where(r => r.RecordLocator == bookDetail.RecordLocator).Select(x => x.PaxChild).Max());
                            //        FullPrice = lstbookDTLInfo.Where(r => r.RecordLocator == bookDetail.RecordLocator).Select(x => x.LineTotal).Sum();
                            //        decimal AddChargePNR = lstbookDTLInfo.Where(r => r.RecordLocator == bookDetail.RecordLocator).Select(x => x.LineProcess).Sum();
                            //        FullPrice = FullPrice - AddChargePNR;

                            //        int cnth = 0;
                            //        foreach (BookingTransactionDetail bkDetail in listBookingDetail)
                            //        {
                            //            if (bkDetail.Signature == bookDetail.Signature)
                            //            {
                            //                cnth += 1;
                            //            }
                            //        }


                            //        int iIndex = -1;
                            //        if (cnth >= 2)
                            //            iIndex = listBookingDetail.FindIndex(p => p.Signature == bookDetail.Signature && p.SeqNo % 2 == 1 && p.RecordLocator.Trim().Length >= 6);
                            //        else
                            //            iIndex = listBookingDetail.FindIndex(p => p.Signature == bookDetail.Signature && p.RecordLocator.Trim().Length >= 6);

                            //        int iIndex2 = -1;
                            //        if (cnth >= 2) iIndex2 = listBookingDetail.FindIndex(p => p.Signature == bookDetail.Signature && p.SeqNo % 2 == 0 && p.RecordLocator.Trim().Length >= 6);

                            //        if (paymentInfo.PaymentType == "DEPO")
                            //        {
                            //            deposit = objGeneral.getDepositByDuration(TransID, BaseFare, bookDetail.PaxAdult + bookDetail.PaxChild, bookDetail.Currency, bookDetail.Origin, GroupName, bookDetail.FlightDuration, bookDetail.SellKey, bookDetail.Transit);

                            //            decimal paymentAttempt1 = 0;
                            //            decimal paymentAttempt2 = 0;
                            //            decimal paymentAttempt3 = 0;
                            //            decimal remainamount = 0;

                            //            decimal maxDepositPNR = 0, minDepositPNR = 0;

                            //            if (checkMin == 1 || checkMax == 1)
                            //            {
                            //                minDepositPNR = Math.Round(minDeposit * BaseFare / TotalBaseFare, 2);  //(bookDetail.PaxAdult + bookDetail.PaxChild) / TransTotalPax;
                            //                maxDepositPNR = Math.Round(maxDeposit * BaseFare / TotalBaseFare, 2);  //(bookDetail.PaxAdult + bookDetail.PaxChild) / TransTotalPax;

                            //                curMinDeposit += minDepositPNR;
                            //                curMaxDeposit += maxDepositPNR;

                            //                if (curMinDeposit > minDeposit)
                            //                {
                            //                    minDepositPNR = minDepositPNR - (curMinDeposit - minDeposit);
                            //                    curMinDeposit = minDepositPNR;
                            //                }
                            //                if (curMaxDeposit > maxDeposit)
                            //                {
                            //                    maxDepositPNR = maxDepositPNR - (curMaxDeposit - maxDeposit);
                            //                    curMaxDeposit = maxDeposit;
                            //                }

                            //                if (checkMin == 1 && deposit < minDepositPNR)
                            //                {
                            //                    remainamount = deposit - minDepositPNR;
                            //                    deposit = minDepositPNR;
                            //                }
                            //                else if (checkMax == 1 && deposit > maxDepositPNR)
                            //                {
                            //                    remainamount = deposit - maxDepositPNR;
                            //                    deposit = maxDepositPNR;
                            //                }
                            //                if (cntIndex == listBookingDetailCombine.Count - 1)
                            //                {
                            //                    if (deposit < RemainDeposit)
                            //                    {
                            //                        remainamount = remainamount - (RemainDeposit - deposit);
                            //                        deposit = deposit + (RemainDeposit - deposit);
                            //                    }
                            //                    else if (deposit > RemainDeposit)
                            //                    {
                            //                        remainamount = remainamount + (RemainDeposit - deposit);
                            //                        deposit = deposit - (RemainDeposit - deposit);
                            //                    }
                            //                }
                            //            }

                            //            paymentAttempt1 = Math.Round((deposit * paymentInfo.Percentage_1) / 100, 2);

                            //            if (paymentInfo.IsNominal_1 == 1)
                            //            {
                            //                deposit = objGeneral.getDepositByDuration(TransID, FullPrice, bookDetail.PaxAdult + bookDetail.PaxChild, bookDetail.Currency, bookDetail.Origin, GroupName, bookDetail.FlightDuration, bookDetail.SellKey, bookDetail.Transit);
                            //                //if (CurrencyRate > 0) deposit = deposit / CurrencyRate;
                            //                //}
                            //                paymentAttempt1 = deposit;
                            //                //add validation if full price less than deposit, set to paid in full price, 20170207, by ketee
                            //                if (FullPrice <= deposit)
                            //                    PayDueAmount1 = FullPrice;
                            //                else
                            //                    PayDueAmount1 = deposit;
                            //            }
                            //            else if (paymentInfo.Deposit_1 != 0)
                            //            {
                            //                if (deposit == 0)
                            //                {
                            //                    deposit = objGeneral.getDeposit(TransID, bookDetail.TotalPax, bookDetail.Currency, bookDetail.Origin, bookDetail.Transit);
                            //                }
                            //                paymentAttempt1 = deposit;
                            //                //add validation if full price less than deposit, set to paid in full price, 20170207, by ketee
                            //                //PayDueAmount1 = deposit;
                            //                if (FullPrice <= deposit)
                            //                    PayDueAmount1 = FullPrice;
                            //                else
                            //                    PayDueAmount1 = deposit;
                            //            }
                            //            else
                            //            {
                            //                PayDueAmount1 = paymentAttempt1;
                            //            }


                            //            //PayDueAmount2 = bookDetail.LineTotal - PayDueAmount1;
                            //            if (FullPrice > (PayDueAmount1) && paymentInfo.Percentage_2 == 0)
                            //            {
                            //                paymentAttempt2 = FullPrice - (PayDueAmount1);
                            //                PayDueAmount2 = paymentAttempt2;
                            //            }
                            //            else
                            //            {
                            //                //paymentAttempt2 = Math.Round((deposit * paymentInfo.Percentage_2) / 100, 2) + remainamount;
                            //                paymentAttempt2 = Math.Round((deposit * paymentInfo.Percentage_2) / 100, 2);
                            //                PayDueAmount2 = paymentAttempt2;
                            //            }
                            //            if (FullPrice > (PayDueAmount1 + PayDueAmount2) && paymentInfo.Percentage_3 == 0)
                            //            {
                            //                paymentAttempt3 = FullPrice - (PayDueAmount1 + PayDueAmount2);
                            //                PayDueAmount3 = paymentAttempt3;
                            //            }
                            //            else
                            //            {
                            //                paymentAttempt3 = Math.Round((deposit * paymentInfo.Percentage_3) / 100, 2);
                            //                PayDueAmount3 = paymentAttempt3;
                            //            }
                            //        }

                            //        else
                            //        {
                            //            PayDueAmount1 = FullPrice;
                            //        }

                            //        if (PayDueAmount1 > 0) PaymentAmtEx1 += PayDueAmount1;
                            //        if (PayDueAmount2 > 0) PaymentAmtEx2 += PayDueAmount2;
                            //        if (PayDueAmount3 > 0) PaymentAmtEx3 += PayDueAmount3;

                            //        bookHDRInfo.PaymentAmtEx1 = PaymentAmtEx1;
                            //        bookHDRInfo.PaymentAmtEx2 = PaymentAmtEx2;
                            //        bookHDRInfo.PaymentAmtEx3 = PaymentAmtEx3;

                            //        if (iIndex >= 0 && PayDueAmount1 > 0) lstbookDTLInfo[iIndex].PayDueAmount1 = PayDueAmount1;
                            //        if (iIndex2 >= 0 && PayDueAmount1 > 0) lstbookDTLInfo[iIndex2].PayDueAmount1 = PayDueAmount1;
                            //        if (iIndex >= 0 && PayDueAmount2 > 0) lstbookDTLInfo[iIndex].PayDueAmount2 = PayDueAmount2;
                            //        if (iIndex2 >= 0 && PayDueAmount2 > 0) lstbookDTLInfo[iIndex2].PayDueAmount2 = PayDueAmount2;
                            //        if (iIndex >= 0 && PayDueAmount3 > 0) lstbookDTLInfo[iIndex].PayDueAmount3 = PayDueAmount3;
                            //        if (iIndex2 >= 0 && PayDueAmount3 > 0) lstbookDTLInfo[iIndex2].PayDueAmount3 = PayDueAmount3;

                            //        RemainDeposit = RemainDeposit - deposit;
                            //        cntIndex += 1;
                            //    }
                            //}



                            //}
                            //bookHDRInfo.PaymentAmtEx1 = payDueAmount1;
                            //bookHDRInfo.PaymentAmtEx2 = payDueAmount2;
                            //bookHDRInfo.PaymentAmtEx3 = payDueAmount3;
                            //added by ketee, update latest transstatus from Navitaire, 20170410
                            if (bookHDRInfo.TransStatus != 4 && bookHDRInfo.TransStatus != 6 && bookHDRInfo.TransStatus != 7)
                                bookHDRInfo.TransStatus = TransStatus;

                            HttpContext.Current.Session["listPassengerDataDelete"] = null;
                            HttpContext.Current.Session["listPassengerDataDeleteAll"] = null;
                            using (profiler.Step("UpdatePassengerDetails"))
                            {
                                UpdatePassengerDetails(TransID, AgentName, AgentID, true);
                            }
                            //bookHDRInfo.ExchangeRate = exchangeRate;

                            //if (change == true) bookHDRInfo.STDDate = stdDate;

                            //pending remarked by diana 20170508
                            //#region "Scheme"
                            //GeneralControl objGeneral = new GeneralControl();
                            //GroupName = objGeneral.getOPTGroupByCarrierCode(lstbookDTLInfo[0].CarrierCode);

                            //PaymentControl objPayment = new PaymentControl();
                            //Scheme = objPayment.GetScheme(bookHDRInfo.STDDate, bookHDRInfo.BookingDate, GroupName, TransID);

                            //bookHDRInfo.PayScheme = Scheme;

                            //PaymentInfo paymentInfo = new PaymentInfo();
                            //paymentInfo = objPayment.GetPaymentScheme(Scheme, GroupName, TransID);

                            //if (paymentInfo.Code_1 == "DOB")
                            //{
                            //    bookHDRInfo.PaymentDateEx1 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_1);
                            //    //remark by ketee, 20160222
                            //    //bookHDRInfo.ExpiryDate = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_1);
                            //}
                            //else if (paymentInfo.Code_1 == "STD")
                            //{
                            //    bookHDRInfo.PaymentDateEx1 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_1);
                            //    //remark by ketee, 20160222
                            //    //bookHDRInfo.ExpiryDate = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_1);
                            //}
                            //if (paymentInfo.Code_2 == "DOB")
                            //{
                            //    bookHDRInfo.PaymentDateEx2 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_2);
                            //}
                            //else if (paymentInfo.Code_2 == "STD")
                            //{
                            //    bookHDRInfo.PaymentDateEx2 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_2);
                            //}
                            //if (paymentInfo.Code_3 == "DOB")
                            //{
                            //    bookHDRInfo.PaymentDateEx3 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_3);
                            //}
                            //else if (paymentInfo.Code_3 == "STD")
                            //{
                            //    bookHDRInfo.PaymentDateEx3 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_3);
                            //}
                            //#endregion

                            bookHDRInfo.CurReminderDate = bookHDRInfo.ExpiryDate.Date.AddDays(-5);
                        }


                    }

                    //if (dtTransMain.Rows.Count > 0)
                    //{
                    //    AssignJourneyTransMain(ref bookHDRInfo, TransID, dtTransMain.Rows[0]["AgentID"].ToString(), dtTransMain.Rows[0]["AgentCatgID"].ToString(), Convert.ToByte(dtTransMain.Rows[0]["TransType"]), Convert.ToDateTime(dtTransMain.Rows[0]["BookingDate"]), TransStatus, AgentName, 2, totalPaid, "", "", totalPax, totalTransAmount, totalTransTotalFee, totalTransTotalTax, totalTransTotalPaxFee, totalTransTotalOth, totalTransTotalSSR, totalTransTotalSeat, totalTransTotalNameChange, totalTransTotalInfant, totalTransTotalDisc, totalTransTotalPromoDisc, totalTransTotalProcess, totalTransSubTotal, totalAmountGoing, totalAmountReturn);
                    //    bookHDRInfo.PaymentAmtEx1 = payDueAmount1;
                    //    bookHDRInfo.PaymentAmtEx2 = payDueAmount2;
                    //    bookHDRInfo.PaymentAmtEx3 = payDueAmount3;

                    //    if ((bookHDRInfo.TransSubTotal - (bookHDRInfo.PaymentAmtEx1 + bookHDRInfo.PaymentAmtEx2 + bookHDRInfo.PaymentAmtEx3)) < 0)
                    //    {
                    //        dtLimit = objGeneral.getDepositLimit(TransID, TotalBaseFare, totalPax, currencyCode, strOrigin, GroupName, FlightDuration, SellKey, Transit);

                    //    }

                    //    //added by ketee, update latest transstatus from Navitaire, 20170410
                    //    bookHDRInfo.TransStatus = TransStatus;

                    //    UpdatePassengerDetails(TransID, AgentName, AgentID, true);
                    //}

                    #region SaveTransFees
                    using (profiler.Step("SaveTransFees"))
                    {
                        DataTable dtTFOth = new DataTable();
                        BookingTransactionFees bookFEEInfo = new BookingTransactionFees();
                        List<BookingTransactionFees> lstbookFEEInfo = new List<BookingTransactionFees>();
                        if (HttpContext.Current.Session["dataTransFeesOthers"] != null)
                        {
                            dtTFOth = (DataTable)HttpContext.Current.Session["dataTransFeesOthers"];
                        }
                        if (dtTFOth != null)
                        {
                            int i = 0;
                            foreach (DataRow drFee in dtTFOth.Rows)
                            {
                                bookFEEInfo = new BookingTransactionFees();
                                bookFEEInfo.TransID = bookHDRInfo.TransID.ToString();
                                bookFEEInfo.RecordLocator = drFee["RecordLocator"].ToString();
                                bookFEEInfo.SeqNo = (byte)(i + 1);
                                bookFEEInfo.Origin = drFee["Origin"].ToString();
                                bookFEEInfo.Transit = drFee["Transit"].ToString();
                                bookFEEInfo.Destination = drFee["Destination"].ToString();

                                bookFEEInfo.PaxType = drFee["PaxType"].ToString();
                                bookFEEInfo.FeeCode = drFee["FeeCode"].ToString();
                                bookFEEInfo.FeeDesc = drFee["FeeDesc"].ToString();
                                bookFEEInfo.FeeType = drFee["FeeType"].ToString();
                                bookFEEInfo.FeeQty = Convert.ToDouble(drFee["FeeQty"].ToString());
                                bookFEEInfo.FeeRate = Convert.ToDecimal(drFee["FeeRate"].ToString());
                                bookFEEInfo.FeeAmt = Convert.ToDecimal(drFee["FeeAmt"].ToString());
                                bookFEEInfo.Transvoid = 0;
                                bookFEEInfo.CreateBy = AgentID;
                                bookFEEInfo.SyncCreate = DateTime.Now;
                                bookFEEInfo.SyncLastUpd = DateTime.Now;
                                bookFEEInfo.LastSyncBy = AgentID;

                                lstbookFEEInfo.Add(bookFEEInfo);
                                i++;
                            }
                            HttpContext.Current.Session["listTransFees"] = lstbookFEEInfo;
                            HttpContext.Current.Session["dataTransFeesOthers"] = null;
                        }
                    }
                    #endregion
                    //if (bookHDRInfo != null && lstbookDTLInfo != null && listBookTransTenderInfo != null)
                    if (bookHDRInfo != null)
                    {

                        using (profiler.Step("UpdateDatabaseDetails"))
                        {
                            if (UpdateDatabaseDetails(bookHDRInfo, lstbookDTLInfo, listBookTransTenderInfo, ABS.Logic.GroupBooking.Booking.BookingControl.EnumSaveType.Update, ref ExpiredPNRs, false, true, listbk_transssrinfoallPNR, Mode) == false)
                            {
                                return false; // transaction failed
                            }
                            else
                            {

                                return true;
                            }
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                log.Error(this, ex);
                return false;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        //change to new add-On table, Tyas
        public Boolean UpdateAllBookingJourneyDetailsNew(ListTransaction TransactionInfo, string AgentName, string AgentID, Boolean VerifyDetails = false, Boolean AutoCancel = false)
        {
            try
            {
                Navitaire.APIBooking ApiBook = new Navitaire.APIBooking("");
                Navitaire.BookingManager.GetBookingResponse Response = new Navitaire.BookingManager.GetBookingResponse();

                string TransID = TransactionInfo.TransID;
                string PNR = "";
                string currencyCode = "";
                decimal exchangeRate = 1;
                string bookingStatus = "";
                //added by ketee
                string checkBookingStatus = "";
                DateTime expiredDate = DateTime.Now.AddDays(1);
                DateTime stdDate = DateTime.Now;
                bool change = false;

                Decimal totalPaid = 0;
                int totalPax = 0;
                decimal totalTransAmountAll = 0;
                decimal totalTransAmount = 0;
                decimal totalAmountGoing = 0;
                decimal totalAmountReturn = 0;
                decimal totalTransSubTotal = 0;
                decimal totalTransTotalFee = 0;
                decimal totalTransTotalTax = 0;
                decimal totalTransTotalPaxFee = 0;
                decimal totalTransTotalOth = 0;
                decimal totalTransTotalProcess = 0;
                decimal totalTransTotalSSR = 0;
                decimal totalTransTotalSeat = 0;
                decimal totalTransTotalNameChange = 0;
                decimal totalTransTotalInfant = 0;
                decimal totalTransTotalDisc = 0;
                decimal totalTransTotalPromoDisc = 0;
                decimal payDueAmount1 = 0;
                decimal payDueAmount2 = 0;
                decimal payDueAmount3 = 0;

                BookingContainer BookingContainers = new BookingContainer(); //for booking details
                List<BookingJourneyContainer> listBookingJourneyContainers = new List<BookingJourneyContainer>(); //for journey list
                List<PaymentContainer> listPaymentContainers = new List<PaymentContainer>(); //for payment list

                List<BookingTransactionDetail> listBookingJourney = new List<BookingTransactionDetail>();
                List<BookingTransTender> listBookTransTenderInfo = new List<BookingTransTender>();
                BookingTransactionDetail lstBooking = new BookingTransactionDetail();

                BookingTransactionDetail bookDTLInfo = new BookingTransactionDetail();
                BookingTransactionMain bookHDRInfo = new BookingTransactionMain();
                BookingTransTender bookTransTenderInfo = new BookingTransTender();

                LoadData(TransID); //grab transmain & transdtlcombinePNR

                if (HttpContext.Current.Session["TransMain"] != null && HttpContext.Current.Session["TransDetail"] != null)
                {
                    DataTable dtTransMain = this.dtTransMain();
                    if (HttpContext.Current.Session["TransMain"] != null)
                        dtTransMain = (DataTable)HttpContext.Current.Session["TransMain"];//insert transmain into datatable

                    DataTable dtTransDetail = this.dtTransDetail();
                    if (HttpContext.Current.Session["TransDetail"] != null)
                        dtTransDetail = (DataTable)HttpContext.Current.Session["TransDetail"];//insert transdtlcombinePNR into datatable

                    List<BookingTransactionDetail> listBookingDetail = new List<BookingTransactionDetail>();
                    //listBookingDetail = GetAllBK_TRANSDTLFilterAll(TransID, 0);//grab distinct PNR
                    listBookingDetail = GetAllBK_TRANSDTLFilterAll(TransID);//grab distinct PNR

                    //added by diana 20170405, to recalculate payment schedule with valid PNR only
                    ArrayList PNRList = new ArrayList();
                    foreach (BookingTransactionDetail bookDTL in listBookingDetail)
                    {
                        if (!PNRList.Contains(bookDTL.RecordLocator) && bookDTL.RecordLocator.Trim().Length >= 6)
                        {
                            payDueAmount1 += bookDTL.PayDueAmount1;
                            payDueAmount2 += bookDTL.PayDueAmount2;
                            payDueAmount3 += bookDTL.PayDueAmount3;
                            PNRList.Add(bookDTL.RecordLocator);
                        }
                    }

                    List<BookingTransTender> listTransTender = new List<BookingTransTender>();
                    listTransTender = GetAllBK_TRANSTENDERFilter(TransID);//grab tender list

                    List<BookingTransactionDetail> lstbookDTLInfo = new List<BookingTransactionDetail>();
                    lstbookDTLInfo = new List<BookingTransactionDetail>();

                    Bk_transssr BK_TRANSSSRInfo = new Bk_transssr();
                    List<Bk_transaddon> listbk_transssrinfo = new List<Bk_transaddon>();

                    int rowBookingJourneySeqNo = 1;
                    int cnt = 0;
                    int z = 0;

                    for (int i = 0; i < dtTransDetail.Rows.Count; i++)
                    {
                        PNR = dtTransDetail.Rows[i]["RecordLocator"].ToString();
                        if (PNR.Trim().Length < 6)//will not continue if PNR is not valid
                        {
                            rowBookingJourneySeqNo += Convert.ToInt16(dtTransDetail.Rows[i]["CntRec"].ToString());
                            continue;
                        }

                        //log.Info(this,"Entering GetBookingJourneyDetailsByPNR - PNR : " + PNR);
                        if (RetrieveBookingDetailsByPNRNew(ApiBook, ref Response, PNR, TransID)) //send apibook and response object
                        {
                            dtTransDetail.Rows[i]["IsLatest"] = 1; //indicator whether success or fail in retrieving latest data from navitaire
                            //log.Info(this,"End Retrieve GetBookingJourneyDetailsByPNR - succeed - PNR : " + PNR);

                            //check to exit if last synchronize date > Navitaire modified date 
                            //if (Convert.ToDateTime(dtTransMain.Rows[0]["SyncLastUpd"]) > Response.Booking.BookingInfo.ModifiedDate)
                            //{
                            //    return true;
                            //}
                            #region "Booking"
                            string bookingRecordLocator = "";
                            if (HttpContext.Current.Session["BookingContainers"] != null) //grabbing currencyCode, rate, status, expirydate
                            {
                                BookingContainers = (BookingContainer)HttpContext.Current.Session["BookingContainers"];
                                currencyCode = BookingContainers.CurrencyCode;
                                //exchangeRate = BookingContainers.ExchangeRate;
                                bookingStatus = BookingContainers.BookingStatus;
                                expiredDate = BookingContainers.ExpiredDate;
                                bookingRecordLocator = BookingContainers.RecordLocator;
                            }
                            #endregion

                            #region "SSR"
                            if (HttpContext.Current.Session["BK_TransSSRContainer"] != null) //grabbing currencyCode, rate, status, expirydate
                            {
                                listbk_transssrinfo = (List<Bk_transaddon>)HttpContext.Current.Session["BK_TransSSRContainer"];
                                foreach (Bk_transaddon TransSSR in listbk_transssrinfo)
                                {

                                    TransSSR.TransID = TransID;
                                    TransSSR.SyncCreate = DateTime.Now;
                                    TransSSR.SyncLastUpd = DateTime.Now;
                                    TransSSR.LastSyncBy = AgentName;
                                }
                                HttpContext.Current.Session["BK_TransSSRContainer"] = listbk_transssrinfo;
                            }

                            if (listbk_transssrinfo.Count > 0)
                            {
                                if (UpdateManage(listbk_transssrinfo, PNR, "", true) == false)
                                {
                                    log.Error(this, "save BK_TRANSADDON failed = " + listbk_transssrinfo[0].TransID);
                                }
                                //SaveSSRManageCommit(listbk_transssrinfo, ABS.Logic.GroupBooking.Booking.BookingControl.EnumSaveType.Update, PNR, "", true);
                            }
                            #endregion

                            //Remark by ketee, 20160209
                            if (bookingStatus.ToLower() != "confirmed") //if journey is not confirmed, no need to change details and payment, just change to transvoid=1
                            {
                                List<BookingTransactionDetail> ListJourney = new List<BookingTransactionDetail>();
                                ListJourney = AssignBK_TRANSDTL(PNR, TransID, ref listBookingJourney, ref rowBookingJourneySeqNo, 1, 0);
                                if (ListJourney != null) lstbookDTLInfo.AddRange(ListJourney);
                                if (checkBookingStatus == "")
                                {
                                    checkBookingStatus = bookingStatus;
                                }
                                else
                                {
                                    if (checkBookingStatus != bookingStatus)
                                    {
                                        checkBookingStatus = bookingStatus;
                                    }
                                }
                                continue;
                            }

                            #region "Journey"
                            if (HttpContext.Current.Session["BookingJourneyContainers"] != null) //grabbing journey details
                            {
                                listBookingJourneyContainers = (List<BookingJourneyContainer>)HttpContext.Current.Session["BookingJourneyContainers"];
                                foreach (BookingJourneyContainer rowBookingJourney in listBookingJourneyContainers)
                                {
                                    //insert bookingdetail into listBookingJourney
                                    if (rowBookingJourneySeqNo % 2 == 1) { stdDate = rowBookingJourney.STD; change = true; }

                                    //added by diana 20140516, differentiate oneWay and ReturnWay
                                    int cnts = 0;
                                    foreach (BookingTransactionDetail bkDetail in listBookingDetail)
                                    {
                                        if (bkDetail.RecordLocator == bookingRecordLocator)
                                        {
                                            cnts += 1;
                                        }
                                    }

                                    int iIndex = -1;
                                    if (cnts >= 2)
                                        iIndex = listBookingDetail.FindIndex(p => p.SeqNo % 2 == rowBookingJourneySeqNo % 2 && p.RecordLocator == bookingRecordLocator);
                                    else
                                        iIndex = listBookingDetail.FindIndex(p => p.RecordLocator == bookingRecordLocator);

                                    //int iIndex = listBookingDetail.FindIndex(p => p.SeqNo % 2 == rowBookingJourneySeqNo % 2 && p.RecordLocator == bookingRecordLocator);
                                    if (iIndex >= 0)
                                    {
                                        BookingTransactionDetail bookingJourney = listBookingDetail[iIndex];
                                        AssignBookingJourneyList(TransID, Convert.ToByte(bookingJourney.SeqNo), rowBookingJourney, PNR, "update", ref listBookingJourney);
                                    }
                                    else
                                    {
                                        AssignBookingJourneyList(TransID, Convert.ToByte(rowBookingJourneySeqNo), rowBookingJourney, PNR, "insert", ref listBookingJourney);
                                    }
                                    rowBookingJourneySeqNo++;
                                }

                                //recalculate pax details and insert into dtTransDetail
                                if (listBookingJourney.Count > 0)
                                {
                                    dtTransDetail.Rows[i]["PaxAdult"] = 0;
                                    dtTransDetail.Rows[i]["PaxChild"] = 0;
                                    dtTransDetail.Rows[i]["LineTotal"] = 0;
                                    dtTransDetail.Rows[i]["LineFee"] = 0;
                                    dtTransDetail.Rows[i]["LineOth"] = 0;
                                    dtTransDetail.Rows[i]["LineProcess"] = 0;
                                    dtTransDetail.Rows[i]["LineSSR"] = 0;
                                    dtTransDetail.Rows[i]["LineSeat"] = 0;
                                    dtTransDetail.Rows[i]["LineNameChange"] = 0;
                                    dtTransDetail.Rows[i]["LineInfant"] = 0;
                                    dtTransDetail.Rows[i]["LineDisc"] = 0;
                                    dtTransDetail.Rows[i]["LinePromoDisc"] = 0;
                                    dtTransDetail.Rows[i]["LineTax"] = 0;
                                    dtTransDetail.Rows[i]["LinePaxFee"] = 0;
                                    for (z = cnt; z < listBookingJourney.Count; z++)
                                    {
                                        BookingTransactionDetail pBookingTransDetail = new BookingTransactionDetail();
                                        pBookingTransDetail = listBookingJourney[z];

                                        dtTransDetail.Rows[i]["PaxAdult"] = Convert.ToInt16(dtTransDetail.Rows[i]["PaxAdult"].ToString()) + Convert.ToInt16(pBookingTransDetail.PaxAdult.ToString());
                                        dtTransDetail.Rows[i]["PaxChild"] = Convert.ToInt16(dtTransDetail.Rows[i]["PaxChild"].ToString()) + Convert.ToInt16(pBookingTransDetail.PaxChild.ToString());
                                        dtTransDetail.Rows[i]["LineTotal"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineTotal.ToString());
                                        dtTransDetail.Rows[i]["LineFee"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineFee"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineFee.ToString());
                                        dtTransDetail.Rows[i]["LineOth"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineOth"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineOth.ToString());
                                        dtTransDetail.Rows[i]["LineProcess"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineProcess"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineProcess.ToString());
                                        dtTransDetail.Rows[i]["LineSSR"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineSSR"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineSSR.ToString());
                                        dtTransDetail.Rows[i]["LineSeat"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineSeat"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineSeat.ToString());
                                        dtTransDetail.Rows[i]["LineNameChange"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineNameChange"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineNameChange.ToString());
                                        dtTransDetail.Rows[i]["LineInfant"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineInfant"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineInfant.ToString());
                                        dtTransDetail.Rows[i]["LineDisc"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineDisc"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineDisc.ToString());
                                        dtTransDetail.Rows[i]["LinePromoDisc"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LinePromoDisc"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LinePromoDisc.ToString());
                                        dtTransDetail.Rows[i]["LineTax"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineTax"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineTax.ToString());
                                        dtTransDetail.Rows[i]["LinePaxFee"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LinePaxFee"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LinePaxFee.ToString());
                                    }
                                    cnt = z;
                                }
                                //end recalculate pax details and insert into dtTransDetail

                            }
                            else
                            {
                                return false;
                            }
                            #endregion

                            #region "Payment"
                            if (VerifyDetails)
                            {
                                totalPax += Convert.ToInt16(dtTransDetail.Rows[i]["PaxAdult"].ToString()) + Convert.ToInt16(dtTransDetail.Rows[i]["PaxChild"].ToString());
                                totalTransAmount += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());
                                totalTransTotalFee += Convert.ToDecimal(dtTransDetail.Rows[i]["LineFee"].ToString());
                                totalTransTotalOth += Convert.ToDecimal(dtTransDetail.Rows[i]["LineOth"].ToString());
                                totalTransTotalProcess += Convert.ToDecimal(dtTransDetail.Rows[i]["LineProcess"].ToString());
                                totalTransTotalSSR += Convert.ToDecimal(dtTransDetail.Rows[i]["LineSSR"].ToString());
                                totalTransTotalSeat += Convert.ToDecimal(dtTransDetail.Rows[i]["LineSeat"].ToString());
                                totalTransTotalNameChange += Convert.ToDecimal(dtTransDetail.Rows[i]["LineNameChange"].ToString());
                                totalTransTotalInfant += Convert.ToDecimal(dtTransDetail.Rows[i]["LineInfant"].ToString());
                                totalTransTotalDisc += Convert.ToDecimal(dtTransDetail.Rows[i]["LineDisc"].ToString());
                                totalTransTotalPromoDisc += Convert.ToDecimal(dtTransDetail.Rows[i]["LinePromoDisc"].ToString());
                                totalTransTotalTax += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTax"].ToString());
                                totalTransTotalPaxFee += Convert.ToDecimal(dtTransDetail.Rows[i]["LinePaxFee"].ToString());
                                totalTransSubTotal += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());
                            }
                            totalTransAmountAll += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());

                            if (HttpContext.Current.Session["PaymentContainers"] != null) //grabbing payment details
                            {
                                listPaymentContainers = (List<PaymentContainer>)HttpContext.Current.Session["PaymentContainers"];
                                DataTable dtKeyField = new DataTable();
                                //Add param TransID by Tyas, 
                                dtKeyField = GetKeyFieldDetailByPNR(PNR, TransID);
                                decimal paymentAmount = 0, feeAmount = 0, totPaymentAmount = 0, leftPayDetail = 0, totalPNRAmount = 0, currencyRate = 0;

                                foreach (PaymentContainer rowPayment in listPaymentContainers)
                                {
                                    int paymentStatus = 0;
                                    string authorizationcode = "";
                                    string accountNumber = "";
                                    string merchantID = "";
                                    long accountNumberID = 0;
                                    byte transVoid = 1;
                                    paymentAmount = rowPayment.CollectedAmount;
                                    paymentStatus = rowPayment.PaymentStatus;
                                    authorizationcode = rowPayment.AuthorizationCode;
                                    accountNumber = rowPayment.AccountNumber;
                                    merchantID = rowPayment.MerchantID;
                                    accountNumberID = rowPayment.AccountNumberID;
                                    //currencyRate = rowPayment.CurrencyRate;

                                    //totalPaid += paymentAmount;
                                    if (rowPayment.PaymentStatus == 3)
                                    {
                                        transVoid = 0;
                                        totalPaid += paymentAmount;
                                        totalPNRAmount += paymentAmount;
                                    }

                                    //added by ketee, check if tender list is not null, 20170308
                                    int iIndex = -1;
                                    if (listTransTender != null && listTransTender.Count > 0)
                                    {
                                        iIndex = listTransTender.FindIndex(p => p.SeqNo == Convert.ToInt32(rowPayment.PaymentNumber) && p.RecordLocator == rowPayment.RecordLocator);
                                    }

                                    if (iIndex >= 0)
                                    {
                                        BookingTransTender bookingTender = listTransTender[iIndex];
                                        AssignPaymentList(TransID, Convert.ToByte(bookingTender.SeqNo), paymentAmount, feeAmount, totPaymentAmount, rowPayment.CurrencyCode, rowPayment.CurrencyCode, bookingTender.TenderID, rowPayment.PaymentText, rowPayment.AccountNumber, rowPayment.AuthorizationCode, rowPayment.MerchantID, bookingTender.CreateBy, PNR, transVoid, "update", rowPayment.PaymentDate, ref listBookTransTenderInfo, bookingTender.ExchgRate);
                                        exchangeRate = listTransTender[iIndex].ExchgRate;
                                    }
                                    else
                                    {
                                        AssignPaymentList(TransID, Convert.ToByte(rowPayment.PaymentNumber), paymentAmount, feeAmount, totPaymentAmount, rowPayment.CurrencyCode, rowPayment.CurrencyCode, getTenderIDbyDesc(rowPayment.PaymentMethodCode), rowPayment.PaymentText, rowPayment.AccountNumber, rowPayment.AuthorizationCode, rowPayment.MerchantID, AgentName, PNR, transVoid, "insert", rowPayment.PaymentDate, ref listBookTransTenderInfo, exchangeRate);
                                    }
                                }


                                //need to change/combine to listBookingJourney
                                int goingreturn = 0;
                                string strOrigin = "";
                                //Added by ketee, wait for 1 sec 20160226
                                Thread.Sleep(1000);
                                for (int ctrDetail = 0; ctrDetail < dtKeyField.Rows.Count; ctrDetail++)
                                {

                                    string RecordLocator = dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString();
                                    //TransID = dtKeyField.Rows[ctrDetail]["TransID"].ToString();
                                    byte SeqNo = Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]);

                                    bookDTLInfo = new BookingTransactionDetail();
                                    bookDTLInfo = GetSingleJourneyBK_TRANSDTL(listBookingJourney, RecordLocator, TransID, SeqNo);

                                    if (totalPNRAmount > bookDTLInfo.LineTotal)
                                    {
                                        leftPayDetail = totalPNRAmount - bookDTLInfo.LineTotal;
                                        totalPNRAmount = bookDTLInfo.LineTotal;
                                        AssignJourneyTransDetail(listBookingJourney, ref lstbookDTLInfo, dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString(), dtKeyField.Rows[ctrDetail]["TransID"].ToString(), Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]), AgentName, totalPNRAmount, PNR);
                                        //totalPaid += paymentAmount;
                                        totalPNRAmount = leftPayDetail;
                                    }
                                    else
                                    {
                                        AssignJourneyTransDetail(listBookingJourney, ref lstbookDTLInfo, dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString(), dtKeyField.Rows[ctrDetail]["TransID"].ToString(), Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]), AgentName, totalPNRAmount, PNR);
                                        //totalPaid += paymentAmount;
                                        totalPNRAmount = 0;
                                    }

                                    //total up total going and total return
                                    //start added by Agus
                                    if (strOrigin == "") strOrigin = bookDTLInfo.Origin;
                                    if (bookDTLInfo.Origin == strOrigin) goingreturn = 0;
                                    else goingreturn = 1;
                                    //end added by Agus
                                    if (VerifyDetails)
                                    {
                                        if (goingreturn == 0)
                                        {
                                            totalAmountGoing += bookDTLInfo.LineTotal;
                                        }
                                        else
                                        {
                                            totalAmountReturn += bookDTLInfo.LineTotal;
                                        }
                                    }

                                }



                            }
                            else
                            {
                                return false;
                            }
                            #endregion

                        }
                        else //if no response, no need to change details, just increase attemptcount in details
                        {
                            List<BookingTransactionDetail> ListJourney = new List<BookingTransactionDetail>();
                            ListJourney = AssignBK_TRANSDTL(PNR, TransID, ref listBookingJourney, ref rowBookingJourneySeqNo, 0, 1);
                            if (ListJourney != null) lstbookDTLInfo.AddRange(ListJourney);
                            //rowBookingJourneySeqNo += Convert.ToInt16(dtTransDetail.Rows[i]["CntRec"].ToString()); //if response is null, continue seqno
                            //log.Info(this,"End Retrieve GetBookingJourneyDetailsByPNR - no journey - PNR : " + PNR);
                        }
                    }

                    //set transtatus by comparing totalcollected and totalamount
                    byte TransStatus = 1;
                    //Added by ketee, Set as status closed, 20160209
                    if (checkBookingStatus.ToLower() == "closed")
                    {
                        //Set as Status Closed
                        TransStatus = 8;
                    }
                    if (totalTransAmount > 0 && totalPaid >= totalTransAmount)
                    {
                        TransStatus = 2;
                    }
                    else
                    {
                        if (totalTransAmount == 0 && totalTransAmountAll > 0 && totalPaid >= totalTransAmountAll)
                        {
                            TransStatus = 2;
                        }
                    }
                    //end set transtatus by comparing totalcollected and totalamount

                    string Scheme = "";
                    string GroupName = "";
                    if (dtTransMain.Rows.Count > 0 && dtTransDetail.Rows.Count > 0 && lstbookDTLInfo != null && lstbookDTLInfo.Count > 0)
                    {
                        bookHDRInfo = GetSingleBK_TRANSMAIN(TransID, Convert.ToByte(dtTransMain.Rows[0]["TransType"]), dtTransMain.Rows[0]["AgentID"].ToString(), dtTransMain.Rows[0]["AgentCatgID"].ToString(), Convert.ToDateTime(dtTransMain.Rows[0]["BookingDate"]));
                        bookHDRInfo.Currency = currencyCode;
                        bookHDRInfo.CurrencyPaid = currencyCode;
                        //bookHDRInfo.ExchangeRate = exchangeRate;

                        //if (change == true) bookHDRInfo.STDDate = stdDate;

                        #region "Scheme"
                        GeneralControl objGeneral = new GeneralControl();
                        GroupName = objGeneral.getOPTGroupByCarrierCode(lstbookDTLInfo[0].CarrierCode);

                        PaymentControl objPayment = new PaymentControl();
                        Scheme = objPayment.GetScheme(bookHDRInfo.STDDate, bookHDRInfo.BookingDate, GroupName, TransID);

                        bookHDRInfo.PayScheme = Scheme;

                        PaymentInfo paymentInfo = new PaymentInfo();
                        paymentInfo = objPayment.GetPaymentScheme(Scheme, GroupName, TransID);

                        if (paymentInfo.Code_1 == "DOB")
                        {
                            bookHDRInfo.PaymentDateEx1 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_1);
                            //remark by ketee, 20160222
                            //bookHDRInfo.ExpiryDate = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_1);
                        }
                        else if (paymentInfo.Code_1 == "STD")
                        {
                            bookHDRInfo.PaymentDateEx1 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_1);
                            //remark by ketee, 20160222
                            //bookHDRInfo.ExpiryDate = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_1);
                        }
                        if (paymentInfo.Code_2 == "DOB")
                        {
                            bookHDRInfo.PaymentDateEx2 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_2);
                        }
                        else if (paymentInfo.Code_2 == "STD")
                        {
                            bookHDRInfo.PaymentDateEx2 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_2);
                        }
                        if (paymentInfo.Code_3 == "DOB")
                        {
                            bookHDRInfo.PaymentDateEx3 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_3);
                        }
                        else if (paymentInfo.Code_3 == "STD")
                        {
                            bookHDRInfo.PaymentDateEx3 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_3);
                        }
                        #endregion

                        bookHDRInfo.CurReminderDate = bookHDRInfo.ExpiryDate.Date.AddDays(-5);
                    }

                    if (dtTransMain.Rows.Count > 0)
                    {
                        AssignJourneyTransMain(ref bookHDRInfo, TransID, dtTransMain.Rows[0]["AgentID"].ToString(), dtTransMain.Rows[0]["AgentCatgID"].ToString(), Convert.ToByte(dtTransMain.Rows[0]["TransType"]), Convert.ToDateTime(dtTransMain.Rows[0]["BookingDate"]), TransStatus, AgentName, 2, totalPaid, "", "", totalPax, totalTransAmount, totalTransTotalFee, totalTransTotalTax, totalTransTotalPaxFee, totalTransTotalOth, totalTransTotalSSR, totalTransTotalSeat, totalTransTotalNameChange, totalTransTotalInfant, totalTransTotalDisc, totalTransTotalPromoDisc, totalTransTotalProcess, totalTransSubTotal, totalAmountGoing, totalAmountReturn);
                        bookHDRInfo.PaymentAmtEx1 = payDueAmount1;
                        bookHDRInfo.PaymentAmtEx2 = payDueAmount2;
                        bookHDRInfo.PaymentAmtEx3 = payDueAmount3;
                        //added by ketee, update latest transstatus from Navitaire, 20170410
                        bookHDRInfo.TransStatus = TransStatus;

                        UpdatePassengerDetails(TransID, AgentName, AgentID, true);
                    }

                    //if (bookHDRInfo != null && lstbookDTLInfo != null && listBookTransTenderInfo != null)
                    if (bookHDRInfo != null)
                    {
                        List<BookingTransactionDetail> ExpiredPNRs = new List<BookingTransactionDetail>();
                        if (UpdateDatabaseDetails(bookHDRInfo, lstbookDTLInfo, listBookTransTenderInfo, ABS.Logic.GroupBooking.Booking.BookingControl.EnumSaveType.Update, ref ExpiredPNRs) == false)
                        {
                            return false; // transaction failed
                        }
                        else
                        {

                            return true;
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        //added by ketee, verify un-confirmed dbooking and retrive booking PNR from booking tender or booking details and update header status to pending payment
        public List<BookingTransactionMain> GetUnConfirmedTransaction()
        {
            BookingTransactionMain objBookingTransactionMain;
            List<BookingTransactionMain> objListBookingTransMain = new List<BookingTransactionMain>();
            DataTable dt = null;
            string strSQL = string.Empty;
            string strRef = string.Empty;
            DateTime dateValue;
            try
            {
                strSQL = "SELECT BK_TRANSDTL.RecordLocator, BK_TRANSMAIN.ExpiryDate, BK_TRANSMAIN.STDDate, BK_TRANSMAIN.TransID, BK_TRANSMAIN.AgentID, " +
                        " BK_TRANSMAIN.BookingDate, BK_TRANSMAIN.TransTotalAmt, BK_TRANSMAIN.CollectedAmt, BK_TRANSMAIN.TransStatus, BK_TRANSMAIN.SyncLastUpd, " +
                        " CASE WHEN BK_TRANSMAIN.Transstatus = '0' THEN 'Pending' WHEN BK_TRANSMAIN.Transstatus = '1' THEN 'Pending Payment' WHEN BK_TRANSMAIN.Transstatus " +
                        " = '2' THEN 'Pending Passenger Upload' WHEN BK_TRANSMAIN.Transstatus = '3' THEN 'Reconfirmed' WHEN BK_TRANSMAIN.Transstatus IN ('4', '6', '7') " +
                        " THEN 'Cancel' END AS 'Status' " +
                        " FROM BK_TRANSDTL INNER JOIN " +
                        " BK_TRANSMAIN ON BK_TRANSDTL.TransID = BK_TRANSMAIN.TransID " +
                        " WHERE(LEN(BK_TRANSDTL.RecordLocator) >= 6) AND(BK_TRANSMAIN.TransStatus = 0) AND(BK_TRANSMAIN.SyncCreate >=  DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0)) " +
                        " AND BK_TRANSMAIN.IsOverride=1 GROUP BY BK_TRANSDTL.RecordLocator, BK_TRANSMAIN.ExpiryDate, BK_TRANSMAIN.STDDate, BK_TRANSMAIN.TransID, BK_TRANSMAIN.AgentID, " +
                        " BK_TRANSMAIN.BookingDate, BK_TRANSMAIN.TransTotalAmt, BK_TRANSMAIN.CollectedAmt, BK_TRANSMAIN.TransStatus, BK_TRANSMAIN.SyncLastUpd ";

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBookingTransactionMain = new BookingTransactionMain();
                        objBookingTransactionMain.TransID = (string)drRow["TransID"];
                        objBookingTransactionMain.AgentID = (string)drRow["AgentID"];
                        objBookingTransactionMain.Status = drRow["Status"].ToString();
                        objBookingTransactionMain.BookingDate = (DateTime)drRow["BookingDate"];
                        if (DateTime.TryParse(drRow["ExpiryDate"].ToString(), out dateValue)) objBookingTransactionMain.ExpiryDate = (DateTime)drRow["ExpiryDate"];
                        if (DateTime.TryParse(drRow["STDDate"].ToString(), out dateValue)) objBookingTransactionMain.STDDate = (DateTime)drRow["STDDate"];
                        //objBookingTransactionMain.AgentName = drRow["FullName"].ToString();
                        objBookingTransactionMain.DueAmt = (decimal)drRow["TransTotalAmt"] - (decimal)drRow["CollectedAmt"];
                        objBookingTransactionMain.CollectedAmt = (decimal)drRow["CollectedAmt"];
                        objBookingTransactionMain.TransTotalAmt = (decimal)drRow["TransTotalAmt"];
                        objBookingTransactionMain.TransStatus = Convert.ToByte(drRow["TransStatus"]);
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBookingTransactionMain.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];

                        //objBookingTransactionMain.RecordLocator = drRow["RecordLocator"].ToString();

                        objListBookingTransMain.Add(objBookingTransactionMain);
                    }
                    return objListBookingTransMain;
                }
                else
                {
                    return null;
                    //throw new ApplicationException("BK_TRANSMAIN does not exist.");
                }
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return null;
            }
            finally
            {

            }
        }


        public Boolean UpdateAllBookingJourneyDetailsMoveFlight(ListTransaction TransactionInfo, string AgentName, string AgentID, Boolean VerifyDetails = false)
        {
            try
            {
                Navitaire.APIBooking ApiBook = new Navitaire.APIBooking("");
                Navitaire.BookingManager.GetBookingResponse Response = new Navitaire.BookingManager.GetBookingResponse();

                string TransID = TransactionInfo.TransID;
                string PNR = "";
                string currencyCode = "";
                decimal exchangeRate = 1;
                string bookingStatus = "";
                //added by ketee
                string checkBookingStatus = "";
                DateTime expiredDate = DateTime.Now.AddDays(1);
                DateTime stdDate = DateTime.Now;
                bool change = false;

                Decimal totalPaid = 0;
                int totalPax = 0;
                decimal totalTransAmountAll = 0;
                decimal totalTransAmount = 0;
                decimal totalAmountGoing = 0;
                decimal totalAmountReturn = 0;
                decimal totalTransSubTotal = 0;
                decimal totalTransTotalFee = 0;
                decimal totalTransTotalTax = 0;
                decimal totalTransTotalPaxFee = 0;
                decimal totalTransTotalOth = 0;
                decimal totalTransTotalProcess = 0;
                decimal totalTransTotalSSR = 0;
                decimal totalTransTotalSeat = 0;
                decimal totalTransTotalNameChange = 0;
                decimal totalTransTotalInfant = 0;
                decimal totalTransTotalDisc = 0;
                decimal totalTransTotalPromoDisc = 0;

                BookingContainer BookingContainers = new BookingContainer(); //for booking details
                List<BookingJourneyContainer> listBookingJourneyContainers = new List<BookingJourneyContainer>(); //for journey list
                List<PaymentContainer> listPaymentContainers = new List<PaymentContainer>(); //for payment list

                List<BookingTransactionDetail> listBookingJourney = new List<BookingTransactionDetail>();
                List<BookingTransTender> listBookTransTenderInfo = new List<BookingTransTender>();
                BookingTransactionDetail lstBooking = new BookingTransactionDetail();

                BookingTransactionDetail bookDTLInfo = new BookingTransactionDetail();
                BookingTransactionMain bookHDRInfo = new BookingTransactionMain();
                BookingTransTender bookTransTenderInfo = new BookingTransTender();

                LoadData(TransID); //grab transmain & transdtlcombinePNR

                if (HttpContext.Current.Session["TransMain"] != null && HttpContext.Current.Session["TransDetail"] != null)
                {
                    DataTable dtTransMain = this.dtTransMain();
                    if (HttpContext.Current.Session["TransMain"] != null)
                        dtTransMain = (DataTable)HttpContext.Current.Session["TransMain"];//insert transmain into datatable

                    DataTable dtTransDetail = this.dtTransDetail();
                    if (HttpContext.Current.Session["TransDetail"] != null)
                        dtTransDetail = (DataTable)HttpContext.Current.Session["TransDetail"];//insert transdtlcombinePNR into datatable

                    List<BookingTransactionDetail> listBookingDetail = new List<BookingTransactionDetail>();
                    //listBookingDetail = GetAllBK_TRANSDTLFilterAll(TransID, 0);//grab distinct PNR
                    listBookingDetail = GetAllBK_TRANSDTLFilterAll(TransID);//grab distinct PNR

                    List<BookingTransTender> listTransTender = new List<BookingTransTender>();
                    listTransTender = GetAllBK_TRANSTENDERFilter(TransID);//grab tender list

                    List<BookingTransactionDetail> lstbookDTLInfo = new List<BookingTransactionDetail>();
                    lstbookDTLInfo = new List<BookingTransactionDetail>();

                    int rowBookingJourneySeqNo = 1;
                    int cnt = 0;
                    int z = 0;

                    for (int i = 0; i < dtTransDetail.Rows.Count; i++)
                    {
                        PNR = dtTransDetail.Rows[i]["RecordLocator"].ToString();
                        if (PNR.Trim().Length < 6)//will not continue if PNR is not valid
                        {
                            rowBookingJourneySeqNo += Convert.ToInt16(dtTransDetail.Rows[i]["CntRec"].ToString());
                            continue;
                        }

                        //log.Info(this,"Entering GetBookingJourneyDetailsByPNR - PNR : " + PNR);
                        if (RetrieveBookingDetailsByPNR(ApiBook, ref Response, PNR, TransID)) //send apibook and response object
                        {
                            //log.Info(this,"End Retrieve GetBookingJourneyDetailsByPNR - succeed - PNR : " + PNR);

                            //check to exit if last synchronize date > Navitaire modified date 
                            //if (Convert.ToDateTime(dtTransMain.Rows[0]["SyncLastUpd"]) > Response.Booking.BookingInfo.ModifiedDate)
                            //{
                            //    return true;
                            //}


                            #region "Booking"
                            string bookingRecordLocator = "";
                            if (HttpContext.Current.Session["BookingContainers"] != null) //grabbing currencyCode, rate, status, expirydate
                            {
                                BookingContainers = (BookingContainer)HttpContext.Current.Session["BookingContainers"];
                                currencyCode = BookingContainers.CurrencyCode;
                                //exchangeRate = BookingContainers.ExchangeRate;
                                bookingStatus = BookingContainers.BookingStatus;
                                expiredDate = BookingContainers.ExpiredDate;
                                bookingRecordLocator = BookingContainers.RecordLocator;
                            }
                            #endregion

                            //Remark by ketee, 20160209
                            if (bookingStatus.ToLower() != "confirmed") //if journey is not confirmed, no need to change details and payment, just change to transvoid=1
                            {
                                List<BookingTransactionDetail> ListJourney = new List<BookingTransactionDetail>();
                                ListJourney = AssignBK_TRANSDTL(PNR, TransID, ref listBookingJourney, ref rowBookingJourneySeqNo, 1, 0);
                                if (ListJourney != null) lstbookDTLInfo.AddRange(ListJourney);
                                if (checkBookingStatus == "")
                                {
                                    checkBookingStatus = bookingStatus;
                                }
                                else
                                {
                                    if (checkBookingStatus != bookingStatus)
                                    {
                                        checkBookingStatus = bookingStatus;
                                    }
                                }
                                continue;
                            }

                            #region "Journey"
                            if (HttpContext.Current.Session["BookingJourneyContainers"] != null) //grabbing journey details
                            {
                                listBookingJourneyContainers = (List<BookingJourneyContainer>)HttpContext.Current.Session["BookingJourneyContainers"];
                                foreach (BookingJourneyContainer rowBookingJourney in listBookingJourneyContainers)
                                {
                                    //insert bookingdetail into listBookingJourney
                                    if (rowBookingJourneySeqNo % 2 == 1) { stdDate = rowBookingJourney.STD; change = true; }

                                    //added by diana 20140516, differentiate oneWay and ReturnWay
                                    int cnts = 0;
                                    foreach (BookingTransactionDetail bkDetail in listBookingDetail)
                                    {
                                        if (bkDetail.RecordLocator == bookingRecordLocator)
                                        {
                                            cnts += 1;
                                        }
                                    }

                                    int iIndex = -1;
                                    if (cnts >= 2)
                                        iIndex = listBookingDetail.FindIndex(p => p.SeqNo % 2 == rowBookingJourneySeqNo % 2 && p.RecordLocator == bookingRecordLocator);
                                    else
                                        iIndex = listBookingDetail.FindIndex(p => p.RecordLocator == bookingRecordLocator);

                                    //int iIndex = listBookingDetail.FindIndex(p => p.SeqNo % 2 == rowBookingJourneySeqNo % 2 && p.RecordLocator == bookingRecordLocator);
                                    if (iIndex >= 0)
                                    {
                                        BookingTransactionDetail bookingJourney = listBookingDetail[iIndex];
                                        AssignBookingJourneyList(TransID, Convert.ToByte(bookingJourney.SeqNo), rowBookingJourney, PNR, "update", ref listBookingJourney);
                                    }
                                    else
                                    {
                                        AssignBookingJourneyList(TransID, Convert.ToByte(rowBookingJourneySeqNo), rowBookingJourney, PNR, "insert", ref listBookingJourney);
                                    }
                                    rowBookingJourneySeqNo++;
                                }

                                //recalculate pax details and insert into dtTransDetail
                                if (listBookingJourney.Count > 0)
                                {
                                    dtTransDetail.Rows[i]["PaxAdult"] = 0;
                                    dtTransDetail.Rows[i]["PaxChild"] = 0;
                                    dtTransDetail.Rows[i]["LineTotal"] = 0;
                                    dtTransDetail.Rows[i]["LineFee"] = 0;
                                    dtTransDetail.Rows[i]["LineOth"] = 0;
                                    dtTransDetail.Rows[i]["LineProcess"] = 0;
                                    dtTransDetail.Rows[i]["LineSSR"] = 0;
                                    dtTransDetail.Rows[i]["LineSeat"] = 0;
                                    dtTransDetail.Rows[i]["LineNameChange"] = 0;
                                    dtTransDetail.Rows[i]["LineInfant"] = 0;
                                    dtTransDetail.Rows[i]["LineDisc"] = 0;
                                    dtTransDetail.Rows[i]["LinePromoDisc"] = 0;
                                    dtTransDetail.Rows[i]["LineTax"] = 0;
                                    dtTransDetail.Rows[i]["LinePaxFee"] = 0;
                                    for (z = cnt; z < listBookingJourney.Count; z++)
                                    {
                                        BookingTransactionDetail pBookingTransDetail = new BookingTransactionDetail();
                                        pBookingTransDetail = listBookingJourney[z];

                                        dtTransDetail.Rows[i]["PaxAdult"] = Convert.ToInt16(dtTransDetail.Rows[i]["PaxAdult"].ToString()) + Convert.ToInt16(pBookingTransDetail.PaxAdult.ToString());
                                        dtTransDetail.Rows[i]["PaxChild"] = Convert.ToInt16(dtTransDetail.Rows[i]["PaxChild"].ToString()) + Convert.ToInt16(pBookingTransDetail.PaxChild.ToString());
                                        dtTransDetail.Rows[i]["LineTotal"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineTotal.ToString());
                                        dtTransDetail.Rows[i]["LineFee"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineFee"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineFee.ToString());
                                        dtTransDetail.Rows[i]["LineOth"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineOth"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineOth.ToString());
                                        dtTransDetail.Rows[i]["LineProcess"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineProcess"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineProcess.ToString());
                                        dtTransDetail.Rows[i]["LineSSR"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineSSR"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineSSR.ToString());
                                        dtTransDetail.Rows[i]["LineSeat"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineSeat"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineSeat.ToString());
                                        dtTransDetail.Rows[i]["LineNameChange"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineNameChange"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineNameChange.ToString());
                                        dtTransDetail.Rows[i]["LineInfant"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineInfant"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineInfant.ToString());
                                        dtTransDetail.Rows[i]["LineDisc"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineDisc"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineDisc.ToString());
                                        dtTransDetail.Rows[i]["LinePromoDisc"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LinePromoDisc"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LinePromoDisc.ToString());
                                        dtTransDetail.Rows[i]["LineTax"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LineTax"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LineTax.ToString());
                                        dtTransDetail.Rows[i]["LinePaxFee"] = Convert.ToDecimal(dtTransDetail.Rows[i]["LinePaxFee"].ToString()) + Convert.ToDecimal(pBookingTransDetail.LinePaxFee.ToString());
                                    }
                                    cnt = z;
                                }
                                //end recalculate pax details and insert into dtTransDetail

                            }
                            else
                            {
                                return false;
                            }
                            #endregion

                            #region "Payment"
                            if (VerifyDetails)
                            {
                                totalPax += Convert.ToInt16(dtTransDetail.Rows[i]["PaxAdult"].ToString()) + Convert.ToInt16(dtTransDetail.Rows[i]["PaxChild"].ToString());
                                totalTransAmount += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());
                                totalTransTotalFee += Convert.ToDecimal(dtTransDetail.Rows[i]["LineFee"].ToString());
                                totalTransTotalOth += Convert.ToDecimal(dtTransDetail.Rows[i]["LineOth"].ToString());
                                totalTransTotalProcess += Convert.ToDecimal(dtTransDetail.Rows[i]["LineProcess"].ToString());
                                totalTransTotalSSR += Convert.ToDecimal(dtTransDetail.Rows[i]["LineSSR"].ToString());
                                totalTransTotalSeat += Convert.ToDecimal(dtTransDetail.Rows[i]["LineSeat"].ToString());
                                totalTransTotalNameChange += Convert.ToDecimal(dtTransDetail.Rows[i]["LineNameChange"].ToString());
                                totalTransTotalInfant += Convert.ToDecimal(dtTransDetail.Rows[i]["LineInfant"].ToString());
                                totalTransTotalDisc += Convert.ToDecimal(dtTransDetail.Rows[i]["LineDisc"].ToString());
                                totalTransTotalPromoDisc += Convert.ToDecimal(dtTransDetail.Rows[i]["LinePromoDisc"].ToString());
                                totalTransTotalTax += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTax"].ToString());
                                totalTransTotalPaxFee += Convert.ToDecimal(dtTransDetail.Rows[i]["LinePaxFee"].ToString());
                                totalTransSubTotal += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());
                            }
                            totalTransAmountAll += Convert.ToDecimal(dtTransDetail.Rows[i]["LineTotal"].ToString());
                            if (HttpContext.Current.Session["PaymentContainers"] != null) //grabbing payment details
                            {
                                listPaymentContainers = (List<PaymentContainer>)HttpContext.Current.Session["PaymentContainers"];
                                DataTable dtKeyField = new DataTable();
                                dtKeyField = GetKeyFieldDetailByPNRMoveFlight(PNR, TransID);
                                decimal paymentAmount = 0, feeAmount = 0, totPaymentAmount = 0, leftPayDetail = 0, totalPNRAmount = 0, currencyRate = 0;

                                foreach (PaymentContainer rowPayment in listPaymentContainers)
                                {
                                    int paymentStatus = 0;
                                    string authorizationcode = "";
                                    string accountNumber = "";
                                    string merchantID = "";
                                    long accountNumberID = 0;
                                    byte transVoid = 1;
                                    paymentAmount = rowPayment.CollectedAmount;
                                    paymentStatus = rowPayment.PaymentStatus;
                                    authorizationcode = rowPayment.AuthorizationCode;
                                    accountNumber = rowPayment.AccountNumber;
                                    merchantID = rowPayment.MerchantID;
                                    accountNumberID = rowPayment.AccountNumberID;
                                    //currencyRate = rowPayment.CurrencyRate;

                                    //totalPaid += paymentAmount;
                                    if (rowPayment.PaymentStatus == 3)
                                    {
                                        transVoid = 0;
                                        totalPaid += paymentAmount;
                                        totalPNRAmount += paymentAmount;
                                    }

                                    //added by ketee, check if tender list is not null, 20170308
                                    int iIndex = -1;
                                    if (listTransTender != null && listTransTender.Count > 0)
                                    {
                                        iIndex = listTransTender.FindIndex(p => p.SeqNo == Convert.ToInt32(rowPayment.PaymentNumber) && p.RecordLocator == rowPayment.RecordLocator);
                                    }

                                    if (iIndex >= 0)
                                    {
                                        BookingTransTender bookingTender = listTransTender[iIndex];
                                        AssignPaymentList(TransID, Convert.ToByte(bookingTender.SeqNo), paymentAmount, feeAmount, totPaymentAmount, rowPayment.CurrencyCode, rowPayment.CurrencyCode, bookingTender.TenderID, rowPayment.PaymentText, rowPayment.AccountNumber, rowPayment.AuthorizationCode, rowPayment.MerchantID, bookingTender.CreateBy, PNR, transVoid, "update", rowPayment.PaymentDate, ref listBookTransTenderInfo, bookingTender.ExchgRate);
                                        exchangeRate = listTransTender[iIndex].ExchgRate;
                                    }
                                    else
                                    {
                                        AssignPaymentList(TransID, Convert.ToByte(rowPayment.PaymentNumber), paymentAmount, feeAmount, totPaymentAmount, rowPayment.CurrencyCode, rowPayment.CurrencyCode, getTenderIDbyDesc(rowPayment.PaymentMethodCode), rowPayment.PaymentText, rowPayment.AccountNumber, rowPayment.AuthorizationCode, rowPayment.MerchantID, AgentName, PNR, transVoid, "insert", rowPayment.PaymentDate, ref listBookTransTenderInfo, exchangeRate);
                                    }
                                }


                                //need to change/combine to listBookingJourney
                                int goingreturn = 0;
                                string strOrigin = "";
                                //Added by ketee, wait for 1 sec 20160226
                                Thread.Sleep(1000);
                                for (int ctrDetail = 0; ctrDetail < dtKeyField.Rows.Count; ctrDetail++)
                                {

                                    string RecordLocator = dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString();
                                    //TransID = dtKeyField.Rows[ctrDetail]["TransID"].ToString();
                                    byte SeqNo = Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]);

                                    bookDTLInfo = new BookingTransactionDetail();
                                    bookDTLInfo = GetSingleJourneyBK_TRANSDTLMoveFlight(listBookingJourney, RecordLocator, TransID, SeqNo);

                                    if (totalPNRAmount > bookDTLInfo.LineTotal)
                                    {
                                        leftPayDetail = totalPNRAmount - bookDTLInfo.LineTotal;
                                        totalPNRAmount = bookDTLInfo.LineTotal;
                                        AssignJourneyTransDetail(listBookingJourney, ref lstbookDTLInfo, dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString(), dtKeyField.Rows[ctrDetail]["TransID"].ToString(), Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]), AgentName, totalPNRAmount, PNR);
                                        //totalPaid += paymentAmount;
                                        totalPNRAmount = leftPayDetail;
                                    }
                                    else
                                    {
                                        AssignJourneyTransDetail(listBookingJourney, ref lstbookDTLInfo, dtKeyField.Rows[ctrDetail]["RecordLocator"].ToString(), dtKeyField.Rows[ctrDetail]["TransID"].ToString(), Convert.ToByte(dtKeyField.Rows[ctrDetail]["SeqNo"]), AgentName, totalPNRAmount, PNR);
                                        //totalPaid += paymentAmount;
                                        totalPNRAmount = 0;
                                    }

                                    //total up total going and total return
                                    //start added by Agus
                                    if (strOrigin == "") strOrigin = bookDTLInfo.Origin;
                                    if (bookDTLInfo.Origin == strOrigin) goingreturn = 0;
                                    else goingreturn = 1;
                                    //end added by Agus
                                    if (VerifyDetails)
                                    {
                                        if (goingreturn == 0)
                                        {
                                            totalAmountGoing += bookDTLInfo.LineTotal;
                                        }
                                        else
                                        {
                                            totalAmountReturn += bookDTLInfo.LineTotal;
                                        }
                                    }

                                }



                            }
                            else
                            {
                                return false;
                            }
                            #endregion

                        }
                        else //if no response, no need to change details, just increase attemptcount in details
                        {
                            List<BookingTransactionDetail> ListJourney = new List<BookingTransactionDetail>();
                            ListJourney = AssignBK_TRANSDTL(PNR, TransID, ref listBookingJourney, ref rowBookingJourneySeqNo, 0, 1);
                            if (ListJourney != null) lstbookDTLInfo.AddRange(ListJourney);
                            //rowBookingJourneySeqNo += Convert.ToInt16(dtTransDetail.Rows[i]["CntRec"].ToString()); //if response is null, continue seqno
                            //log.Info(this,"End Retrieve GetBookingJourneyDetailsByPNR - no journey - PNR : " + PNR);
                        }
                    }

                    //set transtatus by comparing totalcollected and totalamount
                    byte TransStatus = 1;
                    //Added by ketee, Set as status closed, 20160209
                    if (checkBookingStatus.ToLower() == "closed")
                    {
                        //Set as Status Closed
                        TransStatus = 8;
                    }
                    if (totalTransAmount > 0 && totalPaid >= totalTransAmount)
                    {
                        TransStatus = 2;
                    }
                    else
                    {
                        if (totalTransAmount == 0 && totalTransAmountAll > 0 && totalPaid >= totalTransAmountAll)
                        {
                            TransStatus = 2;
                        }
                    }
                    //end set transtatus by comparing totalcollected and totalamount

                    string Scheme = "";
                    string GroupName = "";
                    if (dtTransMain.Rows.Count > 0 && dtTransDetail.Rows.Count > 0 && lstbookDTLInfo != null && lstbookDTLInfo.Count > 0)
                    {
                        bookHDRInfo = GetSingleBK_TRANSMAIN(TransID, Convert.ToByte(dtTransMain.Rows[0]["TransType"]), dtTransMain.Rows[0]["AgentID"].ToString(), dtTransMain.Rows[0]["AgentCatgID"].ToString(), Convert.ToDateTime(dtTransMain.Rows[0]["BookingDate"]));
                        bookHDRInfo.Currency = currencyCode;
                        bookHDRInfo.CurrencyPaid = currencyCode;
                        //bookHDRInfo.ExchangeRate = exchangeRate;

                        //if (change == true) bookHDRInfo.STDDate = stdDate;

                        #region "Scheme"
                        GeneralControl objGeneral = new GeneralControl();
                        GroupName = objGeneral.getOPTGroupByCarrierCode(lstbookDTLInfo[0].CarrierCode);

                        PaymentControl objPayment = new PaymentControl();
                        Scheme = objPayment.GetScheme(bookHDRInfo.STDDate, bookHDRInfo.BookingDate, GroupName, TransID);

                        bookHDRInfo.PayScheme = Scheme;

                        PaymentInfo paymentInfo = new PaymentInfo();
                        paymentInfo = objPayment.GetPaymentScheme(Scheme, GroupName, TransID);

                        if (paymentInfo.Code_1 == "DOB")
                        {
                            bookHDRInfo.PaymentDateEx1 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_1);
                            //remark by ketee, 20160222
                            //bookHDRInfo.ExpiryDate = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_1);
                        }
                        else if (paymentInfo.Code_1 == "STD")
                        {
                            bookHDRInfo.PaymentDateEx1 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_1);
                            //remark by ketee, 20160222
                            //bookHDRInfo.ExpiryDate = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_1);
                        }
                        if (paymentInfo.Code_2 == "DOB")
                        {
                            bookHDRInfo.PaymentDateEx2 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_2);
                        }
                        else if (paymentInfo.Code_2 == "STD")
                        {
                            bookHDRInfo.PaymentDateEx2 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_2);
                        }
                        if (paymentInfo.Code_3 == "DOB")
                        {
                            bookHDRInfo.PaymentDateEx3 = bookHDRInfo.BookingDate.AddHours(paymentInfo.Attempt_3);
                        }
                        else if (paymentInfo.Code_3 == "STD")
                        {
                            bookHDRInfo.PaymentDateEx3 = bookHDRInfo.STDDate.AddHours(-paymentInfo.Attempt_3);
                        }
                        #endregion

                        bookHDRInfo.CurReminderDate = bookHDRInfo.ExpiryDate.Date.AddDays(-5);
                    }

                    if (dtTransMain.Rows.Count > 0)
                    {
                        AssignJourneyTransMain(ref bookHDRInfo, TransID, dtTransMain.Rows[0]["AgentID"].ToString(), dtTransMain.Rows[0]["AgentCatgID"].ToString(), Convert.ToByte(dtTransMain.Rows[0]["TransType"]), Convert.ToDateTime(dtTransMain.Rows[0]["BookingDate"]), TransStatus, AgentName, 2, totalPaid, "", "", totalPax, totalTransAmount, totalTransTotalFee, totalTransTotalTax, totalTransTotalPaxFee, totalTransTotalOth, totalTransTotalSSR, totalTransTotalSeat, totalTransTotalNameChange, totalTransTotalInfant, totalTransTotalDisc, totalTransTotalPromoDisc, totalTransTotalProcess, totalTransSubTotal, totalAmountGoing, totalAmountReturn);
                        UpdatePassengerDetails(TransID, AgentName, AgentID, true);
                    }

                    //if (bookHDRInfo != null && lstbookDTLInfo != null && listBookTransTenderInfo != null)
                    if (bookHDRInfo != null)
                    {
                        List<BookingTransactionDetail> ExpiredPNRs = new List<BookingTransactionDetail>();
                        if (UpdateDatabaseDetails(bookHDRInfo, lstbookDTLInfo, listBookTransTenderInfo, ABS.Logic.GroupBooking.Booking.BookingControl.EnumSaveType.Update, ref ExpiredPNRs) == false)
                        {
                            return false; // transaction failed
                        }
                        else
                        {

                            return true;
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }
        public void AssignJourneyTransMain(ref BookingTransactionMain bookHDRInfo, string transID, string agentID, string agentCatgID, byte TransType, DateTime bookingDate, byte transStatus, string agentName, byte reminderType, decimal collectAmt, string currency, string currencyPaid, int totalPax = 0, decimal totalTransAmount = 0, decimal totalTransTotalInsure = 0, decimal totalTransFee = 0, decimal totalTransTax = 0, decimal totalTransPaxFee = 0, decimal totalTransOth = 0, decimal totalTransSSR = 0, decimal totalTransSeat = 0, decimal totalTransNameChange = 0, decimal totalTransInfant = 0, decimal totalTransDisc = 0, decimal totalTransPromoDisc = 0, decimal totalTransProcess = 0, decimal totalTransSub = 0, decimal totalAmountGoing = 0, decimal totalAmountReturn = 0)
        {
            //bookHDRInfo = GetSingleBK_TRANSMAIN(transID, TransType, agentID, agentCatgID, bookingDate);
            if (totalPax > 0)
                bookHDRInfo.TransTotalPAX = totalPax;
            if (totalTransAmount > 0)
                bookHDRInfo.TransTotalAmt = totalTransAmount;
            if (totalTransFee > 0)
                bookHDRInfo.TransTotalFee = totalTransFee;
            if (totalTransTax > 0)
                bookHDRInfo.TransTotalTax = totalTransTax;
            if (totalTransPaxFee > 0)
                bookHDRInfo.TransTotalPaxFee = totalTransPaxFee;
            if (totalTransOth > 0)
                bookHDRInfo.TransTotalOth = totalTransOth;
            if (totalTransSSR > 0)
                bookHDRInfo.TransTotalSSR = totalTransSSR;
            if (totalTransSeat > 0)
                bookHDRInfo.TransTotalSeat = totalTransSeat;
            if (totalTransNameChange > 0)
                bookHDRInfo.TransTotalNameChange = totalTransNameChange;
            if (totalTransProcess > 0)
                bookHDRInfo.TransTotalProcess = totalTransProcess;
            if (totalTransInfant > 0)
                bookHDRInfo.TransTotalInfant = totalTransInfant;
            if (totalTransTotalInsure > 0)
                bookHDRInfo.TransTotalInsure = totalTransTotalInsure;
            if (totalTransDisc > 0)
                bookHDRInfo.TransTotalDisc = totalTransDisc;
            if (totalTransPromoDisc > 0)
                bookHDRInfo.TransTotalPromoDisc = totalTransPromoDisc;
            if (totalTransSub > 0)
                bookHDRInfo.TransSubTotal = totalTransSub;
            if (totalTransAmount > 0 && totalPax > 0)
                bookHDRInfo.TotalAmtAVG = Convert.ToDecimal((Math.Round(totalTransAmount / totalPax, 2)).ToString());
            if (totalAmountGoing > 0)
                bookHDRInfo.TotalAmtGoing = totalAmountGoing;
            if (totalAmountReturn > 0)
                bookHDRInfo.TotalAmtReturn = totalAmountReturn;
            if (collectAmt > 0)
                bookHDRInfo.CollectedAmt = collectAmt;

            //previous code
            //if (bookHDRInfo.TransStatus != 4 && bookHDRInfo.TransStatus != 3)
            //{
            //    bookHDRInfo.TransStatus = transStatus;
            //}

            //amended by diana 20140108 - if status <= 1, then change status, else change needpaymentstatus
            if (bookHDRInfo.TransStatus <= 1) //if (bookHDRInfo.TransStatus <= 2)
            {
                bookHDRInfo.TransStatus = transStatus;
                if (transStatus >= 2 && transStatus <= 3) //added by diana 20140109 - add condition to change needpaymentstatus
                {
                    bookHDRInfo.NeedPaymentStatus = 0;
                }
                else
                {
                    bookHDRInfo.NeedPaymentStatus = 1;
                }
            }
            else if (transStatus >= 2 && transStatus <= 3) //amended by ketee, check bookHDRInfo.TransStatus
            //else if (bookHDRInfo.TransStatus >= 2 && bookHDRInfo.TransStatus <= 3)
            {
                bookHDRInfo.NeedPaymentStatus = 0;
                if (bookHDRInfo.TransStatus < transStatus)
                {
                    bookHDRInfo.TransStatus = transStatus;
                }
            }
            else
            {
                if (bookHDRInfo.TransTotalAmt > bookHDRInfo.CollectedAmt) //amended by diana 20140104 - only if amount > collected
                    bookHDRInfo.NeedPaymentStatus = 1;
                else
                    bookHDRInfo.NeedPaymentStatus = 0;
            }
            bookHDRInfo.SyncLastUpd = DateTime.Now;
            bookHDRInfo.LastSyncBy = agentName;
            bookHDRInfo.ReminderType = reminderType;




            //bookHDRInfo.Currency = currency;
            //bookHDRInfo.CurrencyPaid = currencyPaid;
            //bookHDRInfo.PaymentDate = DateTime.Now;
        }

        public List<BookingTransactionDetail> AssignBK_TRANSDTL(string pRecordLocator, string pTransID, ref List<BookingTransactionDetail> listBookingJourney, ref int rowBookingJourneySeqNo, byte TransVoid = 0, int AttemptCount = 0, int IsLatest = 0)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL = new List<BookingTransactionDetail>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;
            String strFields = string.Empty;
            String strFilter = string.Empty;
            List<string> lstFields = new List<string>();
            try
            {
                lstFields.Add("BK_TRANSDTL.RecordLocator");
                lstFields.Add("BK_TRANSDTL.TransID");
                lstFields.Add("BK_TRANSDTL.SeqNo");
                lstFields.Add("BK_TRANSDTL.CarrierCode");
                lstFields.Add("BK_TRANSDTL.FlightNo");
                lstFields.Add("BK_TRANSDTL.DepartureDate");
                lstFields.Add("BK_TRANSDTL.DepartureDate2");
                lstFields.Add("BK_TRANSDTL.FlightDura");
                lstFields.Add("BK_TRANSDTL.FlightDura2");
                lstFields.Add("BK_TRANSDTL.Origin");
                lstFields.Add("BK_TRANSDTL.Transit");
                lstFields.Add("BK_TRANSDTL.Destination");
                lstFields.Add("BK_TRANSDTL.ArrivalDate");
                lstFields.Add("BK_TRANSDTL.ArrivalDate2");
                lstFields.Add("BK_TRANSDTL.FareClass");
                lstFields.Add("BK_TRANSDTL.FarePerPax");
                lstFields.Add("BK_TRANSDTL.LineTotal");
                lstFields.Add("BK_TRANSDTL.LineTax");
                lstFields.Add("BK_TRANSDTL.LinePaxFee");
                lstFields.Add("BK_TRANSDTL.LineFee");
                lstFields.Add("BK_TRANSDTL.LineOth");
                lstFields.Add("BK_TRANSDTL.LineProcess");
                lstFields.Add("BK_TRANSDTL.LineSSR");
                lstFields.Add("BK_TRANSDTL.LineSeat");
                lstFields.Add("BK_TRANSDTL.LineNameChange");
                lstFields.Add("BK_TRANSDTL.LineInfant");
                lstFields.Add("BK_TRANSDTL.LineInfant");
                lstFields.Add("BK_TRANSDTL.LineDisc");
                lstFields.Add("BK_TRANSDTL.LineInsureFee");
                lstFields.Add("BK_TRANSDTL.IsLatest");
                lstFields.Add("BK_TRANSDTL.AttemptCount");
                lstFields.Add("BK_TRANSDTL.Currency");
                lstFields.Add("BK_TRANSDTL.PaxAdult");
                lstFields.Add("BK_TRANSDTL.PaxChild");
                lstFields.Add("BK_TRANSDTL.TransVoid");
                lstFields.Add("BK_TRANSDTL.rowguid");
                lstFields.Add("BK_TRANSDTL.CreateBy");
                lstFields.Add("BK_TRANSDTL.SyncCreate");
                lstFields.Add("BK_TRANSDTL.SyncLastUpd");
                lstFields.Add("BK_TRANSDTL.LastSyncBy");
                lstFields.Add("BK_TRANSDTL.DetailCollectedAmt");
                lstFields.Add("BK_TRANSDTL.SellKey");
                //added by ketee
                lstFields.Add("BK_TRANSDTL.NextDueDate");
                lstFields.Add("BK_TRANSDTL.NextDueAmount");
                lstFields.Add("BK_TRANSDTL.RemindAttempt");
                lstFields.Add("BK_TRANSDTL.RemindLog");

                lstFields.Add("BK_TRANSDTL.PayDueAmount1");
                lstFields.Add("BK_TRANSDTL.PayDueAmount2");
                lstFields.Add("BK_TRANSDTL.PayDueAmount3");
                lstFields.Add("BK_TRANSDTL.PayDueDate1");
                lstFields.Add("BK_TRANSDTL.PayDueDate2");
                lstFields.Add("BK_TRANSDTL.PayDueDate3");


                strFields = GetSqlFields(lstFields);
                strFilter = "WHERE BK_TRANSDTL.RecordLocator='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pRecordLocator) + "' AND BK_TRANSDTL.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pTransID) + "'";
                strSQL = "SELECT " + strFields + " FROM BK_TRANSDTL " + strFilter;
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true

                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSDTL_Info.SeqNo = (byte)drRow["SeqNo"];
                        objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                        objBK_TRANSDTL_Info.FlightNo = (string)drRow["FlightNo"];
                        if (DateTime.TryParse(drRow["DepartureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepartureDate"];
                        if (DateTime.TryParse(drRow["DepartureDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate2 = (DateTime)drRow["DepartureDate2"];
                        objBK_TRANSDTL_Info.FlightDura = (decimal)drRow["FlightDura"];
                        objBK_TRANSDTL_Info.FlightDura2 = (decimal)drRow["FlightDura2"];
                        objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                        objBK_TRANSDTL_Info.Transit = (string)drRow["Transit"];
                        objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                        if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];
                        if (DateTime.TryParse(drRow["ArrivalDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate2 = (DateTime)drRow["ArrivalDate2"];
                        objBK_TRANSDTL_Info.FareClass = (string)drRow["FareClass"];
                        objBK_TRANSDTL_Info.FarePerPax = (decimal)drRow["FarePerPax"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                        objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["LinePaxFee"];
                        objBK_TRANSDTL_Info.LineInsureFee = (decimal)drRow["LineInsureFee"];
                        objBK_TRANSDTL_Info.LineFee = (decimal)drRow["LineFee"];
                        objBK_TRANSDTL_Info.LineOth = (decimal)drRow["LineOth"];
                        objBK_TRANSDTL_Info.LineProcess = (decimal)drRow["LineProcess"];
                        objBK_TRANSDTL_Info.LineSSR = (decimal)drRow["LineSSR"];
                        objBK_TRANSDTL_Info.LineSeat = (decimal)drRow["LineSeat"];
                        objBK_TRANSDTL_Info.LineNameChange = (decimal)drRow["LineNameChange"];
                        objBK_TRANSDTL_Info.LineInfant = (decimal)drRow["LineInfant"];
                        objBK_TRANSDTL_Info.LineDisc = (decimal)drRow["LineDisc"];
                        objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["LinePromoDisc"];
                        //objBK_TRANSDTL_Info.AttemptCount = (int)drRow["AttemptCount"];
                        objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];

                        if (TransVoid != 0)
                            objBK_TRANSDTL_Info.TransVoid = TransVoid;
                        else
                            objBK_TRANSDTL_Info.TransVoid = (byte)drRow["TransVoid"];

                        if (AttemptCount != 0)
                            objBK_TRANSDTL_Info.AttemptCount = Convert.ToInt16(drRow["AttemptCount"]) + AttemptCount;
                        else
                            objBK_TRANSDTL_Info.AttemptCount = Convert.ToInt16(drRow["AttemptCount"]);

                        objBK_TRANSDTL_Info.IsLatest = Convert.ToInt16(drRow["IsLatest"]) + IsLatest;
                        objBK_TRANSDTL_Info.IsInitVoid = objBK_TRANSDTL_Info.TransVoid;
                        objBK_TRANSDTL_Info.rowguid = (Guid)drRow["rowguid"];
                        objBK_TRANSDTL_Info.CreateBy = (string)drRow["CreateBy"];
                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBK_TRANSDTL_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                        objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];
                        objBK_TRANSDTL_Info.Signature = (string)drRow["SellKey"];
                        //added by ketee
                        objBK_TRANSDTL_Info.NextDueDate = (DateTime)drRow["NextDueDate"];
                        objBK_TRANSDTL_Info.NextDueAmount = (decimal)drRow["NextDueAmount"];
                        objBK_TRANSDTL_Info.RemindAttempt = (int)drRow["RemindAttempt"];
                        objBK_TRANSDTL_Info.RemindLog = (string)drRow["RemindLog"];
                        objBK_TRANSDTL_Info.PayDueAmount1 = (decimal)drRow["PayDueAmount1"];
                        objBK_TRANSDTL_Info.PayDueAmount2 = (decimal)drRow["PayDueAmount2"];
                        objBK_TRANSDTL_Info.PayDueAmount3 = (decimal)drRow["PayDueAmount3"];
                        if (DateTime.TryParse(drRow["PayDueDate1"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate1 = (DateTime)drRow["PayDueDate1"];
                        if (DateTime.TryParse(drRow["PayDueDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate2 = (DateTime)drRow["PayDueDate2"];
                        if (DateTime.TryParse(drRow["PayDueDate3"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate3 = (DateTime)drRow["PayDueDate3"];



                        rowBookingJourneySeqNo += 1;
                        objListBK_TRANSDTL.Add(objBK_TRANSDTL_Info);
                        listBookingJourney.Add(objBK_TRANSDTL_Info);
                    }
                }
                else
                {
                    log.Info(this, "No data in transdetail");
                }
                return objListBK_TRANSDTL;
            }
            catch (Exception ex)
            {
                return null;
                log.Error(this, ex);
            }
        }

        public BookingTransactionDetail GetSingleJourneyBK_TRANSDTL(List<BookingTransactionDetail> ListJourney, string pRecordLocator, string pTransID, byte pSeqNo)
        {
            try
            {
                BookingTransactionDetail objBK_TRANSDTL_Info;
                foreach (BookingTransactionDetail detail in ListJourney)
                {
                    if (pRecordLocator == detail.RecordLocator && pTransID == detail.TransID && pSeqNo == detail.SeqNo)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.RecordLocator = detail.RecordLocator;
                        objBK_TRANSDTL_Info.TransID = detail.TransID;
                        objBK_TRANSDTL_Info.SeqNo = detail.SeqNo;
                        objBK_TRANSDTL_Info.CarrierCode = detail.CarrierCode;
                        objBK_TRANSDTL_Info.FlightNo = detail.FlightNo;
                        objBK_TRANSDTL_Info.DepatureDate = detail.DepatureDate;
                        objBK_TRANSDTL_Info.DepatureDate2 = detail.DepatureDate2;
                        objBK_TRANSDTL_Info.FlightDura = detail.FlightDura;
                        objBK_TRANSDTL_Info.FlightDura2 = detail.FlightDura2;
                        objBK_TRANSDTL_Info.Origin = detail.Origin;
                        objBK_TRANSDTL_Info.Transit = detail.Transit;
                        objBK_TRANSDTL_Info.Destination = detail.Destination;
                        objBK_TRANSDTL_Info.ArrivalDate = detail.ArrivalDate;
                        objBK_TRANSDTL_Info.ArrivalDate2 = detail.ArrivalDate2;
                        objBK_TRANSDTL_Info.FareClass = detail.FareClass;
                        objBK_TRANSDTL_Info.FarePerPax = detail.FarePerPax;
                        objBK_TRANSDTL_Info.LineTotal = detail.LineTotal;
                        objBK_TRANSDTL_Info.LineTax = detail.LineTax;
                        objBK_TRANSDTL_Info.LinePaxFee = detail.LinePaxFee;
                        objBK_TRANSDTL_Info.LineInsureFee = detail.LineInsureFee;
                        objBK_TRANSDTL_Info.LineFee = detail.LineFee;
                        objBK_TRANSDTL_Info.LineOth = detail.LineOth;
                        objBK_TRANSDTL_Info.LineProcess = detail.LineProcess;
                        objBK_TRANSDTL_Info.LineSSR = detail.LineSSR;
                        objBK_TRANSDTL_Info.LineSeat = detail.LineSeat;
                        objBK_TRANSDTL_Info.LineNameChange = detail.LineNameChange;
                        objBK_TRANSDTL_Info.LineInfant = detail.LineInfant;
                        objBK_TRANSDTL_Info.LineDisc = detail.LineDisc;
                        objBK_TRANSDTL_Info.LinePromoDisc = detail.LinePromoDisc;
                        objBK_TRANSDTL_Info.AttemptCount = detail.AttemptCount;
                        objBK_TRANSDTL_Info.Currency = detail.Currency;
                        objBK_TRANSDTL_Info.PaxAdult = detail.PaxAdult;
                        objBK_TRANSDTL_Info.PaxChild = detail.PaxChild;
                        objBK_TRANSDTL_Info.TransVoid = detail.TransVoid;
                        objBK_TRANSDTL_Info.rowguid = detail.rowguid;
                        objBK_TRANSDTL_Info.CreateBy = detail.CreateBy;
                        objBK_TRANSDTL_Info.SyncCreate = detail.SyncCreate;
                        objBK_TRANSDTL_Info.SyncLastUpd = detail.SyncLastUpd;
                        objBK_TRANSDTL_Info.LastSyncBy = detail.LastSyncBy;
                        objBK_TRANSDTL_Info.CollectedAmount = detail.CollectedAmount;
                        objBK_TRANSDTL_Info.Signature = detail.Signature;
                        //added by ketee
                        objBK_TRANSDTL_Info.NextDueDate = detail.NextDueDate;
                        objBK_TRANSDTL_Info.NextDueAmount = detail.NextDueAmount;
                        objBK_TRANSDTL_Info.RemindAttempt = detail.RemindAttempt;
                        objBK_TRANSDTL_Info.RemindLog = detail.RemindLog;
                        objBK_TRANSDTL_Info.PayDueAmount1 = detail.PayDueAmount1;
                        objBK_TRANSDTL_Info.PayDueAmount2 = detail.PayDueAmount2;
                        objBK_TRANSDTL_Info.PayDueAmount3 = detail.PayDueAmount3;

                        objBK_TRANSDTL_Info.IsLatest = detail.IsLatest;
                        return objBK_TRANSDTL_Info;
                        break;
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return null;
            }

        }

        public BookingTransactionDetail GetSingleJourneyBK_TRANSDTLMoveFlight(List<BookingTransactionDetail> ListJourney, string pRecordLocator, string pTransID, byte pSeqNo)
        {
            try
            {
                BookingTransactionDetail objBK_TRANSDTL_Info;
                foreach (BookingTransactionDetail detail in ListJourney)
                {
                    if (pRecordLocator == detail.RecordLocator && pTransID == detail.TransID && pSeqNo == detail.SeqNo)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.RecordLocator = detail.RecordLocator;
                        objBK_TRANSDTL_Info.TransID = detail.TransID;
                        objBK_TRANSDTL_Info.SeqNo = detail.SeqNo;
                        objBK_TRANSDTL_Info.CarrierCode = detail.CarrierCode;
                        objBK_TRANSDTL_Info.FlightNo = detail.FlightNo;
                        objBK_TRANSDTL_Info.DepatureDate = detail.DepatureDate;
                        objBK_TRANSDTL_Info.DepatureDate2 = detail.DepatureDate2;
                        objBK_TRANSDTL_Info.FlightDura = detail.FlightDura;
                        objBK_TRANSDTL_Info.FlightDura2 = detail.FlightDura2;
                        objBK_TRANSDTL_Info.Origin = detail.Origin;
                        objBK_TRANSDTL_Info.Transit = detail.Transit;
                        objBK_TRANSDTL_Info.Destination = detail.Destination;
                        objBK_TRANSDTL_Info.ArrivalDate = detail.ArrivalDate;
                        objBK_TRANSDTL_Info.ArrivalDate2 = detail.ArrivalDate2;
                        objBK_TRANSDTL_Info.FareClass = detail.FareClass;
                        objBK_TRANSDTL_Info.FarePerPax = detail.FarePerPax;
                        objBK_TRANSDTL_Info.LineTotal = detail.LineTotal;
                        objBK_TRANSDTL_Info.LineTax = detail.LineTax;
                        objBK_TRANSDTL_Info.LinePaxFee = detail.LinePaxFee;
                        objBK_TRANSDTL_Info.LineFee = detail.LineFee;
                        objBK_TRANSDTL_Info.LineOth = detail.LineOth;
                        objBK_TRANSDTL_Info.LineProcess = detail.LineProcess;
                        objBK_TRANSDTL_Info.LineSSR = detail.LineSSR;
                        objBK_TRANSDTL_Info.LineSeat = detail.LineSeat;
                        objBK_TRANSDTL_Info.LineNameChange = detail.LineNameChange;
                        objBK_TRANSDTL_Info.LineInfant = detail.LineInfant;
                        objBK_TRANSDTL_Info.LineDisc = detail.LineDisc;
                        objBK_TRANSDTL_Info.LinePromoDisc = detail.LinePromoDisc;
                        objBK_TRANSDTL_Info.AttemptCount = detail.AttemptCount;
                        objBK_TRANSDTL_Info.Currency = detail.Currency;
                        objBK_TRANSDTL_Info.PaxAdult = detail.PaxAdult;
                        objBK_TRANSDTL_Info.PaxChild = detail.PaxChild;
                        objBK_TRANSDTL_Info.TransVoid = detail.TransVoid;
                        objBK_TRANSDTL_Info.rowguid = detail.rowguid;
                        objBK_TRANSDTL_Info.CreateBy = detail.CreateBy;
                        objBK_TRANSDTL_Info.SyncCreate = detail.SyncCreate;
                        objBK_TRANSDTL_Info.SyncLastUpd = detail.SyncLastUpd;
                        objBK_TRANSDTL_Info.LastSyncBy = detail.LastSyncBy;
                        objBK_TRANSDTL_Info.CollectedAmount = detail.CollectedAmount;
                        objBK_TRANSDTL_Info.Signature = detail.Signature;
                        //added by ketee
                        objBK_TRANSDTL_Info.NextDueDate = detail.NextDueDate;
                        objBK_TRANSDTL_Info.NextDueAmount = detail.NextDueAmount;
                        objBK_TRANSDTL_Info.RemindAttempt = detail.RemindAttempt;
                        objBK_TRANSDTL_Info.RemindLog = detail.RemindLog;

                        return objBK_TRANSDTL_Info;
                        break;
                    }
                    else
                    {
                        continue;
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return null;
            }

        }

        public void AssignJourneyTransDetail(List<BookingTransactionDetail> ListBookingJourney, ref List<BookingTransactionDetail> lstbookDTLInfo, string recordlocatordb, string transID, byte seqNo, string agentName, decimal collectedAmt, string pnr, decimal PayDueAmount1 = 0, decimal PayDueAmount2 = 0, decimal PayDueAmount3 = 0, DateTime? PayDueDate1 = null, DateTime? PayDueDate2 = null, DateTime? PayDueDate3 = null, byte transVoid = 0)
        {
            BookingTransactionDetail bookDTLInfo = new BookingTransactionDetail();
            bookDTLInfo = GetSingleJourneyBK_TRANSDTL(ListBookingJourney, recordlocatordb, transID, seqNo);
            bookDTLInfo.TransVoid = transVoid;
            bookDTLInfo.LastSyncBy = agentName;
            bookDTLInfo.SyncLastUpd = DateTime.Now;
            bookDTLInfo.CollectedAmount = collectedAmt;
            bookDTLInfo.RecordLocator = pnr;
            bookDTLInfo.IsInitVoid = bookDTLInfo.TransVoid;


            if (bookDTLInfo.CollectedAmount < PayDueAmount2 && bookDTLInfo.CollectedAmount >= PayDueAmount1)
            {
                if (!PayDueDate2.HasValue)
                {
                    bookDTLInfo.NextDueDate = DateTime.Now;
                }
                else
                {
                    bookDTLInfo.NextDueDate = PayDueDate2.Value;
                }
            }
            else if (bookDTLInfo.CollectedAmount >= PayDueAmount1 + PayDueAmount2)
            {
                if (!PayDueDate3.HasValue)
                {
                    bookDTLInfo.NextDueDate = DateTime.Now;
                }
                else
                {
                    bookDTLInfo.NextDueDate = PayDueDate3.Value;
                }
            }


            lstbookDTLInfo.Add(bookDTLInfo);
        }

        public void CopyJourneyTransDetail(List<BookingTransactionDetail> ListBookingJourney, ref List<BookingTransactionDetail> lstbookDTLInfo, string recordlocatordb, string transID, byte seqNo, string agentName, string pnr, byte transVoid = 1)
        {
            BookingTransactionDetail bookDTLInfo = new BookingTransactionDetail();
            bookDTLInfo = GetSingleJourneyBK_TRANSDTL(ListBookingJourney, recordlocatordb, transID, seqNo);
            bookDTLInfo.TransVoid = transVoid;
            bookDTLInfo.LastSyncBy = agentName;
            bookDTLInfo.SyncLastUpd = DateTime.Now;
            bookDTLInfo.RecordLocator = pnr;

            lstbookDTLInfo.Add(bookDTLInfo);
        }

        public Boolean UpdateDatabaseDetails(BookingTransactionMain BookingTransMain, List<BookingTransactionDetail> lstBookingTransDetail, List<BookingTransTender> lstBookingTransTender, EnumSaveType saveType, ref List<BookingTransactionDetail> ExpiredPNRs, bool IsDivide = false, bool AutoCancel = false, List<Bk_transaddon> listbk_transssrinfo = null, int Mode = 0)
        {
            //added by romy, performance monitoring
            var profiler = MiniProfiler.Current;

            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;

            DateTime nextDueDate = DateTime.Now;
            Decimal nextDueAmount = 0;

            ArrayList ListRecordLocator = new ArrayList();
            ArrayList ListCollectedAmount = new ArrayList();
            ArrayList ListLineTotal = new ArrayList();
            ArrayList ListLineFee = new ArrayList();
            ArrayList ListNextDueDate = new ArrayList();
            ArrayList ListNextDueAmount = new ArrayList();
            ArrayList ListCurrency = new ArrayList();
            ArrayList ListIsLatest = new ArrayList();
            ArrayList ListInitVoid = new ArrayList();
            ArrayList ListTransVoid = new ArrayList();

            ArrayList ListCompletePassenger = new ArrayList();

            int totalTransVoid = 0;
            int transTotalPax = 0;
            ArrayList recordLocatorCollection = new ArrayList();

            //added by diana 20131112 - get payment extension
            DateTime paymentExtensionDate = DateTime.Now;
            Boolean extendPayment = false;
            if (BookingTransMain != null)
            {
                using (profiler.Step("GetPaymentExtensionDate"))
                {
                    extendPayment = GetPaymentExtensionDate(BookingTransMain.TransID, ref paymentExtensionDate);
                }
            }
            //end added by diana 20131112 - get payment extension
            try
            {
                if (BookingTransMain != null && lstBookingTransDetail != null)
                {
                    //from here
                    decimal totalCollectedAmount = 0;
                    decimal totalLineTotal = 0;
                    decimal totalLineFee = 0;

                    //amended by diana 20131106 - to get lowest expirydate

                    nextDueDate = BookingTransMain.BookingDate;
                    DateTime ExpiryDate = BookingTransMain.ExpiryDate;
                    DateTime LowestExpiryDate;

                    //added by ketee, set the expiry date default by 7 day b4 STD

                    if (BookingTransMain.STDDate != DateTime.MinValue && BookingTransMain.STDDate.AddDays(-7) > DateTime.Now)
                        LowestExpiryDate = BookingTransMain.STDDate.AddDays(-7);
                    else
                        LowestExpiryDate = ExpiryDate;

                    //added by diana 20140121 - to store GroupName
                    int cnt = 0;
                    string GroupName = "";

                    foreach (BookingTransactionDetail pBookingTransDetail in lstBookingTransDetail)
                    {
                        //added by diana 20140121 - store first segement GroupName
                        if (cnt == 0)
                        {
                            GeneralControl objGeneral = new GeneralControl();
                            using (profiler.Step("getOPTGroupByCarrierCode"))
                            {
                                GroupName = objGeneral.getOPTGroupByCarrierCode(pBookingTransDetail.CarrierCode);
                            }
                        }
                        cnt += 1;

                        if (ListRecordLocator.IndexOf(pBookingTransDetail.RecordLocator) < 0)
                        {

                            ListRecordLocator.Add(pBookingTransDetail.RecordLocator);
                            ListCollectedAmount.Add(pBookingTransDetail.CollectedAmount);
                            ListLineTotal.Add(pBookingTransDetail.LineTotal);
                            ListLineFee.Add(pBookingTransDetail.LineFee);
                            ListNextDueDate.Add(pBookingTransDetail.NextDueDate);
                            ListNextDueAmount.Add(pBookingTransDetail.NextDueAmount);
                            ListCurrency.Add(pBookingTransDetail.Currency);
                            ListIsLatest.Add(pBookingTransDetail.IsLatest);
                            ListInitVoid.Add(pBookingTransDetail.IsInitVoid);
                            ListTransVoid.Add(pBookingTransDetail.TransVoid);
                            totalTransVoid += pBookingTransDetail.TransVoid;
                        }
                        else
                        {
                            int index = ListRecordLocator.IndexOf(pBookingTransDetail.RecordLocator);
                            ListCollectedAmount[index] = (decimal)ListCollectedAmount[index] + (decimal)pBookingTransDetail.CollectedAmount;
                            ListLineTotal[index] = (decimal)ListLineTotal[index] + (decimal)pBookingTransDetail.LineTotal;
                            ListLineFee[index] = (decimal)ListLineFee[index] + (decimal)pBookingTransDetail.LineFee;
                            ListNextDueDate[index] = pBookingTransDetail.NextDueDate;
                            ListNextDueAmount[index] = pBookingTransDetail.NextDueAmount;
                            ListCurrency[index] = pBookingTransDetail.Currency;
                            ListIsLatest[index] = pBookingTransDetail.IsLatest;
                            ListInitVoid[index] = pBookingTransDetail.IsInitVoid;
                            ListTransVoid[index] = pBookingTransDetail.TransVoid;
                            totalTransVoid += pBookingTransDetail.TransVoid;
                        }


                        //amended by diana 20131103 - to add only approved record locator
                        if (pBookingTransDetail.RecordLocator.ToString().Trim().Length >= 6)
                        {
                            //edit by ketee, fix to check recordlocatorcollection if not found, 201709012
                            if (recordLocatorCollection.Contains(pBookingTransDetail.RecordLocator.ToString().Trim()) == false)
                            {
                                recordLocatorCollection.Add(pBookingTransDetail.RecordLocator.ToString().Trim());
                                //added by diana 20131031
                                transTotalPax += pBookingTransDetail.PaxAdult;
                                transTotalPax += pBookingTransDetail.PaxChild;
                            }
                        }
                    }


                    int indexDetail = 0;
                    bool firstRecord = true;

                    foreach (string detailList in ListRecordLocator)
                    {
                        //added by ketee, passing in existing expiry date for validation , 20160223
                        ExpiryDate = (DateTime)ListNextDueDate[indexDetail];
                        if (ExpiryDate == DateTime.MinValue)
                        {
                            if (BookingTransMain.IsOverride == 1)
                                using (profiler.Step("GetNextAmount_Date_Due"))
                                {
                                    nextDueAmount = GetNextAmount_Date_Due(BookingTransMain.TransID, detailList, GroupName, BookingTransMain.PayScheme, 1, (decimal)ListCollectedAmount[indexDetail], (decimal)ListLineTotal[indexDetail] - (decimal)ListCollectedAmount[indexDetail], (decimal)ListLineFee[indexDetail], (decimal)ListLineTotal[indexDetail], BookingTransMain.STDDate, BookingTransMain.BookingDate, ref ExpiryDate);
                                }
                            else
                                using (profiler.Step("GetNextAmount_Date_Due"))
                                {
                                    nextDueAmount = GetNextAmount_Date_Due(detailList, GroupName, BookingTransMain.PayScheme, (decimal)ListCollectedAmount[indexDetail], (decimal)ListLineTotal[indexDetail] - (decimal)ListCollectedAmount[indexDetail], (decimal)ListLineFee[indexDetail], (decimal)ListLineTotal[indexDetail], BookingTransMain.STDDate, BookingTransMain.BookingDate, ref ExpiryDate);
                                }
                        }
                        int indexPNR = ListRecordLocator.IndexOf(detailList);
                        ListNextDueDate[indexPNR] = ExpiryDate;
                        ListNextDueAmount[indexPNR] = nextDueAmount;

                        indexDetail += 1;

                        if (detailList.ToString().Trim().Length >= 6)
                        {
                            //Amended by ketee, check expiry date if > existing expiry date then update it , 20160222
                            if (ExpiryDate.Date <= LowestExpiryDate.Date)
                                LowestExpiryDate = ExpiryDate;

                            //if (firstRecord)
                            //{
                            //    LowestExpiryDate = ExpiryDate;
                            //    firstRecord = false;
                            //}
                            //else if (ExpiryDate.Date < LowestExpiryDate.Date)
                            //    LowestExpiryDate = ExpiryDate;
                        }
                    }

                    ExpiryDate = LowestExpiryDate;

                    //amended by dianaa 20131112 - check for extension
                    if (extendPayment)
                    {
                        if (ExpiryDate < paymentExtensionDate)
                        {
                            ExpiryDate = paymentExtensionDate;
                        }
                    }
                    //end amended by dianaa 20131112 - check for extension

                    if (BookingTransMain.TransStatus == 1 && BookingTransMain.PayScheme == "W1W")
                    {
                        nextDueDate = BookingTransMain.STDDate.AddDays(-1);
                        BookingTransMain.ExpiryDate = ExpiryDate;
                        if (BookingTransMain.ExpiryDate.Date.AddDays(-5) > DateTime.Now.Date)
                            BookingTransMain.CurReminderDate = BookingTransMain.ExpiryDate.AddDays(-5);
                        else if (BookingTransMain.ExpiryDate.Date.AddDays(-1) > DateTime.Now.Date)
                            BookingTransMain.CurReminderDate = BookingTransMain.ExpiryDate.AddDays(-1);
                        else
                            BookingTransMain.CurReminderDate = BookingTransMain.ExpiryDate.Date;
                    }
                    else
                    {
                        nextDueDate = ExpiryDate;
                        BookingTransMain.ExpiryDate = ExpiryDate;
                        BookingTransMain.CurReminderDate = BookingTransMain.ExpiryDate.AddDays(-5);
                    }

                    //added by diana 20140605, if passenger complete, then status should be 3 or confirmed
                    int BMTransStatus = BookingTransMain.TransStatus;
                    bool GetPassengerComplete = false;
                    if (BMTransStatus == 2)
                    {
                        GetPassengerComplete = CheckCompletePassenger(BookingTransMain.TransID);
                        if (GetPassengerComplete == true)
                        {
                            BookingTransMain.TransStatus = 3;
                        }
                    }

                    //to here
                }

                #region "Update TransMain"
                using (profiler.Step("Update_TransMain"))
                {
                    if (BookingTransMain != null)
                    {
                        //added by diana 20131030 - check whether booking is expired or not
                        if (BookingTransMain.ExpiryDate.Date < DateTime.Now.Date)
                        {
                            if ((BookingTransMain.TransStatus == 1) || (BookingTransMain.TransStatus == 2 && BookingTransMain.NeedPaymentStatus == 0))
                            {
                                BookingTransMain.Posted = 2;
                                //BookingTransMain.TransStatus += 5;
                                //BookingTransMain.TransRemark1 = "AUTO CANCEL PROCESS";
                                //BookingTransMain.CancelDate = DateTime.Now;
                            }
                        }
                        else if (totalTransVoid >= lstBookingTransDetail.Count)
                        {
                            //BookingTransMain.Posted = 2;
                            BookingTransMain.TransStatus += 5;
                            BookingTransMain.TransRemark1 = "AUTO CANCEL PROCESS";
                            BookingTransMain.CancelDate = DateTime.Now;
                        }
                        //end added by diana 20131030
                        objSQL.AddField("TransID", BookingTransMain.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransType", BookingTransMain.TransType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("AgentID", BookingTransMain.AgentID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("AgentCatgID", BookingTransMain.AgentCatgID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("BookingDate", BookingTransMain.BookingDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaymentDateEx1", BookingTransMain.PaymentDateEx1, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaymentAmtEx1", BookingTransMain.PaymentAmtEx1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaymentDateEx2", BookingTransMain.PaymentDateEx2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaymentAmtEx2", BookingTransMain.PaymentAmtEx2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaymentDateEx3", BookingTransMain.PaymentDateEx3, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaymentAmtEx3", BookingTransMain.PaymentAmtEx3, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaymentDate", BookingTransMain.PaymentDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CancelDate", BookingTransMain.CancelDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        if (BookingTransMain.TransStatus <= 2)
                            objSQL.AddField("ExpiryDate", BookingTransMain.ExpiryDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("STDDate", BookingTransMain.STDDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Currency", BookingTransMain.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CurrencyPaid", BookingTransMain.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CollectedAmt", BookingTransMain.CollectedAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TotalAmtAVG", BookingTransMain.TotalAmtAVG, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TotalAmtGoing", BookingTransMain.TotalAmtGoing, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TotalAmtReturn", BookingTransMain.TotalAmtReturn, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransSubTotal", BookingTransMain.TransSubTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalAmt", BookingTransMain.TransTotalAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalFee", BookingTransMain.TransTotalFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalInsure", BookingTransMain.TransTotalInsure, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalTax", BookingTransMain.TransTotalTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalPaxFee", BookingTransMain.TransTotalPaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalOth", BookingTransMain.TransTotalOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalSSR", BookingTransMain.TransTotalSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalDisc", BookingTransMain.TransTotalDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalPromoDisc", BookingTransMain.TransTotalPromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        //objSQL.AddField("TransTotalPAX", BookingTransMain.TransTotalPAX, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                        if (transTotalPax > 0)
                        {
                            objSQL.AddField("TransTotalPax", transTotalPax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        }
                        objSQL.AddField("TransTotalSeat", BookingTransMain.TransTotalSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalNameChange", BookingTransMain.TransTotalNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalProcess", BookingTransMain.TransTotalProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransTotalInfant", BookingTransMain.TransTotalInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransRemark1", BookingTransMain.TransRemark1, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("TransRemark2", BookingTransMain.TransRemark2, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cEmpty);
                        objSQL.AddField("TransStatus", BookingTransMain.TransStatus, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("NeedPaymentStatus", BookingTransMain.NeedPaymentStatus, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SchemeCode", BookingTransMain.PayScheme, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PromoCode", BookingTransMain.PromoCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Posted", BookingTransMain.Posted, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CreateBy", BookingTransMain.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncCreate", BookingTransMain.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncLastUpd", BookingTransMain.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LastSyncBy", BookingTransMain.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        if (BookingTransMain.TransStatus <= 2)
                            objSQL.AddField("CurReminderDate", BookingTransMain.CurReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("NextReminderDate", BookingTransMain.NextReminderDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ReminderType", BookingTransMain.ReminderType, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PromoCode", BookingTransMain.PromoCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        if (BookingTransMain.ForfeitedAmount != null && BookingTransMain.ForfeitedAmount != 0)
                        {
                            objSQL.AddField("ForfeitedAmount", BookingTransMain.ForfeitedAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        }
                        //objSQL.AddField("Currency", BookingTransMain.Currency, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        //objSQL.AddField("CurrencyPaid", BookingTransMain.Currency, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        //objSQL.AddField("ExchangeRate", BookingTransMain.ExchangeRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                        switch (saveType)
                        {
                            case EnumSaveType.Insert:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSMAIN", string.Empty);
                                break;
                            case EnumSaveType.Update:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSMAIN", "BK_TRANSMAIN.TransID='" + BookingTransMain.TransID + "'");
                                break;
                        }
                        lstSQL.Add(strSQL);
                    }
                }
                #endregion

                #region "Update TransDetail"
                using (profiler.Step("Update_TransDetail"))
                {
                    if (lstBookingTransDetail != null)
                    {
                        foreach (BookingTransactionDetail pBookingTransDetail in lstBookingTransDetail)
                        {
                            //added by diana 20131029 - update transvoid to 1 if booking status is cancel
                            //pBookingTransDetail.TransVoid = 0;
                            if (BookingTransMain != null)
                            {
                                //if (BookingTransMain.TransStatus >= 4) pBookingTransDetail.TransVoid = 1;//remarked, for autocancel
                            }
                            //end added by diana 20131029

                            //added by diana 20131106 - update expirydate
                            //Remarked by Tyas 20170812
                            //if (BookingTransMain.TransStatus == 1 && BookingTransMain.PayScheme == "W1W")
                            //{
                            //    pBookingTransDetail.NextDueDate = BookingTransMain.STDDate.AddDays(-1);
                            //}
                            //else
                            //{
                            //    int indexPNR = ListRecordLocator.IndexOf(pBookingTransDetail.RecordLocator);
                            //    if (indexPNR >= 0)
                            //    {
                            //        pBookingTransDetail.NextDueDate = (DateTime)ListNextDueDate[indexPNR];
                            //        pBookingTransDetail.NextDueAmount = (decimal)ListNextDueAmount[indexPNR];
                            //        objSQL.AddField("NextDueAmount", pBookingTransDetail.NextDueAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            //    }
                            //}
                            //end added by diana 20131106

                            //amended by dianaa 20131112 - check for extension
                            if (extendPayment)
                            {
                                if (pBookingTransDetail.NextDueDate < paymentExtensionDate)
                                {
                                    pBookingTransDetail.NextDueDate = paymentExtensionDate;
                                }
                            }
                            //end amended by diana 20131112 - check for extension

                            //added by diana 20170508, pending for pax upload checking
                            //remark by ketee, 20170529, reamrk to update transvoid = 1
                            ////if ((BookingTransMain.TransStatus == 1) || (BookingTransMain.TransStatus == 2 && BookingTransMain.NeedPaymentStatus == 0))
                            ////{
                            ////    if (pBookingTransDetail.IsLatest >= 1 && pBookingTransDetail.NextDueDate.Date < DateTime.Now.Date)
                            ////    {

                            ////        pBookingTransDetail.TransVoid = 1;
                            ////        int indexPNR = ListRecordLocator.IndexOf(pBookingTransDetail.RecordLocator);
                            ////        if (indexPNR >= 0)
                            ////        {
                            ////            ListTransVoid[indexPNR] = pBookingTransDetail.TransVoid;
                            ////        }
                            ////    }
                            ////}
                            //end added by diana 20170508, pending for pax upload checking

                            objSQL.AddField("RecordLocator", pBookingTransDetail.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("TransID", pBookingTransDetail.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("SeqNo", pBookingTransDetail.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("CarrierCode", pBookingTransDetail.CarrierCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("FlightNo", pBookingTransDetail.FlightNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("DepartureDate", pBookingTransDetail.DepatureDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("DepartureDate2", pBookingTransDetail.DepatureDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                            //objSQL.AddField("FlightDura", pBookingTransDetail.FlightDura, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            //objSQL.AddField("FlightDura2", pBookingTransDetail.FlightDura2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("Origin", pBookingTransDetail.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("Transit", pBookingTransDetail.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("Destination", pBookingTransDetail.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("ArrivalDate", pBookingTransDetail.ArrivalDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("ArrivalDate2", pBookingTransDetail.ArrivalDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("FareClass", pBookingTransDetail.FareClass, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("FarePerPax", pBookingTransDetail.FarePerPax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("LineTotal", pBookingTransDetail.LineTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("LineTax", pBookingTransDetail.LineTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("LinePaxFee", pBookingTransDetail.LinePaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("LineFee", pBookingTransDetail.LineFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("LineOth", pBookingTransDetail.LineOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("LineProcess", pBookingTransDetail.LineProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("LineSSR", pBookingTransDetail.LineSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("LineSeat", pBookingTransDetail.LineSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("LineNameChange", pBookingTransDetail.LineNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("LineInsureFee", pBookingTransDetail.LineInsureFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);//added by romy for insure
                            objSQL.AddField("LineInfant", pBookingTransDetail.LineInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("LineDisc", pBookingTransDetail.LineDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("LinePromoDisc", pBookingTransDetail.LinePromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("IsLatest", pBookingTransDetail.IsLatest, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("AttemptCount", pBookingTransDetail.AttemptCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("Currency", pBookingTransDetail.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("PaxAdult", pBookingTransDetail.PaxAdult, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("PaxChild", pBookingTransDetail.PaxChild, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("TransVoid", pBookingTransDetail.TransVoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("AttemptCount", pBookingTransDetail.AttemptCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("CreateBy", pBookingTransDetail.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("SyncCreate", pBookingTransDetail.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("SyncLastUpd", pBookingTransDetail.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("LastSyncBy", pBookingTransDetail.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("DetailCollectedAmt", pBookingTransDetail.CollectedAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                            //update paydueamount
                            if (IsDivide == true)
                            {
                                objSQL.AddField("PayDueAmount1", pBookingTransDetail.PayDueAmount1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                                objSQL.AddField("PayDueAmount2", pBookingTransDetail.PayDueAmount2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                                objSQL.AddField("PayDueAmount3", pBookingTransDetail.PayDueAmount3, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            }

                            objSQL.AddField("NextDueDate", pBookingTransDetail.NextDueDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                            if (pBookingTransDetail.ForfeitedAmount != null && pBookingTransDetail.ForfeitedAmount != 0)
                            {
                                objSQL.AddField("ForfeitedAmount", pBookingTransDetail.ForfeitedAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                            }
                            //objSQL.AddField("SellKey", pBookingTransDetail.Signature, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                            switch (saveType)
                            {
                                case EnumSaveType.Insert:
                                    strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSDTL", string.Empty);
                                    break;
                                /*
                                case EnumSaveType.Update:
                                    strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.RecordLocator='" + pBookingTransDetail.RecordLocator + "' AND BK_TRANSDTL.TransID='" + pBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBookingTransDetail.SeqNo + "'");
                                    break;*/
                                case EnumSaveType.Update:
                                    strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.TransID='" + pBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBookingTransDetail.SeqNo + "' AND BK_TRANSDTL.RecordLocator = '" + pBookingTransDetail.RecordLocator + "'");
                                    break;
                            }
                            lstSQL.Add(strSQL);
                        }
                    }
                }
                #endregion

                #region "Update TransTender"
                using (profiler.Step("Update_TransTender"))
                {
                    if (lstBookingTransTender != null)
                    {
                        foreach (BookingTransTender BookingTransTender in lstBookingTransTender)
                        {
                            objSQL.AddField("TransID", BookingTransTender.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("SeqNo", BookingTransTender.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("TransDate", BookingTransTender.TransDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("Currency", BookingTransTender.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("CurrencyPaid", BookingTransTender.CurrencyPaid, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("TenderID", BookingTransTender.TenderID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("FeeType", BookingTransTender.FeeType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("TenderAmt", BookingTransTender.TenderAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("TenderDue", BookingTransTender.TenderDue, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("FeeAmt", BookingTransTender.FeeAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("PayAmt", BookingTransTender.PayAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("Transvoid", BookingTransTender.Transvoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("SyncCreate", BookingTransTender.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("RefNo", BookingTransTender.RefNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("AuthorizationCode", BookingTransTender.AuthorizationCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("MerchantID", BookingTransTender.MerchantID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            objSQL.AddField("CreateBy", BookingTransTender.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            //added by ketee, 20121028
                            objSQL.AddField("RecordLocator", BookingTransTender.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                            if (BookingTransTender.CommandType == "insert")
                            {
                                objSQL.AddField("ExchgRate", BookingTransTender.ExchgRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                            }

                            if (BookingTransTender.CommandType == "insert")
                            {
                                if (GetSingleBK_TRANSTENDER(BookingTransTender.TransID, BookingTransTender.SeqNo) != null)
                                {
                                    strSQL = "DELETE BK_TRANSTENDER WHERE TransID = '" + BookingTransTender.TransID + "' AND SeqNo = '" + BookingTransTender.SeqNo + "'";
                                    lstSQL.Add(strSQL);
                                }

                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSTENDER", string.Empty);
                            }
                            else
                            {
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSTENDER", "TransID='" + BookingTransTender.TransID + "' AND SeqNo=" + BookingTransTender.SeqNo + " AND RecordLocator='" + BookingTransTender.RecordLocator + "'");
                            }

                            lstSQL.Add(strSQL);
                        }
                    }
                }
                #endregion

                #region "Update SSR"
                using (profiler.Step("Update_SSR"))
                {
                    if (listbk_transssrinfo != null && listbk_transssrinfo.Count > 0)
                    {

                        string strSQLDelete = "DELETE BK_TRANSADDON WHERE TransID = '" + listbk_transssrinfo[0].TransID + "'";
                        //objDCom.Execute(strSQLDelete, DataAccess.EnumRtnType.rtNone, CommandType.Text);
                        lstSQL.Add(strSQLDelete);

                        foreach (Bk_transaddon Bk_transaddonCont in listbk_transssrinfo)
                        {
                            StartSQLControl();
                            var _with3 = objSQL;
                            _with3.TableName = "Bk_transaddon";
                            _with3.AddField("TripMode", Bk_transaddonCont.TripMode, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("CarrierCode", Bk_transaddonCont.CarrierCode, SQLControl.EnumDataType.dtString);
                            _with3.AddField("FlightNo", Bk_transaddonCont.FlightNo, SQLControl.EnumDataType.dtStringN);
                            _with3.AddField("Origin", Bk_transaddonCont.Origin, SQLControl.EnumDataType.dtString);
                            _with3.AddField("Destination", Bk_transaddonCont.Destination, SQLControl.EnumDataType.dtString);
                            _with3.AddField("BaggageCode", Bk_transaddonCont.BaggageCode, SQLControl.EnumDataType.dtString);
                            _with3.AddField("BaggageAmt", Bk_transaddonCont.BaggageAmt, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("MealTotalAmt", Bk_transaddonCont.MealTotalAmt, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("MealCount", Bk_transaddonCont.MealCount, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("MealCode1", Bk_transaddonCont.MealCode1, SQLControl.EnumDataType.dtString);
                            _with3.AddField("MealQty1", Bk_transaddonCont.MealQty1, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("MealRate1", Bk_transaddonCont.MealRate1, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("MealSubTotal1", Bk_transaddonCont.MealSubTotal1, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("MealCode2", Bk_transaddonCont.MealCode2, SQLControl.EnumDataType.dtString);
                            _with3.AddField("MealQty2", Bk_transaddonCont.MealQty2, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("MealRate2", Bk_transaddonCont.MealRate2, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("MealSubTotal2", Bk_transaddonCont.MealSubTotal2, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("MealCode3", Bk_transaddonCont.MealCode3, SQLControl.EnumDataType.dtString);
                            _with3.AddField("MealQty3", Bk_transaddonCont.MealQty3, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("MealRate3", Bk_transaddonCont.MealRate3, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("MealSubTotal3", Bk_transaddonCont.MealSubTotal3, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("MealCode4", Bk_transaddonCont.MealCode4, SQLControl.EnumDataType.dtString);
                            _with3.AddField("MealQty4", Bk_transaddonCont.MealQty4, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("MealRate4", Bk_transaddonCont.MealRate4, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("MealSubTotal4", Bk_transaddonCont.MealSubTotal4, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("DrinkTotalAmt", Bk_transaddonCont.DrinkTotalAmt, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("DrinkCount", Bk_transaddonCont.DrinkCount, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("DrinkCode1", Bk_transaddonCont.DrinkCode1, SQLControl.EnumDataType.dtString);
                            _with3.AddField("DrinkQty1", Bk_transaddonCont.DrinkQty1, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("DrinkRate1", Bk_transaddonCont.DrinkRate1, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("DrinkSubTotal1", Bk_transaddonCont.DrinkSubTotal1, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("DrinkCode2", Bk_transaddonCont.DrinkCode2, SQLControl.EnumDataType.dtString);
                            _with3.AddField("DrinkQty2", Bk_transaddonCont.DrinkQty2, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("DrinkRate2", Bk_transaddonCont.DrinkRate2, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("DrinkSubTotal2", Bk_transaddonCont.DrinkSubTotal2, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("DrinkCode3", Bk_transaddonCont.DrinkCode3, SQLControl.EnumDataType.dtString);
                            _with3.AddField("DrinkQty3", Bk_transaddonCont.DrinkQty3, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("DrinkRate3", Bk_transaddonCont.DrinkRate3, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("DrinkSubTotal3", Bk_transaddonCont.DrinkSubTotal3, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("DrinkCode4", Bk_transaddonCont.DrinkCode4, SQLControl.EnumDataType.dtString);
                            _with3.AddField("DrinkQty4", Bk_transaddonCont.DrinkQty4, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("DrinkRate4", Bk_transaddonCont.DrinkRate4, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("DrinkSubTotal4", Bk_transaddonCont.DrinkSubTotal4, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("SportCode", Bk_transaddonCont.SportCode, SQLControl.EnumDataType.dtString);
                            _with3.AddField("SportAmt", Bk_transaddonCont.SportAmt, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("InsureCode", Bk_transaddonCont.InsureCode, SQLControl.EnumDataType.dtString);//added by romy for insure
                            _with3.AddField("InsureAmt", Bk_transaddonCont.InsureAmt, SQLControl.EnumDataType.dtNumeric);//added by romy for insure
                            _with3.AddField("KitCode", Bk_transaddonCont.KitCode, SQLControl.EnumDataType.dtString);
                            _with3.AddField("KitAmt", Bk_transaddonCont.KitAmt, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("DutyCode", Bk_transaddonCont.DutyCode, SQLControl.EnumDataType.dtString);
                            _with3.AddField("DutyAmt", Bk_transaddonCont.DutyAmt, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("InfantCode", Bk_transaddonCont.InfantCode, SQLControl.EnumDataType.dtString);
                            _with3.AddField("InfantAmt", Bk_transaddonCont.InfantAmt, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("TotalAmount", Bk_transaddonCont.TotalAmount, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("IsOverride", Bk_transaddonCont.IsOverride, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("TransVoid", Bk_transaddonCont.TransVoid, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("AttemptCount", Bk_transaddonCont.AttemptCount, SQLControl.EnumDataType.dtNumeric);
                            //_with3.AddField("rowguid", Bk_transaddonCont.rowguid, SQLControl.EnumDataType.dtString);
                            _with3.AddField("CreateBy", Bk_transaddonCont.CreateBy, SQLControl.EnumDataType.dtStringN);
                            _with3.AddField("SyncCreate", Bk_transaddonCont.SyncCreate, SQLControl.EnumDataType.dtDateTime);
                            _with3.AddField("SyncLastUpd", Bk_transaddonCont.SyncLastUpd, SQLControl.EnumDataType.dtDateTime);
                            _with3.AddField("LastSyncBy", Bk_transaddonCont.LastSyncBy, SQLControl.EnumDataType.dtStringN);

                            _with3.AddField("RecordLocator", Bk_transaddonCont.RecordLocator, SQLControl.EnumDataType.dtString);
                            _with3.AddField("TransID", Bk_transaddonCont.TransID, SQLControl.EnumDataType.dtString);
                            _with3.AddField("PassengerID", Bk_transaddonCont.PassengerID, SQLControl.EnumDataType.dtString);
                            _with3.AddField("Segment", Bk_transaddonCont.Segment, SQLControl.EnumDataType.dtNumeric);
                            _with3.AddField("SeqNo", Bk_transaddonCont.SeqNo, SQLControl.EnumDataType.dtNumeric);
                            strSQL = _with3.BuildSQL(SQLControl.EnumSQLType.stInsert);

                            lstSQL.Add(strSQL);
                        }

                        //SaveSSRManageCommit(listbk_transssrinfo, ABS.Logic.GroupBooking.Booking.BookingControl.EnumSaveType.Update, PNR, "", true);
                    }
                }
                #endregion

                #region "Update TransFee"
                using (profiler.Step("Update_TransFee"))
                {
                    if (HttpContext.Current.Session["listTransFees"] != null)
                    {
                        List<BookingTransactionFees> lstTransFees = new List<BookingTransactionFees>();
                        lstTransFees = (List<BookingTransactionFees>)HttpContext.Current.Session["listTransFees"];
                        if (lstTransFees.Count > 0)
                        {
                            string strSQLDelete = "DELETE BK_TRANSFEES WHERE TransID = '" + lstTransFees[0].TransID + "'";
                            //objDCom.Execute(strSQLDelete, DataAccess.EnumRtnType.rtNone, CommandType.Text);
                            lstSQL.Add(strSQLDelete);

                            foreach (BookingTransactionFees pBK_TRANSFEES_Info in lstTransFees)
                            {
                                objSQL.AddField("TransID", pBK_TRANSFEES_Info.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                                objSQL.AddField("RecordLocator", pBK_TRANSFEES_Info.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                                objSQL.AddField("SeqNo", pBK_TRANSFEES_Info.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                                objSQL.AddField("FeeCode", pBK_TRANSFEES_Info.FeeCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                                objSQL.AddField("FeeDesc", pBK_TRANSFEES_Info.FeeDesc, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                                objSQL.AddField("PaxType", pBK_TRANSFEES_Info.PaxType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                                objSQL.AddField("Origin", pBK_TRANSFEES_Info.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                                objSQL.AddField("Transit", pBK_TRANSFEES_Info.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                                objSQL.AddField("Destination", pBK_TRANSFEES_Info.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                                objSQL.AddField("FeeType", pBK_TRANSFEES_Info.FeeType, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                                objSQL.AddField("FeeQty", pBK_TRANSFEES_Info.FeeQty, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                                objSQL.AddField("FeeRate", pBK_TRANSFEES_Info.FeeRate, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                                objSQL.AddField("FeeAmt", pBK_TRANSFEES_Info.FeeAmt, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                                objSQL.AddField("Transvoid", pBK_TRANSFEES_Info.Transvoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                                objSQL.AddField("CreateBy", pBK_TRANSFEES_Info.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                                objSQL.AddField("SyncCreate", pBK_TRANSFEES_Info.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                                objSQL.AddField("SyncLastUpd", pBK_TRANSFEES_Info.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                                objSQL.AddField("LastSyncBy", pBK_TRANSFEES_Info.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                                switch (saveType)
                                {
                                    case EnumSaveType.Insert:
                                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSFEES", string.Empty);
                                        break;
                                    case EnumSaveType.Update:
                                        //strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSFEES", "BK_TRANSFEES.TransID='" + pBK_TRANSFEES_Info.TransID + "' AND BK_TRANSFEES.FeeCode='" + pBK_TRANSFEES_Info.FeeCode + "'");
                                        strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSFEES", string.Empty);
                                        break;
                                }
                                lstSQL.Add(strSQL);
                            }
                        }
                    }
                }
                #endregion


                if (lstSQL != null && lstSQL.Count > 0)
                {
                    rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                    if (rValue == false)
                    {
                        return false;
                    }
                    else
                    {
                        if (AutoCancel)
                        {
                            if (Mode == 0)
                            {
                                ExpiredPNRs.AddRange(lstBookingTransDetail);
                            }
                            else
                            {
                                ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");
                                int py = 0;
                                foreach (string detailList in ListRecordLocator)
                                {
                                    if (int.Parse(ListIsLatest[py].ToString()) >= 2 && int.Parse(ListInitVoid[py].ToString()) == 0 && int.Parse(ListTransVoid[py].ToString()) == 1)
                                    {
                                        string signature = apiBooking.AgentLogon();
                                        string errMessage = "";
                                        using (profiler.Step("CancelJourney"))
                                        {
                                            apiBooking.CancelJourney(detailList, 0 - decimal.Parse(ListCollectedAmount[py].ToString()), ListCurrency[py].ToString(), signature, ref errMessage); //cancel journey to api
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    return false;
                }

                //commented by diana - will be used later
                //if (BookingTransMain.TransStatus >= 4)
                //{
                //    ABS.Navitaire.APIBooking apiBooking = new ABS.Navitaire.APIBooking("");
                //    foreach (BookingTransactionDetail pBookingTransDetail in lstBookingTransDetail)
                //    {
                //        string signature = apiBooking.AgentLogon();
                //        string errMessage = "";
                //        apiBooking.CancelJourney(pBookingTransDetail.RecordLocator, -pBookingTransDetail.CollectedAmount, pBookingTransDetail.Currency, signature, ref errMessage); //cancel journey to api
                //    }
                //}
                return true;
            }
            catch (Exception ex)
            {
                SystemLog.Notifier.Notify(ex);
                log.Error(this, ex);
                return false;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        public Boolean UpdateTransDTL(List<BookingTransactionDetail> lstBookingTransDetail, EnumSaveType saveType)
        {
            bool rValue = false;
            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;

            try
            {

                #region "Update TransDetail"
                if (lstBookingTransDetail != null)
                {
                    foreach (BookingTransactionDetail pBookingTransDetail in lstBookingTransDetail)
                    {
                        objSQL.AddField("RecordLocator", pBookingTransDetail.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransID", pBookingTransDetail.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SeqNo", pBookingTransDetail.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CarrierCode", pBookingTransDetail.CarrierCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightNo", pBookingTransDetail.FlightNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DepartureDate", pBookingTransDetail.DepatureDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DepartureDate2", pBookingTransDetail.DepatureDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightDura", pBookingTransDetail.FlightDura, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightDura2", pBookingTransDetail.FlightDura2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Origin", pBookingTransDetail.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Transit", pBookingTransDetail.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Destination", pBookingTransDetail.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ArrivalDate", pBookingTransDetail.ArrivalDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ArrivalDate2", pBookingTransDetail.ArrivalDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FareClass", pBookingTransDetail.FareClass, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FarePerPax", pBookingTransDetail.FarePerPax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineTotal", pBookingTransDetail.LineTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineTax", pBookingTransDetail.LineTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LinePaxFee", pBookingTransDetail.LinePaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineFee", pBookingTransDetail.LineFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineOth", pBookingTransDetail.LineOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineProcess", pBookingTransDetail.LineProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineSSR", pBookingTransDetail.LineSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineSeat", pBookingTransDetail.LineSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineNameChange", pBookingTransDetail.LineNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineInsureFee", pBookingTransDetail.LineInsureFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);//added by romy for insure
                        objSQL.AddField("LineInfant", pBookingTransDetail.LineInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineDisc", pBookingTransDetail.LineDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LinePromoDisc", pBookingTransDetail.LinePromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("IsLatest", pBookingTransDetail.IsLatest, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("AttemptCount", pBookingTransDetail.AttemptCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Currency", pBookingTransDetail.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaxAdult", pBookingTransDetail.PaxAdult, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaxChild", pBookingTransDetail.PaxChild, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransVoid", pBookingTransDetail.TransVoid, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("AttemptCount", pBookingTransDetail.AttemptCount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CreateBy", pBookingTransDetail.CreateBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncCreate", pBookingTransDetail.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncLastUpd", pBookingTransDetail.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LastSyncBy", pBookingTransDetail.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DetailCollectedAmt", pBookingTransDetail.CollectedAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                        objSQL.AddField("PayDueAmount1", pBookingTransDetail.PayDueAmount1, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PayDueAmount2", pBookingTransDetail.PayDueAmount2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PayDueAmount3", pBookingTransDetail.PayDueAmount3, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                        objSQL.AddField("NextDueDate", pBookingTransDetail.NextDueDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);

                        //objSQL.AddField("SellKey", pBookingTransDetail.Signature, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                        switch (saveType)
                        {
                            case EnumSaveType.Insert:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_TRANSDTL", string.Empty);
                                break;

                            case EnumSaveType.Update:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_TRANSDTL", "BK_TRANSDTL.TransID='" + pBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + pBookingTransDetail.SeqNo + "' AND BK_TRANSDTL.RecordLocator = '" + pBookingTransDetail.RecordLocator + "'");
                                break;
                        }
                        lstSQL.Add(strSQL);
                    }
                }
                #endregion

                if (lstSQL != null && lstSQL.Count > 0)
                {
                    rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);
                    if (rValue == false)
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return false;
            }
            finally
            {
                EndSQLControl();
                EndConnection();
            }
        }

        //retrieve any transaction of 1 and 2 then update transaction
        public Boolean AutoUpdateTransaction()
        {
            try
            {
                List<ListTransaction> AllTransaction = new List<ListTransaction>();
                int Count = 1;
                AllTransaction = GetTransactionDetails();
                if (AllTransaction != null)
                {
                    log.Info(this, "Total Transaction to be updated: " + AllTransaction.Count);
                    foreach (ListTransaction TransactionInfo in AllTransaction)
                    {
                        //for status 1 and 2 : update flight and payment, if expired then status += 5 and details is void

                        List<BookingTransactionDetail> VoidPNRs = new List<BookingTransactionDetail>();
                        List<BookingTransactionDetail> ExpiredPNRs = new List<BookingTransactionDetail>();
                        if (UpdateAllBookingJourneyDetails(TransactionInfo, TransactionInfo.AgentUserName, TransactionInfo.AgentID, ref VoidPNRs, ref ExpiredPNRs, true))
                        {
                            log.Info(this, "Updated Trans: " + TransactionInfo.TransID + " - Count: " + Count);
                        }
                        //break; //for testing one record only
                        Count++;
                    }
                    log.Info(this, "Transaction Update End.");
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
                //throw new ApplicationException("Data not found");
            }
        }

        public List<ListTransaction> GetTransactionDetails(string TransID = "", string Status = "")
        {
            List<ListTransaction> TransactionList = new List<ListTransaction>();
            DataTable dt = null;
            string strSQL = string.Empty;
            string strRef = string.Empty;
            try
            {
                if (TransID != "")
                {
                    strRef = " AND BK_TRANSMAIN.TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, TransID) + "'";
                    strSQL = "SELECT BK_TRANSMAIN.TransID,BK_TRANSMAIN.TransStatus,BK_TRANSMAIN.AgentID,AG_PROFILE.Username FROM BK_TRANSMAIN INNER JOIN AG_PROFILE ON BK_TRANSMAIN.AgentID=AG_PROFILE.AgentID " + strRef;
                    strSQL += " WHERE BK_TRANSMAIN.IsOverride = 1"; //added by Sienny 20170316 (for new GBS)
                }
                else
                {
                    strSQL = "SELECT BK_TRANSMAIN.TransID,BK_TRANSMAIN.TransStatus,BK_TRANSMAIN.AgentID,AG_PROFILE.Username FROM BK_TRANSMAIN INNER JOIN AG_PROFILE ON BK_TRANSMAIN.AgentID=AG_PROFILE.AgentID AND BK_TRANSMAIN.TransStatus IN(1,2) ";
                    strSQL += " WHERE BK_TRANSMAIN.IsOverride = 1"; //added by Sienny 20170316 (for new GBS)
                }

                if (Status == "11")
                {
                    strRef = " Where TransStatus = 1 " +
                                 " AND ExpiryDate < GETDATE() AND CollectedAmt > 0 AND CollectedAmt <> TransTotalAmt ";
                    strSQL = "SELECT BK_TRANSMAIN.TransID,BK_TRANSMAIN.TransStatus,BK_TRANSMAIN.AgentID,AG_PROFILE.Username " +
                             " FROM BK_TRANSMAIN INNER JOIN AG_PROFILE ON BK_TRANSMAIN.AgentID=AG_PROFILE.AgentID " + strRef;
                    strSQL += " AND BK_TRANSMAIN.IsOverride = 1"; //added by Sienny 20170316 (for new GBS)
                }

                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        ListTransaction TransactionDetail = new ListTransaction();
                        TransactionDetail.TransID = drRow["TransID"].ToString();
                        TransactionDetail.TransStatus = (byte)drRow["TransStatus"];
                        TransactionDetail.AgentID = drRow["AgentID"].ToString();
                        TransactionDetail.AgentUserName = drRow["Username"].ToString();
                        TransactionList.Add(TransactionDetail);
                    }
                    return TransactionList;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                log.Error(this, ex, "GetTransactionDetails:");
                return null;
            }
        }
        #endregion

        #region "Divide Booking"
        public string DivideBooking(List<PassengerContainer> PassengerContainers, BookingContainer BookingContainers, ref string errMsg)
        {
            try
            {
                Navitaire.APIBooking ApiBook = new Navitaire.APIBooking(sesscon.GetSessionID());
                List<PassengerContainer> passengerContainers = sesscon.GetTempPassengerContainer();
                BookingContainer bookingContainer = sesscon.GetBookingContainer();
                ArrayList passengerNumbers = new ArrayList();
                string signature = ApiBook.AgentLogon();
                Navitaire.BookingManager.GetBookingResponse Response = new Navitaire.BookingManager.GetBookingResponse();

                if (passengerContainers != null && bookingContainer != null)
                {
                    foreach (PassengerContainer rowpassenger in passengerContainers)
                    {
                        passengerNumbers.Add(rowpassenger.PassengerNumber);
                    }


                    Response = GetBooking(bookingContainer.RecordLocator, signature);
                    return ApiBook.DivideBooking(passengerNumbers, bookingContainer.RecordLocator, bookingContainer.ReceivedBy, signature, ref errMsg);
                }
                else
                {
                    return string.Empty;
                }
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return string.Empty;
            }
        }

        public Navitaire.BookingManager.GetBookingResponse GetBooking(string PNR, string signature)
        {
            string msg;
            ABS.Navitaire.APIBooking ApiBook = new ABS.Navitaire.APIBooking(signature);
            Navitaire.BookingManager.GetBookingResponse Response = new Navitaire.BookingManager.GetBookingResponse();
            PassengerContainer objPassengerContainer = new PassengerContainer();
            List<PassengerContainer> lstPassengerContainer = new List<PassengerContainer>();
            try
            {
                Response = ApiBook.GetBookingByPNR(PNR);
                foreach (Navitaire.BookingManager.Passenger rowpassenger in Response.Booking.Passengers)
                {
                    objPassengerContainer = new PassengerContainer();
                    objPassengerContainer.BookingID = Response.Booking.BookingID;
                    objPassengerContainer.Passengers = Response.Booking.Passengers;
                    objPassengerContainer.PassengerID = rowpassenger.PassengerID;
                    objPassengerContainer.PassengerNumber = rowpassenger.PassengerNumber;
                    objPassengerContainer.FirstName = rowpassenger.Names[0].FirstName;
                    objPassengerContainer.MiddleName = rowpassenger.Names[0].MiddleName;
                    objPassengerContainer.LastName = rowpassenger.Names[0].LastName;
                    objPassengerContainer.Title = rowpassenger.Names[0].Title;
                    objPassengerContainer.DOB = rowpassenger.PassengerTypeInfos[0].DOB;
                    objPassengerContainer.PaxType = rowpassenger.PassengerTypeInfos[0].PaxType;
                    objPassengerContainer.Gender = rowpassenger.PassengerInfo.Gender.ToString();
                    objPassengerContainer.Nationality = rowpassenger.PassengerInfo.Nationality;
                    objPassengerContainer.ResidentCountry = rowpassenger.PassengerInfo.ResidentCountry;
                    objPassengerContainer.WeightCategory = rowpassenger.PassengerInfo.WeightCategory;
                    objPassengerContainer.BalanceDue = rowpassenger.PassengerInfo.BalanceDue;
                    lstPassengerContainer.Add(objPassengerContainer);
                }

                if (lstPassengerContainer != null)
                {
                    sesscon.SetAllPassengerContainer(lstPassengerContainer);
                }
                return Response;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                return null;
            }
        }
        #endregion

        #region "Flight Change"

        public bool CopyTransaction(string TransID, string PNR, List<BookingTransactionDetail> OldBookingDetail, List<BookingTransactionDetail> NewBookingDetail, bool ReturnOnly = false)
        {
            bool rValue = false;
            EnumSaveType saveType = EnumSaveType.Insert;

            ArrayList lstSQL = new ArrayList();
            string strSQL = string.Empty;
            try
            {
                #region "Update TransDetail"
                if (OldBookingDetail != null && NewBookingDetail != null)
                {
                    int i = 0;

                    foreach (BookingTransactionDetail oBookingTransDetail in OldBookingDetail)
                    {
                        if (ReturnOnly == true && i == 0)
                        {
                            i += 1;
                            continue;
                        }
                        BookingTransactionDetail nBookingTransDetail = NewBookingDetail[i];

                        objSQL.AddField("RecordLocator", oBookingTransDetail.RecordLocator, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("TransID", oBookingTransDetail.TransID, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SeqNo", oBookingTransDetail.SeqNo, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("CarrierCode", oBookingTransDetail.CarrierCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightNo", oBookingTransDetail.FlightNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Origin", oBookingTransDetail.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Transit", oBookingTransDetail.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Destination", oBookingTransDetail.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DepartureDate", oBookingTransDetail.DepatureDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ArrivalDate", oBookingTransDetail.ArrivalDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DepartureDate2", oBookingTransDetail.DepatureDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightDura", oBookingTransDetail.FlightDura, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FlightDura2", oBookingTransDetail.FlightDura2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ArrivalDate2", oBookingTransDetail.ArrivalDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FareClass", oBookingTransDetail.FareClass, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FareSellKey", oBookingTransDetail.SellKey, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("OverridedFareSellKey", oBookingTransDetail.OverridedSellKey, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SellKey", oBookingTransDetail.Signature, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("DetailCollectedAmt", oBookingTransDetail.CollectedAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("NextDueDate", oBookingTransDetail.NextDueDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("NextDueAmount", oBookingTransDetail.NextDueAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("FarePerPax", oBookingTransDetail.FarePerPax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineTotal", oBookingTransDetail.LineTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineTax", oBookingTransDetail.LineTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LinePaxFee", oBookingTransDetail.LinePaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineFee", oBookingTransDetail.LineFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineCharge", oBookingTransDetail.LineCharge, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineVAT", oBookingTransDetail.LineVAT, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineOth", oBookingTransDetail.LineOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineProcess", oBookingTransDetail.LineProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineSSR", oBookingTransDetail.LineSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineSeat", oBookingTransDetail.LineSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineNameChange", oBookingTransDetail.LineNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineInsureFee", oBookingTransDetail.LineInsureFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);//added by romy for insure
                        objSQL.AddField("LineInfant", oBookingTransDetail.LineInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LineDisc", oBookingTransDetail.LineDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LinePromoDisc", oBookingTransDetail.LinePromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("Currency", oBookingTransDetail.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaxAdult", oBookingTransDetail.PaxAdult, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("PaxChild", oBookingTransDetail.PaxChild, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);


                        objSQL.AddField("To_CarrierCode", nBookingTransDetail.CarrierCode, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_FlightNo", nBookingTransDetail.FlightNo, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_Origin", nBookingTransDetail.Origin, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_Transit", nBookingTransDetail.Transit, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_Destination", nBookingTransDetail.Destination, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_DepartureDate", nBookingTransDetail.DepatureDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_ArrivalDate", nBookingTransDetail.ArrivalDate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_DepartureDate2", nBookingTransDetail.DepatureDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_FlightDura", nBookingTransDetail.FlightDura, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_FlightDura2", nBookingTransDetail.FlightDura2, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_ArrivalDate2", nBookingTransDetail.ArrivalDate2, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_FareClass", nBookingTransDetail.FareClass, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_FareSellKey", nBookingTransDetail.SellKey, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_OverridedFareSellKey", nBookingTransDetail.OverridedSellKey, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_SellKey", nBookingTransDetail.Signature, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_DetailCollectedAmt", nBookingTransDetail.CollectedAmount, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_FarePerPax", nBookingTransDetail.FarePerPax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_LineTotal", nBookingTransDetail.LineTotal, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_LineTax", nBookingTransDetail.LineTax, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_LinePaxFee", nBookingTransDetail.LinePaxFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_LineFee", nBookingTransDetail.LineFee, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_LineCharge", nBookingTransDetail.LineCharge, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_LineVAT", nBookingTransDetail.LineVAT, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_LineOth", nBookingTransDetail.LineOth, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_LineProcess", nBookingTransDetail.LineProcess, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_LineSSR", nBookingTransDetail.LineSSR, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_LineSeat", nBookingTransDetail.LineSeat, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_LineNameChange", nBookingTransDetail.LineNameChange, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_LineInfant", nBookingTransDetail.LineInfant, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_LineDisc", nBookingTransDetail.LineDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_LinePromoDisc", nBookingTransDetail.LinePromoDisc, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_Currency", nBookingTransDetail.Currency, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_PaxAdult", nBookingTransDetail.PaxAdult, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("To_PaxChild", nBookingTransDetail.PaxChild, SQLControl.EnumDataType.dtNumeric, SQLControl.EnumValidate.cNone);

                        objSQL.AddField("ChangeBy", nBookingTransDetail.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ChangeDate", DateTime.Now, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("ChangeRemark", "", SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                        objSQL.AddField("SyncCreate", nBookingTransDetail.SyncCreate, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("SyncLastUpd", nBookingTransDetail.SyncLastUpd, SQLControl.EnumDataType.dtDateTime, SQLControl.EnumValidate.cNone);
                        objSQL.AddField("LastSyncBy", nBookingTransDetail.LastSyncBy, SQLControl.EnumDataType.dtString, SQLControl.EnumValidate.cNone);

                        switch (saveType)
                        {
                            case EnumSaveType.Insert:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stInsert, "BK_HIST_TRANSDTL", string.Empty);
                                break;
                            case EnumSaveType.Update:
                                strSQL = objSQL.BuildSQL(SQLControl.EnumSQLType.stUpdate, "BK_HIST_TRANSDTL", "HIST_BK_TRANSDTL.TransID='" + oBookingTransDetail.TransID + "' AND BK_TRANSDTL.SeqNo='" + oBookingTransDetail.SeqNo + "'");
                                break;
                        }
                        lstSQL.Add(strSQL);

                        i += 1;
                    }
                }
                #endregion

                rValue = objDCom.BatchExecute(lstSQL, CommandType.Text, true, false);

                return rValue;
            }
            catch (Exception ex)
            {
                return rValue;
            }
        }

        public List<BookingTransactionDetail> GetAllBK_TRANSDTLFilterByPNR(string pTransID, string PNR)
        {
            BookingTransactionDetail objBK_TRANSDTL_Info;
            List<BookingTransactionDetail> objListBK_TRANSDTL_Info = new List<BookingTransactionDetail>();
            DataTable dt;
            DateTime dateValue;
            String strSQL = string.Empty;

            try
            {
                string str = "";

                strSQL = "SELECT * FROM BK_TRANSDTL WHERE TransID='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, pTransID) + "' AND RecordLocator='" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, PNR) + "' ORDER BY SeqNo ASC";
                dt = objDCom.Execute(strSQL, CommandType.Text, true); //amended by diana 20140124 - set to true
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow drRow in dt.Rows)
                    {
                        objBK_TRANSDTL_Info = new BookingTransactionDetail();
                        objBK_TRANSDTL_Info.RecordLocator = (string)drRow["RecordLocator"];
                        objBK_TRANSDTL_Info.TransID = (string)drRow["TransID"];
                        objBK_TRANSDTL_Info.SeqNo = (byte)drRow["SeqNo"];
                        objBK_TRANSDTL_Info.CarrierCode = (string)drRow["CarrierCode"];
                        objBK_TRANSDTL_Info.FlightNo = (string)drRow["CarrierCode"] + (string)drRow["FlightNo"];
                        if (DateTime.TryParse(drRow["DepartureDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.DepatureDate = (DateTime)drRow["DepartureDate"];
                        objBK_TRANSDTL_Info.Origin = (string)drRow["Origin"];
                        objBK_TRANSDTL_Info.Destination = (string)drRow["Destination"];
                        if (DateTime.TryParse(drRow["ArrivalDate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.ArrivalDate = (DateTime)drRow["ArrivalDate"];

                        objBK_TRANSDTL_Info.FareClass = (string)drRow["FareClass"];
                        objBK_TRANSDTL_Info.FarePerPax = (decimal)drRow["FarePerPax"];
                        objBK_TRANSDTL_Info.Journey = (string)drRow["Origin"] + "-" + (string)drRow["Destination"];
                        objBK_TRANSDTL_Info.LineTotal = (decimal)drRow["LineTotal"];
                        objBK_TRANSDTL_Info.LineTax = (decimal)drRow["LineTax"];
                        objBK_TRANSDTL_Info.LinePaxFee = (decimal)drRow["LinePaxFee"];
                        objBK_TRANSDTL_Info.LineFee = (decimal)drRow["LineFee"];
                        objBK_TRANSDTL_Info.LineOth = (decimal)drRow["LineOth"];
                        objBK_TRANSDTL_Info.LineProcess = (decimal)drRow["LineProcess"];
                        objBK_TRANSDTL_Info.LineSSR = (decimal)drRow["LineSSR"];
                        objBK_TRANSDTL_Info.LineSeat = (decimal)drRow["LineSeat"];
                        objBK_TRANSDTL_Info.LineNameChange = (decimal)drRow["LineNameChange"];
                        objBK_TRANSDTL_Info.LineInfant = (decimal)drRow["LineInfant"];
                        objBK_TRANSDTL_Info.LineDisc = (decimal)drRow["LineDisc"];
                        objBK_TRANSDTL_Info.LinePromoDisc = (decimal)drRow["LinePromoDisc"];
                        //objBK_TRANSDTL_Info.AttemptCount = (int)drRow["AttemptCount"];
                        objBK_TRANSDTL_Info.CollectedAmount = (decimal)drRow["DetailCollectedAmt"];
                        objBK_TRANSDTL_Info.Currency = (string)drRow["Currency"];
                        objBK_TRANSDTL_Info.PaxAdult = (int)drRow["PaxAdult"];
                        objBK_TRANSDTL_Info.PaxChild = (int)drRow["PaxChild"];
                        objBK_TRANSDTL_Info.TransVoid = (byte)drRow["TransVoid"];
                        objBK_TRANSDTL_Info.rowguid = (Guid)drRow["rowguid"];
                        objBK_TRANSDTL_Info.CreateBy = (string)drRow["CreateBy"];
                        objBK_TRANSDTL_Info.PayDueAmount1 = (decimal)drRow["PayDueAmount1"];
                        objBK_TRANSDTL_Info.PayDueAmount2 = (decimal)drRow["PayDueAmount2"];
                        objBK_TRANSDTL_Info.PayDueAmount3 = (decimal)drRow["PayDueAmount3"];
                        if (DateTime.TryParse(drRow["PayDueDate1"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate1 = (DateTime)drRow["PayDueDate1"];
                        if (DateTime.TryParse(drRow["PayDueDate2"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate2 = (DateTime)drRow["PayDueDate2"];
                        if (DateTime.TryParse(drRow["PayDueDate3"].ToString(), out dateValue)) objBK_TRANSDTL_Info.PayDueDate3 = (DateTime)drRow["PayDueDate3"];

                        if (DateTime.TryParse(drRow["SyncCreate"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncCreate = (DateTime)drRow["SyncCreate"];
                        if (DateTime.TryParse(drRow["SyncLastUpd"].ToString(), out dateValue)) objBK_TRANSDTL_Info.SyncLastUpd = (DateTime)drRow["SyncLastUpd"];
                        objBK_TRANSDTL_Info.LastSyncBy = (string)drRow["LastSyncBy"];
                        objListBK_TRANSDTL_Info.Add(objBK_TRANSDTL_Info);
                    }
                    return objListBK_TRANSDTL_Info;
                }
                else
                {
                    return null;
                    throw new ApplicationException("BK_TRANSDTL does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        #endregion

        #region "Booking XML"
        public Boolean SaveBookingStateXML(string sessionID, string PhysicalApplicationPath)
        {
            Navitaire.BookingManager.Booking response = GetBookingFromState(sessionID);
            if (response != null)
            {
                SaveXml(response, XMLParam.FileName.BOOKINGFROMSTATE, response.BookingInfo.BookingDate.ToString("yyyyMMdd-hh-mm-ss"), PhysicalApplicationPath);
            }
            return true;
        }
        public string SaveXml(object Obj, XMLParam.FileName fileName, string recordLocator, string physicalPath)
        {
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(Obj.GetType());
            System.IO.StringWriter writer = new System.IO.StringWriter();

            System.Xml.XmlWriter xmlWriter = null;
            //SerializeContainer((System.Xml.XmlWriter)xmlWriter, (Container)Obj);

            x.Serialize(writer, Obj);

            String RandomID = Guid.NewGuid().ToString();
            System.IO.StreamWriter logger = null;
            string logFilePath = string.Empty;
            string filePath = string.Empty;
            try
            {
                switch (fileName)
                {
                    case XMLParam.FileName.CITYPAIR:
                        logFilePath = physicalPath + "\\XML\\" + XMLParam.FileName.CITYPAIR.ToString();
                        filePath = logFilePath + "\\" + recordLocator.ToString() + ".xml";
                        break;
                    default:
                        logFilePath = physicalPath + "\\XML\\" + fileName.ToString();
                        filePath = logFilePath + "\\" + recordLocator.ToString() + ".xml";
                        break;
                }

                if (System.IO.Directory.Exists(logFilePath) == false) System.IO.Directory.CreateDirectory(logFilePath);
                string xmlstring = writer.ToString();
                System.IO.FileStream fs = new System.IO.FileStream(filePath, System.IO.FileMode.Create);
                logger = new System.IO.StreamWriter(fs, System.Text.Encoding.Unicode);
                //logger = System.IO.File.CreateText(logFilePath);
                logger.WriteLine(writer.ToString());
                //System.Threading.Thread.Sleep(500);
                return filePath;
            }
            catch (Exception ex)
            {
                log.Error(this, ex);
                //Elmah.ErrorSignal.FromCurrentContext().Raise(ex);
                //BasePage.StatusLog = Enums.StatusLog.ERRORLOG;
                //BasePage.MessageLog = ex.Message;
                return "";
            }
            finally
            {
                if (logger != null)
                {
                    logger.Close();
                    logger.Dispose();
                }
                //x = null;
                //writer.Dispose();
            }
        }

        public DataTable GetReportData(string code, Hashtable ht)
        {
            throw new NotImplementedException();
        }
        #endregion


        //20170613 - Sienny (role for namechangefee on feesetting table)
        public DataTable GetFeeSettingByGroupCountryCurrencyCode(string GroupCode, String CountryCode, string CurrencyCode)
        {
            DataTable dt, dttemp;
            string condition = "";
            String strSQL = string.Empty;
            string strSQLtemp = string.Empty;
            try
            {
                condition = " AND CountryCode = '' AND Currency = ''";
                if (CountryCode != "" && CurrencyCode != "")
                    condition = " AND CountryCode = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, CountryCode) + "' AND Currency = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, CurrencyCode) + "'";

                strSQLtemp = "SELECT * FROM FeeSetting WHERE GroupCode = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, GroupCode) + "'  AND CountryCode = '' AND Currency = ''";
                strSQL = "SELECT * FROM FeeSetting WHERE GroupCode = '" + objSQL.ParseValue(SQLControl.EnumDataType.dtString, GroupCode) + "' " + condition;

                dttemp = objDCom.Execute(strSQL, CommandType.Text, true);
                if (dttemp == null || dttemp.Rows.Count == 0) strSQL = strSQLtemp;

                dt = objDCom.Execute(strSQL, CommandType.Text, true);
                if (dt != null && dt.Rows.Count > 0)
                {
                    return dt;
                }
                else
                {
                    return null;
                    throw new ApplicationException("FeeSetting table does not exist.");
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
    }
}
